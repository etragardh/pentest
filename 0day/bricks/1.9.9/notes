
## 
# Idea
# gain RCE via eval()
#

##
# Conclusion
# sanitize_element_php_code is hard to bypass without admin privs.
# might be used for priv esc however ? can we break signatures?

bricks/includes/elements/code.php
includes/query.php

$php_query_raw = $query_vars['queryEditor'];
$php_query_raw = Helpers::sanitize_element_php_code( $post_id, $element_id, $php_query_raw, $signature );

eval($php_query_raw)

#######################################3##

##
# Idea
# Gain admin from SQLi
#

API endpoints:
\/bricks\/v1\/render_element
  - priv: render_element_permission_check
    - hard to bypass unathed, priv esc possible
\/bricks\/v1\/get-templates-data
  - no-priv
\/bricks\/v1\/get-templates
  - no-priv
\/bricks\/v1\/get-template-authors
  - no-priv
\/bricks\/v1\/get-template-bundles
  - no-priv
\/bricks\/v1\/get-template-tags
  - no-priv
-> \/bricks\/v1\/load_query_page
  - priv: render_query_page_permissions_check
\/bricks\/v1\/load_popup_content
  - priv: render_popup_content_permissions_check
-> /bricks\/v1\/query_result
  - priv: render_query_result_permissions_check



##
# Idea gain admin from XSS


## Idea
# Can we send a template to bricks, to act as a template server?
# can that template contain code to be executed later ?

