<?php
namespace BricksUltimate;

if ( ! defined( 'ABSPATH' ) ) exit;

use BricksUltimate\{Plugin, Helpers, Wishlist, Compare};

class UltimateQuery {
	public function __construct() {
		// Add the supported fields to the Query type control
		add_filter( 'bricks/setup/control_options', [ $this, 'add_control_options' ] );
		add_filter( "bricks/elements/container/controls", [ $this, 'add_query_controls' ] );
		add_filter( "bricks/elements/div/controls", [ $this, 'add_query_controls' ] );
		add_filter( "bricks/elements/block/controls", [ $this, 'add_query_controls' ] );

		if( ! empty( Plugin::$bu_settings['ultimate_query'] ) && Plugin::$bu_settings['ultimate_query'] == 'enabled' ) {
			add_filter( 'bricks/query/run', [ $this, 'run_ultimate_query' ], 15, 2 );
		}

		if( class_exists( 'woocommerce' ) ) {
			add_filter( 'bricks/query/run', [ $this, 'run_woo_query' ], 10, 2 );
		}
		
		add_filter( 'bricks/query/loop_object', [ $this, 'bu_loop_object' ], 10, 3 );
	}

	/**
	 * Adds custom query types for query loop
	 * 
	 * @param array $control_options
	 * @return array $control_options
	 */
	public function add_control_options( $control_options ) {
		if( ! empty( Plugin::$bu_settings['ultimate_query'] ) && Plugin::$bu_settings['ultimate_query'] == 'enabled' ) {
			$control_options['queryTypes'][ 'buQuery' ] = esc_html__("Ultimate Query Builder", 'bricksultimate');
		}

		if( \Bricks\Woocommerce::is_woocommerce_active() ) {
			$control_options['queryTypes'][ 'buwooMiniCart' ] = esc_html__("Mini Cart Contents", 'bricksultimate');
			$control_options['queryTypes'][ 'buprdgallery' ] = esc_html__("Product Galleries", 'bricksultimate');

			if( ! empty( Plugin::$bu_settings['woo_query'] ) && Plugin::$bu_settings['woo_query'] == 'enabled' )
				$control_options['queryTypes'][ 'wooQuery' ] = esc_html__("Ultimate Woo Query Builder", 'bricksultimate');
		}
		
		return $control_options;
	}

	/**
	 * Helper function for WooCommerce loop
	 * 
	 * @param array $controls
	 * @return array $controls
	 */
	public function add_query_controls( $controls ) {
		if( ! empty( Plugin::$bu_settings['ultimate_query'] ) && Plugin::$bu_settings['ultimate_query'] == 'enabled' ) {
			$controls = $this->add_bu_query_controls( $controls );
		}

		if( \Bricks\Woocommerce::is_woocommerce_active() && ! empty( Plugin::$bu_settings['woo_query'] ) && Plugin::$bu_settings['woo_query'] == 'enabled' ) {
			$controls = $this->add_woo_controls( $controls );
		}

		return $controls;
	}

	/**
	 * Adds controls for ultimate query builder
	 * 
	 * @since 0.4
	 * @param array $controls keeping the all controls properties
	 * @return array $controls returning the all controls properties
	 */
	private function add_bu_query_controls( $controls ) {
		$bucontrols['buQueryTpes'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Ultimate query type', 'bricksultimate'),
			'options' 	=> [
				'none' 			=> esc_html__('Select query type', 'bricksultimate'),
				'acfgallery' 	=> esc_html__('ACF Gallery', 'bricksultimate'),
				'acfpobj' 		=> esc_html__('ACF Post Object', 'bricksultimate'),
				'acfcb' 		=> esc_html__('ACF Checkbox', 'bricksultimate'),
				'adjposts' 		=> esc_html__('Adjacent Posts', 'bricksultimate'),
				'authbox' 		=> esc_html__('Author Box', 'bricksultimate'),
				'compare' 		=> esc_html__('Compare Items', 'bricksultimate'),
				'customwp' 		=> esc_html__('Custom WP Query', 'bricksultimate'),
				'termquery' 	=> esc_html__('Custom Taxonomy Query', 'bricksultimate'),
				'mbImgAdv' 		=> esc_html__('Metabox Image Advanced - Clonable', 'bricksultimate'),
				'mbcbl' 		=> esc_html__('Metabox Checkbox List', 'bricksultimate'),
				'postyear' 		=> esc_html__('Posts Years', 'bricksultimate'),
				'wishlist' 		=> esc_html__('Wishlist Items', 'bricksultimate'),
				'wpmenu' 		=> esc_html__('WP Menu', 'bricksultimate'),
			],
			'default' 	=> 'none',
			'required' 	=> [ [ 'hasLoop', '=', true ], [ 'query.objectType', '=', 'buQuery' ] ]
		];

		/**
		 * Custom WP Query controls
		 */
		$bucontrols['wp_args'] = [
			'tab'       => 'content',
			'type'      => 'code',
			'mode'      => 'php',
			'clearable' => false, // Required to always have 'mode' set for CodeMirror
			'placeholder'  => "Enter query args",
			'required'  => [ 'buQueryTpes', '=', 'customwp' ],
			'rerender'  => true,
		];

		/**
		 * Custom Taxonomy Query controls
		 */
		$bucontrols['tax_args'] = [
			'tab'       => 'content',
			'type'      => 'code',
			'mode'      => 'php',
			'clearable' => false, // Required to always have 'mode' set for CodeMirror
			'placeholder'  => "Enter query args",
			'required'  => [ 'buQueryTpes', '=', 'termquery' ],
			'rerender'  => true,
		];

		/**
		 * Adjacent post controls
		 */
		$bucontrols['postPrevNext'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Showing', 'bricksultimate'),
			'options' 	=> [
				'prev' 	=> esc_html__('Previous Post', 'bricksultimate'),
				'next' 	=> esc_html__('Next Post', 'bricksultimate'),
			],
			'default' 	=> 'prev',
			'inline' 	=> true,
			'medium' 	=> true,
			'required' 	=> [ 'buQueryTpes', '=', 'adjposts' ],
		];

		$bucontrols['inSameTerm'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('In same terms?', 'bricksultimate'),
			'default' 	=> 'no',
			'options' 	=> [
				'no' 	=> esc_html__('No', 'bricksultimate'),
				'yes' 	=> esc_html__('Yes', 'bricksultimate'),
			],
			'inline' 	=> true,
			'medium' 	=> true,
			'required' 	=> [ 'buQueryTpes', '=', 'adjposts' ],
		];

		$bucontrols['taxonomy'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Taxonomy', 'bricksultimate'),
			'default' 	=> 'category',
			'options' 	=> \Bricks\Setup::get_taxonomies_options(),
			'inline' 	=> true,
			'medium' 	=> true,
			'required' 	=> [ 'inSameTerm', '=', 'yes' ],
		];

		$bucontrols['excludedTerms'] = [
			'tab'  		=> 'content',
			'type' 		=> 'text',
			'label' 	=> esc_html__('Exclude terms', 'bricksultimate'),
			'placeholder' => esc_html__('comma-separated list of excluded term IDs', 'bricksultimate'),
			'required' 	=> [ 'buQueryTpes', '=', 'adjposts' ],
			'hasDynamicData' => false,
		];


		//* Controls for ACF gallery
		$bucontrols['acfGalleryField'] = [
			'tab'  		=> 'content',
			'type' 		=> 'text',
			'label' 	=> esc_html__('Gallery Field Name', 'bricksultimate'),
			'hasDynamicData' => false,
			'required' 	=> [ 'buQueryTpes', '=', 'acfgallery' ],
		];

		$bucontrols['acfField'] = [
			'tab'  		=> 'content',
			'type' 		=> 'text',
			'label' 	=> esc_html__('Field Name', 'bricksultimate'),
			'hasDynamicData' => false,
			'required' 	=> [ 'buQueryTpes', '=', [ 'acfpobj', 'acfcb' ] ],
		];

		$bucontrols['isOptionsPpage'] = [
			'tab'  		=> 'content',
			'type' 		=> 'checkbox',
			'label' 	=> esc_html__('Fetching from ACF Option Page?', 'bricksultimate'),
			'reset' 	=> true,
			'required' 	=> [ 'buQueryTpes', '=', [ 'acfgallery', 'acfpobj', 'acfcb' ] ],
		];

		$bucontrols['galleryLimit'] = [
			'tab'  		=> 'content',
			'type' 		=> 'number',
			'label' 	=> esc_html__('Limit', 'bricksultimate'),
			'units' 	=> false,
			'step' 		=> 1,
			'placeholder' => 10,
			'required' 	=> [ 'buQueryTpes', '=', [ 'acfgallery', 'acfpobj' ] ],
		];

		//* Controls for Metabox gallery
		$bucontrols['mbImgAdvField'] = [
			'tab'  		=> 'content',
			'type' 		=> 'text',
			'label' 	=> esc_html__('Field Name', 'bricksultimate'),
			'hasDynamicData' => false,
			'required' 	=> [ 'buQueryTpes', '=', 'mbImgAdv' ],
		];

		$bucontrols['mbgLimit'] = [
			'tab'  		=> 'content',
			'type' 		=> 'number',
			'label' 	=> esc_html__('Limit', 'bricksultimate'),
			'units' 	=> false,
			'step' 		=> 1,
			'placeholder' => 10,
			'required' 	=> [ 'buQueryTpes', '=', 'mbImgAdv' ],
		];

		//* Controls for Metabox field
		$bucontrols['mbFieldId'] = [
			'tab'  		=> 'content',
			'type' 		=> 'text',
			'label' 	=> esc_html__('Field Id', 'bricksultimate'),
			'hasDynamicData' => false,
			'required' 	=> [ 'buQueryTpes', '=', 'mbcbl' ],
		];

		//* Controls for menu
		$bucontrols['menuSlug'] = [
			'tab' 		=> 'content',
			'type'      => 'select',
			'label'     => esc_html__('Menu', 'bricksultimate'),
			'options'   => Helpers::getWPMenus(),
			'default'   => 'none',
			'required'	=> ['buQueryTpes', '=', 'wpmenu']
		];

		$bucontrols['itemParent'] = [
			'tab' 		=> 'content',
			'type'      => 'text',
			'label'     => esc_html__('Parent', 'bricksultimate'),
			'placeholder'  => esc_html__('Enter menu item ID. 0 is for top level items', 'bricksultimate'),
			'required'	=> ['buQueryTpes', '=', 'wpmenu'],
			//'hasDynamicData' => false
		];

		$bucontrols['itemInclude'] = [
			'tab' 		=> 'content',
			'type'      => 'text',
			'label'     => esc_html__('Include', 'bricksultimate'),
			'placeholder'  => esc_html__('Enter menu item IDs with comma', 'bricksultimate'),
			'required'	=> ['buQueryTpes', '=', 'wpmenu'],
			//'hasDynamicData' => false
		];

		$bucontrols['itemExclude'] = [
			'tab' 		=> 'content',
			'type'      => 'text',
			'label'     => esc_html__('Exclude', 'bricksultimate'),
			'placeholder'  => esc_html__('Enter menu item IDs with comma', 'bricksultimate'),
			'required'	=> ['buQueryTpes', '=', 'wpmenu'],
			//'hasDynamicData' => false
		];

		$bucontrols['pyPostType'] = [
			'type'        => 'select',
			'label'       => esc_html__( 'Post type', 'bricks' ),
			'options'     => \Bricks\Helpers::get_registered_post_types(),
			'multiple'    => false,
			'placeholder' => esc_html__( 'Select post type', 'bricks' ),
			'required'    => [ 'buQueryTpes', '=', [ 'postyear', 'wishlist', 'compare' ] ],
		];

		$bucontrols['posts_per_page'] = [
			'tab'  		=> 'content',
			'type' 		=> 'number',
			'label' 	=> esc_html__('Posts per page', 'bricksultimate'),
			//'default' 	=> 10,
			'placeholder' => 10,
			'required'    => [ 'buQueryTpes', '=', [ 'postyear', 'wishlist', 'compare' ] ],
		];

		$bucontrols['yearLimit'] = [
			'tab'  		=> 'content',
			'type' 		=> 'number',
			'label' 	=> esc_html__('Limit', 'bricksultimate'),
			'units' 	=> false,
			'step' 		=> 1,
			'placeholder' => 10,
			'required' 	=> [ 'buQueryTpes', '=', 'postyear' ],
		];

		$bucontrols['orderby'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Order by' ),
			//'default' 	=> 'date',
			'placeholder' => 'date',
			'inline' 	=> true,
			'options' 	=> [
				'title' => esc_html__( 'Title', 'bricksultimate' ),
				'name' 	=> esc_html__( 'Name', 'bricksultimate' ),
				'date' 	=> esc_html__( 'Author', 'bricksultimate' ),
				'rand' 	=> esc_html__( 'Random', 'bricksultimate' ),
			],
			'required' 	=> [ 'buQueryTpes', '=', ['wishlist', 'compare'] ],
		];

		$bucontrols['pyOrder'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Order' ),
			//'default' 	=> 'DESC',
			'placeholder' => 'DESC',
			'medium' 	=> true,
			'inline' 	=> true,
			'options' 	=> [
				'ASC' 	=> esc_html__( 'ASC' ),
				'DESC' 	=> esc_html__( 'DESC' )
			],
			'required' 	=> [ 'buQueryTpes', '=', [ 'postyear', 'wishlist', 'compare' ] ],
		];

		$array_search = absint( array_search( 'query', array_keys( $controls ) ) );
		$controls = array_slice( $controls, 0, $array_search + 1, true ) + $bucontrols + array_slice( $controls, $array_search + 1, null, true );

		return $controls;
	}

	/**
	 * Adds controls for Woo query builder
	 * 
	 * @param array $controls keeping the all controls properties
	 * @return array $controls returning the all controls properties
	 */
	private function add_woo_controls( $controls ) {
		$woocontrols['wooQueryTpes'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Woo query type', 'bricksultimate'),
			'options' 	=> [
				'none' 		=> esc_html__('Select query type', 'bricksultimate'),
				'bestsell' 	=> esc_html__('Best Selling Products', 'bricksultimate'),
				'coupons' 	=> esc_html__('Coupons', 'bricksultimate'),
				//'corders' 	=> esc_html__('Customer Orders', 'bricksultimate'),
				//'corditem' 	=> esc_html__('Customer Ordered Items', 'bricksultimate'),
				'featured' 	=> esc_html__('Featured Products', 'bricksultimate'),
				'onsale' 	=> esc_html__('On-Sale Products', 'bricksultimate'),
				'upsells' 	=> esc_html__('Product Upsells', 'bricksultimate'),
				'csells' 	=> esc_html__('Product Cross-sells', 'bricksultimate'),
				'related' 	=> esc_html__('Related Products (Single Product Page)', 'bricksultimate'),
				'toprated' 	=> esc_html__('Top Rated Products', 'bricksultimate'),
			],
			'default' 	=> 'none',
			'required' 	=> [ [ 'hasLoop', '=', true ], [ 'query.objectType', '=', 'wooQuery' ] ]
		];

		$woocontrols['productsNumber'] = [
			'tab'  		=> 'content',
			'type' 		=> 'number',
			'label' 	=> esc_html__('Number of items to show', 'bricksultimate'),
			'min' 		=> 1,
			'max' 		=> 30,
			'step' 		=> 1,
			'default' 	=> 3,
			'placeholder' => '3',
			'required' => [ [ 'wooQueryTpes', '!=', [ '', 'none', 'corders' ] ], [ 'query.objectType', '=', 'wooQuery' ] ]
		];

		$woocontrols['category_ids'] = [
			'tab'  		=> 'content',
			'type' 		=> 'text',
			'label' 	=> esc_html__('Category(IDs)', 'bricksultimate' ),
			'info' 		=> esc_html__('Comma separated category ids', 'bricksultimate'),
			'required' 	=> [ 
				[ 'wooQueryTpes', '!=', [ '', 'none', 'related', 'upsells', 'csells', 'coupons', 'corders' ] ], 
				[ 'query.objectType', '=', 'wooQuery' ] 
			],
		];

		$woocontrols['cat_operator'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Category Operator', 'bricksultimate' ),
			'info' 		=> esc_html__('Operator to compare categories', 'bricksultimate'),
			'placeholder' => 'IN',
			'medium' 	=> true,
			'inline' 	=> true,
			'default' 	=> 'IN',
			'options' 	=> [
				'IN' 		=> esc_html__( 'IN' ),
				'AND' 		=> esc_html__( 'AND' ),
				'NOT IN' 	=> esc_html__( 'NOT IN' )
			],
			'required' 	=> [ 
				[ 'wooQueryTpes', '!=', [ '', 'none', 'related', 'upsells', 'csells', 'coupons', 'corders' ] ], 
				[ 'query.objectType', '=', 'wooQuery' ] 
			]
		];

		$woocontrols['outofstock'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Hide out of stock products', 'bricksultimate', 'corders' ),
			'placeholder' => 'Yes',
			'default' 	=> 'yes',
			'medium' 	=> true,
			'inline' 	=> true,
			'options' 	=> [
				'yes' 	=> esc_html__( 'Yes' ),
				'no' 	=> esc_html__( 'No' )
			],
			'required' 	=> [ 
				[ 'wooQueryTpes', '!=', [ '', 'none', 'toprated', 'related', 'coupons', 'corders' ] ],
				[ 'query.objectType', '=', 'wooQuery' ]
			],
		];

		$woocontrols['show_hidden'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Show hidden products', 'bricksultimate' ),
			'default' 	=> 'no',
			'placeholder' => 'No',
			'medium' 	=> true,
			'inline' 	=> true,
			'options' 	=> [
				'yes' 	=> esc_html__( 'Yes' ),
				'no' 	=> esc_html__( 'No' )
			],
			'required' 	=> [ 
				[ 'wooQueryTpes', '!=', [ '', 'none', 'toprated', 'related', 'coupons', 'corders' ] ],
				[ 'query.objectType', '=', 'wooQuery' ]
			],
		];

		$woocontrols['hide_free'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Hide free products', 'bricksultimate' ),
			'default' 	=> 'no',
			'placeholder' => 'No',
			'medium' 	=> true,
			'inline' 	=> true,
			'options' 	=> [
				'yes' 	=> esc_html__( 'Yes' ),
				'no' 	=> esc_html__( 'No' )
			],
			'required' 	=> [ 
				[ 'wooQueryTpes', '!=', [ '', 'none', 'toprated', 'related', 'coupons', 'corders' ] ],
				[ 'query.objectType', '=', 'wooQuery' ]
			],
		];

		$woocontrols['order_by'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Order By' ),
			'default' 	=> 'date',
			'placeholder' => 'Date',
			'medium' 	=> true,
			'inline' 	=> true,
			'options' 	=> [
				'date' 		=> __('Date', 'woocommerce' ),
				'price' 	=> __('Price', 'woocommerce' ),
				'rand' 		=> __('Random', 'woocommerce' ),
				'sales' 	=> __('Sales', 'woocommerce' )
			],
			'required' 	=> [ 
				[ 'wooQueryTpes', '!=', [ '', 'none', 'toprated', 'bestsell', 'related', 'coupons', 'corders' ] ],
				[ 'query.objectType', '=', 'wooQuery' ]
			],
		];

		//* Woo Orders start
		$woocontrols['ordersType'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Type'),
			'default' 	=> 'all',
			'placeholder' => esc_html__( 'All', 'bricksultimate' ),
			'medium' 	=> true,
			'inline' 	=> true,
			'options' 	=> [
				'all' 				=> esc_html__( 'All', 'bricksultimate' ),
				'shop_order' 		=> esc_html__( 'Orders', 'woocommerce' ),
				'shop_order_refund' => esc_html__( 'Refund Orders', 'bricksultimate' ),
			],
			'required' 	=> [ 
				[ 'wooQueryTpes', '=', 'corders' ],
				[ 'query.objectType', '=', 'wooQuery' ]
			],
		];

		$woocontrols['ordersStatus'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Status'),
			'placeholder' => esc_html__( 'All', 'bricksultimate' ),
			'multiple' 	=> true,
			'inline' 	=> true,
			'options' 	=> \wc_get_order_statuses(),
			'required' 	=> [ 
				[ 'wooQueryTpes', '=', 'corders' ],
				[ 'query.objectType', '=', 'wooQuery' ]
			],
		];

		$woocontrols['ordersCustomer'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Customer'),
			'default' 	=> 'logged_in',
			'options' 	=> [
				'logged_in' => esc_html__( 'Currently logged in user', 'bricksultimate' ),
				'custom' 	=> esc_html__( 'Custom user', 'bricksultimate' ),
			],
			'inline' 	=> true,
			'required' 	=> [ 
				[ 'wooQueryTpes', '=', 'corders' ],
				[ 'query.objectType', '=', 'wooQuery' ]
			],
		];

		$woocontrols['customCustomer'] = [
			'tab'  		=> 'content',
			'type' 		=> 'number',
			'label' 	=> esc_html__('User ID'),
			'hasDynamicData' => true,
			'inline' 	=> false,
			'required' 	=> [ 
				[ 'wooQueryTpes', '=', 'corders' ],
				[ 'query.objectType', '=', 'wooQuery' ],
				[ 'ordersCustomer', '=', 'custom' ]
			],
		];
		
		//* Woo Orders end

		$woocontrols['order'] = [
			'tab'  		=> 'content',
			'type' 		=> 'select',
			'label' 	=> esc_html__('Order' ),
			'default' 	=> 'DESC',
			'placeholder' => 'DESC',
			'medium' 	=> true,
			'inline' 	=> true,
			'options' 	=> [
				'ASC' 	=> esc_html__( 'ASC' ),
				'DESC' 	=> esc_html__( 'DESC' )
			],
			'required' 	=> [ 
				[ 'wooQueryTpes', '!=', [ '', 'none', 'toprated', 'bestsell' ] ],
				[ 'query.objectType', '=', 'wooQuery' ]
			],
		];

		$woocontrols['expiry_coupons'] = [
			'tab'  		=> 'content',
			'type' 		=> 'checkbox',
			'label' 	=> esc_html__('Get only expiry coupons', 'bricksultimate' ),
			'required' 	=> [ 
				[ 'wooQueryTpes', '=', 'coupons' ],
				[ 'query.objectType', '=', 'wooQuery' ]
			],
		];

		$woocontrols['exclude_expiry_coupons'] = [
			'tab'  		=> 'content',
			'type' 		=> 'checkbox',
			'label' 	=> esc_html__('Exclude expiry coupons', 'bricksultimate' ),
			'default' 	=> true,
			'required' 	=> [ 
				[ 'wooQueryTpes', '=', 'coupons' ],
				[ 'query.objectType', '=', 'wooQuery' ]
			],
		];

		//* Woo Orders
		$woocontrols['ordersLimit'] = [
			'tab'  		=> 'content',
			'type' 		=> 'number',
			'label' 	=> esc_html__('Orders per page', 'bricksultimate'),
			'min' 		=> 1,
			'max' 		=> 100,
			'unitless' 	=> false,
			'step' 		=> 1,
			'placeholder' => '10',
			'required' => [ 
				[ 'wooQueryTpes', '=', 'corders' ], 
				[ 'query.objectType', '=', 'wooQuery' ] 
			]
		];
		
		$array_search = absint( array_search( 'query', array_keys( $controls ) ) );
		$controls = array_slice( $controls, 0, $array_search + 1, true ) + $woocontrols + array_slice( $controls, $array_search + 1, null, true );

		return $controls;
	}

	/**
	 * Run ultimate query builder loop
	 * 
	 * @param array $results
	 * @param array $query
	 * 
	 * @return array $results
	 */
	public function run_ultimate_query( $results, $query ) {

		if( $query->object_type != 'buQuery' ) {
			return $results;
		}

		$settings = $query->settings;

		if( empty( $settings['buQueryTpes'] ) || $settings['buQueryTpes'] == 'none' ) {
			return $results;
		}

		if( $settings['buQueryTpes'] == 'wishlist' || $settings['buQueryTpes'] == 'compare' ) {
			$postType = $settings['pyPostType'] ?? 'post';

			if( $settings['buQueryTpes'] == 'wishlist' ) {
				$cookie_key = Wishlist::get_cookie_key($postType);
				$ids = Wishlist::$wishlist_ids[ $postType ] ?? [];
			} elseif( $settings['buQueryTpes'] == 'compare' ){
				$cookie_key = Compare::get_cookie_key($postType);
				$ids = Compare::$compare_ids[ $postType ] ?? [];
			}

			if( count( $ids ) <= 0 )
				return [];

			if( class_exists('WooCommerce') && $postType == 'product' )
				$postType = [ $postType, 'product_variation' ];

			$query_args = array(
				'posts_per_page' 	=>  ! empty( $settings['posts_per_page'] ) ? $settings['posts_per_page'] : 10,
				'post_status' 		=> 'publish',
				'post_type' 		=> $postType,
				'post__in' 			=> $ids,
				'ignore_sticky_posts' => 1,
				'orderby'			=> ! empty( $settings['orderby'] ) ? $settings['orderby'] : 'date',
				'order' 			=> ! empty( $settings['pyOrder'] ) ? $settings['pyOrder'] : 'DESC',
				'paged'				=> ( get_query_var('paged') ) ? get_query_var('paged') : 1,
			);

			try {
				$wishlists = new \WP_Query( $query_args );

				if( $wishlists->have_posts() ) {
					$results = $wishlists->posts;

					// STEP: Populate the total count
					$query->count = empty( $query_args['no_found_rows'] ) ? $wishlists->found_posts : ( is_array( $wishlists->posts ) ? count( $wishlists->posts ) : 0 );

					// STEP : Populate the max number of pages
					$query->bu_max_num_pages = empty( $settings['posts_per_page'] ) ? 1 : ceil( $query->count / $settings['posts_per_page'] );

					\wp_reset_query();
				}
			} catch ( \ParseError $e ) {
				echo $e->getMessage();
			}

			return ! empty( $results ) ? $results : [];
		}

		if( $settings['buQueryTpes'] == 'postyear' ) {
			global $wpdb;
			$limit = $settings['yearLimit'] ?? 999;
			$postType = $settings['pyPostType'] ?? 'post';
			$order = $settings['pyOrder'] ?? 'DESC';
			$years = $wpdb->get_results(
				$wpdb->prepare(
					"SELECT YEAR(p.post_date) year 
					FROM {$wpdb->posts} p
					WHERE p.post_status = 'publish' 
					AND p.post_type = '{$postType}' 
					GROUP BY year 
					ORDER BY year {$order} 
					LIMIT 0,{$limit}"
				),
				ARRAY_N
			);

			if ( is_array( $years ) && count( $years ) > 0 ) {
				foreach ( $years as $year ) {
					$results[] = $year[0];
				}
			}
			return $results;
		}

		if( $settings['buQueryTpes'] == 'customwp' ) {
			$wp_args = [];

			if( ! empty( $settings['wp_args'] ) ) {
				try {
					$wp_args = eval( ' ?>' . $settings['wp_args'] );
					$custquery = new \WP_Query( $wp_args );

					if( $custquery->have_posts() ) {
						$results = $custquery->posts;

						// STEP: Populate the total count
						$query->count = empty( $wp_args['no_found_rows'] ) ? $custquery->found_posts : ( is_array( $custquery->posts ) ? count( $custquery->posts ) : 0 );

						// STEP : Populate the max number of pages
						$query->bu_max_num_pages = empty( $wp_args['posts_per_page'] ) ? 1 : ceil( $query->count / $wp_args['posts_per_page'] );

						\wp_reset_query();
					}
				} catch ( \ParseError $e ) {
					echo $e->getMessage();
				}
			}

			return ! empty( $results ) ? $results : [];
		}

		if( $settings['buQueryTpes'] == 'termquery' ) {
			$tax_args = [];

			if( ! empty( $settings['tax_args'] ) ) {
				try {
					$tax_args = eval( ' ?>' . $settings['tax_args'] );
					$offset = ! empty( $tax_args['offset'] ) ? $tax_args['offset'] : 0;
					$terms_query = new \WP_Term_Query( $tax_args );
					$results = $terms_query->get_terms();

					// STEP: Populate the total count
					if ( empty( $tax_args['number'] ) ) {
						$query->count = ! empty( $results ) && is_array( $results ) ? count( $results ) : 0;
					} else {
						$number = $tax_args['number'];
						unset( $tax_args['offset'] );
						unset( $tax_args['number'] );

						// Numeric string containing the number of terms in that taxonomy or WP_Error if the taxonomy does not exist.
						$count = wp_count_terms( $tax_args );

						if ( is_wp_error( $count ) ) {
							$query->count = 0;
						} else {
							$count = (int) $count;

							$query->count = $offset <= $count ? $count - $offset : 0;
						}
					}

					// STEP : Populate the max number of pages
					$query->bu_max_num_pages = empty( $number ) ? 1 : ceil( $count / $number );

				} catch ( \ParseError $e ) {
					echo $e->getMessage();
				}
			}

			return ! empty( $results ) ? $results : [];
		}

		$post_id = isset( $_POST['postId'] ) ? $_POST['postId'] : ( isset( $_POST['data'] ) && is_numeric( $_POST['data'] ) ? $_POST['data'] : get_the_ID() );
		$preview_id 	= \Bricks\Helpers::get_template_setting( 'templatePreviewPostId', $post_id );

		if( $settings['buQueryTpes'] == 'adjposts' ) {
			$prevpost 		= ( isset( $settings['postPrevNext'] ) && $settings['postPrevNext'] == 'next' ) ? false : true;
			$excl_terms 	= isset( $settings['excludedTerms'] ) ? trim( $settings['excludedTerms'] ) : '';
			$in_same_term 	= ( isset( $settings['inSameTerm'] ) && $settings['inSameTerm'] == 'yes' ) ? true : false;
			$taxonomy 		= $in_same_term && isset( $settings['taxonomy'] ) ? $settings['taxonomy'] : 'category';

			if( ! empty( $preview_id ) ) {
				global $post;

				$post = get_post( $preview_id );
				setup_postdata( $post );
			}

			$adjacent_post = \get_adjacent_post( $in_same_term, $excl_terms, $prevpost, $taxonomy );

			if( ! empty( $preview_id ) ) {
				wp_reset_postdata();
			}

			return \is_a( $adjacent_post, 'WP_Post' ) ? [ $adjacent_post ] : [];
		}

		if( $settings['buQueryTpes'] == 'authbox' ) {
			global $post;

			if( ! empty( $preview_id ) ) {
				$post = get_post( $preview_id );
				setup_postdata( $post );
			}

			$post_author = get_users( array( 'include' => $post->post_auhtor, 'number' => 1 ) );

			if( ! empty( $preview_id ) ) {
				wp_reset_postdata();
			}

			return is_array( $post_author ) ? $post_author : [];
		}

		if( class_exists( 'ACF' ) ) {

			if( $settings['buQueryTpes'] == 'acfgallery' ) {
				$post_id = isset( $query->settings['isOptionsPpage'] ) ? 'option' : ( ! empty( $preview_id ) ? $preview_id : $post_id );

				$image_ids = (array) get_field( $query->settings['acfGalleryField'], $post_id, false );
				if( isset( $query->settings['galleryLimit'] ) ) {
					$slice = array_slice( (array) $image_ids, 0, $query->settings['galleryLimit'] );
					unset( $image_ids );
					return is_array( $slice ) ? $slice : $results;
				}
				return is_array( $image_ids ) ? $image_ids : $results;
			}

			if( $settings['buQueryTpes'] == 'acfpobj' ) {
				$post_id = isset( $query->settings['isOptionsPpage'] ) ? 'option' : ( ! empty( $preview_id ) ? $preview_id : $post_id );

				$acfPosts = get_field( $query->settings['acfField'], $post_id, false );
				if( isset( $query->settings['galleryLimit'] ) ) {
					$slice = array_slice((array) $acfPosts, 0, $query->settings['galleryLimit'] );
					unset( $acfPosts );
					return is_array( $slice ) ? $slice : $results;
				}

				if( ! empty( $acfPosts ) ) {
					return is_array( $acfPosts ) ? $acfPosts : [ $acfPosts ];
				}
			}

			if( $settings['buQueryTpes'] == 'acfcb' ) {
				$post_id = isset( $query->settings['isOptionsPpage'] ) ? 'option' : ( ! empty( $preview_id ) ? $preview_id : $post_id );

				$acfcbs = get_field( $query->settings['acfField'], $post_id );

				if( ! empty( $acfcbs ) ) {
					return is_array( $acfcbs ) ? $acfcbs : [ $acfcbs ];
				}
			}
		}

		if( $settings['buQueryTpes'] == 'mbImgAdv' && class_exists( 'RWMB_Loader' ) ) {
			$post_id = ( ! empty( $preview_id ) ? $preview_id : $post_id );
			$image_ids = get_post_meta( $post_id, $settings['mbImgAdvField'], true );

			if( ! empty( $image_ids ) && isset( $query->settings['mbgLimit'] ) ) {
				$slice = array_slice((array)$image_ids[0], 0, $query->settings['mbgLimit'] );
				unset( $image_ids );
				return is_array( $slice ) ? $slice : $results;
			}
 
			return is_array( $image_ids ) ? $image_ids[0] : $results;
		}

		if( $settings['buQueryTpes'] == 'mbcbl' && function_exists( 'rwmb_meta' ) && isset( $settings['mbFieldId'] )) {
			$post_id = ( ! empty( $preview_id ) ? $preview_id : $post_id );
			$cbList = rwmb_meta( $settings['mbFieldId'], '', $post_id );
 
			return is_array( $cbList ) ? $cbList : $results;
		}

		if( $settings['buQueryTpes'] == 'wpmenu' && isset( $settings['menuSlug'] ) ) {
			$menu = wp_get_nav_menu_object( $settings['menuSlug'] );

			if ( ! $menu ) {
				return $results;
			}

			if ( ! taxonomy_exists( 'nav_menu' ) ) {
				return $results;
			}

			$defaults = array(
				'order'                  => 'ASC',
				'orderby'                => 'menu_order',
				'post_type'              => 'nav_menu_item',
				'post_status'            => 'publish',
				'output'                 => ARRAY_A,
				'output_key'             => 'menu_order',
				'nopaging'               => true,
				'update_menu_item_cache' => true,
				'tax_query'              => array(
					array(
						'taxonomy' => 'nav_menu',
						'field'    => 'term_taxonomy_id',
						'terms'    => $menu->term_taxonomy_id,
					),
				),
			);

			$args = [];
			if( isset( $settings['itemInclude'] ) ) {
				$args['include'] = explode(',', bricks_render_dynamic_data( $settings['itemInclude'] ));
			}

			if( isset( $settings['itemExclude'] ) ) {
				$args['exclude'] = explode(',', bricks_render_dynamic_data( $settings['itemExclude'] ));
			}

			if( isset( $settings['itemParent'] ) ) {
				$args['meta_query'] = [
					[
						'key' 		=> '_menu_item_menu_item_parent',
						'value' 	=> bricks_render_dynamic_data( $settings['itemParent'] ),
						'compare' 	=> "=",
						'type' 		=> 'NUMERIC'
					]
				];
			}

			if( $menu->count > 0 ) {
				$args = apply_filters( 'bu_menu_loop_args', $args, $query );
				$args = wp_parse_args( $args, $defaults );
				$menu_items = array_map( 'wp_setup_nav_menu_item', get_posts( $args ) );
				
				_wp_menu_item_classes_by_context( $menu_items );

				$sorted_menu_items        = array();
				$menu_items_with_children = array();
				foreach ( (array) $menu_items as $menu_item ) {
					if ( (string) $menu_item->ID === (string) $menu_item->menu_item_parent ) {
						$menu_item->menu_item_parent = 0;
					}

					$sorted_menu_items[ $menu_item->menu_order ] = $menu_item;
					if ( $menu_item->menu_item_parent ) {
						$menu_items_with_children[ $menu_item->menu_item_parent ] = true;
					}
				}

				// Add the menu-item-has-children class where applicable.
				if ( $menu_items_with_children ) {
					foreach ( $sorted_menu_items as &$menu_item ) {
						if ( isset( $menu_items_with_children[ $menu_item->ID ] ) ) {
							$menu_item->classes[] = 'menu-item-has-children';
						}
					}
				}
				unset( $menu_items, $menu_item, $menu_items_with_children );
				return array_values($sorted_menu_items);
			}
		}

		return $results;
	}

	/**
	 * Run woo query builder loop
	 */
	public function run_woo_query( $results, $query ) {

		if( $query->object_type == 'buwooMiniCart' ) {
			if( ( is_null( WC()->cart ) || WC()->cart->is_empty() ) && ! \BricksUltimate\Helpers::isBricksBuilderActive() ) {
				$results[] = wc_get_products(
					[
						'limit'   => 1,
						'orderby' => 'date',
						'order'   => 'DESC',
					]
				)[0];
			} else {
				return WC()->cart->get_cart();
			}

			return $results;
		}

		if( $query->object_type == 'buprdgallery' ) {
			$post_id = isset( $_POST['postId'] ) ? $_POST['postId'] : ( isset( $_POST['data'] ) && is_numeric( $_POST['data'] ) ? $_POST['data'] : get_the_ID() );
			$preview_id = \Bricks\Helpers::get_template_setting( 'templatePreviewPostId', $post_id );
			$post_id = ( ! empty( $preview_id ) ? $preview_id : $post_id );

			$product = wc_get_product( $post_id );

			if( $product === false ) {
				return $results;
			}

			$gallery_image_ids = $product->get_gallery_image_ids();
			$get_variations = count( $product->get_children() ) <= apply_filters( 'woocommerce_ajax_variation_threshold', 30, $product );
			if( $get_variations && $product->get_type() == 'variable') {
				$available_variations = $product->get_available_variations();
				foreach ($available_variations as $key => $variation) { 
					if( ! in_array( $variation['image_id'], $gallery_image_ids ) )
						$gallery_image_ids[] = $variation['image_id'];
				}
			}
			
			if( $product->get_image_id() ) {
				array_unshift( $gallery_image_ids, $product->get_image_id() );
			}

			$image_ids = array_unique( $gallery_image_ids );

			return is_array( $image_ids ) ? $image_ids : $results;
		}

		if( $query->object_type != 'wooQuery' ) {
			return $results;
		}

		$settings = $query->settings;

		if( empty( $settings['wooQueryTpes'] ) || $settings['wooQueryTpes'] == 'none' ){
			return $results;
		}

		if( $settings['wooQueryTpes'] == 'corders' ) {
			$order_args = [];

			if( isset( $settings['ordersCustomer'] ) && $settings['ordersCustomer'] == 'custom' && 
				! empty( $settings['customCustomer'] ) ) {
				$order_args['customer'] = bricks_render_dynamic_data( $settings['customCustomer'] );
			} elseif( is_user_logged_in () && isset( $settings['ordersCustomer'] ) && $settings['ordersCustomer'] == 'logged_in' ) {
				$order_args['customer'] = get_current_user_id();
			} else {
				return $results;
			}

			global $wp;

			$post_type = ['shop_order', 'shop_order_refund'];

			if( isset( $settings['ordersType'] ) && 'all' != $settings['ordersType'] )
				$post_type = $settings['ordersType'];

			$order_args['type'] = $post_type;
			$order_args['status'] = isset( $settings['ordersStatus'] ) ? $settings['ordersStatus'] : array_keys( wc_get_order_statuses() );

			$current_page = isset( $wp->query_vars['orders'] ) && ! empty( $wp->query_vars['orders'] ) ? absint( $wp->query_vars['orders'] ) : 1;
			$order_args['limit'] = ! empty( $settings['ordersLimit'] ) ? $settings['ordersLimit'] : 10;
			$order_args['paginate'] = true;
			$order_args['page'] = $current_page;

			$order_args['order'] = ! empty( $settings['order'] ) ? $settings['order'] : 'DESC';

			$customer_orders = wc_get_orders(
				apply_filters(
					'woocommerce_my_account_my_orders_query',
					$order_args
				)
			);

			if( $customer_orders->total > 0 ) {
				$results = $customer_orders->orders;

				// STEP: Populate the total count
				$query->count = $customer_orders->total;

				// STEP : Populate the max number of pages
				$query->bu_max_num_pages = empty( $order_args['limit'] ) ? 1 : ceil( $query->count / $order_args['limit'] );

				$GLOBALS['totalOrdersPages'] = $query->bu_max_num_pages;
			}

			return ! empty( $results ) ? $results : [];
		}

		if( $settings['wooQueryTpes'] == 'coupons' ) {
			$args = [
				//'fields' 			=> 'ids',
				'post_type' 		=> 'shop_coupon',
				'post_status' 		=> 'publish',
				'posts_per_page' 	=> ! empty( $settings['productsNumber'] ) ? $settings['productsNumber'] : 3,
				'order' 			=> ! empty( $settings['order'] ) ? $settings['order'] : 'DESC',
				'meta_query' 		=> array(),
				'tax_query' 		=> array(
					'relation' => 'AND',
				),
				'paged' 			=> ( get_query_var('paged') ) ? get_query_var('paged') : 1
			];

			if( isset( $settings['expiry_coupons'] ) || isset( $settings['exclude_expiry_coupons'] ) ) {
				$args['meta_query'] = [
					'relation' => 'OR',
					[
						'key' 	=> 'expiry_date',
						'value' => time(),
						'compare' => '<',
						'type' 	=> 'numeric'
					],
					[
						'key' 	=> 'date_expires',
						'value' => time(),
						'compare' => '<',
						'type' 	=> 'numeric'
					]
				];
			}

			if( isset( $settings['exclude_expiry_coupons'] ) ) {
				$args['fields'] = 'ids';
				$args['nopaging'] = true;
				$args['posts_per_page'] = -1;
				$expired_ids = [];
				$expireCoupons = new \WP_Query( $args );
				if( $expireCoupons->have_posts() ) {
					$expired_ids = $expireCoupons->posts;
					\wp_reset_query();
				}

				unset( $expireCoupons );
				unset( $args['fields'] );
				unset( $args['nopaging'] );
				$args['meta_query'] = [];
				$args['posts_per_page'] = ! empty( $settings['productsNumber'] ) ? $settings['productsNumber'] : 3;
				$args['post__not_in'] = $expired_ids;
			}

			$coupons = new \WP_Query( $args );
			if( $coupons->have_posts() ) {
				$results = $coupons->posts;

				// STEP: Populate the total count
				$query->count = is_array( $coupons->posts ) ? $coupons->found_posts : 0;

				// STEP : Populate the max number of pages
				$query->bu_max_num_pages = empty( $args['posts_per_page'] ) ? 1 : ceil( $query->count / $args['posts_per_page'] );

				\wp_reset_query();
			}

			return ! empty( $results ) ? $results : [];
		}

		$query_args = array(
			'no_found_rows' 	=> 1,
			'posts_per_page' 	=>  ! empty( $settings['productsNumber'] ) ? $settings['productsNumber'] : 3,
			'post_status' 		=> 'publish',
			'post_type' 		=> [ 'product', 'product_variation' ],
			'order' 			=> ! empty( $settings['order'] ) ? $settings['order'] : 'DESC',
			'meta_query' 		=> array(),
			'tax_query' 		=> array(
				'relation' => 'AND',
			),
		); // WPCS: slow query ok.

		if( $settings['wooQueryTpes'] == 'related' || $settings['wooQueryTpes'] == 'upsells' || $settings['wooQueryTpes'] == 'csells' ) {
			$post_id = isset( $_POST['postId'] ) ? $_POST['postId'] : ( isset( $_POST['data'] ) && is_numeric( $_POST['data'] ) ? $_POST['data'] : get_the_ID() );

			$product = false;
			$preview_id = isset( \Bricks\Database::$page_data['preview_or_post_id'] ) ? \Bricks\Database::$page_data['preview_or_post_id'] : $post_id;
			$product = wc_get_product( $preview_id );
		}

		if( $settings['wooQueryTpes'] == 'related' ) {
			if( $product ) {
				$query_args['post__in']	= \wc_get_related_products( $product->get_id(), $query_args['posts_per_page'], $product->get_upsell_ids() );
				$settings['order_by'] = 'post_in';
			}
		}

		if( $settings['wooQueryTpes'] == 'toprated' ) {
			unset( $query_args['meta_query'] );

			$query_args['tax_query'] = WC()->query->get_tax_query();

			$settings['order_by'] = 'toprated';
			$settings['order'] = 'DESC';
		}

		if( $settings['wooQueryTpes'] == 'bestsell' ) {
			$query_args['order'] = 'DESC';
			$query_args['meta_query'] = WC()->query->get_meta_query();
			$query_args['tax_query'] = WC()->query->get_tax_query();

			$settings['order_by'] = 'sales';
		}

		if( $settings['wooQueryTpes'] == 'featured' ) {
			$product_visibility_term_ids = wc_get_product_visibility_term_ids();
			$query_args['tax_query'][] = [
				'taxonomy' => 'product_visibility',
				'field'    => 'term_taxonomy_id',
				'terms'    => $product_visibility_term_ids['featured'],
			];
		}

		if( $settings['wooQueryTpes'] == 'onsale' ) {
			$product_ids_on_sale    = \wc_get_product_ids_on_sale();
			$product_ids_on_sale[]  = 0;
			$query_args['post__in'] = $product_ids_on_sale;
		}

		if( $settings['wooQueryTpes'] == 'upsells' ) {
			$upsells = ( $product !== false ) ? array_map( 'absint', $product->get_upsell_ids() ) : false;

			if( ! empty( $upsells ) ) {
				$query_args['post__in'] = $upsells;
			} elseif( Helpers::isBricksBuilderActive() && empty( $upsells ) ) {
				//* show latest products for preview
				$upsells = [];
				$products = wc_get_products( [ 'limit' => ( ! empty( $settings['productsNumber'] ) ? $settings['productsNumber'] : 3 ) ] );

				if ( $products ) {
					foreach ( $products as $product ) {
						$upsells[] = $product->get_id();
					}
					$query_args['post__in'] = $upsells;
				}
			} else {
				return [];
			}
		}

		if( $settings['wooQueryTpes'] == 'csells' ) {
			$csells = ( $product !== false ) ? $product->get_cross_sell_ids() : ( ! is_null( WC()->cart ) ? WC()->cart->get_cross_sells() : '' );

			if( ! empty( $csells ) ) {
				$query_args['post__in'] = array_map( 'absint', $csells );
			} elseif( Helpers::isBricksBuilderActive() && empty( $csells ) ) {
				//* show latest products for preview
				$csells = [];
				$products = wc_get_products( [ 'limit' => ( ! empty( $settings['productsNumber'] ) ? $settings['productsNumber'] : 3 ) ] );

				if ( $products ) {
					foreach ( $products as $product ) {
						$csells[] = $product->get_id();
					}
					$query_args['post__in'] = $csells;
				}
			} else {
				return [];
			}
		}

		$woo_products = new \WP_Query( self::generate_wc_query_args( $query_args, $settings ) );

		if( $woo_products->have_posts() ) {
			$results = $woo_products->posts;

			// STEP: Populate the total count
			$query->count = ! empty( $results ) ? $woo_products->found_posts : 0;

			// STEP : Populate the max number of pages
			$query->bu_max_num_pages = empty( $settings['productsNumber'] ) ? 1 : ceil( $query->count / $settings['productsNumber'] );

			\wp_reset_query();
		}

		return ! empty( $results ) ? $results : [];
	}

	public function bu_loop_object( $loop_object, $loop_key, $query ) {
		/*if( isset( $query->settings['buQueryTpes'] ) && $query->settings['buQueryTpes'] == 'authbox' ) {
			//global $wp_query;

			//$wp_query->queried_object = $loop_object;

			//return $wp_query;
		}*/

		if( isset( $query->settings['buQueryTpes'] ) && ( $query->settings['buQueryTpes'] == 'acfgallery' || $query->settings['buQueryTpes'] == 'mbImgAdv' || $query->settings['buQueryTpes'] == 'acfpobj' || $query->settings['buQueryTpes'] == 'wishlist' || $query->settings['buQueryTpes'] == 'compare' ) ) {

			global $post;

			$post = get_post( $loop_object );
			setup_postdata( $post );

			return $post;
		}

		if( isset( $query->settings['buQueryTpes'] ) && $query->settings['buQueryTpes'] == 'acfcb' ) {
			return $loop_object;
		}

		if( isset( $query->settings['buQueryTpes'] ) && $query->settings['buQueryTpes'] == 'mbcbl' ) {
			return $loop_object . '||' . $query->settings['mbFieldId'];
		}

		if( $query->object_type == 'wooQuery' ) {
			global $post;

			$post = get_post( $loop_object->ID );
			setup_postdata( $post );
		}

		if( $query->object_type == 'buprdgallery' ) {
			global $post;

			$post = get_post( $loop_object );
			setup_postdata( $post );

			return $post;
		}

		if ( $query->object_type == 'buwooMiniCart' ) {
			$loop_object = is_array( $loop_object ) ? $loop_object['data'] : $loop_object;
			// @see woocommerce/templates/cart/cart.php
			$_product   = apply_filters( 'woocommerce_cart_item_product', $loop_object, $loop_object, $loop_key );
			$product_id = apply_filters( 'woocommerce_cart_item_product_id', $_product->get_id(), $loop_object, $loop_key );

			if ( $_product && $_product->exists() /*&& $cart_item['quantity'] > 0
				&& apply_filters( 'woocommerce_widget_cart_item_visible', true, $cart_item, $loop_key ) */
			) {
				
				global $post, $product;
				$post = get_post( $product_id );
				setup_postdata( $post );
				
				return $post;
			}
		}

		return $loop_object;
	}

	public static function generate_wc_query_args( $query_args, $config ) {
		$product_visibility_term_ids = wc_get_product_visibility_term_ids();

		$outofstock 	= ! empty( $config['outofstock'] ) ? $config['outofstock'] : 'yes';
		$show_hidden 	= ! empty( $config['show_hidden'] ) ? $config['show_hidden'] : 'no';
		$hide_free 		= ! empty( $config['hide_free'] ) ? $config['hide_free'] : 'yes';
		$orderby 		= ! empty( $config['order_by'] ) ? $config['order_by'] : 'date';

		if( ! empty( $config['category_ids'] ) ) {
			$categories 	= explode( ',', $config['category_ids'] );
			$categories 	= array_map( 'absint', $categories );
			$cat_operator 	= ! empty( $config['cat_operator'] ) ? $config['cat_operator'] : 'IN';
			$query_args['tax_query'][] = [
				'taxonomy'         => 'product_cat',
				'terms'            => $categories,
				'field'            => 'term_taxonomy_id',
				'operator'         => $cat_operator,
				'include_children' => 'AND' === $cat_operator ? false : true,
			];
		}

		if ( $show_hidden == 'no' ) {
			$query_args['tax_query'][] = array(
				'taxonomy' => 'product_visibility',
				'field'    => 'term_taxonomy_id',
				'terms'    => is_search() ? $product_visibility_term_ids['exclude-from-search'] : $product_visibility_term_ids['exclude-from-catalog'],
				'operator' => 'NOT IN',
			);
			$query_args['post_parent'] = 0;
		}

		if ( $hide_free == 'yes' ) {
			$query_args['meta_query'][] = array(
				'key'     => '_price',
				'value'   => 0,
				'compare' => '>',
				'type'    => 'DECIMAL',
			);
		}

		if ( 'yes' === $outofstock ) {
			$query_args['tax_query'][] = array(
				array(
					'taxonomy' => 'product_visibility',
					'field'    => 'term_taxonomy_id',
					'terms'    => $product_visibility_term_ids['outofstock'],
					'operator' => 'NOT IN',
				),
			); // WPCS: slow query ok.
		}

		switch ( $orderby ) {
			case 'price':
				$query_args['meta_key'] = '_price'; // WPCS: slow query ok.
				$query_args['orderby']  = 'meta_value_num';
				break;
			case 'post_in':
				$query_args['orderby'] = 'post__in';
				break;
			case 'rand':
				$query_args['orderby'] = 'rand';
				break;
			case 'sales':
				$query_args['meta_key'] = 'total_sales'; // WPCS: slow query ok.
				$query_args['orderby']  = 'meta_value_num';
				break;
			case 'toprated':
				$query_args['meta_key'] = '_wc_average_rating'; // WPCS: slow query ok.
				$query_args['orderby']  = 'meta_value_num';
				break;
			default:
				$query_args['orderby'] = 'date';
		}

		return $query_args;
	}
}