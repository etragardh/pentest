<?php
namespace BricksUltimate;

if ( ! defined( 'ABSPATH' ) ) exit;

class ElementConditions {

	public static $post_id = 0;

	public function __construct() {
		add_action( 'wp_enqueue_scripts', 	[ $this, 'update_element_conditions' ], 9 );

		add_filter( 'bricks/element/render', [ $this, 'check_conditions' ], 10, 2 );
	}

	public static function get_operators( $operators = [] ) {
		$operators_map = [
			'equals'           => esc_html__( '==', 'bricksultimate' ),
			'not_equals'       => esc_html__( '!=', 'bricksultimate' ),
			'starts_with'      => esc_html__( 'starts with', 'bricksultimate' ),
			'ends_with'        => esc_html__( 'ends with', 'bricksultimate' ),
			'contains'         => esc_html__( 'contains', 'bricksultimate' ),
			'does_not_contain' => esc_html__( 'does not contain', 'bricksultimate' ),
			'is_set'           => esc_html__( 'is set', 'bricksultimate' ),
			'is_not_set'       => esc_html__( 'is not set', 'bricksultimate' ),
			'greater'          => esc_html__( 'is greater than', 'bricksultimate' ),
			'lower'            => esc_html__( 'is lower than', 'bricksultimate' ),
			'greater_or_equal' => esc_html__( 'is greater or equal to', 'bricksultimate' ),
			'lower_or_equal'   => esc_html__( 'is lower or equal to', 'bricksultimate' ),
			'is'               => esc_html__( 'is', 'bricksultimate' ),
			'is_not'           => esc_html__( 'is not', 'bricksultimate' ),
			'is_empty'         => esc_html__( 'is empty', 'bricksultimate' ),
			'is_not_empty'     => esc_html__( 'is not empty', 'bricksultimate' ),
			'include'          => esc_html__( 'include', 'bricksultimate' ),
			'does_not_include' => esc_html__( 'does not include', 'bricksultimate' ),
			'in'          		=> esc_html__( 'in', 'bricksultimate' ),
			'not_in' 			=> esc_html__( 'not in', 'bricksultimate' ),
		];

		$operators_options = [];

		foreach ( $operators as $operator ) {
			if ( ! isset( $operators_map[ $operator ] ) ) {
				continue;
			}

			$operators_options[ $operator ] = $operators_map[ $operator ];
		}

		return $operators_options;
	}

	public function update_element_conditions() {
		\Bricks\Conditions::$conditions = array_merge( \Bricks\Conditions::$conditions, [
			'buGroupTitle' => [
				'label' => esc_html__( 'Ultimate', 'bricks' ),
			],

			'wptpl'     => [
				'label'   => esc_html__( 'WP Template', 'bricksultimate' ),
				'callback' => [ get_class(), 'validate_wp_template' ],
				'compare' => [
					'type'        => 'select',
					'options'     => self::get_operators( [ 'is', 'is_not' ] ),
					'placeholder' => esc_html__( 'Select', 'bricks' ),
				],
				'value' => [
					'type'        => 'select',
					'options' 	  => [
						'is_404' 				=> '404 page',
						'is_front_page' 		=> 'Front page',
						'is_home' 				=> 'Home page',
						'is_single' 			=> 'Single post',
						'is_sticky' 			=> 'Sticky post',
						'is_post_type_archive' 	=> 'Post type archive',
						'has_comments_open' 	=> 'With comments open',
						'has_pings_open' 		=> 'With pings open',
						'is_page' 				=> 'Page',
						'is_page_template' 		=> 'Page template',
						'is_category' 			=> 'Category',
						'is_tag' 				=> 'Tag',
						'is_tax' 				=> 'Tax',
						'is_author' 			=> 'Author',
						'is_date' 				=> 'Date',
						'is_archive' 			=> 'Archive',
						'is_search' 			=> 'Search',
						'is_paged' 				=> 'Paged',
						'is_singular' 			=> 'Singular',
					],
					'placeholder' => esc_html__( 'Select', 'bricks' ),
				]
			],

			'postType'     => [
				'label'   => esc_html__( 'Post type', 'bricksultimate' ),
				'callback' => [ get_class(), 'validate_post_type' ],
				'compare' => [
					'type'        => 'select',
					'options'     => self::get_operators( [ 'is', 'is_not', 'in', 'not_in' ] ),
					'placeholder' => esc_html__( 'Select', 'bricks' ),
				],
				'value' => [
					'type'        => 'text',
					'placeholder' => 'post',
				]
			],

			'postInTerms'     => [
				'label'   => esc_html__( 'Post in terms', 'bricksultimate' ),
				'callback' => [ get_class(), 'validate_post_in_terms' ],
				'compare' => [
					'type'        => 'select',
					'options'     => self::get_operators( [ 'in', 'not_in' ] ),
					'placeholder' => esc_html__( 'Select', 'bricks' ),
				],
				'value' => [
					'type'        => 'text',
					'placeholder' => 'taxonomy:termids',
				]
			],

			'postHasTerms'     => [
				'label'   => esc_html__( 'Post has term', 'bricksultimate' ),
				'callback' => [ get_class(), 'validate_post_has_terms' ],
				'compare' => [
					'type'        => 'select',
					'options'     => self::get_operators( [ 'is', 'is_not' ] ),
					'placeholder' => esc_html__( 'Select', 'bricks' ),
				],
				'value' => [
					'type'        => 'text',
					'placeholder' => 'terms(name/term_id/slug):taxonomy',
				]
			],

			'postCommentNum'     => [
				'label'   => esc_html__( 'Post comment number', 'bricksultimate' ),
				'callback' => [ get_class(), 'validate_post_comment_number' ],
				'compare' => [
					'type'        => 'select',
					'options'     => self::get_operators([ 
						'equals',
						'not_equals',
						'greater',
						'lower',
						'greater_or_equal',
						'lower_or_equal',
					]),
					'placeholder' => esc_html__( 'Select', 'bricks' ),
				],
				'value' => [
					'type' 			=> 'text',
					'placeholder' 	=> 0,
				]
			],

			'authorGroupTitle' => [
				'label' => esc_html__( 'Author', 'bricks' ),
			],

			'authorUsername'     => [
				'label'   => esc_html__( 'Author username', 'bricksultimate' ),
				'callback' => [ get_class(), 'validate_author_username' ],
				'compare' => [
					'type'        => 'select',
					'options'     => self::get_operators( [ 'equals', 'not_equals' ] ),
					'placeholder' => esc_html__( 'Select', 'bricks' ),
				],
				'value' => [
					'type'        => 'text',
					'placeholder' => esc_html__( 'jhon@2922', 'bricks' ),
				]
			],

			'authorDescription'     => [
				'label'   => esc_html__( 'Author description', 'bricksultimate' ),
				'callback' => [ get_class(), 'validate_author_description' ],
				'compare' => [
					'type'        => 'select',
					'options'     => self::get_operators( [ 
						'is_set',
						'is_not_set',
						'equals',
						'not_equals',
						'starts_with',
						'ends_with',
						'contains',
						'does_not_contain',
					] ),
					'placeholder' => esc_html__( 'Select', 'bricks' ),
				],
				'value' => [
					'type' 	=> 'text',
				]
			],

			'authorRole'     => [
				'label'   => esc_html__( 'Author role', 'bricksultimate' ),
				'callback' => [ get_class(), 'validate_author_role' ],
				'compare' => [
					'type'        => 'select',
					'options'     => self::get_operators( [ 
						'equals',
						'not_equals',
					] ),
					'placeholder' => esc_html__( 'Select', 'bricks' ),
				],
				'value' => [
					'type' 			=> 'select',
					'options' 		=> wp_roles()->get_names(),
					'searchable' 	=> true,
					'placeholder' 	=> esc_html__( 'Select user role', 'bricks' ),
				]
			],

			'capability'     => [
				'label'   => esc_html__( 'Capability', 'bricksultimate' ),
				'callback' => [ get_class(), 'validate_author_capability' ],
				'compare' => [
					'type'        => 'select',
					'options'     => self::get_operators( [ 
						'equals',
						'not_equals',
					] ),
					'placeholder' => esc_html__( 'Select', 'bricks' ),
				],
				'value' => [
					'type' 			=> 'select',
					'options' 		=> $this->get_user_capabilities(),
					'searchable' 	=> true,
					'placeholder' 	=> esc_html__( 'Select capability', 'bricks' ),
				]
			],
		]);

		if( \Bricks\Woocommerce::is_woocommerce_active() ) {
			\Bricks\Conditions::$conditions = array_merge( \Bricks\Conditions::$conditions, [
	    		'wooGroupTitle' => [
					'label' => esc_html__( 'WooCommerce', 'bricks' ),
				],

				'wcTemplate'     => [
					'label'   => esc_html__( 'Template', 'bricks' ),
					'callback' => [ get_class(), 'validate_wc_templates' ],
					'compare' => [
						'type'        => 'select',
						'options'     => self::get_operators( [ 'is', 'is_not' ] ),
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					],
					'value' => [
						'type'        => 'select',
						'options'     => [
							'is_shop' 		=> esc_html__( 'Shop page', 'bricksultimate' ),
							'is_single' 	=> esc_html__( 'Single product page', 'bricksultimate' ),
							'is_cart' 		=> esc_html__( 'Cart page', 'bricksultimate' ),
							'is_checkout' 	=> esc_html__( 'Checkout page', 'bricksultimate' ),
							'is_account' 	=> esc_html__( 'My account page', 'bricksultimate' ),
						],
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					]
				],

				'wcProductType'     => [
					'label'   => esc_html__( 'Product', 'bricks' ),
					'callback' => [ get_class(), 'validate_condition_product_type' ],
					'compare' => [
						'type'        => 'select',
						'options'     => self::get_operators( [ 'equals', 'not_equals' ] ),
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					],
					'value' => [
						'type'        => 'select',
						'options'     => [
							'is_on_sale' 			=> esc_html__( 'Is on sale?', 'bricksultimate' ),
							'is_in_stock' 			=> esc_html__( 'Is in stock', 'bricksultimate' ),
							'backordered' 			=> esc_html__( 'Is on backorder', 'bricksultimate' ),
							'is_featured_product' 	=> esc_html__( 'Is featured product', 'bricksultimate' ),
							'is_virtual_product' 	=> esc_html__( 'Is virtual product', 'bricksultimate' ),
							'is_product_downloadable' 	=> esc_html__( 'Is product downloadable', 'bricksultimate' ),
							'is_purchased' 			=> esc_html__( 'Is purchased', 'bricksultimate' ),
							'has_short_description' => esc_html__( 'Has short description', 'bricksultimate' ),
							'has_description' 		=> esc_html__( 'Has description', 'bricksultimate' ), 
							'has_reviews' 			=> esc_html__( 'Has reviews', 'bricksultimate' ),
							'has_related_products' 	=> esc_html__( 'Has related products', 'bricksultimate' ),
							'has_upsell_products' 	=> esc_html__( 'Has upsell products', 'bricksultimate' ),
							'has_csell_products' 	=> esc_html__( 'Has cross-sell products', 'bricksultimate' ),
							'has_purchase_note' 	=> esc_html__( 'Has purchase note', 'bricksultimate' ),
						],
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					]
				],

				'prdMenuOrder' => [
					'label'   => esc_html__( 'Menu order', 'bricksultimate' ),
					'callback' => [ get_class(), 'validate_product_menu_order' ],
					'compare' => [
						'type'        => 'select',
						'options'     => self::get_operators([ 
							'equals',
							'not_equals',
							'greater',
							'lower',
							'greater_or_equal',
							'lower_or_equal',
						]),
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					],
					'value' => [
						'type' 			=> 'text',
						'placeholder' 	=> 0,
					]
				],

				'prdAttributes' => [
					'label'   	=> esc_html__( 'Product attribute', 'bricksultimate' ),
					'callback' 	=> [ get_class(), 'validate_product_attribute' ],
					'compare' 	=> [
						'type'        => 'select',
						'options'     => self::get_operators([ 
							'include',
							'does_not_include',
						]),
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					],
					'value' => [
						'type' 			=> 'text',
						'placeholder' 	=> 'pa_color',
					]
				],

				'wcCartEmpty'     => [
					'label'   => esc_html__( 'Cart', 'bricks' ),
					'callback' => [ get_class(), 'validate_cart_empty' ],
					'compare' => [
						'type'        => 'select',
						'options'     => self::get_operators( [ 'is_empty', 'is_not_empty', ] ),
						'placeholder' => 'is empty',
						'default' 	  => 'is_empty'
					],
					'value' => []
				],

				'wcCartTotal'     => [
					'label'   => esc_html__( 'Cart total', 'bricksultimate' ),
					'callback' => [ get_class(), 'validate_cart_total' ],
					'compare' => [
						'type'        => 'select',
						'options'     => self::get_operators([ 
							'is',
							'is_not',
							'greater',
							'lower',
							'greater_or_equal',
							'lower_or_equal' 
						]),
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					],
					'value' => [
						'type' 			=> 'text',
						'placeholder' 	=> 200,
					]
				],

				'wctotalorders'     => [
					'label'   => esc_html__( 'Customer total orders', 'bricksultimate' ),
					'callback' => [ get_class(), 'validate_customer_total_orders' ],
					'compare' => [
						'type'        => 'select',
						'options'     => self::get_operators([ 
							'equals',
							'not_equals',
							'greater',
							'lower',
							'greater_or_equal',
							'lower_or_equal',
						]),
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					],
					'value' => [
						'type' 			=> 'text',
						'placeholder' 	=> 3,
					]
				],

				'wctotalspent'     => [
					'label'   => esc_html__( 'Customer total spent', 'bricksultimate' ),
					'callback' => [ get_class(), 'validate_customer_total_spent' ],
					'compare' => [
						'type'        => 'select',
						'options'     => self::get_operators([ 
							'equals',
							'not_equals',
							'greater',
							'lower',
							'greater_or_equal',
							'lower_or_equal',
						]),
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					],
					'value' => [
						'type' 			=> 'text',
						'placeholder' 	=> 200,
					]
				],

				'wcEndpoint'     => [
					'label'   => esc_html__( 'Endpoint', 'woocommerce' ),
					'callback' => [ get_class(), 'validate_condition_wc_endpoint' ],
					'compare' => [
						'type'        => 'select',
						'options'     => self::get_operators( [ 'is', 'is_not' ] ),
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					],
					'value' => [
						'type'        => 'select',
						'options'     => [
							'any' 				=> esc_html__( 'Any', 'bricksultimate' ),
							'orderpay' 			=> esc_html__( 'Order Pay', 'woocommerce' ),
							'orderreceived' 	=> esc_html__( 'Order Received', 'woocommerce' ),
							'vieworder' 		=> esc_html__( 'View Order', 'woocommerce' ),
							'editaccount' 		=> esc_html__( 'Edit Account', 'woocommerce' ),
							'editaddress' 		=> esc_html__( 'Edit Address', 'woocommerce' ),
							'paymentmethod' 	=> esc_html__( 'Add Payment Method', 'woocommerce' ),
							'customerlogout' 	=> esc_html__( 'Customer Logout', 'woocommerce' ), 
							'lostpassword' 		=> esc_html__( 'Lost Password', 'woocommerce' ),
						],
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					]
				],

				'prdShippingClass' => [
					'label'   => esc_html__( 'Shipping Class', 'woocommerce' ),
					'callback' => [ get_class(), 'validate_condition_product_shipping_class' ],
					'compare' => [
						'type'        => 'select',
						'options'     => self::get_operators( [ 'is', 'is_not', 'contains', 'does_not_contain', 'starts_with', 'ends_with' ] ),
						'placeholder' => esc_html__( 'Select', 'bricks' ),
					],
					'value' => [
						'type'        => 'select',
						'options'     => $this->getShippingClasses(),
						'placeholder' => esc_html__( 'Select a shipping class', 'bricks' ),
					]
				],

			]);
		}
	}

	public function getShippingClasses() {
		$classes = [];

		if( \Bricks\Woocommerce::is_woocommerce_active() ) {
			foreach( (array) \WC_Shipping::instance()->get_shipping_classes() as $termObject ) {
				$classes[ $termObject->slug ] = esc_html( $termObject->name );
			}
		}

		return $classes;
	}

	public function get_user_capabilities() {
		global $wp_roles;
		$options = [];

		// Administrator should have all capabilities
		$all_caps = array_keys($wp_roles->roles['administrator']['capabilities']);

		foreach ( $all_caps as $capability ) {
			$options[$capability] = $capability;
		}

		return $options;
	}

	public static function validate_author_capability( array $settings ) {
		if( is_author() ) {
			$author = get_queried_object();
			$user_id = $author->ID;
		} else {
			global $post;

			if ( ! $post) {
				return false;
			}

			$user_id = $post->post_author;
		}

		if (empty( $user_id )) {
			return false;
		}

		$operator = isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'equals';
		$user_can = user_can($user_id, $settings['value']);
		return $operator === 'equals' ? $user_can : ! $user_can;
	}

	public static function validate_author_description( array $settings ) {
		if( is_author() ) {
			$author = get_queried_object();
			$user_id = $author->ID;
		} else {
			global $post;

			if ( ! $post) {
				return false;
			}

			$user_id = $post->post_author;
		}

		if (empty( $user_id )) {
			return false;
		}

		return self::validate([
			'operator' => isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'is',
			'saved_value' => $settings['value'],
			'current_value' => get_the_author_meta( 'description', $user_id )
		]);
	}

	public static function validate_author_role( array $settings ) {
		if( is_author() ) {
			$user_data = get_user_by( 'slug', get_query_var( 'author_name' ) );
		} else {
			global $post;

			if ( ! $post) {
				return false;
			}

			$user_id = $post->post_author;
			$user_data = get_userdata( $user_id );

			if (empty( $user_data )) {
				return false;
			}
		}

		$has_role = in_array( $settings['value'], $user_data->roles );
		$operator = isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'equals';
		return $operator === 'equals' ? $has_role : ! $has_role;
	}

	public static function validate_cart_total( array $settings ) {
		return self::validate([
			'operator' 		=> isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'is',
			'saved_value' 	=> isset( $settings[ 'value' ] ) ? floatval( $settings[ 'value' ] ) : 0,
			'current_value' => WC()->cart ? WC()->cart->get_total( false ) : 0,
		]);
	}

	public static function validate_product_menu_order( array $settings ) {
		$wcProduct     = wc_get_product( self::$post_id );

		if ( $wcProduct == false ) {
			return false;
		}

		return self::validate([
			'operator' 		=> isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'equals',
			'saved_value' 	=> isset( $settings[ 'value' ] ) ? intval( $settings[ 'value' ] ) : 0,
			'current_value' => $wcProduct->get_menu_order(),
		]);
	}

	public static function validate_condition_product_type( array $settings ) {
		$current_value = null;
		$wcProduct     = wc_get_product( self::$post_id );

		if ( $wcProduct == false ) {
			return false;
		}

		$value = isset( $settings[ 'value' ] ) ? $settings[ 'value' ] : 'is_on_sale';

		switch ( $value ) {
			case 'is_on_sale':
				$current_value = $wcProduct->is_on_sale();
				break;
			case 'is_in_stock':
				$current_value = $wcProduct->is_in_stock();
				break;
			case 'backordered':
				$current_value = $wcProduct->is_on_backorder();
				break;
			case 'is_featured_product':
				$current_value = $wcProduct->is_featured();
				break;
			case 'is_virtual_product':
				$current_value = $wcProduct->is_virtual();
				break;
			case 'is_product_downloadable':
				$current_value = $wcProduct->is_downloadable();
				break;
			case 'has_short_description':
				$current_value = ! empty( $wcProduct->get_short_description() );
				break;
			case 'has_description':
				$current_value = ! empty( $wcProduct->get_description() );
				break;
			case 'has_reviews':
				$current_value = ! empty( $wcProduct->get_review_count() );
				break;
			case 'has_related_products':
				$current_value = sizeof( \wc_get_related_products( $wcProduct->get_id(), 2, $wcProduct->get_upsell_ids() ) )  > 0 ? true : false;
				break;
			case 'has_upsell_products':
				$current_value = sizeof( $wcProduct->get_upsell_ids() )  > 0 ? true : false;
				break;
			case 'has_csell_products':
				$current_value = sizeof( $wcProduct->get_cross_sell_ids() )  > 0 ? true : false;
				break;
			case 'is_purchased':
				if ( is_user_logged_in() ) {
					$customer = wp_get_current_user();
					$current_value = wc_customer_bought_product( $customer->user_email, $customer->ID, $wcProduct->get_id() );
				}
				break;
			case 'has_purchase_note' :
					$current_value = ! empty( $wcProduct->get_purchase_note() ) ? true : false;
				break;
			
		}

		if ( is_null( $current_value ) ) {
			return false;
		}

		return self::validate(
			[
				'operator'      => isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'equals',
				'saved_value'   => true,
				'current_value' => $current_value,
			]
		);
	}

	public static function validate_wc_templates( array $settings ) {
		$current_value = null;
		$value = isset( $settings[ 'value' ] ) ? $settings[ 'value' ] : 'is_shop';

		switch ( $value ) {
			case 'is_shop':
				$current_value = is_shop();
				break;
			case 'is_single':
				$current_value = is_product();
				break;
			case 'is_cart':
				$current_value = is_cart();
				break;
			case 'is_checkout':
				$current_value = is_checkout();
				break;
			case 'is_account':
				$current_value = is_account_page();
				break;
		}

		if ( is_null( $current_value ) ) {
			return false;
		}

		return self::validate(
			[
				'operator'      => isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'is',
				'saved_value'   => true,
				'current_value' => $current_value,
			]
		);
	}

	public static function validate_cart_empty( array $settings ) {
		return self::validate(
			[
				'operator'      => isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'is_empty',
				'saved_value'   => null,
				'current_value' => WC()->cart->get_cart(),
			]
		);
	}

	public static function validate_customer_total_orders( array $settings ) {
		return self::validate(
			[
				'operator'      => isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'equals',
				'saved_value'   => intval( $settings[ 'value' ] ),
				'current_value' => self::getCountCustomerTotalOrders(),
			]
		);
	}

	public static function validate_customer_total_spent( array $settings ) {
		if ( ! isset( $settings[ 'value' ] ) ) {
			return false;
		}

		return self::validate(
			[
				'operator'      => isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'equals',
				'saved_value'   => intval( $settings[ 'value' ] ),
				'current_value' => self::getCustomerTotalSpent(),
			]
		);
	}

	private static function getCountCustomerTotalOrders() {
		$userID = ( is_user_logged_in() ? wp_get_current_user()->ID : 0 );
		if ( empty( $userID ) ) {
			return false;
		}
		$args   = [
			'customer_id' => $userID,
		];
		$orders = wc_get_orders( $args );

		return count( $orders );
	}

	private static function getCustomerTotalSpent() {
		$userID = ( is_user_logged_in() ? wp_get_current_user()->ID : 0 );
		if ( empty( $userID ) ) {
			return false;
		}
		$args   = [
			'customer_id' => $userID,
		];
		$orders = wc_get_orders( $args );
		if ( empty( $orders ) ) {
			return false;
		}

		return array_reduce( $orders, function ( $total, $order ) {
			$total += (float) $order->get_total();

			return $total;
		}, 0.0 );
	}

	public static function validate_condition_wc_endpoint( array $settings ) {
		$value 		= isset( $settings[ 'value' ] ) ? $settings[ 'value' ] : 'any';
		$operator 	= isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'is';
		$endpoint_url = '';

		if( $value == 'any') {
			$endpoint_url = is_wc_endpoint_url();
		} else if( $value == "orderpay" ) {
			$endpoint_url = is_wc_endpoint_url( 'order-pay' );
		} else if( $value == "orderreceived" ) {
			$endpoint_url = is_wc_endpoint_url( 'order-received' );
		} else if( $value == "vieworder" ) {
			$endpoint_url = is_wc_endpoint_url( 'view-order' );
		} else if( $value == "editaccount" ) {
			$endpoint_url = is_wc_endpoint_url( 'edit-account' );
		} else if( $value == "editaddress" ) {
			$endpoint_url = is_wc_endpoint_url( 'edit-address' );
		} else if( $value == "paymentmethod" ) {
			$endpoint_url = is_wc_endpoint_url( 'add-payment-method' );
		} else if( $value == "customerlogout" ) {
			$endpoint_url = is_wc_endpoint_url( 'customer-logout' );
		} else if( $value == "lostpassword" ) {
			$endpoint_url = is_wc_endpoint_url( 'lost-password' );
		} else {
			return false;
		}

		if ( $operator == "is" ) {
			return ( ! empty( $endpoint_url ) ) ? true : false;
		} else if ( $operator == "is_not" ) {
			return ( empty( $endpoint_url ) ) ? true : false;
		} else {
			return false;
		}
	}

	public static function validate_condition_product_shipping_class( array $settings ) {
		$wcProduct = wc_get_product( self::$post_id );

		if ( $wcProduct == false ) {
			return false;
		}

		$shippingClass = $wcProduct->get_shipping_class();

		return self::validate(
			[
				'operator'      => isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'is',
				'saved_value'   => isset( $settings[ 'value' ] ) ? $settings[ 'value' ] : '',
				'current_value' => $shippingClass,
			]
		);
	}

	public static function validate_product_attribute( array $settings ) {
		$wcProduct = wc_get_product( self::$post_id );

		if ( $wcProduct == false ) {
			return false;
		}

		return self::validate(
			[
				'operator'      => isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'include',
				'saved_value'   => isset( $settings[ 'value' ] ) ? $settings[ 'value' ] : '',
				'current_value' => array_keys( $wcProduct->get_attributes() )
			]
		);
	}

	public static function validate_post_type( array $settings ) {
		$post = get_post( self::$post_id );

		if( ! is_object( $post ) )
			return false;

		$operator = isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'is';
		$value = isset( $settings[ 'value' ] ) ? $settings[ 'value' ] : 'post';

		if( in_array( $operator, [ 'in', 'not_in'] ) ) {
			$value = explode( ',', $value );
		}

		return self::validate(
			[
				'operator'      => $operator,
				'saved_value'   => $post->post_type,
				'current_value' => $value
			]
		);
	}

	public static function validate_post_in_terms( array $settings ) {
		$post = get_post( self::$post_id );

		if( ! is_object( $post ) )
			return false;

		$operator = isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'in';
		$value = isset( $settings[ 'value' ] ) ? $settings[ 'value' ] : false;

		if( $value === false ) {
			return false;
		}

		$arrays = explode( ':', $value );
		if( $arrays ) {
			$taxonomy = $arrays[0];
			$terms = array_map( 'intval', explode( ",", $arrays[1] ) );
			$post_terms = wp_get_post_terms( self::$post_id, $taxonomy, array( 'fields' => 'ids' ) );

			if( $operator == 'in' && array_intersect( $terms, $post_terms ) ) {
				return true;
			}

			if( $operator == 'not_in' && ! array_intersect( $terms, $post_terms ) ) {
				return true;
			}
		}

		return false;
	}

	public static function validate_post_has_terms( array $settings ) {
		$operator = isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'is';
		$value = isset( $settings[ 'value' ] ) ? $settings[ 'value' ] : '';

		if( empty( $value) )
			return;

		$arrays = explode( ':', $value );
		if( $arrays ) {
			$taxonomy = $arrays[1];
			$terms = explode( ",", $arrays[0] );

			if( $operator == 'is' && has_terms( $terms, $taxonomy ) ) {
				return true;
			}

			if( $operator == 'is_not' && ! has_terms( $terms, $taxonomy ) ) {
				return true;
			}
		}

		return false;
	}

	public static function validate_wp_template( array $settings ) {
		if ( empty( $settings['value'] ) ) {
			return false;
		}

		$current_value = null;

		switch ( $settings['value'] ) {
			case 'is_404':
				$current_value = is_404();
				break;
			case 'is_front_page':
				$current_value = ( ! is_home() && is_front_page() );
				break;
			case 'is_home':
				$current_value = ( ! is_front_page() && is_home() );
				break;
			case 'is_single':
				$current_value = is_single();
				break;
			case 'is_sticky':
				$current_value = ( is_single() && is_sticky( self::$post_id ) );
				break;
			case 'is_post_type_archive':
				$current_value = is_post_type_archive();
				break;
			case 'has_comments_open':
				$current_value = ( is_single() && comments_open() );
				break;
			case 'has_pings_open':
				$current_value = ( is_single() && pings_open() );
				break;
			case 'is_page':
				$current_value = is_page();
				break;
			case 'is_page_template':
				$current_value = is_page_template();
				break;
			case 'is_category':
				$current_value = is_category();
				break;
			case 'is_tag':
				$current_value = is_tag();
				break;
			case 'is_tax':
				$current_value = is_tax();
				break;
			case 'is_author':
				$current_value = is_author();
				break;
			case 'is_date':
				$current_value = is_date();
				break;
			case 'is_archive':
				$current_value = is_archive();
				break;
			case 'is_search':
				$current_value = is_search();
				break;
			case 'is_paged':
				$current_value = is_paged();
				break;
			case 'is_singular':
				$current_value = is_singular();
				break;
		}

		if ( is_null( $current_value ) ) {
			return false;
		}

		return self::validate(
			[
				'operator'      => isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'is',
				'saved_value'   => true,
				'current_value' => $current_value,
			]
		);
	}

	public static function validate_post_comment_number( array $settings ) {
		$post = get_post( self::$post_id );

		if( ! is_object( $post ) )
			return false;

		if ( $post ) {
			return self::validate(
				[
					'operator'      => isset( $settings[ 'compare' ] ) ? $settings[ 'compare' ] : 'equals',
					'saved_value'   => isset( $settings['value'] ) ? intval( $settings['value'] ) : false,
					'current_value' => get_comments_number( $post ),
				]
			);
		}

		return false;
	}

	public function check_conditions( $passed, $instance ) {

		if( \BricksUltimate\Helpers::isBricksBuilderActive() ) {
			return true;
		}

		self::$post_id = $instance->post_id;

		if( empty( $instance->settings['_conditions'] ) )
			return $passed;

		$conditions = $instance->settings['_conditions'];
		foreach ( $conditions as $condition ) {
			foreach ( $condition as $condition ) {
				if ( ! $passed ) {
					continue;
				}

				$callback = isset( $condition['key'] ) ? $this->get_callback( $condition['key'] ) : false;

				if ( is_callable( $callback ) ) {
					$passed = call_user_func( $callback, $condition );
				}
			}
		}

		return $passed;
	}

	public function get_callback( $key ) {
		return isset( \Bricks\Conditions::$conditions[ $key ]['callback'][1] ) ? \Bricks\Conditions::$conditions[ $key ]['callback'] : false;
	}

	public static function validate( $config ) {
		$operator      = $config['operator'];
		$saved_value   = $config['saved_value'];
		$current_value = $config['current_value'];

		switch ( $operator ) {
			case 'is_set':
			case 'is_not_empty':
				return ! empty( $current_value );
			case 'is_not_set':
			case 'is_empty':
				return empty( $current_value );
			case 'equals':
			case 'is':
				return $current_value === $saved_value;
			case 'not_equals':
			case 'is_not':
				return $current_value !== $saved_value;
			case 'greater':
				return intval( $current_value ) > intval( $saved_value );
			case 'lower':
				return intval( $current_value ) < intval( $saved_value );
			case 'greater_or_equal':
				return intval( $current_value ) >= intval( $saved_value );
			case 'lower_or_equal':
				return intval( $current_value ) <= intval( $saved_value );
			case 'starts_with':
				return substr( $current_value, 0, strlen( $saved_value ) ) === $saved_value;
			case 'ends_with':
				$string_length = strlen( $saved_value );

				return $string_length === 0 || substr( $current_value, - $string_length ) === $saved_value;
			case 'contains':
				return strstr( $current_value, $saved_value );
			case 'does_not_contain':
				return ! strstr( $current_value, $saved_value );
			case 'include':
			case 'in':
				return in_array( $saved_value, $current_value );
			case 'does_not_include':
			case 'not_in':
				return ! in_array( $saved_value, $current_value );
		}

		return false;
	}
}