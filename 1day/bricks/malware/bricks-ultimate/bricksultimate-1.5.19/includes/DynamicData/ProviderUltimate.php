<?php
namespace BricksUltimate\DynamicData;

if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

class ProviderUltimate extends \Bricks\Integrations\Dynamic_Data\Providers\Base {

	public function register_tags() {
		$tags = $this->get_tags_config();

		foreach ( $tags as $key => $tag ) {
			$this->tags[ $key ] = [
				'name'     => '{' . $key . '}',
				'label'    => $tag['label'],
				'group'    => $tag['group'],
				'provider' => $this->name
			];

			if ( ! empty( $tag['deprecated'] ) ) {
				$this->tags[ $key ]['deprecated'] = $tag['deprecated'];
			}

			if ( ! empty( $tag['render'] ) ) {
				$this->tags[ $key ]['render'] = $tag['render'];
			}
		}
	}

	public function get_tags_config() {
		$tags = [
			'loop_counter' => [
				'label' => esc_html__('Loop counter', 'bricksultimate'),
				'group' => 'post'
			],
			'parent_title' => [
				'label' => esc_html__('Parent title', 'bricksultimate'),
				'group' => 'post'
			],
			'parent_post_url' => [
				'label' => esc_html__('Parent post url', 'bricksultimate'),
				'group' => 'post'
			],
			'bu_post_title' => [
				'label' => esc_html__('Post title(BU)', 'bricksultimate'),
				'group' => 'post'
			],
			'post_permalink' => [
				'label' => esc_html__('Permalink', 'bricksultimate'),
				'group' => 'post'
			],
			'post_class' => [
				'label' => esc_html__('Post class', 'bricksultimate'),
				'group' => 'post'
			],
			'post_year' => [
				'label' => esc_html__('Post year(loop)', 'bricksultimate'),
				'group' => 'post'
			],
			'bu_post_id' => [
				'label' => esc_html__('Post ID(BU)', 'bricksultimate'),
				'group' => 'post'
			],
			'term_posts_count' => [
				'label' => esc_html__('Term - Total posts', 'bricksultimate'),
				'group' => 'terms'
			],
			'term_parent_id' => [
				'label' => esc_html__('Parent', 'bricksultimate'),
				'group' => 'terms'
			],
			'term_has_children' => [
				'label' => esc_html__('Has children', 'bricksultimate'),
				'group' => 'terms'
			],
			'img_html' => [
				'label' => esc_html__('Image with IMG Tag', 'bricksultimate'),
				'group' => esc_html__( 'WP Media', 'bricks' ),
			],
			'image_id' => [
				'label' => esc_html__('ID', 'bricksultimate'),
				'group' => esc_html__( 'WP Media', 'bricks' ),
			],
			'image_url' => [
				'label' => esc_html__('Src', 'bricksultimate'),
				'group' => esc_html__( 'WP Media', 'bricks' ),
			],
			'image_title' => [
				'label' => esc_html__('Title', 'bricksultimate'),
				'group' => esc_html__( 'WP Media', 'bricks' ),
			],
			'image_alt' => [
				'label' => esc_html__('Alt', 'bricksultimate'),
				'group' => esc_html__( 'WP Media', 'bricks' ),
			],
			'image_caption' => [
				'label' => esc_html__('Caption', 'bricksultimate'),
				'group' => esc_html__( 'WP Media', 'bricks' ),
			],
			'image_description' => [
				'label' => esc_html__('Description', 'bricksultimate'),
				'group' => esc_html__( 'WP Media', 'bricks' ),
			],
			'menu_item_id' => [
				'label' => esc_html__('ID', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_title' => [
				'label' => esc_html__('Title', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_attr_title' => [
				'label' => esc_html__('Title Attribute', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_description' => [
				'label' => esc_html__('Description', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_url' => [
				'label' => esc_html__('Url', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_classes' => [
				'label' => esc_html__('CSS Classes', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_has_sub_item' => [
				'label' => esc_html__('Has sub menu item?', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_parent_id' => [
				'label' => esc_html__('Parent item ID', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_type' => [
				'label' => esc_html__('Type', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_object' => [
				'label' => esc_html__('Object', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_object_id' => [
				'label' => esc_html__('Object ID', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_link_type' => [
				'label' => esc_html__('Item link type', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'menu_item_dropdown_content' => [
				'label' => esc_html__('Dropdown content', 'bricksultimate'),
				'group' => esc_html__( 'WP Menu', 'bricks' ),
			],
			'acf_checkbox_value' => [
				'label' => esc_html__('ACF Checkbox Value', 'bricksultimate'),
				'group' => esc_html__( 'ACF', 'bricks' ),
			],
			'acf_checkbox_label' => [
				'label' => esc_html__('ACF Checkbox Label', 'bricksultimate'),
				'group' => esc_html__( 'ACF', 'bricks' ),
			],
			'mb_checkbox_list_value' => [
				'label' => esc_html__('Checkbox List Value', 'bricksultimate'),
				'group' => esc_html__( 'Metabox', 'bricks' ),
			],
			'mb_checkbox_list_label' => [
				'label' => esc_html__('Checkbox List Label', 'bricksultimate'),
				'group' => esc_html__( 'Metabox', 'bricks' ),
			]
		];

		//* WooCommerce tags
		if( class_exists('WooCommerce') ) {
			$tags['bu_product_type'] = [
				'label' => esc_html__( 'Product Type', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['bu_product_stock_quantity'] = [
				'label' => esc_html__( 'Stock quantity', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['bu_product_description'] = [
				'label' => esc_html__( 'Description', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['bu_product_excerpt'] = [
				'label' => esc_html__( 'Short description', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['bu_add_to_cart_url'] = [
				'label' => esc_html__( 'Add to cart url', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['bu_product_weight'] = [
				'label' => esc_html__( 'Weight', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['bu_product_dimensions'] = [
				'label' => esc_html__( 'Dimensions', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['bu_product_atts'] = [
				'label' => esc_html__( 'Attributes', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['product_total_reviews'] = [
				'label' => esc_html__( 'Total reviews', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['product_average_ratings'] = [
				'label' => esc_html__( 'Average ratings(out of 5)', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['product_gallery_imgs'] = [
				'label' => esc_html__( 'Limit of Product Gallery Images', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['sale_start_date'] = [
				'label' => esc_html__( 'Sale Start Date', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['sale_end_date'] = [
				'label' => esc_html__( 'Sale End Date', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['product_total_sales'] = [
				'label' => esc_html__( 'Total sales', 'bricksultimate'),
				'group' => esc_html__( 'Product', 'woocommerce' ),
			];

			$tags['cart_counter'] = [
				'label' => esc_html__( 'Cart Counter', 'bricksultimate'),
				'group' => esc_html__( 'WooCommerce', 'woocommerce' ),
			];

			$tags['cart_item_quantity'] = [
				'label' => esc_html__( 'Cart Item Quantity', 'bricksultimate'),
				'group' => esc_html__( 'WooCommerce', 'woocommerce' ),
			];

			$tags['cart_item_subtotal'] = [
				'label' => esc_html__( 'Cart Item Sub Total', 'bricksultimate'),
				'group' => esc_html__( 'WooCommerce', 'woocommerce' ),
			];

			$tags['cart_contents_subtotal'] = [
				'label' => esc_html__( 'Cart Contents Sub Total', 'bricksultimate'),
				'group' => esc_html__( 'WooCommerce', 'woocommerce' ),
			];

			$tags['cart_contents_total'] = [
				'label' => esc_html__( 'Cart Contents Total Price', 'bricksultimate'),
				'group' => esc_html__( 'WooCommerce', 'woocommerce' ),
			];

			$tags['fsn_min_amount'] = [
				'label' => esc_html__( 'Free Shipping Amount', 'bricksultimate'),
				'group' => esc_html__( 'WooCommerce', 'woocommerce' ),
			];

			$tags['fsn_updated_amount'] = [
				'label' => esc_html__( 'Free Shipping Updated Amount', 'bricksultimate'),
				'group' => esc_html__( 'WooCommerce', 'woocommerce' ),
			];

			$tags['bu_shipping_class'] = [
				'label' => esc_html__( 'Shipping Class', 'woocommerce' ),
				'group' => esc_html__( 'WooCommerce', 'woocommerce' ),
			];

			$tags['customer_total_orders'] = [
				'label' => esc_html__( 'Customer total orders', 'bricksultimate'),
				'group' => esc_html__( 'WooCommerce', 'woocommerce' ),
			];

			$tags['customer_total_spent'] = [
				'label' => esc_html__( 'Customer total spent', 'bricksultimate'),
				'group' => esc_html__( 'WooCommerce', 'woocommerce' ),
			];

			$group = esc_html__( 'Woo Coupons', 'bricksultimate' );

			$tags['bu_coupon_code'] = [
				'label' => esc_html__( 'Code', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_description'] = [
				'label' => esc_html__( 'Description', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_discount_amount'] = [
				'label' => esc_html__( 'Discount amount', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_discount_type'] = [
				'label' => esc_html__( 'Discount type', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_created'] = [
				'label' => esc_html__( 'Created time', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_modified_date'] = [
				'label' => esc_html__( 'Modified time', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_expiry_date'] = [
				'label' => esc_html__( 'Expiry date', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_usage_count'] = [
				'label' => esc_html__( 'Usage count', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_usage_limit'] = [
				'label' => esc_html__( 'Usage limit', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_usage_limit_per_customer'] = [
				'label' => esc_html__( 'Usage limit per customer', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_grants_free_shipping'] = [
				'label' => esc_html__( 'Grants free shipping', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_minimum_spend_amount'] = [
				'label' => esc_html__( 'Minimum spend amount', 'bricksultimate'),
				'group' => $group
			];

			$tags['bu_coupon_maximum_spend_amount'] = [
				'label' => esc_html__( 'Maximum spend amount', 'bricksultimate'),
				'group' => $group
			];

			$group = esc_html__( 'Woo Order Details', 'bricksultimate' );

			$tags['bu_cust_order_id'] = [
				'label' => esc_html__( 'Order number', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_order_key'] = [
				'label' => esc_html__( 'Order key', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_view_order_url'] = [
				'label' => esc_html__( 'View order url', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_pay_order_url'] = [
				'label' => esc_html__( 'Pay order url', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cancel_order_url'] = [
				'label' => esc_html__( 'Cancel order url', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_order_date'] = [
				'label' => esc_html__( 'Order date', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_order_status'] = [
				'label' => esc_html__( 'Order status', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_order_item_count'] = [
				'label' => esc_html__( 'Total items bought', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_order_item_subtotal'] = [
				'label' => esc_html__( 'Sub total price', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_order_total_price'] = [
				'label' => esc_html__( 'Total price', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_order_prev_link'] = [
				'label' => esc_html__( 'Previous link', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_order_next_link'] = [
				'label' => esc_html__( 'Next link', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_id'] = [
				'label' => esc_html__( 'Customer id', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_order_payment_method'] = [
				'label' => esc_html__( 'Payment method', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_order_payment_method_title'] = [
				'label' => esc_html__( 'Payment method title', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_order_customer_note'] = [
				'label' => esc_html__( 'Customer note', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_order_item_name'] = [
				'label' => esc_html__( 'Ordered product name', 'bricksultimate'),
				'group' => $group,
			];
			
			$tags['bu_order_item_quantity'] = [
				'label' => esc_html__( 'Ordered product quantity', 'bricksultimate'),
				'group' => $group,
			];
			
			$tags['bu_order_item_price'] = [
				'label' => esc_html__( 'Ordered product price', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_billing_first_name'] = [
				'label' => esc_html__( 'Billing first name', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_billing_last_name'] = [
				'label' => esc_html__( 'Billing last name', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_billing_email'] = [
				'label' => esc_html__( 'Billing email', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_billing_phone'] = [
				'label' => esc_html__( 'Billing phone', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_billing_company'] = [
				'label' => esc_html__( 'Billing company', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_billing_address_1'] = [
				'label' => esc_html__( 'Billing address 1', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_billing_address_2'] = [
				'label' => esc_html__( 'Billing address 2', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_billing_city'] = [
				'label' => esc_html__( 'Billing city', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_billing_state'] = [
				'label' => esc_html__( 'Billing state', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_billing_postcode'] = [
				'label' => esc_html__( 'Billing postcode', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_billing_country'] = [
				'label' => esc_html__( 'Billing country', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_shipping_first_name'] = [
				'label' => esc_html__( 'Shipping first name', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_shipping_last_name'] = [
				'label' => esc_html__( 'Shipping last name', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_shipping_phone'] = [
				'label' => esc_html__( 'Shipping phone', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_shipping_company'] = [
				'label' => esc_html__( 'Shipping company', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_shipping_address_1'] = [
				'label' => esc_html__( 'Shipping address 1', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_shipping_address_2'] = [
				'label' => esc_html__( 'Shipping address 2', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_shipping_city'] = [
				'label' => esc_html__( 'Shipping city', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_shipping_state'] = [
				'label' => esc_html__( 'Shipping state', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_shipping_postcode'] = [
				'label' => esc_html__( 'Shipping postcode', 'bricksultimate'),
				'group' => $group,
			];

			$tags['bu_cust_shipping_country'] = [
				'label' => esc_html__( 'Shipping country', 'bricksultimate'),
				'group' => $group,
			];
		}

		return $tags;
	}

	/**
	 * Main function to render the tag value for WordPress provider
	 *
	 * @param [type] $tag
	 * @param [type] $post
	 * @param [type] $args
	 * @param [type] $context
	 * @return void
	 */
	public function get_tag_value( $tag, $post, $args, $context ) {
		// STEP: Check for filter args
		$filters = $this->get_filters_from_args( $args );

		// STEP: Get the value
		$value = '';

		$render = isset( $this->tags[ $tag ]['render'] ) ? $this->tags[ $tag ]['render'] : $tag;
		$object = self::getQueryObject();
		$post_id = ( is_object( $object ) && isset( $object->ID ) ) ? $object->ID : ( isset( $post->ID ) ? $post->ID : get_the_ID() );
		$product = false;
		if( class_exists('WooCommerce') && $post_id > 0 ) {
			$product = wc_get_product( $post_id );
		}

		switch ( $render ) {
			case 'loop_counter' :
				if( $object ) {
					$value = ( \Bricks\Query::get_loop_index() + 1 );
				}

				break;

			case 'parent_title' :
				if( isset( $post->post_parent ) && $post->post_parent > 0 ) {
					$value = get_post_field( 'post_title', $post->post_parent );
				}
				break;
				
			case 'bu_post_title' :
				$value = get_the_title( $post_id );
				break;

			case 'post_permalink' :
				$value = get_permalink( $post_id );
				break;

			case 'parent_post_url' :
				if( isset( $post->post_parent ) && $post->post_parent > 0 ) {
					$parent = get_post( $post->post_parent );
					$value = get_permalink( $parent );
				}
				break;

			case 'post_class' :
				$value = esc_attr( implode( ' ', ( ($product === false ) ? get_post_class() : wc_get_product_class() )  ) ) ;
				break;

			case 'post_year' :
				$value = $object ?? '';
				break;

			case 'bu_post_id':
			case 'image_id':
				$value = $post_id;
				break;

			case 'img_html':
				$filters['object_type'] = 'media';
				$filters['image']       = 'true';
				$value = $post->ID;
				break;

			case 'image_url':
				$image_size = isset( $filters['meta_key'] ) ? $filters['meta_key'] : 'full';
				$value = esc_url( wp_get_attachment_image_url( $post_id, $image_size ) );
				break;

			case 'image_title':
				$value = get_post($post_id)->post_title;

				if( empty( $value ) && has_post_thumbnail( $post_id ) ) {
					$post_id = get_post_thumbnail_id( $post_id );
					$value = get_post($post_id)->post_title;
				}
				break;

			case 'image_caption': 
				$value = get_post($post_id)->post_excerpt;
				if( empty( $value ) && has_post_thumbnail( $post_id ) ) {
					$post_id = get_post_thumbnail_id( $post_id );
					$value = get_post($post_id)->post_excerpt;
				}
				break;
				
			case 'image_description':
				$value = get_post($post_id)->post_content; 
				if( empty( $value ) && has_post_thumbnail( $post_id ) ) {
					$post_id = get_post_thumbnail_id( $post_id );
					$value = get_post($post_id)->post_content;
				}
				break;

			case 'image_alt':
				$value = get_post_meta( $post_id, '_wp_attachment_image_alt', true );
				
				if( empty( $value ) && has_post_thumbnail( $post_id ) ) {
					$post_id = get_post_thumbnail_id( $post_id );
					$value = get_post_meta( $post_id, '_wp_attachment_image_alt', true );
				}
				
				break;

			case 'menu_item_id':
				if( $object != false ) {
					$context = 'integer';
					$value = $object->ID;
				}
				break;

			case 'menu_item_parent_id':
				if( $object != false ) {
					$context = 'integer';
					$value = (int) get_post_meta( $object->db_id, '_menu_item_menu_item_parent', true );
				}
				break;

			case 'menu_item_link_type':
				if( $object != false ) {
					$value = get_post_meta( $object->db_id, '_menu_item_bb_link_type', true );
				}
				break;

			case 'menu_item_dropdown_content':
				if( $object != false ) {
					$context = 'integer';
					$value = (int) get_post_meta( $object->db_id, '_bricks_mega_menu_template_id', true );
				}
				break;

			case 'menu_item_title':
				if( $object != false ) {
					$value = $object->title;
				}
				break;

			case 'menu_item_attr_title':
				if( $object != false ) {
					$value = esc_attr( $object->attr_title );
				}
				break;

			case 'menu_item_description':
				if( $object != false ) {
					$value = $object->description;
				}
				break;

			case 'menu_item_url':
				if( $object != false ) {
					$value = esc_url( $object->url );
				}
				break;

			case 'menu_item_classes':
				if( $object != false ) {
					$args = apply_filters( 'nav_menu_item_args', [], $object, 0 );
					$classes   = empty( $object->classes ) ? array() : (array) $object->classes;
					$classes[] = 'menu-item-' . $object->ID;

					$class_names = implode( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $object, null, 0 ) );
					$value = esc_attr( $class_names );
				}
				break;

			case 'menu_item_has_sub_item':
				if( $object != false ) {
					$value = in_array( 'menu-item-has-children', (array) $object->classes );
				}
				break;

			case 'menu_item_type':
				if( $object != false ) {
					$value = get_post_meta( $object->db_id, '_menu_item_type', true );
				}
				break;

			case 'menu_item_object':
				if( $object != false ) {
					$value = get_post_meta( $object->db_id, '_menu_item_object', true );
				}
				break;

			case 'menu_item_object_id':
				if( $object != false ) {
					$value = (int) get_post_meta( $object->db_id, '_menu_item_object_id', true );
				}
				break;

			case 'acf_checkbox_value':
				if( $object != false ) {
					$value = isset( $object['value'] ) ? $object['value'] : $object;
				}
				break;

			case 'acf_checkbox_label':
				if( $object != false ) {
					$value = isset( $object['label'] ) ? $object['label'] : $object;
				}
				break;

			case 'mb_checkbox_list_value':
				if( $object != false ) {
					$value = explode( '||', $object )[0];
				}
				break;

			case 'mb_checkbox_list_label':
				if( $object != false ) {
					$cblValues = explode( '||', $object );
					$cblValue = $cblValues[0];
					$field = rwmb_get_field_settings($cblValues[1]);
					$value = isset( $field['options'][$cblValue] ) ? $field['options'][$cblValue] : '';
				}
				break;

			case 'term_posts_count':
				// Is tax archive?
				if ( empty( $object ) && is_tax() ) {
					$object = get_queried_object();
				}
				
				$value = $object->count;

				break;

			case 'term_parent_id':
				// Is tax archive?
				if ( empty( $object ) && is_tax() ) {
					$object = get_queried_object();
				}
				
				$value = isset( $object->parent ) ? $object->parent : 0;
				break;

			case 'term_has_children':
				if ( empty( $object ) && is_tax() ) {
					$object = get_queried_object();
				}

				if ( $object && is_a( $object, 'WP_Term' ) ) {
					$taxonomy = ! empty( $filters['meta_key'] ) ? $filters['meta_key'] : $object->taxonomy;
					$value = get_term_children( $object->term_id, $taxonomy ) ? true : false;
				}

				break;

			case 'sale_start_date' :
				$wp_timezone = wp_timezone();
				$time = false;
				if( $product !== false ) {
					$time = wc_rest_prepare_date_response( $product->get_date_on_sale_from(), false );
				}

				if( $time ) {
					$filters['object_type'] = 'date';
					$datetime = date_create_immutable_from_format( 'Y-m-d H:i:s', str_replace( 'T', ' ', $time ), $wp_timezone );
					$datetime->setTimezone( $wp_timezone );

					$value = $datetime->getTimestamp() + $datetime->getOffset();
				}
				
				break;

			case 'sale_end_date' :
				$wp_timezone = wp_timezone();
				$time = false;
				if( $product !== false ) {
					$time = wc_rest_prepare_date_response( $product->get_date_on_sale_to(), false );
				}

				if( $time ) {
					$filters['object_type'] = 'date';
					$datetime = date_create_immutable_from_format( 'Y-m-d H:i:s', str_replace( 'T', ' ', $time ), $wp_timezone );
					$datetime->setTimezone( $wp_timezone );

					$value = $datetime->getTimestamp() + $datetime->getOffset();
				}
				
				break;

			case 'product_total_sales' :
				$value = get_post_meta( $post->ID, 'total_sales', true ) ? get_post_meta( $post->ID, 'total_sales', true ) : 0;

				break;

			case 'bu_add_to_cart_url' :
				if( $product !== false ) {
					$value = esc_url( $product->add_to_cart_url() );
				}

				break;

			case 'bu_product_type' :
				if( $product !== false ) {
					$value = $product->get_type();
				}
				break;

			case 'bu_product_stock_quantity' :
				if( $product !== false ) {
					$value = $product->get_stock_quantity();
				}
				break;

			case 'product_average_ratings' :
				if( $product !== false ) {
					$value = wc_format_decimal( $product->get_average_rating(), 2 );
				}
				break;

			case 'product_total_reviews' :
				if( $product !== false ) {
					$value = $product->get_review_count();
				}
				break;

			case 'bu_product_description': 
				if( $product !== false ) {
					$value = $product->get_description();
				}
				break;

			case 'product_gallery_imgs' :
				if( $product !== false ) {
					$gallery_image_ids = $product->get_gallery_image_ids();
					$get_variations = count( $product->get_children() ) <= apply_filters( 'woocommerce_ajax_variation_threshold', 30, $product );
					if( $get_variations && $product->get_type() == 'variable') {
						$available_variations = $product->get_available_variations();
						foreach ($available_variations as $key => $variation) {
							$gallery_image_ids[] = $variation['image_id'];
						}
					}
					$image_ids = array_unique( $gallery_image_ids );
					$value = count( $image_ids );
				}
				break;

			case 'bu_product_excerpt': 
				if( $product !== false ) {
					$value = $product->get_short_description();
				}
				break;

			case 'bu_product_atts': 
				if( $product !== false ) {
					// Add product attributes to list.
					$attributes = array_filter( $product->get_attributes(), 'wc_attributes_array_filter_visible' );
					$product_attributes = array();

					foreach ( $attributes as $attribute ) {
						$values = array();

						if ( $attribute->is_taxonomy() ) {
							$attribute_taxonomy = $attribute->get_taxonomy_object();
							$attribute_values   = wc_get_product_terms( $product->get_id(), $attribute->get_name(), array( 'fields' => 'all' ) );

							foreach ( $attribute_values as $attribute_value ) {
								$value_name = esc_html( $attribute_value->name );

								if ( $attribute_taxonomy->attribute_public ) {
									$values[] = '<a href="' . esc_url( get_term_link( $attribute_value->term_id, $attribute->get_name() ) ) . '" rel="tag">' . $value_name . '</a>';
								} else {
									$values[] = $value_name;
								}
							}
						} else {
							$values = $attribute->get_options();

							foreach ( $values as &$value ) {
								$value = make_clickable( esc_html( $value ) );
							}
						}

						$product_attributes[ 'attribute_' . sanitize_title_with_dashes( $attribute->get_name() ) ] = array(
							'label' => wc_attribute_label( $attribute->get_name() ),
							'value' => apply_filters( 'woocommerce_attribute', wpautop( wptexturize( implode( ', ', $values ) ) ), $attribute, $values ),
						);
					}

					$product_attributes = apply_filters( 'woocommerce_display_product_attributes', $product_attributes, $product );

					ob_start();
					wc_get_template(
						'single-product/product-attributes.php',
						array(
							'product_attributes' => $product_attributes,
							// Legacy params.
							'product'            => $product,
							'attributes'         => $attributes,
							'display_dimensions' => false,
						)
					);
					$value = ob_get_clean();
				}
				break;

			case 'bu_product_dimensions': 
				if( $product !== false && $product->has_dimensions() ) {
					$value = wc_format_dimensions( $product->get_dimensions( false ) );
				}
				break;

			case 'bu_product_weight': 
				if( $product !== false && $product->has_weight() ) {
					$value = wc_format_weight( $product->get_weight() );
				}
				break;

			case "cart_counter":
				$items = is_object( WC()->cart ) ? WC()->cart->get_cart_contents_count() : 0;
				$value = sprintf( "<span class=\"bu-cart-counter\">%s</span>", $items );
				break;

			case 'cart_item_quantity':
				if( is_object( $object ) && ! is_null( WC()->cart ) && ! WC()->cart->is_empty() ) {
					foreach ( WC()->cart->get_cart() as $cart_item_key => $cart_item ) {
						if( $cart_item['product_id'] == $object->ID || $cart_item['variation_id'] == $object->ID ) {
							$value = $cart_item['quantity'];
							break;
						}
					}
				}
				break;

			case "cart_contents_subtotal":
				$value = sprintf( "<span class=\"bu-cart-subtotal\">%s</span>", \BricksUltimate\WooCommerce::calculate_cart_subtotal() );
				break;

			case "cart_contents_total":
				$value = sprintf( "<span class=\"bu-cart-total\">%s</span>", \BricksUltimate\WooCommerce::calculate_cart_total() );
				break;

			case "fsn_min_amount":
				$value = wc_price( \BricksUltimate\WooCommerce::freeShippingMinAmount() );
				break;

			case "fsn_updated_amount":
				$value = sprintf( "<span class=\"fsn-updated-price\">%s</span>", wc_price( \BricksUltimate\WooCommerce::freeShippingUpdatedAmount() ) );
				break;

			case 'bu_shipping_class': 
				if( $product !== false ) {
					$value = $product->get_shipping_class();
				}
				break;

			case 'cart_item_subtotal':
				if( is_object( $object ) && ! is_null( WC()->cart ) && ! WC()->cart->is_empty() ) {
					foreach ( WC()->cart->get_cart() as $cart_item_key => $cart_item ) {
						if( $cart_item['product_id'] == $object->ID || $cart_item['variation_id'] == $object->ID ) {
							$price = ( WC()->cart->display_prices_including_tax() ) ? wc_get_price_including_tax( $cart_item['data'] ) : wc_get_price_excluding_tax( $cart_item['data'] );
							$value = wc_price( $cart_item['quantity'] * $price );
							break;
						}
					}
				}

				break;

			case 'customer_total_orders':
				$userID = ( is_user_logged_in() ? wp_get_current_user()->ID : false );
				if( $userID !== false ) {
					$args   = [
						'customer_id' => $userID,
					];
					$orders = wc_get_orders( $args );
					$value = count( $orders );
				}
				break; 

			case 'customer_total_spent':
				$userID = ( is_user_logged_in() ? wp_get_current_user()->ID : false );
				if( $userID !== false ) {
					$args   = [
						'customer_id' => $userID,
					];
					$orders = wc_get_orders( $args );
					if( $orders ) {
						$value = array_reduce( $orders, function ( $total, $order ) {
								$total += (float) $order->get_total();

								return $total;
							}, 0.0 );
					}
				}
				break;

			case 'bu_coupon_code':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$value = $coupon->get_code();
					}
				}
				break;

			case 'bu_coupon_description':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$value = $coupon->get_description();
					}
				}
				break;

			case 'bu_coupon_discount_type':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$value = wc_get_coupon_type( $coupon->get_discount_type() );
					}
				}
				break;

			case 'bu_coupon_created':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$filters['meta_key'] = isset( $filters['meta_key'] ) ? $filters['meta_key'] : get_option( 'date_format' );
						$value = $coupon->get_date_created()->date_i18n( $filters['meta_key'] );
					}
				}
				break;

			case 'bu_coupon_modified_date':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$filters['meta_key'] = isset( $filters['meta_key'] ) ? $filters['meta_key'] : get_option( 'date_format' );
						$value = $coupon->get_date_modified()->date_i18n( $filters['meta_key'] );
					}
				}
				break;

			case 'bu_coupon_expiry_date':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$filters['meta_key'] = isset( $filters['meta_key'] ) ? $filters['meta_key'] : get_option( 'date_format' );
						$value = $coupon->get_date_expires() ? $coupon->get_date_expires()->date_i18n( $filters['meta_key'] ) : '';
					}
				}
				break;

			case 'bu_coupon_discount_amount':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$type = $coupon->get_discount_type();
						$amount = $coupon->get_amount();
						$value = ($type == "percent") ? $amount . '%' : wc_price( $amount );
					}
				}
				break;

			case 'bu_coupon_usage_count':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$value = $coupon->get_usage_count();
					}
				}
				break;

			case 'bu_coupon_usage_limit':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$value = $coupon->get_usage_limit();
					}
				}
				break;

			case 'bu_coupon_usage_limit_per_customer':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$value = $coupon->get_usage_limit_per_user();
					}
				}
				break;

			case 'bu_coupon_grants_free_shipping':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$value = $coupon->get_free_shipping();
					}
				}
				break;

			case 'bu_coupon_minimum_spend_amount':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$value = isset( $filters['value'] ) ? $coupon->get_minimum_amount() : wc_price( $coupon->get_minimum_amount() );
					}
				}
				break;

			case 'bu_coupon_maximum_spend_amount':
				if( $object ) {
					$coupon = new \WC_Coupon( $object->ID );
					if ( is_object( $coupon ) ) {
						$value = isset( $filters['value'] ) ? $coupon->get_maximum_amount() : wc_price( $coupon->get_maximum_amount() );
					}
				}
				break;

			case 'bu_cust_id':
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = $order->get_customer_id();
				}
				break;

			case 'bu_cust_order_id':
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = $order->get_order_number();
				}
				break;

			case 'bu_cust_order_key':
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = $order->get_order_key();
				}
				break;

			case 'bu_view_order_url':
				if( $object ) {
					$order = wc_get_order( $object->ID );
					if( $order ) {
						$value = esc_url( $order->get_view_order_url() );
					}
				}
				break;

			case 'bu_pay_order_url':
				if( $object ) {
					$order = wc_get_order( $object->ID );
					if( $order ) {
						$value = esc_url( $order->get_checkout_payment_url() );
					}
				}
				break;

			case 'bu_cancel_order_url':
				if( $object ) {
					$order = wc_get_order( $object->ID );
					if( $order ) {
						$value = esc_url( $order->get_cancel_order_url( \wc_get_page_permalink( 'myaccount' ) ) );
					}
				}
				break;

			case 'bu_cust_order_date':
				if( $object ) {
					$order = wc_get_order( $object->ID );
					if( $order ) {
						$meta_key = isset( $filters['meta_key'] ) ? $filters['meta_key'] : 'F jS, Y';
						$value = esc_html( $order->get_date_created()->date( $meta_key ) );
					}
				}
				break;

			case 'bu_cust_order_status':
				if( $object ) {
					$order = wc_get_order( $object->ID );
					if( $order ) {
						$value = isset( $filters['value'] ) ? 'wc-' . $order->get_status() : esc_html( wc_get_order_status_name( $order->get_status() ) );
					}
				}
				break;

			case 'bu_cust_order_item_count':
				if( $object ) {
					$order = wc_get_order( $object->ID );
					if( $order ) {
						$value = $order->get_item_count() - $order->get_item_count_refunded();
					}
				}
				break;

			case 'bu_cust_order_item_subtotal':
				if( $object ) {
					$order = self::getCustomerOrder();
					$subtotal = $order->get_subtotal_to_display( false, get_option( 'woocommerce_tax_display_cart' ) );
					if( $order && $subtotal ) {
						$value = $subtotal;
					}
				}
				break;

			case 'bu_cust_order_total_price':
				if( $object ) {
					$order = self::getCustomerOrder();
					if( $order ) {
						$value = $order->get_formatted_order_total( get_option( 'woocommerce_tax_display_cart' ) );
					}
				}
				break;

			case 'bu_cust_order_discount_price':
				if( $object ) {
					$order = self::getCustomerOrder();
					if( $order ) {
						$value = '-' . $order->get_discount_to_display( get_option( 'woocommerce_tax_display_cart' ) );
					}
				}
				break;

			case 'bu_cust_order_shipping_price':
				if( $object ) {
					$order = self::getCustomerOrder();
					if( $order ) {
						$value = $order->get_shipping_to_display( get_option( 'woocommerce_tax_display_cart' ) );
					}
				}
				break;

			case 'bu_cust_order_prev_link':
				global $wp;
				$current_page = isset( $wp->query_vars['orders'] ) && ! empty( $wp->query_vars['orders'] ) ? absint( $wp->query_vars['orders'] ) : 2;
				$value = esc_url( wc_get_endpoint_url( 'orders', $current_page - 1 ) );
				break;

			case 'bu_cust_order_next_link':
				global $wp;
				$current_page = isset( $wp->query_vars['orders'] ) && ! empty( $wp->query_vars['orders'] ) ? absint( $wp->query_vars['orders'] ) : 1;
				$value = esc_url( wc_get_endpoint_url( 'orders', $current_page + 1 ) );
				break;

			case 'bu_cust_order_payment_method':
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = $order->get_payment_method();
				}
				break;

			case 'bu_cust_order_payment_method_title':
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = $order->get_payment_method_title();
				}
				break;

			case 'bu_cust_order_customer_note':
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = wp_kses_post( nl2br( wptexturize( $order->get_customer_note() ) ) );
				}
				break;

			case 'bu_order_item_name':
				$item = self::getOrderItem();
				if( $item )
					$value = $item->get_name();
				break;
				
			case 'bu_order_item_quantity':
				$item = self::getOrderItem();
				$order = self::getCustomerOrder();
				if( $item && $order ) {
					$qty          = $item->get_quantity();
					$refunded_qty = $order->get_qty_refunded_for_item( $item->get_id() );

					if ( $refunded_qty ) {
						$qty_display = '<del>' . esc_html( $qty ) . '</del> <ins>' . esc_html( $qty - ( $refunded_qty * -1 ) ) . '</ins>';
					} else {
						$qty_display = esc_html( $qty );
					}
					
					$value = $qty_display;
				}
				break;
				
			case 'bu_order_item_price':
				$item = self::getOrderItem();
				$order = self::getCustomerOrder();
				if( $item && $order )
					$value = $order->get_formatted_line_subtotal( $item );
				break;

			case "bu_cust_billing_first_name" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_billing_first_name() );
				}
				break;

			case "bu_cust_billing_last_name" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_billing_last_name() );
				}
				break;

			case "bu_cust_billing_email" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_billing_email() );
				}
				break;

			case "bu_cust_billing_phone" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_billing_phone() );
				}
				break;

			case "bu_cust_billing_address_1" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_billing_address_1() );
				}
				break;

			case "bu_cust_billing_address_2" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_billing_address_2() );
				}
				break;

			case "bu_cust_billing_city" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_billing_city() );
				}
				break;

			case "bu_cust_billing_state" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_billing_state() );
				}
				break;

			case "bu_cust_billing_country" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_billing_country() );
				}
				break;

			case "bu_cust_billing_postcode" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_billing_postcode() );
				}
				break;

			case "bu_cust_billing_company" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_billing_company() );
				}
				break;

			case "bu_cust_shipping_first_name" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_shipping_first_name() );
				}
				break;

			case "bu_cust_shipping_last_name" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_shipping_last_name() );
				}
				break;

			case "bu_cust_shipping_phone" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_shipping_phone() );
				}
				break;

			case "bu_cust_shipping_address_1" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_shipping_address_1() );
				}
				break;

			case "bu_cust_shipping_address_2" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_shipping_address_2() );
				}
				break;

			case "bu_cust_shipping_city" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_shipping_city() );
				}
				break;

			case "bu_cust_shipping_state" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_shipping_state() );
				}
				break;

			case "bu_cust_shipping_country" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_shipping_country() );
				}
				break;

			case "bu_cust_shipping_postcode" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_shipping_postcode() );
				}
				break;

			case "bu_cust_shipping_company" :
				$order = self::getCustomerOrder();
				if( $order ) {
					$value = esc_html( $order->get_shipping_company() );
				}
				break;
		}

		// STEP: Apply context (text, link, image, media)
		$value = $this->format_value_for_context( $value, $tag, $post_id, $filters, $context );

		return $value;
	}

	public static function getQueryObject() {
		$looping_query_id = \Bricks\Query::is_any_looping();

		if ( ! empty( $looping_query_id ) ) {
			return \Bricks\Query::get_loop_object( $looping_query_id );
		}

		return false;
	}

	public static function getCustomerOrder() {
		global $wp;

		$loopObject = $order = false;
		$looping_query_id = \Bricks\Query::is_any_looping();

		if ( ! empty( $looping_query_id ) ) {
			$loopObject = \Bricks\Query::get_loop_object( $looping_query_id );
		}

		// Order pay
		if ( ! empty( get_query_var( 'order-pay' ) ) ) {
			$order_id  = absint( get_query_var( 'order-pay' ) );
			$order = wc_get_order( $order_id );
		} elseif ( ! empty( get_query_var( 'order-received' ) ) ) {
			$order_id = absint( get_query_var( 'order-received' ) );
			$order = wc_get_order( $order_id );
		} elseif( isset( $wp->query_vars['view-order'] ) ) {
			$order = wc_get_order( $wp->query_vars['view-order'] );
		} elseif( isset( $_GET['view_order'] ) ) {
			$order = wc_get_order( $_GET['view_order'] );
		} elseif( bricks_is_builder() || bricks_is_builder_iframe() || bricks_is_builder_call() ){
			$orders = wc_get_orders(
				[
					'limit' => 1,
				]
			);

			$order = $orders ? $orders[0] : false;
		} elseif( $loopObject ) {
			$order = wc_get_order( $loopObject->ID );
		} else {
			$order = false;
		}

		return $order;
	}

	public static function getOrderItem() {
		$item = false;
		$looping_query_id = \Bricks\Query::is_any_looping();

		if ( ! empty( $looping_query_id ) ) {
			$item = \Bricks\Query::get_loop_object( $looping_query_id );
		}
		
		return $item;
	}
}