<?php
namespace BricksUltimate\ElementConditions;

if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

class WpConditions extends Base {

	public function add_element_condition_group( $groups ) {
		$groups[] = [
			'name'  => 'buct',
			'label' => esc_html__( 'Conditional Tags - BU', 'bricksultimate' ),
		];

		$groups[] = [
			'name'  => 'buterms',
			'label' => esc_html__( 'Terms - BU', 'bricksultimate' ),
		];

		return $groups;
	}

	public function add_element_condition( $options ) {
		foreach( $this->get_conditional_tags_conditions() as $key => $tag ) {

			if( $tag['type'] == "truefalse" ) {
				$options[] = self::getTrueFalseCondition($key, $tag['label'], $tag['group']);
			}

			if( $tag['type'] == "equaltext" ) {
				$placeholder = $tag['placeholder'] ?? '';
				$info = $tag['info'] ?? '';
				$options[] = self::getEqualValueTextCondition($key, $tag['label'], $tag['group'], $placeholder, $info );
			}

			if( $tag['type'] == "dropdown" ) {
				$placeholder = $tag['placeholder'] ?? '';
				$options[] = self::getDropDownCondition($key, $tag['label'], $tag['group'], esc_attr( $placeholder ), $tag['options'] );
			}
		}

		return $options;
	}

	public function result_element_condition( $result, $condition_key, $condition ) {
		$condition_options = \Bricks\Conditions::$options;
		$key = array_search( $condition_key, array_column( $condition_options, 'key' ));
		if( ! $key )
			return $result;

		$registered_condition = $condition_options[ $key ];
		if ( ! in_array( $registered_condition['group'], [ 'buct', 'buterms' ] ) ) {
			return $result;
		}

		$condition_met = false;

		switch( $condition_key ) {
			case 'is_parent_page' :
				$post_id = \Bricks\Query::is_looping() && \Bricks\Query::get_loop_object_type() == 'post' ? \Bricks\Query::get_loop_object_id() : get_the_ID();
				$children = get_posts( array('child_of' => $post_id) );
				$value = count( $children ) > 0 ? true : false;
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_child_page' :
				$post_id = \Bricks\Query::is_looping() && \Bricks\Query::get_loop_object_type() == 'post' ? \Bricks\Query::get_loop_object_id() : get_the_ID();

				$value = wp_get_post_parent_id( $post_id ) > 0 ? true : false;
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_front_page':
				$value = is_front_page();
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_home':
				$value = is_home();
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_page':
				$value = is_page();
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_page_id':
				if( isset( $condition['value'] ) ) {
					$pages = strstr( $condition['value'], ',' ) ? explode( ",", $condition['value'] ) : $condition['value'];
					$value = is_page( $pages );
				} else {
					$value = false;
				}
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_single':
				$value = is_single();
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_singular':
				if( isset( $condition['value'] ) ) {
					$pages = strstr( $condition['value'], ',' ) ? explode( ",", $condition['value'] ) : $condition['value'];
					$value = is_singular( $pages );
				} else {
					$value = false;
				}
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_archive':
				$value = is_archive();
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_category':
				$value = is_category();
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_category_id':
				if( isset( $condition['value'] ) ) {
					$cats = strstr( $condition['value'], ',' ) ? explode( ",", $condition['value'] ) : $condition['value'];
					$value = is_category( $cats );
				} else {
					$value = false;
				}
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_tag':
				$value = is_tag();
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_tag_id':
				if( isset( $condition['value'] ) ) {
					$tags = strstr( $condition['value'], ',' ) ? explode( ",", $condition['value'] ) : $condition['value'];
					$value = is_tag( $tags );
				} else {
					$value = false;
				}
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_tax':
				$value = is_tax();
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_post_type_archive':
				if( isset( $condition['value'] ) ) {
					if( strstr( $condition['value'], 'all' ) ) {
						$value = is_post_type_archive();
					} elseif ( strstr( $condition['value'], ',' ) ) {
						$post_types = explode( ",", $condition['value'] );
						$value = is_post_type_archive( $post_types );
					} else {
						$value = is_post_type_archive( $condition['value'] );
					}
				} else {
					$value = is_post_type_archive();
				}
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_author':
				$value = is_author();
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'is_author_id':
				if( isset( $condition['value'] ) ) {
					$authors = strstr( $condition['value'], ',' ) ? explode( ",", $condition['value'] ) : $condition['value'];
					$value = is_author( $authors );
				} else {
					$value = false;
				}
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'taxonomy_exists':
				$value = taxonomy_exists( $condition['value'] );
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'term_is':
				$object = self::getLoopObject();

				if ( ! $object ) {
					$object = get_queried_object();
				}

				// Not a WP_Term, leave
				if ( $object && ! is_a( $object, 'WP_Term' ) ) {
					$terms = get_terms( array( 'include' => $condition['value'], 'fields' => 'ids' ) );
					
					if( empty( $terms ) || is_wp_error( $terms ) ) {
						$condition_met = false;
					} else {
						$_term = array_shift( $terms );
						$value = $object->term_id === $_term ? true : false;
						$condition_met = self::execute_true_false_logic( $condition, $value );
					}
				}
				break;

			/*case 'has_category':
				if( isset( $condition['value'] ) ) {
					$post_id = \Bricks\Query::is_looping() && \Bricks\Query::get_loop_object_type() == 'post' ? \Bricks\Query::get_loop_object_id() : get_the_ID();
					$cats = strstr( $condition['value'], ',' ) ? explode( ",", $condition['value'] ) : $condition['value'];
					$value = has_category( $cats, $post_id );
				} else {
					$value = false;
				}
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'has_tag':
				if( isset( $condition['value'] ) ) {
					$post_id = \Bricks\Query::is_looping() && \Bricks\Query::get_loop_object_type() == 'post' ? \Bricks\Query::get_loop_object_id() : get_the_ID();
					$cats = strstr( $condition['value'], ',' ) ? explode( ",", $condition['value'] ) : $condition['value'];
					$value = has_tag( $cats, $post_id );
				} else {
					$value = false;
				}
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;*/

			case 'has_term':
				if( isset( $condition['value'] ) ) {
					$post_id = \Bricks\Query::is_looping() && \Bricks\Query::get_loop_object_type() == 'post' ? \Bricks\Query::get_loop_object_id() : get_the_ID();

					$user_value = $condition['value'] ?? '';

					if( strstr( $user_value, ':') ) {
						$args = explode(":", trim( $user_value ) );
						$value = @has_term( @explode(",", trim( $args[1] ) ), $args[0], $post_id );
						$condition_met = self::execute_true_false_logic( $condition, $value );
					}
				}
				break;

			case 'is_parent_term':
				$object = self::getLoopObject();

				if ( ! $object ) {
					$object = get_queried_object();
				}

				// Not a WP_Term, leave
				if ( $object && is_a( $object, 'WP_Term' ) ) {
					$value = ( $object->parent > 0 ) ? false : true;
					$condition_met = self::execute_true_false_logic( $condition, $value );
				}
				break;

			case 'has_children':
				$object = self::getLoopObject();

				if ( ! $object ) {
					$object = get_queried_object();
				}

				// Not a WP_Term, leave
				if ( $object && is_a( $object, 'WP_Term' ) ) {
					$hasChild = get_term_children( $object->term_id, $object->taxonomy );
					$value = ( $hasChild ) ? true : false;
					$condition_met = self::execute_true_false_logic( $condition, $value );
				}
				break;

			case 'has_ancestors':
				$object = self::getLoopObject();

				if ( ! $object ) {
					$object = get_queried_object();
				}

				// Not a WP_Term, leave
				if ( $object && is_a( $object, 'WP_Term' ) ) {
					$ancestors = get_ancestors( $object->term_id, $object->taxonomy, 'taxonomy' );
					$value = ( $ancestors ) ? true : false;
					$condition_met = self::execute_true_false_logic( $condition, $value );
				}
				break;

			case 'has_wishlist':
				$post_type = $condition['value'] ?? 'post';
				$value = \BricksUltimate\Wishlist::get_wishlist_counter( $post_type ) > 0 ? false : true;
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;

			case 'has_compare_items':
				$post_type = $condition['value'] ?? 'post';
				$value = \BricksUltimate\Compare::get_compare_counter( $post_type ) > 0 ? true : false;
				$condition_met = self::execute_true_false_logic( $condition, $value );
				break;
		}

		return $condition_met;
	}

	public function get_conditional_tags_conditions() {
		$tags = [];

		$tags['is_parent_page'] = [
			'label' => esc_html__( 'Is parent post/page', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'truefalse'
		];

		$tags['is_child_page'] = [
			'label' => esc_html__( 'Is child post/page', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'truefalse'
		];

		$tags['is_front_page'] = [
			'label' => esc_html__( 'Is front page', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'truefalse'
		];

		$tags['is_home'] = [
			'label' => esc_html__( 'Is blog page', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'truefalse'
		];

		$tags['is_page'] = [
			'label' => esc_html__( 'All pages - is_page()', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'truefalse'
		];

		$tags['is_page_id'] = [
			'label' => esc_html__( 'Specific page(s)', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'equaltext',
			'placeholder' => esc_html__( 'enter id or slug like 42, about-me, contact', 'bricksultimate' )
		];

		$tags['is_single'] = [
			'label' => esc_html__( 'All single pages - is_single()', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'truefalse'
		];

		$tags['is_singular'] = [
			'label' => esc_html__( 'Specific singular page(s)', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'equaltext',
			'placeholder' => esc_html__( 'enter post type like post, product', 'bricksultimate' )
		];

		$tags['is_archive'] = [
			'label' => esc_html__( 'Archive pages - is_archive()', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'truefalse'
		];

		$tags['is_category'] = [
			'label' => esc_html__( 'All category pages - is_category()', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'truefalse'
		];

		$tags['is_category_id'] = [
			'label' => esc_html__( 'Specific categories page', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'equaltext',
			'placeholder' => esc_html__( '9, blue-cheese, news', 'bricksultimate' ),
			'info' => esc_html__( 'enter term name/id/slug', 'bricksultimate' )
		];

		$tags['is_tag'] = [
			'label' => esc_html__( 'All post tags - is_tag()', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'truefalse'
		];

		$tags['is_tag_id'] = [
			'label' => esc_html__( 'Specific tags page', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'equaltext',
			'placeholder' => esc_html__( '30, mild, extreme', 'bricksultimate' ),
			'info' => esc_html__( 'enter term name/id/slug', 'bricksultimate' )
		];

		$tags['is_tax'] = [
			'label' => esc_html__( 'All taxonomy pages - is_tax()', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'truefalse'
		];

		$tags['is_post_type_archive'] = [
			'label' => esc_html__( 'Post type archive pages', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'equaltext',
			'placeholder' => esc_html__('product, events, services', 'bricksultimate'),
			'info' => esc_html__('Enter custom post type slug. Leave blank for all post types.', 'bricksultimate')
		];

		$tags['is_author'] = [
			'label' => esc_html__( 'All author pages - is_author()', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'truefalse'
		];

		$tags['is_author_id'] = [
			'label' => esc_html__( 'Specific author page(s)', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'equaltext',
			'placeholder' => esc_html__( '4,john-jones,Vivian', 'bricksultimate' )
		];

		$tags['has_wishlist'] = [
			'label' => esc_html__( 'Is wishlist empty?', 'bricksultimate' ),
			'group' => 'buct',
			'type' 	=> 'dropdown',
			'options' => \Bricks\Helpers::get_registered_post_types(),
			'placeholder' => esc_html__('select post type', 'bricksultimate')
		];

		$tags['has_compare_items'] = [
			'label' => esc_html__( 'Has compare items?', 'bricksultimate' ),
			'group' => 'buct',
			'type' 	=> 'dropdown',
			'options' => \Bricks\Helpers::get_registered_post_types(),
			'placeholder' => esc_html__('select post type', 'bricksultimate')
		];

		$tags['taxonomy_exists'] = [
			'label' => esc_html__( 'Taxonomy exists', 'bricksultimate' ),
			'group' => 'buterms',
			'type' => 'dropdown',
			'options' => \Bricks\Setup::$control_options['taxonomies'],
			'placeholder' => esc_html__( 'category', 'bricksultimate' )
		];

		$tags['term_is'] = [
			'label' => esc_html__( 'Is Term', 'woocommerce' ),
			'group' => 'buterms',
			'type' => 'equaltext',
			'placeholder' => esc_html__( 'accepts term ID, slug, or name', 'bricksultimate' ),
			'info' => esc_html__('Work on term archive page and inside the terms loop builder.', 'bricksultimate')
		];

		/*$tags['has_category'] = [
			'label' => esc_html__( 'Has categories - current post', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'equaltext',
			'placeholder' => esc_html__( 'category name/term_id/slug', 'bricksultimate' ),
			'info' => esc_html__('Checks if the current post has any of given categories. Use comma for multiple categories.', 'bricksultimate')
		];

		$tags['has_tag'] = [
			'label' => esc_html__( 'Has tags - current post', 'bricksultimate' ),
			'group' => 'buct',
			'type' => 'equaltext',
			'placeholder' => esc_html__( 'tag name/term_id/slug', 'bricksultimate' ),
			'info' => esc_html__('Checks if the current post has any of given tags. Use comma for multiple tags.', 'bricksultimate')
		];*/

		$tags['has_term'] = [
			'label' => esc_html__( 'Has terms - current post', 'bricksultimate' ),
			'group' => 'buterms',
			'type' => 'equaltext',
			'placeholder' => 'category:12,23,24',
			'info' => esc_html__('Checks if the current post has any of given terms. Syntax:- taxonomyname:terms name/id/slug', 'bricksultimate')
		];

		$tags['is_parent_term'] = [
			'label' => esc_html__( 'Is parent term', 'bricksultimate' ),
			'group' => 'buterms',
			'type' => 'truefalse'
		];

		$tags['has_children'] = [
			'label' => esc_html__( 'Has children', 'bricksultimate' ),
			'group' => 'buterms',
			'type' => 'truefalse'
		];

		$tags['has_ancestors'] = [
			'label' => esc_html__( 'Has ancestors', 'bricksultimate' ),
			'group' => 'buterms',
			'type' => 'truefalse'
		];

		return $tags;
	}

	public static function getLoopObject() {
		$looping_query_id = \Bricks\Query::is_any_looping();
		$object = false;

		if ( ! empty( $looping_query_id ) ) {
			$object = \Bricks\Query::get_loop_object( $looping_query_id );
		}

		return $object;
	}
}