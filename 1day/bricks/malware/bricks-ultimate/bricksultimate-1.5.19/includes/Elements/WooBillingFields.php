<?php
namespace BricksUltimate\Elements;

if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

use BricksUltimate\{Helpers, WooCommerce};

class WooBillingFields extends \Bricks\Element {
	public $category = 'checkout';
	public $name 	= 'bu-billing-fields';
	public $icon 	= 'ti-layout-list-post';
	public $scripts = [ 'buCheckout' ];
	public $field 	= [];

	// Return localized element label
	public function get_label() {
		return esc_html__( '(BU)Billing Fields', 'bricksultimate' );
	}

	// Set builder control groups
	public function set_control_groups() {
		$this->control_groups = WooCommerce::bu_checkout_field_control_groups( $this->control_groups );
	}

	// Set builder controls
	public function set_controls() {
		$billing_checkout_fields = [];
		$checkout = WC()->checkout()||false;
		
		if( $checkout ) {
			$billing_fields = WC()->checkout()->get_checkout_fields( 'billing' );
			foreach( $billing_fields as $key => $billing_field ) {
				$billing_checkout_fields[ $key ] = wp_kses_post( $billing_field['label'] );
			}
		}

		$billing_checkout_fields[ 'custom' ] = esc_html__('Custom field', 'bricksultimate');

		$this->controls['billing_field'] = [
			'type'        => 'select',
			'label'       => esc_html__( 'Field', 'bricksultimate' ),
			'options'     => $billing_checkout_fields,
			'multiple'    => false,
			'placeholder' => esc_html__( 'Select a field', 'bricksultimate' ),
		];

		$this->controls = WooCommerce::bu_checkout_fields_controls( $this->controls, 'billing' );
	}

	// Enqueue element styles and scripts
	public function enqueue_scripts() {
		if( bricks_is_builder() || bricks_is_builder_iframe() || bricks_is_builder_call() ){
			wp_enqueue_style( 'bu-checkout', Helpers::get_asset_url('css') . 'checkout.min.css', [], filemtime(Helpers::get_asset_path('css') . 'checkout.min.css') );
			wp_enqueue_script( 'bu-checkout', Helpers::get_asset_url('js') . 'checkout.min.js', [], filemtime(Helpers::get_asset_path('js') . 'checkout.min.js') );
		}
	}

	public function add_actions() {
		if( Helpers::checkBuElement('bu-billing-fields') && ! bricks_is_builder() ) {
			add_action( 'wp_enqueue_scripts', function() {
				wp_enqueue_style( 'bu-checkout', Helpers::get_asset_url('css') . 'checkout.min.css', [], filemtime(Helpers::get_asset_path('css') . 'checkout.min.css') );
				wp_enqueue_script( 'bu-checkout', Helpers::get_asset_url('js') . 'checkout.min.js', [], filemtime(Helpers::get_asset_path('js') . 'checkout.min.js') );
			});
		}
	}

	// Render element HTML
	public function render() {
		$settings = $this->settings;

		$checkout = WC()->checkout();
		
		if( ! $checkout )
			return;

		$key = Helpers::get_value( $settings, 'billing_field', false);
		if( $key ) {
			if( $key == 'custom' ) {
				$this->field = [
					'type'              => 'text',
					'label'             => '',
					'description'       => '',
					'placeholder'       => '',
					'maxlength'         => Helpers::get_value( $settings, 'maxlength', false ),
					'minlength'         => Helpers::get_value( $settings, 'minlength', false ),
					'required'          => true,
					'custom_attributes' => array(),
					'default' 			=> Helpers::get_value( $settings, 'hiddenValue', '' ),
					'class' 			=> array(),
					'options'           => array(),
				];

				$this->field['type'] = Helpers::get_value( $settings, 'field_type', 'text');
				$key = Helpers::get_value( $settings, 'field_key', false);
				if( ! $key ) {
					return $this->render_element_placeholder( [ 'title' => esc_html__( 'Enter field key.', 'bricksultimate' ) ] );
				}

				if( $this->field['type'] == "checkbox" ) {

					if( ! empty( $settings['isChecked'] ) ) {
						$this->field['value'] = 1;
					}

					if( ! empty( $settings['willHide'] ) ) {
						$this->field['class'][] = "screen-reader-text";
					}

					$this->field['class'][] = 'bu-checkbox-buttons';
				}

				if( $this->field['type'] == "radio" ) {
					$this->field['class'][] = 'bu-radio-buttons';
				}

				if( isset( $settings['fieldOptions'] ) ) {
					$options = explode("\n", $settings['fieldOptions'] );
					if( is_array( $options ) ) {
						foreach( $options as $keyval ) {
							$option = explode(":", $keyval);
							if( !empty( $option[0] ) )
								$this->field['options'][ trim($option[0]) ] = trim($option[1]);
						}
					}
				}
			} else {
				$billing_fields = $checkout->get_checkout_fields( 'billing' );
				
				if( empty( $billing_fields[ $key ] ) )
					return;

				$this->field = $billing_fields[ $key ];
			}

			$this->field['label'] = Helpers::get_value( $settings, 'label', $this->field['label']);
			$this->field['description'] = Helpers::get_value( $settings, 'field_description', false);
			$this->field['placeholder'] = Helpers::get_value( $settings, 'placeholder', '' );
			$aria_label = Helpers::get_value( $settings, 'aria_label', $this->field['label'] );

			if( ! empty( $settings['optional'] ) ) {
				$this->field['required'] = false;
				$this->field['validate'] = [];
			}
			
			$this->field['custom_attributes']['aria-label'] = $aria_label;
			$this->field['custom_attributes']['aria-invalid'] = "false";

			if( isset( $this->field['type'] ) && $this->field['type'] == 'textarea' ) {
				$this->field['custom_attributes']['rows'] = Helpers::get_value( $settings, 'rows');
				$this->field['custom_attributes']['cols'] = Helpers::get_value( $settings, 'cols');
			}

			$class = ( $checkout->get_value( $key ) || isset( $this->field['default'] ) ) ? 'is-active' : '';
			$class = ( isset( $this->field['type'] ) && ( $this->field['type'] == 'time' || $this->field['type'] == 'date' ) ) ? 'is-active' : $class;
			$design = Helpers::get_value( $settings, 'field_design', 'bu-default');

			$design = ( isset( $this->field['type']) && ( $this->field['type'] == "radio" || $this->field['type'] == "checkbox" ) ) ? '' : $design;

			$this->set_attribute('_root', 'class', ['bu-checkout-fields', $design, $class] );

			echo "<{$this->tag} {$this->render_attributes('_root')}>";

			woocommerce_form_field( $key, $this->field, $checkout->get_value( $key ) );

			echo "</{$this->tag}>";
		} else {
			return $this->render_element_placeholder( [ 'title' => esc_html__( 'Select billing fields.', 'bricksultimate' ) ] );
		}
	}
}