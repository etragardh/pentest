<?php
namespace BricksUltimate;

if ( ! defined( 'ABSPATH' ) ) exit;

class Interactions {
	public static function init() {
		\Bricks\Interactions::$control_options = \Bricks\Interactions::get_controls_data();
		$fields = [];

		\Bricks\Interactions::$control_options['fields']['trigger']['options']['breakpoint'] = esc_html__('Breakpoints', 'bricksultimate');

		$fields['breakpoint'] = [
			'label' 		=> esc_html__( 'Breakpoint', 'bricks' ),
			'type' 			=> 'number',
			'unit' 			=> false,
			'placeholder' 	=> 768,
			'required' 		=> [ 'trigger', '=', 'breakpoint' ],
		];

		$fields['bpOperator'] = [
			'label' 		=> esc_html__( 'Operator', 'bricks' ),
			'type' 			=> 'select',
			'options' 		=> [
				'==' => '==',
				'>=' => '>=',
				'<=' => '<=',
				'<'  => '<',
				'>'  => '>',
			],
			'placeholder' 	=> '<',
			'required' 		=> [ 'trigger', '=', 'breakpoint' ],
		];

		/**
		 * woocommerce related interactions
		 */
		if( class_exists('WooCommerce') ) {
			\Bricks\Interactions::$control_options['fields']['trigger']['options']['wooGroupTitle'] = esc_html__( 'WooCommerce', 'bricks' );
			$tiggers = [
				'adding_to_cart' 	=> esc_html__( 'Adding to cart', 'bricks' ),
				'added_to_cart' 	=> esc_html__( 'Added to cart', 'bricks' ),
				'removed_from_cart' => esc_html__( 'Removed from cart', 'bricks' ),
				'wc_fragments_refreshed' => esc_html__( 'Fragments refreshed', 'bricks' ),
				'update_checkout' 	=> esc_html__( 'Update checkout', 'bricks' ),
				'empty_cart' 		=> esc_html__( 'Empty cart', 'bricks' ),
				'cart_not_empty' 	=> esc_html__( 'Cart is not empty', 'bricks' ),
				'applied_coupon' 	=> esc_html__( 'Applied coupon', 'bricks' ),
				'applied_coupon_in_checkout' 	=> esc_html__( 'Applied coupon - Checkout Page', 'bricks' ),
				'removed_coupon' 	=> esc_html__( 'Removed coupon', 'bricks' ),
				'removed_coupon_in_checkout' 	=> esc_html__( 'Removed coupon - Checkout Page', 'bricks' ),
			];
			foreach( $tiggers as $key => $tigger ) {
				\Bricks\Interactions::$control_options['fields']['trigger']['options'][$key] = $tigger;
			}
		}

		/**
		 * fluent form related interactions
		 */
		if( function_exists( 'wpFluentForm' ) ) {
			\Bricks\Interactions::$control_options['fields']['trigger']['options']['ffGroupTitle'] = esc_html__( 'Fluent Form', 'bricks' );
			$tiggers = [
				'fluentform_init' 					=> esc_html__( 'Form initialize', 'bricks' ),
				'fluentform_init_single' 			=> esc_html__( 'Form initialise single', 'bricks' ),
				'fluentform_submission_success' 	=> esc_html__( 'Submission successful', 'bricks' ),
				'fluentform_submission_failed' 		=> esc_html__( 'Submission failed', 'bricks' ),
				'fluentform_reset' 					=> esc_html__( 'Form reset', 'bricks' ),
			];
			foreach( $tiggers as $key => $tigger ) {
				\Bricks\Interactions::$control_options['fields']['trigger']['options'][$key] = $tigger;
			}
			$forms = \FluentForm\App\Helpers\Helper::getForms();
			unset( $forms[ 0 ] );

			$fields['fluentForm'] = [
				'label' 	=> esc_html__( 'Form', 'bricks' ),
				'type' 		=> 'select',
				'options' 	=> $forms,
				'placeholder' => esc_html__( 'Select', 'bricks' ),
				'required' => [ 'trigger', '=', [ 'fluentform_submission_failed', 'fluentform_init_single' ] ],
			];
		}

		if( class_exists('WooCommerce') ) {
			\Bricks\Interactions::$control_options['fields']['action']['options']['apply_coupon'] = esc_html__( 'Apply coupon', 'woocommerce' );
			\Bricks\Interactions::$control_options['fields']['action']['options']['remove_coupon'] = esc_html__( 'Remove coupon', 'woocommerce' );

			\Bricks\Interactions::$control_options['fields']['action']['options']['wishlists_to_cart'] = esc_html__('Add all to cart', 'bricksultimate');

			$fields['wcCoupon'] = [
				'label' 		=> esc_html__( 'Enter coupon code', 'bricks' ),
				'type' 			=> 'text',
				'required' 		=> [ 'action', '=', [ 'apply_coupon', 'remove_coupon' ] ],
				'hasDynamicData' => true
			];

			$fields['wcCouponMsg'] = [
				'label' 		=> esc_html__( 'Show block', 'bricks' ),
				'type' 			=> 'text',
				'required' 		=> [ 'action', '=', [ 'apply_coupon', 'remove_coupon' ] ],
				'placeholder' 	=> '.brxe-block',
				'description' 	=> esc_html__('enter selector', 'bricksultimate' )
			];

			$fields['wcHideCouponBlck'] = [
				'label' 		=> esc_html__( 'Hide block', 'bricks' ),
				'type' 			=> 'text',
				'required' 		=> [ 'action', '=', [ 'apply_coupon', 'remove_coupon' ] ],
				'placeholder' 	=> '.brxe-block',
				'description' 	=> esc_html__('enter selector', 'bricksultimate' )
			];
		}

		\Bricks\Interactions::$control_options['fields']['action']['options']['sync_burger'] = esc_html__('Sync Animated Burger', 'bricksultimate');

		$fields['abDelay'] = [
			'label' 		=> esc_html__( 'Animation delay(ms)', 'bricks' ),
			'type' 			=> 'number',
			'unit' 			=> false,
			'placeholder' 	=> 500,
			'required' 		=> [ 'action', '=', 'sync_burger' ],
		];

		\Bricks\Interactions::$control_options['fields']['action']['options']['delete_wishlist'] = esc_html__('Delete wishlist item', 'bricksultimate');
		\Bricks\Interactions::$control_options['fields']['action']['options']['delete_compare'] = esc_html__('Delete Compare Item', 'bricksultimate');

		$fields['postType'] = [
			'type'        => 'select',
			'label'       => esc_html__( 'Post type', 'bricks' ),
			'options'     => \Bricks\Helpers::get_registered_post_types(),
			'multiple'    => false,
			'placeholder' => esc_html__( 'Select post type', 'bricks' ),
			'default' 	=> 'post',
			'required' 	=> [ 'action', '=', [ 'delete_wishlist', 'wishlists_to_cart', 'delete_compare' ] ],
		];

		$fields['dynPostId'] = [
			'label' 		=> esc_html__( 'Post ID', 'bricks' ),
			'type' 			=> 'text',
			'required' 		=> [ 'action', '=', ['delete_wishlist', 'delete_compare'] ],
			'hasDynamicData' => true
		];

		$fields['containerSelector'] = [
			'label' 		=> esc_html__( 'Outer container selector', 'bricks' ),
			'type' 			=> 'text',
			'required' 		=> [ 'action', '=', [ 'delete_wishlist', 'delete_compare' ] ],
			'hasDynamicData' => false
		];

		$fields['pgnSelector'] = [
			'label' 		=> esc_html__( 'Pagination element selector', 'bricks' ),
			'type' 			=> 'text',
			'required' 		=> [ 'action', '=', 'delete_wishlist' ],
			'hasDynamicData' => false
		];

		\Bricks\Interactions::$control_options['fields']['action']['options']['tooltip'] = esc_html__('Tooltip', 'bricksultimate');

		$fields['ttText'] = [
			'label' 	=> esc_html__('Tooltip content', 'bricksultimate'),
			'type' 		=> 'text',
			'description' => esc_html__('Enter text or CSS selector', 'bricksultimate'),
			'required' 	=> [ 'action', '=', 'tooltip' ],
			'hasDynamicData' => true
		];

		$fields['ttAppendTo'] = [
			'label' 	=> esc_html__('Append to', 'bricksultimate'),
			'type' 		=> 'text',
			'description' => esc_html__('Enter CSS selector', 'bricksultimate'),
			'required' 	=> [ 'action', '=', 'tooltip' ],
			'hasDynamicData' => false
		];

		$fields['ttPlacement'] = [
			'label' 	=> esc_html__('Position', 'bricksultimate'),
			'type' 		=> 'select',
			'options' 	=> [
				'top' 			=> __( 'Top' ), 
				'top-start' 	=> __( 'Top Start' ), 
				'top-end' 		=> __( 'Top End' ),
				'right' 		=> __( 'Right' ), 
				'right-start' 	=> __( 'Right Start' ), 
				'right-end' 	=> __( 'Right End' ),
				'bottom' 		=> __( 'Bottom' ), 
				'bottom-start' 	=> __( 'Bottom Start' ), 
				'bottom-end' 	=> __( 'Bottom End' ),
				'left' 			=> __( 'Left' ), 
				'left-start' 	=> __( 'Left Start' ), 
				'left-end' 		=> __( 'Left End' ), 
				'auto' 			=> __( 'Auto' ), 
				'auto-start' 	=> __( 'Auto Start' ), 
				'auto-end' 		=> __( 'Auto End' ),
			],
			'inline' 		=> true,
			'default' 	=> 'auto',
			'required' 	=> [ 'action', '=', 'tooltip' ],
		];

		$fields['ttAnimation'] = [
			'label' 	=> esc_html__('Animation', 'bricksultimate'),
			'type' 		=> 'select',
			'options' 	=> [
				'fade' 			=> __( 'Fade' ), 
				'shift-away' 	=> __( 'Shift Away' ), 
				'shift-toward' 	=> __( 'Shift Toward' ), 
				'perspective' 	=> __( 'Perspective' )
			],
			'inline' 		=> true,
			'default' 	=> 'Fade',
			'required' 	=> [ 'action', '=', 'tooltip' ],
		];

		\Bricks\Interactions::$control_options['fields'] = array_slice( \Bricks\Interactions::$control_options['fields'], 0, 8, true ) + $fields + array_slice( \Bricks\Interactions::$control_options['fields'], 8, null, true );
	}
}