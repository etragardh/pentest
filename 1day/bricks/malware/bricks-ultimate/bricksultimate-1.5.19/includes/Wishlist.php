<?php
namespace BricksUltimate;

if ( ! defined( 'ABSPATH' ) ) exit;

use BricksUltimate\Plugin;
use BricksUltimate\Admin\License;

class Wishlist {
	public static $instance = null;
	public static $wishlist_ids = [];
	public static $key = 'bu-wishlist';
	public static $inited = false;

	/**
	 * Saves product ids in cookie
	 */
	const COOKIE_KEY = 'bu_wishlist';

	public function __construct() {
		if ( License::has_valid_license() ) {
			add_action( 'wp_ajax_bu_get_wishlist', [ $this, 'add_remove_product_to_wishlist' ] );
			add_action( 'wp_ajax_nopriv_bu_get_wishlist', [ $this, 'add_remove_product_to_wishlist' ] );
			add_action( 'wp_ajax_bu_delete_wishlist_item', [ $this, 'bu_delete_wishlist_item' ] );
			add_action( 'wp_ajax_nopriv_bu_delete_wishlist_item', [ $this, 'bu_delete_wishlist_item' ] );
			add_action( 'wp_ajax_bu_mini_wishlist', [ $this, 'bu_mini_wishlist' ] );
			add_action( 'wp_ajax_nopriv_bu_mini_wishlist', [ $this, 'bu_mini_wishlist' ] );
			add_filter( "bricks/elements/block/control_groups", array( $this, 'add_mini_wishlist_control_groups' ) );
			add_filter( "bricks/elements/block/controls", [ $this, 'add_mini_wishlist_controls' ] );
			add_filter( 'bricks/element/render_attributes', [ $this, 'bu_add_attributes' ], 1010, 3 );

			$this->init_actions();
		}
	}

	public function bu_add_attributes( $atts, $key, $element ) {
		$settings = $element->settings;
		if( $element->name == 'block' && !empty( $settings['isMiniWishlistWrapper'] ) ) {
			$atts['_root']['data-element-id'] = $element->id;
			$atts['_root']['data-post-id'] = $element->post_id;
			$atts['_root']['class'][] = 'bu-mini-wishlist';
		}

		return $atts;
	}

	public function add_mini_wishlist_control_groups( $control_groups ) {
		$control_groups['minwishlist'] = [
			'tab'      => 'style',
			'title'    => esc_html__( 'Mini Wishlist', 'bricksultimate' ),
		];

		return $control_groups;
	}

	public function add_mini_wishlist_controls( $controls ) {
		$controls['isMiniWishlistWrapper'] = [
			'tab' 		=> 'style',
			'group' 	=> 'minwishlist',
			'type'      => 'checkbox',
			'label'     => esc_html__( 'Using for Mini Wishlist Builder?', 'bricksultimate' ),
			'reset' 	=> true,
		];

		return $controls;
	}

	public function set_wishlists( $cookie_key = null, $type = 'post', $user_id = null ) {
		$wishlist_ids = [];

		$cached_products = '';
		$user_cached_products = false;

		if ( $user_id ) {
			$cached_products = get_user_meta( $user_id, $cookie_key, true );
			$user_cached_products = true;
		} elseif ( is_user_logged_in() ) {
			$cached_products = get_user_meta( get_current_user_id(), $cookie_key, true );
			$user_cached_products = true;
		}

		if ( !$user_cached_products && isset( $_COOKIE[ $cookie_key ] ) && !empty( $_COOKIE[ $cookie_key ] ) ) {
			$cached_products = $_COOKIE[ $cookie_key ];
		}

		if ( $cached_products != '' )
			$wishlist_ids[ $type ] = explode( ',', $cached_products);

		return $wishlist_ids;
	}

	public function get_wishlists($cookie_key = null, $post_type = 'post', $user_id = null) {
		if( $cookie_key ) {
			return $this->set_wishlists( $cookie_key, $post_type );
		} else {
			$postTypes = \Bricks\Helpers::get_registered_post_types();

			if( $postTypes ) {
				$ids = [];
				foreach( $postTypes as $type => $label ) {
					$cookie_key = $this->get_cookie_key( $type );
					if( isset( $_COOKIE[ $cookie_key ] ) && !empty( $_COOKIE[ $cookie_key ] ) ) {
						$ids[ $type ] = isset( $this->set_wishlists( $cookie_key, $type )[ $type ] ) ? $this->set_wishlists( $cookie_key, $type )[ $type ] : [];
					} elseif( is_user_logged_in() && metadata_exists( 'user', get_current_user_id(), $cookie_key )) {
						$ids[ $type ] = isset( $this->set_wishlists( $cookie_key, $type )[ $type ] ) ? $this->set_wishlists( $cookie_key, $type )[ $type ] : [];
					}
				}

				return $ids;
			} else {
				return $this->set_wishlists( $cookie_key, $post_type );
			}
		}
    }

    public function save_user_wishlist( $type = 'post', $user_id = null, $cookie_key = null, $wishlists = [] ) {
    	$saved_products = get_user_meta($user_id, $cookie_key, true);

		if ( $saved_products ) {
			$saved_products = explode(',', $saved_products);
		} else {
			$saved_products = [];
		}

		$ready_products = array_unique( array_merge( $saved_products, $wishlists ) );
		update_user_meta($user_id, $cookie_key, implode(',', $ready_products) );

		Plugin::bu_setcookie($cookie_key, '', time() + ($this->get_days_cache() * WEEK_IN_SECONDS));
		unset( $_COOKIE[$cookie_key] );
		self::$wishlist_ids[ $type ] = $ready_products;
    }

    public function update_products_ids_after_login( $user_login, $user ){
		$products = $this->get_wishlists();
		$postTypes = \Bricks\Helpers::get_registered_post_types();

		if( $postTypes ) {
			foreach( $postTypes as $type => $label ) {
				$cookie_key = $this->get_cookie_key( $type );
				if( isset( $_COOKIE[ $cookie_key ] ) && ! empty( $_COOKIE[ $cookie_key ] ) ) {
					$this->save_user_wishlist( $type, $user->ID, $cookie_key, ( $products[$type] ?? [] ) );
				} elseif ( metadata_exists( 'user', $user->ID, $cookie_key ) ) {
					$this->save_user_wishlist( $type, $user->ID, $cookie_key, ( $products[$type] ?? [] ) );
				}
			}
		}
    }

	public function add_remove_product_to_wishlist() {
		check_ajax_referer( 'wishlist-nonce', 'security' );

		$data = ['success' => false];

		global $postData;

		$postData = [];
		$postId 	= $_POST['productId'];
		$postType 	= $_POST['postType'];
		$template_id = intval( $_POST['notice'] );
		$action 	= $_POST['wslaction'];
		$cookie_key = $_POST['cookieKey'];
		$all_products = $this->get_wishlists( $cookie_key, $postType );
		self::$wishlist_ids[ $postType ] = isset( $all_products[ $postType ] ) ? $all_products[ $postType ] : [];

		if( ! in_array( $postId, self::$wishlist_ids[ $postType ] ) && $action == 'add' ) {
			$all_products[ $postType ][] = $postId;
			$data['success'] = true;
			$data['count'] = count( $all_products[ $postType ] );

			if( $template_id > 0 ) {
				$postData['id'] = $postId;
				$postData['filterType'] = 'notice';
				
				add_filter( 'bricks/posts/query_vars', [ '\BricksUltimate\Ajax', 'filter_query_args' ], 10, 3 );

				$elements = get_post_meta( $template_id, BRICKS_DB_PAGE_CONTENT, true );
				$template_inline_css = \Bricks\Templates::generate_inline_css( $template_id, $elements );

				$css = "<style id=\"bricks-inline-css-template-{$template_id}\">{$template_inline_css}</style>";

				$data['notice'] = do_shortcode('[bricks_template id="'. $template_id .'"]') . $css ;
				remove_filter( 'bricks/posts/query_vars', [ '\BricksUltimate\Ajax', 'filter_query_args' ], 10, 3 );
			}
		}

		if( in_array( $postId, self::$wishlist_ids[ $postType ] ) && $action == 'remove' ) {
			if( ( $key = array_search($postId, $all_products[ $postType ]) ) !== false )
				unset($all_products[ $postType ][$key]);

			$data['success'] = true;
			$data['count'] = ($all_products[ $postType ]) ? count( $all_products[ $postType ] ) : 0;
		}

		if( $data['success'] ) {
			Plugin::bu_setcookie($cookie_key, implode(',', $all_products[ $postType ]), time() + ($this->get_days_cache() * WEEK_IN_SECONDS) );

			if( is_user_logged_in() ) {
				update_user_meta( get_current_user_id(), $cookie_key, implode(',', $all_products[ $postType ]) );

				Plugin::bu_setcookie($cookie_key, '', time() + ($this->get_days_cache() * WEEK_IN_SECONDS) );
				unset( $_COOKIE[$cookie_key] );
			}

			self::$wishlist_ids[ $postType ] = $all_products[ $postType ];
		}

		wp_send_json( $data );

		wp_die();
	}

	public function bu_delete_wishlist_item() {
		check_ajax_referer( 'wishlist-nonce', 'security' );

		$data = ['success' => true];

		$postId 	= $_POST['postId'];
		$postType 	= $_POST['postType'];
		$cookie_key = $this->get_cookie_key( $postType );
		$all_products = $this->get_wishlists( $cookie_key, $postType );
		self::$wishlist_ids[ $postType ] = isset( $all_products[ $postType ] ) ? $all_products[ $postType ] : [];

		if( in_array( $postId, self::$wishlist_ids[ $postType ] ) ) {
			if( ( $key = array_search($postId, $all_products[ $postType ]) ) !== false )
				unset($all_products[ $postType ][$key]);

			$data['success'] = true;
			$data['count'] = ($all_products[ $postType ]) ? count( $all_products[ $postType ] ) : 0;
		}

		if( $data['success'] ) {
			Plugin::bu_setcookie($cookie_key, implode(',', $all_products[ $postType ]), time() + ($this->get_days_cache() * WEEK_IN_SECONDS) );

			if( is_user_logged_in() ) {
				update_user_meta( get_current_user_id(), $cookie_key, implode(',', $all_products[ $postType ]) );

				Plugin::bu_setcookie($cookie_key, '', time() + ($this->get_days_cache() * WEEK_IN_SECONDS) );
				unset( $_COOKIE[$cookie_key] );
			}

			self::$wishlist_ids[ $postType ] = $all_products[ $postType ];
		}

		wp_send_json( $data );

		wp_die();
	}

	public function bu_mini_wishlist() {
		check_ajax_referer( 'wishlist-nonce', 'security' );

		$element_id = $_POST['element'];
		$post_id = isset( $_POST['post'] ) ? $_POST['post'] : 0;

		$data = \Bricks\Helpers::get_element_data( $post_id, $element_id );

		// Prepare flat list of elements for recursive calls
		foreach ( $data['elements'] as $element ) {
			\Bricks\Frontend::$elements[ $element['id'] ] = $element;
		}

		$element_instance = new \Bricks\Element_Block( $data['element'] );
		$wishlist = \Bricks\Frontend::render_children( $element_instance );

		wp_send_json(
			array(
				'fragments' => apply_filters(
					'bu_update_mini_wishlist',
					array(
						'.bu-mini-wishlist' => $wishlist
					)
				),
			)
		);
	}

	public static function get_days_cache() {
		$cache_days = 7;

		$life = ( !empty( Plugin::$bu_settings['wsl_cookie_life'] ) ) ? Plugin::$bu_settings['wsl_cookie_life'] : 'week';

		switch ( $life ) {
			case 'week':
				$cache_days = 7;
				break;
			case 'month':
				$cache_days = 30;
				break;
			case '3months':
				$cache_days = 30*3;
				break;
			case 'year':
				$cache_days = 365;
				break;
		}

		return $cache_days;
	}

	public static function get_wishlist_counter( $post_type ) {
	    return ! empty( self::$wishlist_ids[ $post_type ] ) ? count(self::$wishlist_ids[ $post_type ]) : 0;
    }

	public static function get_cookie_key($post_type = 'post' ){
		return self::COOKIE_KEY . "_{$post_type}_" . ( is_multisite() ? get_current_blog_id() : 0 );
	}

	public static function is_product_in_wishlist( $productId, $post_type ) {
		return in_array($productId, self::$wishlist_ids[ $post_type ]);
	}

	public function init_wishlist_products() {
		self::$wishlist_ids = $this->get_wishlists();
		self::$inited = true;
	}

	public function init_actions() {
		add_action( 'wp_login', [ $this, 'update_products_ids_after_login' ], 10, 2);
		add_action( 'init', function () {
			if ( ! self::$inited ) {
				$this->init_wishlist_products();
			}
		});
	}

    public static function get_instance() {
        if ( null == self::$instance ) {
            self::$instance = new self();
        }

        return self::$instance;
    }
}