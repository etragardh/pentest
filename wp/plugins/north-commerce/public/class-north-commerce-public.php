<?php

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\Collections\{
    CouponDiscountTypes,
    PaymentStatuses,
    OrderStatuses,
    ProductTypes
};
use NorthCommerce\Models\{
    ProductModel,
    CouponModel,
    OrderModel
};
use NorthCommerce\Redirects\StripeConfirmPaymentRedirectHandler;
use NorthCommerce\Db\PerspectiveManager;
use NorthCommerce\Template_Manager;
use North_Commerce_Settings as Settings;

/**
 * Public controller class.
 *
 * Public-facing functionality
 *
 * @package north-commerce/public
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.25
 */
class North_Commerce_Public {

    /**
     * @var North_Commerce_Template_Loader $template_loader.
     * @since 0.1.25
     */
    public $template_loader;

    /** @var string $plugin_name The ID of this plugin. */
    private $plugin_name;

    /** @var string $version The current version of this plugin. */
    private $version;

    /** @var string $private_key The Stripe private key. */
    private $private_key;

    /**
     * @var \NorthCommerceStripe\StripeClient $stripe Stripe client object.
     */
    private $stripe;

    /**
     * @var Template_Manager $template_manager.
     * @since 0.1.11
     */
	private $template_manager;

    /**
	 * @since 0.1.0
	 * @param string $plugin_name North Commerce slug.
	 * @param string $version     North Commerce version.
     */
    public function __construct( $plugin_name, $version ) {
        $stripe = new North_Commerce_Stripe();

        $this->plugin_name = $plugin_name;
        $this->version = $version;
        $this->private_key = $stripe->get_secret_key();
        $this->template_loader = new North_Commerce_Template_Loader();
		$this->template_manager = new Template_Manager( 'public' );

        if ( ! empty( $this->private_key ) ) {
            $this->stripe = new \NorthCommerceStripe\StripeClient( $this->private_key );
        }
    }

    /**
     * Register the stylesheets for the public-facing side of the site.
     *
	 * @since 0.1.0
     */
    public function enqueue_styles() {
        if ( $this->is_checkout() ) {
            wp_enqueue_style(
                $this->plugin_name . 'select2',
                plugin_dir_url( __FILE__ ) . '../admin/css/select2.min.css',
                [],
                $this->version,
                'all'
            );
        }
        wp_enqueue_style( $this->plugin_name, plugin_dir_url( __FILE__ ) . 'css/north-commerce-public.css', [], $this->version . 't', 'all' );
	    wp_enqueue_style( 'tail-select-css', 'https://cdn.jsdelivr.net/npm/tail.select@latest/css/tail.select-default.css' );
	    wp_enqueue_style( 'paymentfont-css', 'https://cdnjs.cloudflare.com/ajax/libs/paymentfont/1.1.2/css/paymentfont.min.css' );
    }

	/**
	 * Register the JavaScript for the public-facing side of the site.
	 *
	 * @version 0.1.23
	 */
    public function enqueue_scripts() {
        $paypal = new North_Commerce_Paypal();
        $stripe = new North_Commerce_Stripe();
        $mollie = new North_Commerce_Mollie();
		$settings = new Settings();

		if ( $paypal->is_connected() ) {
            wp_enqueue_script( $this->plugin_name . '-paypal-sdk', 'https://www.paypal.com/sdk/js?' . http_build_query( [
				'client-id' => $paypal->get_client_id(),
				'vault' => 'true',
				'intent' => 'capture',
				'integration-date' => date( 'Y-m-d' ),
				'currency' => Settings::get_currency_code(),
				'components' => 'buttons'
			] ), null, null, true );

            wp_enqueue_script( $this->plugin_name . '-paypal', plugin_dir_url( __FILE__ ) . 'js/north-commerce-paypal.js', [ 'jquery' ], $this->version, true );
        }

        if ( $this->is_checkout() ) {
            wp_enqueue_script(
                $this->plugin_name . '-select2',
                plugin_dir_url( __FILE__ ) . '../admin/js/select2.min.js',
                [ 'jquery' ],
                $this->version . '1',
                false
            );
        }

        if ( $this->is_single_page_checkout() ) {
            wp_enqueue_script(
                'libphonenumber',
                plugin_dir_url( __FILE__ ) . '../libs/Intl-Tel/build/libphonenumber.js',
                [ 'jquery' ],
                $this->version . '1.2',
                false
            );
        }

        $public_libs = [
            'data-api',
            'cart-api',
            'checkout-manager',
            'coupon-manager',
            'stripe-helper',
            'paypal-helper',
            'flickity',
            'shortcode-manager',
            'product-variant-selection-tracker',
            'product-variant-manager',
            'account-manager'
        ];

		$public_deps = [];
		foreach ( $public_libs as $name ) {
			$public_deps[] = $this->plugin_name . '-' . $name;
			wp_enqueue_script(
				$this->plugin_name . '-' . $name,
				plugin_dir_url( __FILE__ ) . "js/lib/$name.js",
				[],
				$this->version,
				true
			);
		}

        $deps = [ $this->plugin_name . '-cart-api' ];
        if ( $this->is_single_page_checkout() ) {
            array_push( $deps, 'libphonenumber' );
        }
        wp_enqueue_script(
            $this->plugin_name,
            plugin_dir_url( __FILE__ ) . 'js/north-commerce-public.js',
            $deps,
            $this->version,
            true
        );

        wp_localize_script( $this->plugin_name, 'ajax_data', [
            'rest_url'   => rest_url( 'north-commerce/v1' ),
            'rest_nonce' => wp_create_nonce( 'wp_rest' ),
            'checkout_thank_you_url' => $settings::nc_get_page_url( 'checkout_thank_you' ),
            'north_api' => rest_url( 'nc-data/v1' )
        ] );

        wp_localize_script( $this->plugin_name, 'ajax_object', [
            'ajaxurl' => admin_url( 'admin-ajax.php' )
        ] );

        wp_localize_script( $this->plugin_name, 'northCommerceSettings', [
            'restUrl'   => rest_url( 'north-commerce/v1' ),
            'stripePublic' => $stripe->get_public_key(),
            'stripeConfirmPaymentURL' => ( new StripeConfirmPaymentRedirectHandler() )->handlerUrl(),
            'currencySymbol' => Settings::get_currency_symbol(),
            'currencyCode' => Settings::get_currency_code(),
            'currencyPosition' => Settings::get_currency_position(),
            'priceDecimals' => Settings::get_number_of_decimals(),
            'decimalOperator' => Settings::get_decimal_separator(),
            'thousandsSeparator' => Settings::get_thousands_separator(),
            'taxPercentage' => Settings::get_tax_percentage(),
            'vatEnabled' => Settings::get_tax_is_vat()
        ] );

        wp_enqueue_script( 'stripe-js', 'https://js.stripe.com/v3/', array(), '' );
        wp_enqueue_script( $this->plugin_name . '-stripe', plugin_dir_url( __FILE__ ) . 'js/north-commerce-stripe.js', array( 'jquery' ), $this->version . ' 441', true );

        $google_place_autocomplete = new North_Commerce_GooglePlaceAutocomplete();
        if ( $google_place_autocomplete->is_connected() && $google_place_autocomplete->get_api_key() ) {
            wp_enqueue_script(
                'google-places',
                'https://maps.googleapis.com/maps/api/js?key=' . $google_place_autocomplete->get_api_key() . '&libraries=places&callback=initAutocomplete',
                [ $this->plugin_name ],
                null,
                true
            );
        }

		wp_localize_script( $this->plugin_name . '-stripe', 'stripe_data', [
			'public' => $stripe->get_public_key()
		] );

        if ( $mollie->is_connected() ) {
            wp_enqueue_script( 'mollie-js', 'https://js.mollie.com/v1/mollie.js', array(), '' );
            wp_enqueue_script( $this->plugin_name . '-mollie', plugin_dir_url( __FILE__ ) . 'js/north-commerce-mollie.js', array( 'jquery' ), $this->version, true );
            wp_localize_script( $this->plugin_name . '-mollie', 'mollie_data', [
                'public' => $mollie->get_profile_id(),
                'test' => $mollie->is_test_mode()
            ] );
        }

        wp_enqueue_script( 'tail-select-js', 'https://cdn.jsdelivr.net/npm/tail.select@latest/js/tail.select.min.js', array(), '' );
        wp_enqueue_script( 'cleave-js', 'https://cdn.jsdelivr.net/npm/cleave.js@1.6.0/dist/cleave.min.js', array(), '' );

        wp_enqueue_script(
            $this->plugin_name . '-product-overview',
            plugin_dir_url( __FILE__ ) . 'js/north-commerce-product-overview.js',
            array_merge( [ 'jquery', 'tail-select-js', 'cleave-js' ], $public_deps ),
            $this->version,
            true
        );

        wp_enqueue_script(
            $this->plugin_name . '-products-list',
            plugin_dir_url( __FILE__ ) . 'js/north-commerce-products-list-public.js',
            [ 'jquery' ],
            $this->version,
            true
        );

        wp_enqueue_script(
            $this->plugin_name . '-cart',
            plugin_dir_url( __FILE__ ) . 'js/north-commerce-cart-public.js',
            [ 'jquery', $this->plugin_name . '-cart-api', $this->plugin_name . '-data-api' ],
            $this->version,
            true
        );

        wp_enqueue_script(
            $this->plugin_name . '-shortcodes',
            plugin_dir_url( __FILE__ ) . 'js/north-commerce-shortcodes.js',
            [],
            $this->version,
            true
        );
    }

	/**
	 * @version 0.1.9
	 */
    public function register_public_shortcodes() {
        $shortcodes = [
            'product',
            'cart-drawer',
            'checkout',
            'checkout-thank-you',
            'cart',
            'cart-icon',
            'product-gallery',
            'product-grid',
            'tabbed-gallery',
            'collection',
            'product-slider',
            'my-account'
        ];

        foreach ( $shortcodes as $sc ) {
            $fn = 'nc_' . str_replace( '-', '_', $sc ) . '_shortcode';
            $this->add_public_shortcode( "nc-$sc", [ $this, $fn ] );
        }
    }

    public function add_public_shortcode($name, $callback) {
        add_shortcode($name, function($attrs) use($callback, $name) {
            $pm = PerspectiveManager::instance();
            return $pm->asPublic(function() use($callback, $attrs) {
                return call_user_func($callback, $attrs);
            });
        });
    }

    /**
	 * Shortcode to handle the display of a My Account
	 *
     * @since   0.1.23
     * @version 0.1.23
     *
	 * @param mixed $atts
	 */
     public function nc_my_account_shortcode( $atts ) {
        if ( is_admin() || defined( 'REST_REQUEST' ) ) {
            // Bailout.
            return;
        }

	     wp_enqueue_script(
			 $this->plugin_name . '-my-account',
			 plugin_dir_url( __FILE__ ) . 'js/north-commerce-my-account.js',
			 array( 'jquery' ), $this->version,
			 true
	     );

        ob_start();

        $atts = shortcode_atts(
            [],
            $atts,
            'nc-account'
        );

        $this->template_manager->use( 'my-account', $atts );

        return ob_get_clean();
    }

	/**
	 * Shortcode to handle the display of a Product
	 *
     * @since   0.1.2
     * @version 0.1.5
     *
	 * @param mixed $atts
	 */
	public function nc_product_shortcode( $atts ) {
        if ( is_admin() || defined( 'REST_REQUEST' ) ) {
            // Bailout.
            return;
        }

        ob_start();
        $product_slug = $atts['product_slug'] ?? get_query_var( 'product_slug' );

        if ( $product_slug ) {
            $variant_slug = $atts['variant_slug'] ?? get_query_var( 'variant_slug' );

            $atts = shortcode_atts(
                [
                    'product_slug' => $product_slug,
                    'variant_slug' => $variant_slug,
                ],
                $atts,
                'nc-product'
            );

			$this->template_manager->use( 'single-product', $atts );
        } else {
            $this->template_loader->get_template_part( 'products-list' );
        }

        return ob_get_clean();
	}

	/**
	 * Shortcode to handle the display of a collection
	 *
     * @since   0.1.2
     * @version 0.1.5
     *
	 * @param mixed $atts
	 */
	public function nc_collection_shortcode( $atts ) {
        if ( is_admin() || defined( 'REST_REQUEST' ) ) {
            // Bailout.
            return;
        }

        ob_start();
        $collection_slug = $atts['collection_slug'] ?? get_query_var( 'collection_slug' );

        $atts = shortcode_atts(
            [
                'collection_title' => null,
                'category' => $collection_slug ? $collection_slug : '',
                'desktop_columns' => '3',
                'mobile_columns' => '1',
                'badge' => null
            ],
            $atts,
            'nc-collection'
        );

        if ( $collection_slug ) {
            // TODO Add single collection by slug
            $this->template_manager->use( 'shortcodes/product-grid/product-grid', compact( 'atts' ) );

        } else {
            $this->template_manager->use( 'shortcodes/product-grid/product-grid', compact( 'atts' ) );
        }

        return ob_get_clean();
	}

    /**
     * Handle the display of a cart drawer
     */
    public function nc_cart_drawer_shortcode( $atts ) {
        global $post;
        // Attributes
        $atts = shortcode_atts(
            [
                'id' => '',
            ],
            $atts,
            'nc-cart-drawer'
        );
        ob_start();
	    $this->template_loader->set_template_data($atts)->get_template_part('cart-drawer');

	    return ob_get_clean();
    }

	/**
	 * Handle the display of a checkout shortcode
	 */
	public function nc_checkout_shortcode( $atts ) {
		global $post;
		// Attributes
		$atts = shortcode_atts(
			array(
				'id' => '',
			),
			$atts,
			'nc-checkout'
		);
		ob_start();
		$this->template_loader->set_template_data($atts)->get_template_part('checkout');

		return ob_get_clean();
	}


	/**
	 * Handle the display of a checkout shortcode
	 */
	public function nc_checkout_thank_you_shortcode( $atts ) {
		// Attributes
		$atts = shortcode_atts(
			[ 'id' => '' ],
			$atts,
			'nc-checkout-thank-you'
		);
		ob_start();

		$this->template_manager->use( 'checkout-thank-you' );

		return ob_get_clean();
	}

	/**
	 * Handle the display of a product gallery shortcode
	 */
	public function nc_product_gallery_shortcode( $atts ) {
		// Attributes
		$atts = shortcode_atts(
			[
				'category' => '',
            ],
			$atts,
			'nc-product_gallery'
		);
		ob_start();
		$this->template_loader->set_template_data( $atts )->get_template_part( 'shortcodes/product-gallery/product-gallery' );

		return ob_get_clean();
	}

	/**
	 * Handle the display of a product grid shortcode
	 */
	public function nc_product_grid_shortcode( $atts ) {

		$atts = shortcode_atts(
			[
                'collection_title' => null,
				'category' => '',
                'desktop_columns' => '3',
                'mobile_columns' => '1',
                'badge' => null
            ],
			$atts,
			'nc-product_grid'
		);

		ob_start();
		$this->template_manager->use(
            'shortcodes/product-grid/product-grid',
            compact( 'atts' )
        );

		return ob_get_clean();
	}

	/**
	 * Handle the display of a product gallery shortcode
	 */
	public function nc_tabbed_gallery_shortcode( $atts ) {
		// Attributes
		$atts = shortcode_atts(
			[
				'category_1' => '',
				'category_2' => '',
				'category_3' => '',
            ],
			$atts,
			'nc-tabbed_gallery'
		);
		ob_start();
		$this
            ->template_loader
            ->set_template_data( $atts )
            ->get_template_part( 'shortcodes/product-gallery/tabbed-gallery' );

		return ob_get_clean();
	}

	/**
	 * Handle the display of a product gallery slider shortcode
	 */
	public function nc_product_slider_shortcode( $atts ) {

		$atts = shortcode_atts(
			[
				'category' => '',
            ],
			$atts,
			'nc-product_gallery'
		);

		ob_start();
		$this
            ->template_loader
            ->set_template_data( $atts )
            ->get_template_part( 'shortcodes/product-gallery/product-slider' );

		return ob_get_clean();
	}

    /**
     * @since 0.1.6
     */
    public function nc_cart_shortcode( $atts ) {

        if ( is_admin() || defined( 'REST_REQUEST' ) ) {
            // Bailout.
            return;
        }

        ob_start();

        $this->template_loader->get_template_part( 'cart' );

        return ob_get_clean();

    }

    /**
     * @since 0.1.9
     */
    public function nc_cart_icon_shortcode() {
        ob_start();
        $this->template_loader->get_template_part( 'menu-cart-icon' );
        return ob_get_clean();
    }

    public function handle_showing_cart_drawer() {
	    $cart_drawer_display_status = Settings::get_cart_drawer_display_status();

	    if ( $cart_drawer_display_status === 'enabled' ) {
	    	echo do_shortcode('[nc-cart-drawer/]');
	    }
    }

    /**
     * Get product information: qnt, price etc
     *
     * @version 0.1.10
     */
    public function get_product() {
        $product_data = json_decode( stripslashes( $_POST['data'] ), true );

        $response = ( new North_Commerce_Product() )->get_product_variant_data(
            sanitize_text_field( $product_data['id'] ),
            $product_data['product_options']
        );

        echo json_encode( $response );
        wp_die();
    }

    /**
     * PayPal Payment Process
     *
     * @version 0.1.21
     */
    public function paypal_payment_process() {
        $form_data = json_decode( stripslashes( $_POST['product'] ), true );
        $product_id = $form_data['id'];
        $ordered_quantity = ! empty( $form_data['qty'] ) ? intval( $form_data['qty'] ) : 1;
        $promocode = $form_data['promocode'] ?? '';

        $order_data = array();

        $paypal = new North_Commerce_Paypal();
        $product_model = new ProductModel();
        $product = $product_model->get_by_id( $product_id );


        if ( ProductTypes::oneTime()->slug === $product['product_type']['slug'] ) {
            $stock = null === $product['quantity']
                ? null
                : intval( $product['quantity'] );
            $order_data['product_currency'] = strtoupper( Settings::get_currency_code() );

            $variant = ( new North_Commerce_Product() )->get_product_variant_data( $product_id, $form_data['product_options'] ?? [] );
            $price = floatval( $variant['price'] );
            $stock = $variant['status']
                ? ( null !== $variant['inventory'] ? intval( $variant['inventory'] ) : $stock )
                : 0;

            if ( $stock && $stock < $ordered_quantity ) {
                // Bailout.
                wp_die( 'The number of products is less than necessary' );
            }

            $subtotal = $price * $ordered_quantity;
            list(
                $order_data[ 'coupon_id' ],
                $coupon_discount
            ) = $this->calculate_coupon_discount( $subtotal, $promocode );

            $order_data['product_quantity'] = $ordered_quantity;
            $order_data['product_price'] = $subtotal - $coupon_discount;

            wp_die( json_encode( $order_data ) );
        } else {
            $mode = $paypal->is_test_mode() ? 'test' : 'live';
            $order_data['id'] = $product_model->get_attribute_value( $product['id'], 'paypal_' . $mode . '_product_id' );

            wp_die( json_encode( $order_data ) );
        }
    }

    /**
     * PayPal Order Create
     *
     * @version 0.1.19
     */
    public function paypal_order_create() {
        $form_data = json_decode( stripslashes( $_POST['order_data'] ), true );
        $product_controller = new North_Commerce_Product();
        $product_model = new ProductModel();

        $order = [ 'payment_provider_slug' => 'paypal' ];

        foreach ( $form_data['inputs'] as $input ) {
            if ( 'product' === $input['name'] ) {
                $product = $product_model->get_by_id( $input['value']['id'] );
                $order['product_id'] = $product['id'];
                $order['product_name'] = $product['name'];
                $order['product_type'] = $product['product_type']['slug'];
                $order['product_sku'] = $product['sku'];
                $order['product_currency'] = Settings::get_currency_symbol();
                $order['product_quantity'] = isset( $input['value']['qty'] ) ? intval( $input['value']['qty'] ) : 1;

                $variant = $product_controller->get_product_variant_data(
                    $product['id'],
                    $input['value']['product_options'] ?? []
                );
                $order['product_variant'] = $variant['variant'];

                if ( ProductTypes::oneTime()->slug === $order['product_type'] ) {

                    $order['product_price'] = floatval( $variant['price'] );
                    $order['product_subtotal'] = floatval( $variant['price'] ) * $order['product_quantity'];
                    $order['order_status_slug'] = OrderStatuses::unfulfilled()->slug;

                    if ( 'success' === $form_data['status'] ) {
                        $order['payment_status_slug'] = PaymentStatuses::paid()->slug;
                        $order['product_trans_id'] = $form_data['details']['id'];
                        $order['product_paid'] = floatval( $variant['price'] ) * $order['product_quantity'];
                    } else {
                        $order['payment_status_slug'] = PaymentStatuses::void()->slug;
                        $order['product_paid'] = 0;
                    }

                    $order['subtotal'] = floatval( $variant['price'] ) * $order['product_quantity'];
                    $order['total'] = floatval( $variant['price'] ) * $order['product_quantity'];

                }

                if ( ProductTypes::subscription()->slug === $order['product_type'] ) {
                    $order['product_price'] = $product['base_price'];
                    $order['product_frequency'] = $product['payment_detail']['payment_frequency']['slug'];
                    $order['product_paid'] = $product['base_price'];

                    $has_first_period_payment = (bool) ( $product['payment_detail']['has_first_period_payment'] ?? null );
                    if ( $has_first_period_payment ) {
                        $order['product_first_period'] = 'on';
                        $order['product_start_price'] = $product['payment_detail']['first_period_payment'];
                        $order['product_paid'] = $product['payment_detail']['first_period_payment'];
                    }

                    $has_free_trial = (bool) ( $product['payment_detail']['has_free_trial'] ?? null );
                    if ( $has_free_trial ) {
                        $order['product_free_trial'] = 'on';
                        $order['product_trial_count'] = $product['payment_detail']['free_trial_frequency'];
                        $order['product_trial_type'] = $product['payment_detail']['free_trial_type']['slug'];
                        $order['product_paid'] = 0;
                    }

                    if ( 'success' === $form_data['status'] ) {
                        $order['order_status_slug'] = OrderStatuses::fulfilled()->slug;
                        $order['payment_status_slug'] = PaymentStatuses::paid()->slug;
                        $order['paypal_subscription_id'] = $form_data['details']['subscriptionID'];
                    } else {
                        $order['order_status_slug'] = OrderStatuses::unfulfilled()->slug;
                        $order['payment_status_slug'] = PaymentStatuses::void()->slug;
                        $order['product_paid'] = 0;
                    }

                    $order['product_subtotal'] = $product['base_price'];
                    $order['subtotal'] = $product['base_price'];
                    $order['total'] = $product['base_price'];
                }

                if ( ProductTypes::paymentPlan()->slug === $order['product_type'] ) {
                    $payments_counter = $product['payment_detail']['num_payments'];

                    $order['product_price'] = $product['base_price'];
                    $order['product_frequency'] = $product['payment_detail']['payment_frequency']['slug'];
                    $order['product_payment_numbers'] = $payments_counter;
                    $order['product_payment_numbers_left'] = $payments_counter - 1;

                    $product_price = floatval( $product['base_price'] );

                    $order['product_paid'] = $product_price / $payments_counter;

                    $has_first_payment = (bool) $product['payment_detail']['has_first_payment'];
                    if ( $has_first_payment ) {
                        $order['product_first_payment'] = 'on';
                        $order['product_payment_numbers_left'] = $payments_counter;
                        $first_payment_amount = floatval( $product['payment_detail']['first_payment'] );
                        $order['product_first_payment_price'] = $first_payment_amount;
                        $order['product_paid'] = $first_payment_amount;
                    }

                    if ( 'success' === $form_data['status'] ) {

                        if ( ! $has_first_payment && $payments_counter == 1 ) {
                            $order['order_status_slug'] = OrderStatuses::fulfilled()->slug;
                            $order['payment_status_slug'] = PaymentStatuses::paid()->slug;
                            $order['product_trans_id'] = $form_data['details']['orderID'];
                        } else {
                            $order['order_status_slug'] = OrderStatuses::fulfilled()->slug;
                            $order['payment_status_slug'] = PaymentStatuses::partiallyPaid()->slug;
                        }

                    } else {
                        $order['order_status_slug'] = OrderStatuses::unfulfilled()->slug;
                        $order['payment_status_slug'] = PaymentStatuses::void()->slug;
                    }

                    $order['product_subtotal'] = $product['base_price'];
                    $order['subtotal'] = $product['base_price'];
                    $order['total'] = $product['base_price'];
                }

            } elseif ( 'phone' === $input['name'] ) {
                $order['phone'] = $input['value'];
                $order['phone_code'] = $input['code'];
            } elseif( 'bump' === $input['name'] || 'stripe' === $input['name'] ) {
                // do nothing
            } elseif( 'password' === $input['name'] ) {
                $licensee_password = $input['value'];
            } else {
                $order[ $input['name'] ] = $input['value'];
            }
        }

        $order_id = $this->_create_order( $order );

        $this->_set_cookies_for_license_manager( $order_id, $licensee_password ?? null );

        wp_die( json_encode( $order ) );
    }

    /**
     * @version 0.1.8
     */
    public function payment_buttons() {
        $form_data = json_decode( stripslashes( $_POST['data'] ), true );
        $payment_id = sanitize_text_field( $_POST['payment_id'] ?? '' ); // phpcs:ignore WordPress.Security.NonceVerification.Missing

        $order = [ 'payment_provider_slug' => 'stripe' ];

        foreach ( $form_data as $input ) {
            if ( 'product' === $input['name'] ) {
                $order['product_id'] = $input['value']['id'];
                $order['product_quantity'] = $input['value']['qty'] ?? 1;
                $order['product_options'] = $input['value']['product_options'] ?? [];
            } elseif( 'bump' === $input['name'] ) {
                $order['product_bump_id'] = $input['value'];
                $order['product_bump_quantity'] = 1;
            } elseif ( 'phone' === $input['name'] ) {
                $order['phone'] = $input['value'];
                $order['phone_code'] = $input['code'];
            } elseif ( 'stripe' === $input['name'] ) {
                $order['card_last_four'] = $input['value']['card_last_four'];
                $order['card_brand'] = $input['value']['card_brand'];
                $order['card_exp_date'] = $input['value']['card_exp_date'];
                $order['stripe_token'] = $input['value']['stripe_token'];
            } elseif( 'password' === $input['name'] ) {
                $licensee_password = $input['value'];
            } else {
                $order[ $input['name'] ] = $input['value'];
            }
        }

        $order['card_last_four'] = sanitize_text_field( $_POST['card_last_four'] );
        $order['card_brand'] = sanitize_text_field( $_POST['card_brand'] );
        unset( $order['stripe_token'] );

        if ( ! empty( $order['stripe_token'] ) ) {
            try {
                $customer = $this->stripe->customers->create( [
                    'address' => [
                        'line1' => $order['checkout_address'] ?: esc_html__( 'Address not found', 'north-commerce' ),
                        'city' => $order['checkout_city'] ?: '',
                        'country' => $order['checkout_country'] ?: '',
                        'postal_code' => $order['checkout_zip'] ?: '',
                        'state' => $order['checkout_state'] ?: '',
                    ],
                    'email' => $order['email'],
                    'phone' => $order['phone'],
                    'name' => $order['fullname'] ?? ( $order['firstName'] . ' ' . $order['secondName'] ),
                    'source' => $order['stripe_token'],
                ] );
                setcookie( 'customer_id', $customer->id, 0, '/' );
            } catch ( Exception $e ) {
                echo json_encode( array( 'error' => $e->getMessage() ) );
                wp_die();
            }
        }

        $customer_id = $customer->id ?? null;
        $result = $this->product_payment( $order, $customer_id, false, $payment_id );
        $order = array_merge( $order, $result );

        if ( isset( $order['product_bump_id'] ) ) {
            $result = $this->product_payment( $order, $customer_id, true, $payment_id );
            $order = array_merge( $order, $result );
        }

        $order_id = $this->_create_order( $order );
        $this->_set_cookies_for_license_manager( $order_id, $licensee_password ?? null );

        wp_die( json_encode( $order ) );
    }

    /**
     * @version 0.1.8
     */
    public function stripe_payment_process() {
        $form_data = json_decode( stripslashes( $_POST['data'] ), true );

        $order = [ 'payment_provider_slug' => 'stripe' ];
        foreach ( $form_data as $input ) {
            if ( 'product' === $input['name'] ) {
                $order['product_id'] = $input['value']['id'];
                $order['product_quantity'] = $input['value']['qty'] ?? 1;
                $order['product_options'] = $input['value']['product_options'] ?? array();
            } elseif ( 'bump' === $input['name'] ) {
                $order['product_bump_id'] = $input['value'];
                $order['product_bump_quantity'] = 1;
            } elseif ( $input['name'] === 'phone' ) {
                $order['phone'] = $input['value'];
                $order['phone_code'] = $input['code'];
            } elseif ( 'stripe' === $input['name'] ) {
                $order['card_last_four'] = $input['value']['card_last_four'];
                $order['card_brand'] = $input['value']['card_brand'];
                $order['card_exp_date'] = $input['value']['card_exp_date'];
                $order['stripe_token'] = $input['value']['stripe_token'];
            } elseif ( 'password' === $input['name'] ) {
                $licensee_password = $input['value'];
            } else {
                $order[ $input['name'] ] = $input['value'];
            }
        }

        if ( ! empty( $order['stripe_token'] ) ) {
            try {
                $customer = $this->stripe->customers->create( [
                    'address' => [
                        'line1' => $order['checkout_address'],
                        'city' => $order['checkout_city'],
                        'country' => $order['checkout_country'],
                        'postal_code' => $order['checkout_zip'],
                        'state' => $order['checkout_state'],
                    ],
                    'email' => $order['email'],
                    'phone' => $order['phone'],
                    'name' => $order['fullname'] ?? ( $order['firstName'] . ' ' . $order['secondName'] ),
                    'source' => $order['stripe_token'],
                ] );
                setcookie( 'customer_id', $customer->id, 0, '/' );
            } catch ( Exception $e ) {

                $this->_create_order( $order );
                wp_die( json_encode( [ 'error' => $e->getMessage() ] ) );

            }
        }

        $payment_result = $this->product_payment( $order, $customer->id );
        $order = array_merge( $order, $payment_result );

        if ( isset( $order['product_bump_id'] ) ) {
            $payment_result = $this->product_payment( $order, $customer->id, $is_bump_payment = true );
            $order = array_merge( $order, $payment_result );
        }

        $order_id = $this->_create_order( $order );
        $this->_set_cookies_for_license_manager( $order_id, $licensee_password ?? null );

        wp_die( json_encode( $order ) );
    }

    /**
     * @version 0.1.21
     */
    public function product_payment(
        $order_data,
        $customer_id,
        $is_bump_payment = false,
        $payment_id = null
    ) {
        $product_id = $is_bump_payment ? $order_data['product_bump_id'] : $order_data['product_id'];
        $quantity = $order_data['product_quantity'] ?? 1;

        $product_controller = new North_Commerce_Product( $product_id );
        $product_model = new ProductModel();

        $product = $product_model->get_by_id( $product_id );
        $prefix = $is_bump_payment ? 'bump_' : '';

        $product_type_slug = $product['product_type']['slug'];

        $result = [
            $prefix . 'product_id' => $product['id'],
            $prefix . 'product_name' => $product['name'],
            $prefix . 'product_type' => $product_type_slug,
            $prefix . 'product_sku' => $product['sku'],
            $prefix . 'product_currency' => Settings::get_currency_symbol(),
            $prefix . 'product_quantity' => $quantity,
        ];

        $variant = $product_controller->get_product_variant_data(
            $product['id'],
            $order_data['product_options'] ?? []
        );
        $result[ $prefix . 'product_variant' ] = $variant['variant'];

        if ( ProductTypes::oneTime()->slug === $product_type_slug ) {
            $result[ $prefix . 'product_price' ] = floatval( $variant['price'] );
            $result[ $prefix . 'product_subtotal' ] = floatval( $variant['price'] ) * $result[ $prefix . 'product_quantity' ];

            // Update price and inventory if is bump and reload bump
            if ( $is_bump_payment ) {
                $result[ $prefix . 'product_price' ] = $bump_price ?? 0;
                $result[ $prefix . 'product_subtotal' ] = ( $bump_price ?? 0 ) * $result[ $prefix . 'product_quantity' ];
                $variant['inventory'] = $variant['inventory'];
            }

            $subtotal_price = $result[ $prefix . 'product_subtotal' ];
            $result[ $prefix . 'subtotal' ] = $subtotal_price;

            list(
                $result[ $prefix . 'coupon_id' ],
                $coupon_discount
            ) = $this->calculate_coupon_discount( $subtotal_price, $order_data['promocode'] ?? '' );

            $result[ $prefix . 'total' ] = $subtotal_price - $coupon_discount;

            if ( null !== $variant['inventory'] && $variant['inventory'] < $quantity ) {
                $result[ $prefix . 'order_status_slug' ] = OrderStatuses::unfulfilled()->slug;
                $result[ $prefix . 'payment_status_slug' ] = PaymentStatuses::void()->slug;
                $result[ $prefix . 'order_payment_status_error' ] = 'Inventory less $quantity';
                $result[ $prefix . 'product_paid' ] = 0;
            } else {
                if ( $result[ $prefix . 'total' ] > 0 ) {
                    try {

                        $transaction_data = [
                            'amount' => $result[ $prefix . 'total' ] * 100,
                            'currency' => strtolower( Settings::get_currency_code() ),
                        ];

                        if ( $payment_id != null ) {
                            $transaction_data['payment_method'] = $payment_id;
                            $transaction = $this->stripe->paymentIntents->create( $transaction_data );
                            $this->stripe->paymentIntents->confirm(
                                $transaction->id,
                                [ 'payment_method' => $payment_id ]
                            );
                        } else {
                            $transaction_data['customer'] = $customer_id;
                            $transaction = $this->stripe->charges->create( $transaction_data );
                        }

                        $result[ $prefix . 'order_status_slug' ] = OrderStatuses::unfulfilled()->slug;
                        $result[ $prefix . 'payment_status_slug' ] = PaymentStatuses::paid()->slug;
                        $result[ $prefix . 'product_trans_id' ] = $transaction->id;
                        $result[ $prefix . 'product_paid' ] = $result[ $prefix . 'total' ];

                    } catch ( Exception $e ) {
                        $result[ $prefix . 'order_status_slug' ] = OrderStatuses::unfulfilled()->slug;
                        $result[ $prefix . 'payment_status_slug' ] = PaymentStatuses::void()->slug;
                        $result[ $prefix . 'product_paid' ] = 0;
                        $result[ $prefix . 'error' ] = $e->getMessage();
                    }

                } else {
                    $result[ $prefix . 'order_status_slug' ] = OrderStatuses::fulfilled()->slug;
                    $result[ $prefix . 'payment_status_slug' ] = PaymentStatuses::paid()->slug;
                    $result[ $prefix . 'product_paid' ] = 0;
                }
            }
        }

        $plan_prefix = $is_bump_payment ? 'plan_bump_' : 'plan_';
        $plan_id = $product['id_salt']
            ? $product['id'] . '_' . $product['id_salt']
            : $product['id'];

        if ( ProductTypes::subscription()->slug === $product_type_slug ) {
            $result[ $prefix . 'product_quantity' ] = 1;

            if ( $is_bump_payment ) {
                $result[ $prefix . 'product_price' ] = $bump_price ?? 0;
                $result[ $prefix . 'product_frequency' ] = $bump_frequency ?? null;
                $result[ $prefix . 'product_first_period' ] = 'on';
                $result[ $prefix . 'product_start_price' ] = $bump_start_price ?? null;
                $result[ $prefix . 'product_paid' ] = $bump_start_price ?? null;
                $result[ $prefix . 'product_free_trial' ] = 'on';
                $result[ $prefix . 'product_trial_count' ] = $bump_trial_count ?? null;
                $result[ $prefix . 'product_trial_type' ] = $bump_trial_type ?? null;
                $result[ $prefix . 'product_paid' ] = floatval( 0 );
            } else {
                $result[ $prefix . 'product_price' ] = floatval( $product['base_price'] );
                $result[ $prefix . 'product_frequency' ] = $product['payment_detail']['payment_frequency']['slug'];
                $result[ $prefix . 'product_paid' ] = $product['base_price'];

                $has_first_period_payment = (bool) ( $product['payment_detail']['has_first_period_payment'] ?? null );
                if ( $has_first_period_payment ) {
                    $result[ $prefix . 'product_first_period' ] = 'on';
                    $result[ $prefix . 'product_start_price' ] = $product['payment_detail']['first_period_payment'];
                    $result[ $prefix . 'product_paid' ] = $product['payment_detail']['first_period_payment'];
                }

                $has_free_trial = (bool) ( $product['payment_detail']['has_free_trial'] ?? null );
                if ( $has_free_trial ) {
                    $result[ $prefix . 'product_free_trial' ] = 'on';
                    $result[ $prefix . 'product_trial_count' ] = $product['payment_detail']['free_trial_frequency'];
                    $result[ $prefix . 'product_trial_type' ] = $product['payment_detail']['free_trial_type']['slug'];
                    $result[ $prefix . 'product_paid' ] = floatval( 0 );
                }
            }

            $subtotal_price = $result[ $prefix . 'product_price' ] * $result[ $prefix . 'product_quantity' ];
            $result[ $prefix . 'product_subtotal' ] = $subtotal_price;
            $result[ $prefix . 'subtotal' ] = $subtotal_price;

            list(
                $result[ $prefix . 'coupon_id' ],
                $coupon_discount
            ) = $this->calculate_coupon_discount( $subtotal_price, $order_data['promocode'] ?? '' );

            $result[ $prefix . 'total' ] = $subtotal_price - $coupon_discount;

            try {
                $args = [
                    'items' => [
                        [ 'plan' => $plan_prefix . $plan_id ]
                    ],
                ];

                if ( ! empty( $customer_id ) ) {
                    $args['customer'] = $customer_id;
                }

                if ( $payment_id != null ) {
                    $args['default_payment_method'] = $payment_id;
                }

                if ( isset( $result[ $prefix . 'product_free_trial' ] ) && $result[ $prefix . 'product_free_trial' ] === 'on' ) {
                    $args['trial_end'] = strtotime( $result[ $prefix . 'product_trial_count' ] . ' ' . $result[ $prefix . 'product_trial_type' ] );
                }

                $transaction = $this->stripe->subscriptions->create( $args );
                $result[ $prefix . 'order_status_slug' ] = OrderStatuses::fulfilled()->slug;
                $result[ $prefix . 'payment_status_slug' ] = PaymentStatuses::paid()->slug;
                $result[ $prefix . 'product_trans_id' ] = $transaction->id; // subscription ID
            } catch ( Exception $e ) {
                $result[ $prefix . 'order_status_slug' ] = OrderStatuses::unfulfilled()->slug;
                $result[ $prefix . 'payment_status_slug' ] = PaymentStatuses::void()->slug;
                $result[ $prefix . 'product_paid' ] = 0;
                $result[ $prefix . 'error' ] = $e->getMessage();
            }
        }

        if ( ProductTypes::paymentPlan()->slug === $product_type_slug ) {
            if ( $is_bump_payment ) {
				$result[ $prefix . 'product_price' ] = $bump_price ?? 0;
				$result[ $prefix . 'product_frequency' ] = $bump_frequency ?? null;
				$result[ $prefix . 'product_payment_numbers' ] = $bump_payment_count ?? null;
                $result[ $prefix . 'product_payment_numbers_left' ] = ( $bump_payment_count ?? null ) - 1;

                $result[ $prefix . 'product_first_payment' ] = 'on';
				$result[ $prefix . 'product_first_payment_price' ] = $bump_start_price ?? null;
				$result[ $prefix . 'product_paid' ] = $bump_start_price ?? null;
            } else {
                $price = floatval( $product['base_price'] );
                $payments_counter = (int) $product['payment_detail']['num_payments'];

                $result[ $prefix . 'product_price' ] = $product['base_price'];
                $result[ $prefix . 'product_frequency' ] = $product['payment_detail']['payment_frequency']['slug'];
                $result[ $prefix . 'product_payment_numbers' ] = $payments_counter;
                $result[ $prefix . 'product_payment_numbers_left' ] = $payments_counter - 1; // exclude current payment
                $result[ $prefix . 'product_paid' ] = $price / $payments_counter;

                $has_first_payment = (bool) $product['payment_detail']['has_first_payment'];
                if ( $has_first_payment ) {
                    $first_payment_amount = floatval( $product['payment_detail']['first_payment'] );
                    $result[ $prefix . 'product_first_payment' ] = 'on';
                    $result[ $prefix . 'product_first_payment_price' ] = $first_payment_amount;
                    $result[ $prefix . 'product_paid' ] = $first_payment_amount;
                }
            }

            $product_frequency = 'ly' === substr( $result[ $prefix . 'product_frequency' ], -2 )
                ? substr( $result[ $prefix . 'product_frequency' ], 0, -2 )
                : $result[ $prefix . 'product_frequency' ];

            $cancel_time = strtotime( strval( $result[ $prefix . 'product_payment_numbers' ] ) . ' ' .  $product_frequency );
            $subscription_data = [
                'items' => [
                    [ 'plan' => $plan_prefix . $plan_id ]
                ],
                'cancel_at' => $cancel_time,
            ];

            if ( $payment_id != null ) {
                $subscription_data['default_payment_method'] = $payment_id;
            } else {
                $subscription_data['customer'] = $customer_id;
            }

            try {

                $transaction = $this->stripe->subscriptions->create( $subscription_data );
                $result[ $prefix . 'product_trans_id' ] = $transaction->id;

            } catch ( Exception $e ) {
                $result[ $prefix . 'order_status_slug' ] = OrderStatuses::unfulfilled()->slug;
                $result[ $prefix . 'payment_status_slug' ] = PaymentStatuses::void()->slug;
                $result[ $prefix . 'product_paid' ] = 0;
                $result[ $prefix . 'product_payment_numbers_left' ] = $payments_counter; // include failed payment
                $result[ $prefix . 'error' ] = $e->getMessage();
            }

            $sucess_payment = (bool) $result[ $prefix . 'payment_transaction_id' ] ?? null;
            if ( $sucess_payment ) {

                if (
                    ( ! isset( $result[ $prefix . 'product_first_payment' ] ) || $result[ $prefix . 'product_first_payment' ] !== 'on' )
                    && intval( $result[ $prefix . 'product_payment_numbers' ] ) == 1
                ) {
                    $result[ $prefix . 'order_status_slug' ] = OrderStatuses::fulfilled()->slug;
                    $result[ $prefix . 'payment_status_slug' ] = PaymentStatuses::paid()->slug;
                } else {
                    $result[ $prefix . 'order_status_slug' ] = OrderStatuses::fulfilled()->slug;
                    $result[ $prefix . 'payment_status_slug' ] = PaymentStatuses::partiallyPaid()->slug;
                }

                $result[ $prefix . 'product_subtotal' ] = $result[ $prefix . 'product_price' ];
                $result[ $prefix . 'subtotal' ] = $result[ $prefix . 'product_price' ];
                $result[ $prefix . 'total' ] = $result[ $prefix . 'product_price' ];

            }
        }

        return $result;
    }

    /**
     * @since   0.1.1
     * @version 0.1.8
     */
    public function mollie_payment_process() {
        $form_data = json_decode( stripslashes( $_POST['data'] ), true );

        $order = [ 'payment_provider_slug' => 'mollie' ];

        $get_promocode = function( $form_data ) {
            foreach ( $form_data as $input ) {
                if ( 'promocode' === $input['name'] ) {
                    $promocode = $input['value'];
                    break;
                }
            }

            return $promocode ?? null;
        };
        $promocode = $get_promocode( $form_data );

        foreach ( $form_data as $input ) {
            if ( 'product' === $input['name'] ) {
                $input['promocode'] = $promocode;
                $order = array_merge( $order, $this->_mollie_get_product_meta( $input ) );
            } elseif ( 'bump' === $input['name'] ) {
                $format_bump_data = [
                    'value' => [
                        'id' => $input['value'],
                        'qty' => 1,
                    ]
                ];
                $order = array_merge( $order, $this->_mollie_get_product_meta( $format_bump_data, $is_bump = true ) );
            } elseif ( $input['name'] === 'phone' ) {
                $order['phone'] = $input['value'];
                $order['phone_code'] = $input['code'];
            } elseif ( 'stripe' === $input['name'] ) {
                // do nothing
            } elseif ( 'mollie' === $input['name'] ) {
                $order['mollie_payment_method'] = $input['value'];
            } elseif( 'redirect' === $input['name'] ) {
                $redirect = $input['value'];
                unset( $input );
            } elseif ( $input['name'] === 'card' ) {
                unset( $input );
            } elseif ( 'password' === $input['name'] ) {
                $licensee_password = $input['value'];
            } else {
                $order[ $input['name'] ] = $input['value'];
            }
        }

        $order_id = $this->_create_order( $order );

        $this->_set_cookies_for_license_manager( $order_id, $licensee_password ?? null );

        $order['order_id'] = $order_id;
        $order['redirect'] = $redirect;

        $this->_mollie_create_payment( $order );
    }

    /**
     * @since   0.1.1
     * @version 0.1.21
     */
    private function _mollie_get_product_meta( $product_data, $is_bump = false ) {
        $product_controller = new North_Commerce_Product();
        $product_model = new ProductModel();
        $product = $product_model->get_by_id( $product_data['value']['id'] );
        $product_type_slug = $product['product_type']['slug'];

        $prefix = $is_bump ? 'bump_' : '';

        $order = [
            $prefix . 'product_id' => $product['id'],
            $prefix . 'product_name' => $product['name'],
            $prefix . 'product_type' => $product_type_slug,
            $prefix . 'product_sku' => $product['sku'],
            $prefix . 'product_currency' => Settings::get_currency_symbol(),
            $prefix . 'product_quantity' => intval( $product_data['value']['qty'] ?? 1 ),
            $prefix . 'order_status_slug' => OrderStatuses::onHold()->slug,
            $prefix . 'payment_status_slug' => PaymentStatuses::pending()->slug,
        ];

        $variant = $product_controller->get_product_variant_data(
            $product['id'],
            $product_data['value']['product_options'] ?? []
        );
        $order[ $prefix . 'product_variant' ] = $variant['variant'];

        $order[ $prefix . 'product_paid' ] = 0;

        if ( ProductTypes::oneTime()->slug === $product_type_slug ) {
            $order[ $prefix . 'product_price' ] = floatval( $variant['price'] );
            $order[ $prefix . 'product_subtotal' ] = floatval( $variant['price'] ) * $order[ $prefix . 'product_quantity' ];
            $order[ $prefix . 'subtotal' ] = $order[ $prefix . 'product_subtotal' ];
        }

        if (
            ProductTypes::subscription()->slug === $product_type_slug
            || ProductTypes::paymentPlan()->slug === $product_type_slug
        ) {
            $order[ $prefix . 'product_price' ] = $product['base_price'];
            $order[ $prefix . 'product_frequency' ] = $product['payment_detail']['payment_frequency']['slug'];
            $order[ $prefix . 'product_subtotal' ] = $product['base_price'];
            $order[ $prefix . 'subtotal' ] = $order[ $prefix . 'product_subtotal' ];
        }

        list(
            $order[ $prefix . 'coupon_id' ],
            $coupon_discount
        ) = $this->calculate_coupon_discount( $order[ $prefix . 'subtotal' ], $product_data['promocode'] ?? '' );
        $order[ $prefix . 'total' ] = $order[ $prefix . 'subtotal' ] - $coupon_discount;

        if ( ProductTypes::subscription()->slug === $product_type_slug ) {
            $has_free_trial = (bool) ( $product['payment_detail']['has_free_trial'] ?? null );
            if ( $has_free_trial ) {
                $order[ $prefix . 'product_free_trial' ] = 'on';
                $order[ $prefix . 'product_trial_count' ] = $product['payment_detail']['free_trial_frequency'];
                $order[ $prefix . 'product_trial_type' ] = $product['payment_detail']['free_trial_type']['slug'];
            }
        }

        if ( ProductTypes::paymentPlan()->slug === $product_type_slug ) {
            $order[ $prefix . 'product_payment_numbers' ] = $product['payment_detail']['num_payments'];
            $order[ $prefix . 'product_payment_numbers_left' ] = $product['payment_detail']['num_payments'];

            $has_first_payment = (bool) $product['payment_detail']['has_first_payment'];
            if ( $has_first_payment ) {
                $order[ $prefix . 'product_first_payment' ] = 'on';
                $order[ $prefix . 'product_first_payment_price' ] = floatval( $product['payment_detail']['first_payment'] );
            }
        }

        return $order;
    }

	/**
	 * @since   0.1.1
	 * @version 0.1.19
	 */
    private function _mollie_create_payment( $order ) {
        $order_id = $order['order_id'];
        $product_model = new ProductModel();
        $order_model = new OrderModel();

        $mollie = new North_Commerce_Mollie();
        $mollie_client = new \Mollie\Api\MollieApiClient();
        $mollie_client->setApiKey( $mollie->get_api_key() );

        $product = $product_model->get_by_id( $order['product_id'] );

        try {
            if ( isset( $order['bump_product_id'] ) ) {
                $bump_product = $product_model->get_by_id( $order['bump_product_id'] );

                $bump_product_type = $bump_product['product_type']['slug'];

                if ( ProductTypes::oneTime()->slug === $bump_product_type ) {
                    $bump_payment = $mollie_client->payments->create( [
                        'amount' => [
                            'currency' => Settings::get_currency_code(),
                            'value' => number_format( $order['bump_total'], 2 )
                        ],
                        'description' => $order['bump_product_name'] . ': ' . $order['bump_product_quantity'],
                        'redirectUrl' => $order['redirect'],
                        'webhookUrl' => North_Rest_Conrtoller::get_url() . 'mollie-payment',
                        'method' => $order['mollie_payment_method'],
                        'metadata' => [
                            'order_id' => $order_id,
                            'bump_product' => true,
                        ],
                    ] );
                } else {
                    $all_customers = $mollie_client->customers->page();
                    $customer = null;

                    do {
                        foreach ( $all_customers as $user ) {
                            if ( $user->email === $order['email'] ) {
                                $customer = $user;
                                break;
                            }
                        }
                    } while ( $customer == null && $all_customers->next() );

                    if ( $customer == null ) {
                        $customer = $mollie_client->customers->create( [
                            'name' => $order['firstName'] . ' ' . $order['secondName'],
                            'email' => $order['email'],
                        ] );
                    }

                    if ( ProductTypes::subscription()->slug === $bump_product_type ) {
                        $amount = $bump_product['base_price'];

                        $has_free_trial = (bool) ( $bump_product['payment_detail']['has_free_trial'] ?? null );
                        if ( $has_free_trial ) {
                            $amount = 0;
                        }

                        $bump_payment = $mollie_client->payments->create( [
                            'amount' => [
                                'currency' => Settings::get_currency_code(),
                                'value' => number_format( $amount, 2 )
                            ],
                            'sequenceType' => 'first',
                            'customerId' => $customer->id,
                            'description' => $order['bump_product_name'] . ': ' . $order['bump_product_quantity'],
                            'redirectUrl' => $order['redirect'],
                            'webhookUrl' => North_Rest_Conrtoller::get_url() . 'mollie-payment',
                            'method' => $order['mollie_payment_method'],
                            'metadata' => [
                                'customer_id' => $customer->id,
                                'order_id' => $order_id,
                                'bump_product' => true,
                            ],
                        ] );
                    } else {
                        $amount = $bump_product['base_price'];
                        $payments_counter = $bump_product['payment_detail']['num_payments'];
                        $first_pay = floatval( $amount ) / floatval( $payments_counter );

                        $has_first_payment = (bool) $bump_product['payment_detail']['has_first_payment'];
                        if ( $has_first_payment ) {
                            $first_pay = $bump_product['payment_detail']['first_period_payment'];
                        }

                        $bump_payment = $mollie_client->payments->create( [
                            'amount' => [
                                'currency' => Settings::get_currency_code(),
                                'value' => number_format( $first_pay, 2 )
                            ],
                            'sequenceType' => 'first',
                            'customerId' => $customer->id,
                            'description' => $order['bump_product_name'] . ': ' . $order['bump_product_quantity'],
                            'redirectUrl' => $order['redirect'],
                            'webhookUrl' => North_Rest_Conrtoller::get_url() . 'mollie-payment',
                            'method' => $order['mollie_payment_method'],
                            'metadata' => [
                                'customer_id' => $customer->id,
                                'order_id' => $order_id,
                                'bump_product' => true,
                            ],
                        ] );
                    }

                }

                $bump_checkout_url = $bump_payment->getCheckoutUrl();
            }

            if ( ProductTypes::oneTime()->slug === $product['product_type']['slug'] ) {
                $payment = $mollie_client->payments->create( [
                    'amount' => [
                        'currency' => Settings::get_currency_code(),
                        'value' => number_format( $order['total'], 2 )
                    ],
                    'description' => $order['product_name'] . ': ' . $order['product_quantity'],
                    'redirectUrl' => $bump_checkout_url ?? $order['redirect'],
                    'webhookUrl' => North_Rest_Conrtoller::get_url() . 'mollie-payment',
                    'method' => $order['mollie_payment_method'],
                    'metadata' => [ 'order_id' => $order_id ],
                ] );
            } else {
                $all_customers = $mollie_client->customers->page();
                $customer = null;

                do {
                    foreach ( $all_customers as $user ) {
                        if ( $user->email === $order['email'] ) {
                            $customer = $user;
                            break;
                        }
                    }
                } while ( $customer == null && $all_customers->next() );

                if ( $customer == null ) {
                    $customer = $mollie_client->customers->create( [
                        'name' => $order['firstName'] . ' ' . $order['secondName'],
                        'email' => $order['email'],
                    ] );
                }

                if ( ProductTypes::subscription()->slug === $product['product_type']['slug'] ) {
                    $amount = $product['base_price'];

                    $has_free_trial = (bool) ( $product['payment_detail']['has_free_trial'] ?? null );
                    if ( $has_free_trial ) {
                        $amount = 0;
                    }

                    $payment = $mollie_client->payments->create( [
                        'amount' => [
                            'currency' => Settings::get_currency_code(),
                            'value' => number_format( $amount, 2 )
                        ],
                        'sequenceType' => 'first',
                        'customerId' => $customer->id,
                        'description' => $order['product_name'] . ': ' . $order['product_quantity'],
                        'redirectUrl' => $bump_checkout_url ?? $order['redirect'],
                        'webhookUrl' => North_Rest_Conrtoller::get_url() . 'mollie-payment',
                        'method' => $order['mollie_payment_method'],
                        'metadata' => [
                            'customer_id' => $customer->id,
                            'order_id' => $order_id,
                        ],
                    ] );
                }

                if ( ProductTypes::paymentPlan()->slug === $product['product_type']['slug'] ) {
                    $product_price = $product['base_price'];
                    $payments_counter = $product['payment_detail']['num_payments'];
                    $first_payment_amount = floatval( $product_price ) / intval( $payments_counter );

                    $has_first_payment = (bool) $product['payment_detail']['has_first_payment'];
                    if ( $has_first_payment ) {
                        $first_payment_amount = $product['payment_detail']['first_payment'];
                    }

                    $payment = $mollie_client->payments->create( [
                        'amount' => [
                            'currency' => Settings::get_currency_code(),
                            'value' => number_format( $first_payment_amount, 2 )
                        ],
                        'sequenceType' => 'first',
                        'customerId' => $customer->id,
                        'description' => $order['product_name'] . ': ' . $order['product_quantity'],
                        'redirectUrl' => $bump_checkout_url ?? $order['redirect'],
                        'webhookUrl' => North_Rest_Conrtoller::get_url() . 'mollie-payment',
                        'method' => $order['mollie_payment_method'],
                        'metadata' => [
                            'customer_id' => $customer->id,
                            'order_id' => $order_id,
                        ],
                    ] );
                }
            }

            add_option( "nc/order_{$order_id}/transaction_id", $payment->id );
            wp_die( json_encode( [ 'redirect' => $payment->getCheckoutUrl() ] ) );

        } catch ( \Mollie\Api\Exceptions\ApiException $e ) {
            $order_model->update_order_status( $order_id, OrderStatuses::unfulfilled()->id );
            $order_model->update_payment_status( $order_id, PaymentStatuses::unpaid()->id );
            wp_die( json_encode( [ 'error' => $e->getMessage() ] ) );
        } catch ( Exception $e ) {
            $order_model->update_order_status( $order_id, OrderStatuses::unfulfilled()->id );
            $order_model->update_payment_status( $order_id, PaymentStatuses::unpaid()->id );
            wp_die( json_encode( [ 'error' => $e->getMessage() ] ) );
        }
    }

    /**
     * @since   0.1.18
     * @version 0.1.24
     */
    public function zero_price_payment_process() {
        $form_data = json_decode( stripslashes( $_POST['data'] ), true );

        $order = [ 'payment_provider_slug' => 'none' ];
        foreach ( $form_data as $input ) {
            if ( 'product' === $input['name'] ) {
                $order['product_id'] = $input['value']['id'];
                $order['product_quantity'] = $input['value']['qty'] ?? 1;
                $order['product_options'] = $input['value']['product_options'] ?? array();
            } elseif ( 'bump' === $input['name'] ) {
                $order['product_bump_id'] = $input['value'];
                $order['product_bump_quantity'] = 1;
            } elseif ( $input['name'] === 'phone' ) {
                $order['phone'] = $input['value'];
                $order['phone_code'] = $input['code'];
            } elseif ( 'stripe' === $input['name'] ) {
                // do nothing
            } elseif ( 'password' === $input['name'] ) {
                $licensee_password = $input['value'];
            } else {
                $order[ $input['name'] ] = $input['value'];
            }
        }

        $variant = ( new North_Commerce_Product() )->get_product_variant_data(
            $order['product_id'],
            $order['product_options'] ?? []
        );
        $order['product_variant'] = $variant['variant'];

        $order['subtotal'] = floatval( $variant['price'] );

        if ( ! empty( $order['promocode'] ) ) {
            list(
                $order[ 'coupon_id' ],
                $coupon_discount
            ) = $this->calculate_coupon_discount( $order['subtotal'], $order['promocode'] );
        }

        $order['total'] = isset( $coupon_discount )
            ? floatval( $variant['price'] ) - $coupon_discount
            : $variant['price'];

        if ( floatval( 0 ) !== floatval( $order['total'] ) ) {
            wp_die( json_encode( [ 'error' => 'Payment data is missing. Please, try again.' ] ) );
        }

        $order['order_status_slug'] = OrderStatuses::unfulfilled()->slug;
        $order['payment_status_slug'] = PaymentStatuses::paid()->slug;

        $order_id = $this->_create_order( $order );
        $this->_set_cookies_for_license_manager( $order_id, $licensee_password ?? null );
        wp_die( json_encode( $order ) );
    }

    /**
     * @since   0.1.2
     * @version 0.1.21
     */
    private function _set_cookies_for_license_manager( $order_id, $licensee_password ) {
        if (
            ! defined( 'SLM_TBL_LICENSE_KEYS' )
            || ! $order_id
            || is_wp_error( $order_id )
        ) {
            // Bailout.
            return;
        }

        setcookie( 'order_id', $order_id, 0, '/' );

        if ( $licensee_password ) {
            set_transient(
                'north-commerce/' . $order_id . '/lic',
                [ 'pass' => $licensee_password ],
                2 * HOUR_IN_SECONDS
            );
        }
    }

    /**
     * @since 0.1.8
     */
    private function _create_order( $order_data ) {
        $pm = North_Commerce_Db_Agent::instance()->perspectiveManager();
        return $pm->asAdministrator( function() use ( $order_data ) {
            return North_Commerce_Order::create_order( $order_data );
        } );
    }

    /**
     * Handle rendering of custom menu cart icon
     *
     * @since   0.1.9
     * @version 0.1.10
     */
    public function add_menu_cart_icon( $menu_items ) {
        $placeholders = [
            '#nc-cart-icon#' => [
                'shortcode' => 'nc-cart-icon',
                'atts' => [],
            ],
        ];

        foreach ( $menu_items as $menu_item ) {
            if ( isset( $placeholders[ $menu_item->url ] ) ) {
                global $shortcode_tags;
                $placeholder = $placeholders[ $menu_item->url ];

                if ( isset( $shortcode_tags[ $placeholder['shortcode'] ] ) ) {
                    $cart_svg = call_user_func( $shortcode_tags[ $placeholder['shortcode'] ], $placeholder['atts'] );
                    $cart_counter = '<span id="nc-cart-counter" class="nc-cart-counter"></span>';
                    $menu_item->title = $cart_svg . $cart_counter;

                    $menu_item->url = '###';
                    $cart_item_id = $menu_item->ID;
                    add_filter( 'walker_nav_menu_start_el', function( $item_output, $menu_item ) use ( $cart_item_id ) {

                        if ( $cart_item_id !== $menu_item->ID ) {
                            // Bailout.
                            return $item_output;
                        }

                        $extra_class = ' class="nc-cart-icon"';
                        $extra_attr = ' data-type="nc-cart-drawer-open"';

                        $cart_icon_colors = Settings::get_menu_cart_icon_colors();
                        $cart_fill = ! empty( $cart_icon_colors['icon_color'] ) ? '--nc-cart-icon: ' . $cart_icon_colors['icon_color'] . ';' : '';
                        $counter_text = ! empty( $cart_icon_colors['counter_color'] ) ? '--nc-counter-text: ' . $cart_icon_colors['counter_color'] . ';' : '';
                        $counter_bg = ! empty( $cart_icon_colors['counter_bg'] ) ? '--nc-counter-bg: ' . $cart_icon_colors['counter_bg'] . ';' : '';
                        $extra_style = ' style="' . esc_attr( $cart_fill . $counter_text . $counter_bg ) . '"';

                        return str_replace(
                            'href="###"',
                            'href="javascript:void(0)"' . $extra_class . $extra_attr . $extra_style,
                            $item_output
                        );

                    }, 10, 2 );
                }
            }
        }

        return $menu_items;
    }

    /**
     * Handle rendering of custom menu cart icon within Gutenberg created menu
     *
     * @since 0.1.10
     */
    public function add_menu_cart_icon_for_gutenberg( $nav_link_content, $parsed_block, $instance ) {
        if ( '#nc-cart-icon#' === $parsed_block['attrs']['url']  ) {
            $nav_link_content = str_replace(
                'wp-block-navigation-item__content',
                'wp-block-navigation-item__content nc-cart-icon',
                $nav_link_content
            );

            $extra_attr = ' data-type="nc-cart-drawer-open"';

            $cart_icon_colors = Settings::get_menu_cart_icon_colors();
            $cart_fill = ! empty( $cart_icon_colors['icon_color'] ) ? '--nc-cart-icon: ' . $cart_icon_colors['icon_color'] . ';' : '';
            $counter_text = ! empty( $cart_icon_colors['counter_color'] ) ? ' --nc-counter-text: ' . $cart_icon_colors['counter_color'] . ';' : '';
            $counter_bg = ! empty( $cart_icon_colors['counter_bg'] ) ? ' --nc-counter-bg: ' . $cart_icon_colors['counter_bg'] . ';' : '';
            $extra_style = ' style="' . esc_attr( $cart_fill . $counter_text . $counter_bg ) . '"';

            $nav_link_content = str_replace(
                ' href="#nc-cart-icon#"',
                ' href="javascript:void(0)"' . $extra_attr . $extra_style,
                $nav_link_content
            );

            preg_match(
                '/(wp-block-navigation-item__label.*>)(.*?)(<\/span>)/',
                $nav_link_content,
                $matches
            );

            $cart_svg = $this->nc_cart_icon_shortcode();
            $cart_counter = '<span id="nc-cart-counter" class="nc-cart-counter"></span>';

            $nav_link_content = str_replace(
                $matches[2],
                $cart_svg . $cart_counter,
                $nav_link_content
            );

        }

        return $nav_link_content;
    }

    /**
     * @since 0.1.21
     */
    protected function calculate_coupon_discount( float $subtotal, string $promocode ): array {
        if ( empty( $promocode ) ) {
            return [ null, 0 ];
        }

        $coupon_model = new CouponModel();
        $coupon = $coupon_model->get_by_code( $promocode );

        if (
            $coupon_model->is_coupon_unvalid( $coupon )
            || $subtotal <= 0
        ) {
            return [ null, 0 ];
        }

		$coupon_discount = floatval( $coupon['discount_amount'] );

		switch ( $coupon['coupon_discount_type_id'] ) {
			case CouponDiscountTypes::fixed()->id:
				$order_discount = $coupon_discount;
				break;

			case CouponDiscountTypes::percent()->id:
				$order_discount = round( $subtotal * ( $coupon_discount / 100 ), 2 );
				break;

			case CouponDiscountTypes::freeShipping()->id:
				throw new \Exception( 'Free Shipping discount is not yet implemented' );

			default:
				throw new \Exception( "Unknown discount type: {$coupon['coupon_discount_type_id']}" );
		}

		if ( $order_discount > $subtotal ) {
			$order_discount = $subtotal;
		}

		return [
            $coupon['id'],
            round( $order_discount, 2 )
        ];
	}

    /**
     * Determine whether requested page contains Single Page Checkout form shortcode or block
     *
     * @since   0.1.23
     * @version 0.1.24
     */

    public function is_single_page_checkout(): bool {
        if ( empty( $this->_is_single_page_checkout ) ) {
            $has_spc = has_shortcode( get_the_content(), 'commerce-checkout-form' )
                || has_block( 'north-commerce/single-checkout-wrapper' );

            $this->_is_single_page_checkout = $has_spc;
        }

        return $this->_is_single_page_checkout;
    }

    /**
     * Determine whether requested is for a Checkout page
     *
     * @since 0.1.23
     */
    public function is_checkout() {
        $this->_is_checkout = $this->_is_checkout ?? has_shortcode( get_the_content(), 'nc-checkout' );
        return $this->_is_checkout;
    }
}
