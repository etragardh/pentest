/*
 * A JS file for implementing a code to help work with product variants
 */

(function() {

    if (!window.NorthCommerce) {
        window.NorthCommerce = {};
    }

    window.NorthCommerce.ProductVariantManager = {

        optionValueMap: {},
        variantMap: {},
        quantityMap: {},

        /*
         * Given a set of possible product variants available to the user,
         * return true if optionValueId is a possible option.
         */
        isValidOptionValue: function(possibleProductVariants, optionValueId) {
            var found = possibleProductVariants.map(variant => {
                var optionValues = this.variantMap[variant];
                if(optionValues.includes(parseInt(optionValueId))) {
                    return true;
                }
            });

            return found.includes(true);
        },


        /*
         * Given a list of possible product variants. For each optionValueId,
         * return true if the optionValueId represents something in stock
         * return false if out of stock. Return null if not available.
         */
        isInStockOptionValue: function(possibleProductVariants, optionValueId) {
            var found = possibleProductVariants.map(variant => {
                var optionValues = this.variantMap[variant];
                if(!optionValues.includes(parseInt(optionValueId))) {
                    return null;
                } else if(this.quantityMap[variant] > 0) {
                    return true;
                } else {
                    return false;
                }
            });

            return found.includes(true) ? true : (found.includes(false) ? false : null);
        },

        /*
         * Given a list of select option value ids, return all
         * the product variants that the user could purchase with these
         * settigs.
         *
         * Once we have 1 product variant, we know the user has selected the
         * item they want and they can add it to the cart.
         */
        productVariants: function(selectedValueIds) {
            var allVariants = selectedValueIds.map(valueId => {
                if(!this.optionValueMap[valueId]) {
                    throw new Error("Can't find an option value for: " + valueId);
                }
                return this.optionValueMap[valueId];
            });


            return this.intersectAll(allVariants);
        },

        allProductVariants: function() {
            return this.unionAll(Object.values(this.optionValueMap));
        },

        /*
         * Embedded by server side code with all possible:
         *  { production_value_id, product_variant_id }
         */
        registerOptionValues: function(variantOptionValues) {
            variantOptionValues.forEach(vov => {

                if(!this.optionValueMap[vov.product_option_value_id]) {
                    this.optionValueMap[vov.product_option_value_id] = [];
                }
                this.optionValueMap[vov.product_option_value_id].push(parseInt(vov.product_variant_id));


                if(!this.variantMap[vov.product_variant_id]) {
                    this.variantMap[vov.product_variant_id] = [];
                }
                this.variantMap[vov.product_variant_id].push(parseInt(vov.product_option_value_id));
                this.quantityMap[vov.product_variant_id] = vov.quantity;
            });

        },

        unionAll: function(arrays) {
            if(arrays.length == 0) {
                return [];
            } if(arrays.length == 1) {
                return arrays[0];
            } else {
                var lhs = arrays.shift();
                var rhs = arrays.shift();
                var union = [];
                lhs.forEach(elt => {
                    if(!union.includes(elt)) {
                        union.push(elt);
                    }
                });
                rhs.forEach(elt => {
                    if(!union.includes(elt)) {
                        union.push(elt);
                    }
                });
                arrays.unshift(union);
                return this.unionAll(arrays);
            }
        },

        intersectAll: function(arrays) {
            if(arrays.length == 0) {
                return [];
            } if(arrays.length == 1) {
                return arrays[0];
            } else {
                var lhs = arrays.shift();
                var rhs = arrays.shift();
                var intersection = [];
                lhs.forEach(elt => {
                    if(rhs.includes(elt)) {
                        intersection.push(elt);
                    }
                });
                arrays.unshift(intersection);
                return this.intersectAll(arrays);
            }
        },

        getAllVariants: function() {
            const variants = Object.keys(this.variantMap).map(variantId => {
                return {
                    product_variant_id: variantId,
                    product_option_value_ids: this.variantMap[variantId]
                };
            });
            return variants;
        }
    }
})();
