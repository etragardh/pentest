'use strict';

(function() {

    window.NorthCommerce = window.NorthCommerce ?? {}

    window.NorthCommerce.Cart = {

        initialize() {
            if ('undefined' === typeof northCommerceSettings) {
                return setTimeout(this.initialize.bind(this), 5) // wait for localized data
            }

            this.maybeFetchNewCartDataForLocalStorage()

            const menuCartCounter = document.querySelector('#nc-cart-counter')
            if (menuCartCounter) {
                this.setupCartCounterUpdateEvent(menuCartCounter)
            }

            const cartDrawer = document.querySelector('#nc-cart-drawer')
            if (cartDrawer) {
                this.setupOpenCartDrawerEvent(cartDrawer)
                this.setupCloseCartDrawerEvent(cartDrawer)
                this.setupRemoveFromCartDrawerEvent()
                this.setupCartDrawerUpdateEvent()
                this.setupCartDrawerItemQuantityChangeEvent(cartDrawer)
                this.syncCartDrawerItems(cartDrawer)
            }
        },

        retrieveCartData() {
            try {
                const cartData = localStorage.getItem('nc-cart')
                if (JSON.parse(cartData).length === 0) {
                    document.querySelector('.nc-drawer-checkout-btn').style.display = 'none';
                    document.querySelector('.nc-drawer-view-cart').style.display = 'none';
                    document.querySelector('.nc-empty-cart').style.display = 'block';
                }

                return cartData ? JSON.parse(cartData) : [];
            } catch {
                return []
            }
        },

        updateCartData: function (cartData) {
            const validatedCartData = cartData.filter((item) => !!item)
            localStorage.setItem('nc-cart', JSON.stringify(validatedCartData))
            this.dispatchCartUpdatedEvent()
        },

        addProductToCart: function (productData) {
            const cartItem = {
                product_id: productData.id,
                ...productData,
                id: new Date().valueOf()
            };

            this.updateCartData( [ ...this.retrieveCartData(), cartItem ] )
            this.dispatchAddToCartEvent(cartItem)
            const afterSync = true
            this.openCartDrawer(afterSync)
        },

        getProductFromCartById: function (cartProductID) {
            return this.retrieveCartData().find((el) => parseInt(el.id) === parseInt(cartProductID))
        },

        maybeFetchNewCartDataForLocalStorage: function () {
            const cartData = this.retrieveCartData()
            const newCartData = cartData.map(async (cartItem) => {
                const productData = await this.getProductItemData(cartItem.product_id)
                return cartItem
            })

            Promise
                .all(newCartData)
                .then((cartData) => this.updateCartData(cartData))
        },

        retrieveProductsData: function () {
            try {
                const productsLocalData = localStorage.getItem('nc-products-data');
                return productsLocalData ? JSON.parse(productsLocalData) : [];
            } catch {
                return []
            }
        },

        retrieveProductItemData: function (productID) {
            const productsLocalData = this.retrieveProductsData()
            return productsLocalData.find((productItem) => parseInt(productItem.id) === parseInt(productID))
        },

        getProductItemData: function (productID) {
            return new Promise(((resolve, reject) => {

                const product = this.retrieveProductItemData(productID)
                const currentDateTime = (new Date()).getTime()

                const HOUR_IN_SECONDS = 3600
                const HOUR_IN_MILLISECONDS = HOUR_IN_SECONDS * 1000
                const CACHE_TIME_LIMIT = 0.5 * HOUR_IN_MILLISECONDS

                if (
                    undefined !== product
                    && currentDateTime - product.fetchedAt < CACHE_TIME_LIMIT
                ) {
                    return resolve(product)
                }

                const expand = 'product-images'
                    + ',product-variants'
                    + ',product-variants.product-variant-type'
                    + ',product-options'
                    + ',product-options.product-option-type'
                    + ',product-options.product-option-values'

                fetch(`/wp-json/nc-data/v1/products/${productID}?expand=${expand}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (!data) {
                            reject(new Error('An error occured'))
                        }

                        const productData = {
                            ...data.data,
                            fetchedAt: currentDateTime
                        }

                        const productsLocalData = this.retrieveProductsData();
                        const product = this.retrieveProductItemData(productID);

                        if (undefined === product) {
                            localStorage.setItem('nc-products-data', JSON.stringify([...productsLocalData, productData]))
                        } else {
                            localStorage.setItem('nc-products-data', JSON.stringify(
                                productsLocalData.map((product) => {
                                    if (parseInt(product.id) !== parseInt(productData.id)) {
                                        return product;
                                    }

                                    return productData;
                                })
                            ))
                        }

                        resolve(productData);
                    })
                    .catch((error) => reject(error))
            }))
        },

        removeItem: function (e) {
            const cartItemContainer = e.target.closest('[data-type="cart-product-item"]')
            const cartItemID = cartItemContainer.dataset.id
            const cartData = this.retrieveCartData().filter((cartItem) => parseInt(cartItem.id) !== parseInt(cartItemID))

            cartItemContainer.remove();
            this.updateCartData(cartData)
        },

        dispatchCartUpdatedEvent: function() {
            var event = new Event('nc-cart-updated', { bubbles: true, cancelable: false })
            document.dispatchEvent(event)
        },

        increaseCartItemQuantity: function(target) {
            const cartItemContainer = target.closest('[data-type="cart-product-item"]');
            const cartItemID = cartItemContainer.dataset.id;
            const productData = this.getProductFromCartById(cartItemID)
            let errorData = false

            const cartData = this.retrieveCartData().map((cartItem) => {
                if (parseInt(cartItem.id) === parseInt(cartItemID)) {
                    const newQuantity = parseInt(cartItem.qty) + 1
                    if (productData.max_quantity !== undefined && newQuantity > parseInt(productData.max_quantity)) {
                        errorData = { item: cartItem, render: true }
                    } else {
                        cartItem.qty = newQuantity
                        cartItemContainer.querySelector('[data-type="cart-item-price"]').textContent = this.formatPrice(cartItem.price);
                        cartItemContainer.querySelector('[data-type="cart-item-quantity-value"]').value = cartItem.qty;
                    }
                }

                return cartItem;
            });

            this.updateCartData(cartData);

            return errorData ? errorData : null
        },
        decreaseCartItemQuantity: function (target) {
            const cartItemContainer = target.closest('[data-type="cart-product-item"]');
            const cartItemID = cartItemContainer.dataset.id;
            let errorData = false

            const cartData = this.retrieveCartData().map((cartItem) => {
                if (parseInt(cartItem.id) === parseInt(cartItemID)) {
                    if (cartItem.qty > 1) {
                        cartItem.qty -= 1;
                    }

                    errorData = { item: cartItem, render: false }

                    cartItemContainer.querySelector('[data-type="cart-item-price"]').innerHTML = this.formatPrice(cartItem.price);
                    cartItemContainer.querySelector('[data-type="cart-item-quantity-value"]').value = cartItem.qty;
                }

                return cartItem;
            });

            this.updateCartData(cartData);

            return errorData ? errorData : null
        },
        changeCartItemQuantity: function (target) {
            const newQuantity = target.value;
            const cartItemContainer = target.closest('[data-type="cart-product-item"]');
            const cartItemID = cartItemContainer.dataset.id;
            const productData = this.getProductFromCartById(cartItemID)
            let errorData = false

            const cartData = this.retrieveCartData().map((cartItem) => {
                if (parseInt(cartItem.id) === parseInt(cartItemID)) {
                    if (productData.max_quantity !== undefined && newQuantity > parseInt(productData.max_quantity)) {
                        cartItem.qty = productData.max_quantity
                        errorData = { item: cartItem, render: true }
                    } else {
                        cartItem.qty = newQuantity < 1 ? 1 : newQuantity
                        errorData = { item: cartItem, render: false }
                    }
                    cartItemContainer.querySelector('[data-type="cart-item-price"]').innerHTML = this.formatPrice(cartItem.price);
                    cartItemContainer.querySelector('[data-type="cart-item-quantity-value"]').value = cartItem.qty;
                }

                return cartItem;
            });

            this.updateCartData(cartData);

            return errorData ? errorData : null
        },

        formatPrice(number) {
            return NorthCommerce.formatPrice(number)
        },

        dispatchAddToCartEvent: function (cartItem) {
            const event = new CustomEvent('nc-add-to-cart', {
                detail: cartItem,
                bubbles: true,
                cancelable: false
            })

            document.dispatchEvent(event, { detail: cartItem })
        },

        setupOpenCartDrawerEvent: function (cartDrawer) {
            if (!cartDrawer) {
                cartDrawer = document.querySelector('#nc-cart-drawer')
            }
            if (!cartDrawer) {
                return
            }

            document.addEventListener('click', openCartDrawer)

            function openCartDrawer(e) {
                if (
                    'nc-cart-drawer-open' !== e.target.dataset.type
                    && null === e.target.closest('[data-type="nc-cart-drawer-open"]')
                ) {
                    return
                }

                cartDrawer.classList.remove('drawer-hidden');
            }
        },
        setupCloseCartDrawerEvent: function (cartDrawer) {
            if (!cartDrawer) {
                cartDrawer = document.querySelector('#nc-cart-drawer')
            }
            if (!cartDrawer) {
                return
            }

            document.addEventListener('click', closeCartDrawer)

            function closeCartDrawer(e) {
                if (
                    e.target.classList.contains('nc-drawer-close')
                    || (
                        !cartDrawer.classList.contains('drawer-hidden')
                        && cartDrawer.contains(e.target)
                        && !cartDrawer.querySelector('.nc-drawer-container').contains(e.target)
                    )
                ) {
                    cartDrawer.classList.add('drawer-hidden')
                }
            }
        },

        setupRemoveFromCartDrawerEvent: function () {
            document.addEventListener('click', removeItemFromCartDrawer)

            function removeItemFromCartDrawer(e) {
                if (
                    'nc-drawer-item-remove' !== e.target.dataset.type
                    && e.target.closest('[data-type="nc-drawer-item-remove"]') === null
                ) {
                    return
                }

                const orderItemContainer = e.target.closest('[data-type=cart-product-item]');
                const cartId = orderItemContainer.getAttribute('data-id');
    
                const cartDataToRemove = NorthCommerce.Cart.retrieveCartData().filter((cartItemData) => parseInt(cartItemData.id) == parseInt(cartId))
                
                window.NorthCommerce.CheckoutManager.removeLineItem(cartDataToRemove[0]);
                window.NorthCommerce.Cart.removeItem(e)
                window.NorthCommerce.Cart.updateCartDrawerTotals()
            }
        },

        setupCartDrawerItemQuantityChangeEvent: function (cartDrawer) {
            if (!cartDrawer) {
                cartDrawer = document.querySelector('#nc-cart-drawer')
            }
            if (!cartDrawer) {
                return
            }

            cartDrawer.addEventListener('click', handleQuantityIncrease)
            cartDrawer.addEventListener('click', handleQuantityDecrease)
            cartDrawer.addEventListener('change', handleQuantityChange)

            function handleQuantityIncrease(e) {
                if (
                    'cart-item-quantity-increase' === e.target.dataset.type
                    || e.target.closest('[data-type="cart-item-quantity-increase"]') !== null
                ) {
                    const quantityError = window.NorthCommerce.Cart.increaseCartItemQuantity(e.target)
                    if (quantityError) {
                        handleCartDrawerQuantityError(quantityError.item, quantityError.render)
                    }

                    window.NorthCommerce.Cart.updateCartDrawerTotals()

                }
            }

            function handleQuantityDecrease(e) {
                if (
                    'cart-item-quantity-decrease' === e.target.dataset.type
                    || e.target.closest('[data-type="cart-item-quantity-decrease"]') !== null
                ) {
                    const quantityError = window.NorthCommerce.Cart.decreaseCartItemQuantity(e.target)
                    if (quantityError) {
                        handleCartDrawerQuantityError(quantityError.item, quantityError.render)
                    }

                    window.NorthCommerce.Cart.updateCartDrawerTotals()

                }
            }

            function handleQuantityChange(e) {
                if ('cart-item-quantity-value' !== e.target.dataset.type) {
                    return
                }

                const quantityError = window.NorthCommerce.Cart.changeCartItemQuantity(e.target)
                if (quantityError) {
                    handleCartDrawerQuantityError(quantityError.item, quantityError.render)
                }

                window.NorthCommerce.Cart.updateCartDrawerTotals()

            }

            function handleCartDrawerQuantityError(cartItemData, showError) {
                const cartItems = document.querySelectorAll(`#nc-cart-drawer [data-type="cart-product-item"][data-id="${cartItemData.id}"]`)

                cartItems.forEach((cartItem) => {
                    const errorContainer = cartItem.querySelector('[data-type="qty-counter-error"]')
                    errorContainer.innerHTML = '';
                    if (showError) {
                        errorContainer.innerHTML = `Max quantity for this product is ${cartItemData.max_quantity}`;
                    }
                })
            }
        },

        openCartDrawer: function (afterSync) {
            const cartDrawer = document.querySelector('#nc-cart-drawer')
            if (!cartDrawer) { return }

            const openDrawer = () => cartDrawer.classList.remove('drawer-hidden')

            if (typeof afterSync === 'boolean' && afterSync) {
                return document.addEventListener('nc-cart-drawer-synced', openDrawer, { once: true })
            }

            openDrawer()
        },
        closeCartDrawer: function () {
            const cartDrawer = document.querySelector('#nc-cart-drawer')
            if (!cartDrawer) {
                return
            }

            cartDrawer.classList.add('drawer-hidden')
        },

        updateCartDrawer: function () {
            const cartDrawer = document.querySelector('#nc-cart-drawer')
            if (!cartDrawer) {
                return
            }

            const drawerItemsContainer = cartDrawer.querySelector('.nc-drawer-items')

            const cartData = this.retrieveCartData()
            const newCartData = cartData.map(async (cartItem) => {
                if (!cartItem) {
                    return
                }
                const cartElements = cartDrawer.querySelectorAll(`[data-type="cart-product-item"][data-id="${cartItem.id}"]`);
                if (cartElements.length === 0) {
                    const template = this.getCartDrawerItemTemplate();
                    const productData = await this.getProductItemData(cartItem.product_id)
                    const cartItemElement = this.renderCartDrawerItem(template, productData, cartItem)
                    drawerItemsContainer.append(cartItemElement);
                }

                return cartItem
            })

            Promise
                .all(newCartData)
                .then((cartData) => this.syncCartDrawerItems(cartDrawer))
        },

        syncCartDrawerItems: function (cartDrawer) {
            if (!cartDrawer) {
                cartDrawer = document.querySelector('#nc-cart-drawer')
            }
            if (!cartDrawer) {
                return
            }

            const cartData = this.retrieveCartData()
            cartDrawer.querySelectorAll('[data-type="cart-product-item"]').forEach((cartItem) => {
                const cartItemID = cartItem.dataset.id;
                const cartItemData = cartData.find(({id}) => parseInt(id) === parseInt(cartItemID));
                if (cartItemData === undefined) {
                    cartItem.remove()
                    return
                }
                const cartQuantity = cartItemData.qty ? cartItemData.qty : 1
                cartItem.querySelector('[data-type="cart-item-quantity-value"]').value = cartQuantity
                cartItem.querySelector('[data-type="cart-item-price"]').textContent = this.formatPrice(cartItemData.price)
            })

            this.updateCartDrawerTotals(cartDrawer)
            this.dispatchCartDrawerSyncedEvent()
        },

        dispatchCartDrawerSyncedEvent: function() {
            const event = new Event('nc-cart-drawer-synced', { bubbles: true })
            document.dispatchEvent(event)
        },

        updateCartDrawerTotals: function (cartDrawer) {
            this.updateCartDrawerTotalPrice(cartDrawer);
            this.updateCartDrawerTotalItems(cartDrawer);
        },
        updateCartDrawerTotalPrice: function (cartDrawer) {
            if (!cartDrawer) {
                cartDrawer = document.querySelector('#nc-cart-drawer')
            }
            if (!cartDrawer) {
                return
            }

            let totalPrice = 0
            this.retrieveCartData().forEach((cartItem) => {
                totalPrice += parseInt(cartItem.qty) * parseFloat(cartItem.price)
            })

            cartDrawer.querySelector('.nc-drawer-checkout-btn-total').innerHTML = this.formatPrice(totalPrice)
        },
        updateCartDrawerTotalItems: function (cartDrawer) {
            if (!cartDrawer) {
                cartDrawer = document.querySelector('#nc-cart-drawer')
            }
            if (!cartDrawer) {
                return
            }

            let total = 0;
            this.retrieveCartData().forEach((cartItem) => {
                total += parseInt(cartItem.qty)
            })

            cartDrawer.querySelector('.nc-cart-qty-value').innerHTML = total;
        },

        getTemplate: function (templateId) {
            const template = document.querySelector(`#${templateId}`).cloneNode(true);
            const div = document.createElement('div');
            div.innerHTML = template.innerHTML.trim();

            // Change this to div.childNodes to support multiple top-level nodes.
            return div.firstChild;
        },
        getCartDrawerItemTemplate: function () {
            return this.getTemplate('tmpl-cart-item-template')
        },
        getCartDrawerItemVariationTemplate: function () {
            return this.getTemplate('tmpl-cart-item-variation-template')
        },

        renderCartDrawerItem: function (template, productData, cartItemData) {
            if (productData.quantity !== '' || productData.quantity !== null) {
                template.setAttribute('data-max-quantity', productData.quantity);
            }

            document.querySelector('.nc-drawer-checkout-btn').style.display = 'inline-block';
            document.querySelector('.nc-drawer-view-cart').style.display = 'block';
            document.querySelector('.nc-empty-cart').style.display = 'none';

            var imgUrl = productData.product_images && productData.product_images.length ?
                productData.product_images[0].image_url : null;
            template.setAttribute('data-id', cartItemData.id);
            template.querySelector('[data-type="cart-item-title"]').innerHTML = productData.name;
            template.querySelector('[data-type="cart-item-price"]').innerHTML = this.formatPrice(cartItemData.qty);
            template.querySelector('[data-type="cart-item-quantity-value"]').value = cartItemData.qty;

            NorthCommerce.DataApi.getProductVariantOptionValuesData(cartItemData.product_variant_id).then((all) => {
                    const variationHTML = template.querySelector('[data-type="nc-drawer-item-variations"]').cloneNode(false);
                    const imagePvovs = all.filter(pvov => 'image' == pvov.product_option_value.product_option.product_option_type.slug)
                    let imgSrc

                    if (imagePvovs.length) {
                        imgSrc = imagePvovs[0].product_option_value.value
                    } else if (imgUrl) {
                        imgSrc = imgUrl
                    }
                    if (imgSrc) {
                        template.querySelector('[data-type="cart-item-image"]').setAttribute('src', imgSrc)
                        template.querySelector('[data-type="cart-item-image"]').setAttribute('srcset', imgSrc)
                    }

                    all.filter((pvov) => 'image' != pvov.product_option_value.product_option.product_option_type.slug).forEach((pvov) => {
                        const variationTemplate = this.getCartDrawerItemVariationTemplate();
                        const name = pvov.product_option_value.product_option.name
                        const value = pvov.product_option_value.value
                        const type = pvov.product_option_value.product_option.product_option_type.slug
                        if ('color' === type) {
                            variationTemplate.querySelector('[data-type="nc-drawer-item-variation-label"]').innerHTML = name;
                            variationTemplate.querySelector('[data-type="nc-drawer-item-variation-value"]')
                                .innerHTML = `<div class="nc-cart-option-color" style="background-color: ${value}"></div>`
                        } else {
                            variationTemplate.querySelector('[data-type="nc-drawer-item-variation-label"]').innerHTML = name;
                            variationTemplate.querySelector('[data-type="nc-drawer-item-variation-value"]').innerHTML = value;
                        }
                        variationHTML.append(variationTemplate);
                    })

                    template.querySelector('[data-type="nc-drawer-item-variations"]').replaceWith(variationHTML);
                });

            return template;
        },

        setupCartDrawerUpdateEvent: function () {
            document.addEventListener('nc-cart-updated', this.updateCartDrawer.bind(NorthCommerce.Cart))
        },

        setupCartCounterUpdateEvent: function(menuCartCounter) {
            if (!menuCartCounter) {
                menuCartCounter = document.querySelector('#nc-cart-counter')
            }
            if (!menuCartCounter) { return }

            const handleCartCounterUpdate = (e) => {
                const cartCounter = this.retrieveCartData().reduce((accumulator, cartItem) => accumulator + parseInt(cartItem.qty), 0)
                menuCartCounter.textContent = cartCounter ? cartCounter : ''
            }

            document.addEventListener('nc-cart-updated', handleCartCounterUpdate)
        },

        retrieveVariantOptionsMap: function () {
            try {
                const variantOptionsMap = localStorage.getItem('nc-variant-options-map')
                return variantOptionsMap ? JSON.parse(variantOptionsMap) : [];
            } catch {
                return []
            }
        },

        getVariantOptionsMap: async function (productID, reFetch = false) {
            let mappedItem

            if (reFetch) {
                mappedItem = await this.fetchVariantOptionsMap(productID)
                return mappedItem.variants
            }

            const localVariantOptionMap = this.retrieveVariantOptionsMap()
            mappedItem = localVariantOptionMap.find((mapItem) => parseInt(mapItem.product_id) === parseInt(productID))

            if (mappedItem) {
                const HOUR_IN_SECONDS = 3600
                const HOUR_IN_MILLISECONDS = HOUR_IN_SECONDS * 1000
                const CACHE_TIME_LIMIT = 0.5 * HOUR_IN_MILLISECONDS

                const currentDateTime = (new Date()).getTime();
                if (currentDateTime - mappedItem.fetchedAt > CACHE_TIME_LIMIT) {
                    mappedItem = null
                } else {
                    const productData = await this.getProductItemData(productID)
                    if (mappedItem.fetchedAt < productData.fetchedAt) {
                        mappedItem = null
                    }
                }
            }

            mappedItem = mappedItem ? mappedItem : await this.fetchVariantOptionsMap(productID)
            return mappedItem.variants
        },

        fetchVariantOptionsMap: async function (productID) {
            productID = parseInt(productID)

            const body = new FormData()
            body.append( 'action', 'get_variant_options_map' );
            body.append( 'product_id', productID );

            return fetch(ajax_object.ajaxurl, {
                method: 'POST',
                body: body
            })
                .then((response) => response.json())
                .then((data) => {
                    if (!data.success || !data.data) {
                        return
                    }

                    const newMapItem = {
                        product_id: productID,
                        variants: data.data,
                        fetchedAt: (new Date()).getTime()
                    }

                    let variantOptionsMap = NorthCommerce.Cart.retrieveVariantOptionsMap()
                    const storedItemIndex = variantOptionsMap.findIndex((mapItem) => mapItem.product_id === productID)
                    if (storedItemIndex !== -1) {
                        variantOptionsMap[ storedItemIndex ] = newMapItem
                    } else {
                        variantOptionsMap = [ ...variantOptionsMap, newMapItem ]
                    }

                    localStorage.setItem('nc-variant-options-map', JSON.stringify(variantOptionsMap))

                    return newMapItem
                })
                .catch((error) => console.error(error))
        },

        retrieveVariantByOptions: async function (productID, optionsIDs) {
            if (!productID) {
                return
            }

            const productVariantsMap = await this.getVariantOptionsMap(productID)

            let productVariantID
            for (let [ variantID, optionsArray ] of Object.entries(productVariantsMap)) {
                if (!productVariantID && optionsArray.length === optionsIDs.length) {
                    let matchedVariant = true // assumption
                    optionsIDs.forEach((optionID) => {
                        matchedVariant = matchedVariant && optionsArray.includes(parseInt(optionID))
                    })
                    if (matchedVariant) {
                        productVariantID = variantID
                    }
                }
            }

            if (!productVariantID) {
                console.warn('No product variant ID')
            }

            return productVariantID
        },

    }

    NorthCommerce.Cart.initialize()

})()
