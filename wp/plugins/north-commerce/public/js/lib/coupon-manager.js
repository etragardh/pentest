'use strict';

/**
 * Coupon Manager
 *
 * @since   0.1.21
 * @version 0.1.25
 */
(function() {

    window.NorthCommerce = window.NorthCommerce ?? {}

    const promoCodeContainer = document.querySelector('[data-nc-selector="nc-promocode-container"]')

    const isCartPage = !!document.querySelector('[data-nc-selector="cart-container"]')
    const isCheckoutPage = !!document.querySelector('[data-nc-selector="checkout-container"]')

    const singlePageCheckoutSelector = '[data-nc-selector="single-page-checkout"]'

    window.NorthCommerce.CouponManager = {

        constructor() {
            if (!promoCodeContainer) {
                return
            }

            this.setPromocodeRelatedListeners()

            if (!(isCheckoutPage || isCartPage)) {
                return
            }

            this.initialize()
        },

        resetStoredData() {
            localStorage.removeItem('nc-coupons')
        },

        setPromocodeRelatedListeners() {
            this.setCartUpdateListener()
            this.setPromocodeApplyListener()
            this.setPromocodeRemoveListener()

            promoCodeContainer
                .querySelector('[data-nc-action="toggle-promocode-add"]')
                .addEventListener('click', function (e) {
                    e.preventDefault()
                    promoCodeContainer.classList.toggle('input-visible')
                    promoCodeContainer.querySelector('[data-nc-input="promocode"]').value = ''
                    NorthCommerce.CouponManager.clearPromocodeErrors(e.target)
                })
        },

        setCartUpdateListener() {
            document.addEventListener('nc-cart-updated', this.enablePromocodeForm.bind(this))
            document.addEventListener('nc-cart-updated', this.revalidateActiveCoupon.bind(this))
            document.addEventListener('nc-cart-updated', this.maybeApplyAutomaticCoupon.bind(this))
        },

        setPromocodeApplyListener() {
            const promocodeInput = promoCodeContainer.querySelector('[data-nc-input="promocode"]')
            const promocodeApplyBtn = promoCodeContainer.querySelector('[data-nc-action="apply-promocode"]')

            if (promocodeInput) {
                promocodeInput.addEventListener('keydown', (e) => {
                    if ('Enter' !== e.key ) {
                        return
                    }

                    e.preventDefault()
                    applyPromocode(e)
                })
            }

            if (promocodeApplyBtn) {
                promocodeApplyBtn.addEventListener('click', applyPromocode)
            }

            function applyPromocode(e) {
                NorthCommerce.CouponManager.clearPromocodeErrors(e.target)

                if (!promocodeInput.value) {
                    NorthCommerce.CouponManager.showPromocodeErrors('Promo code is required', promocodeInput)
                    promocodeInput.focus()
                    return
                }

                disablePromocodeInput()

                if (isCheckoutPage || isCartPage) {
                    NorthCommerce.CouponManager.requestCoupon(
                        promocodeInput,
                        (response) => NorthCommerce.CouponManager.applyCoupon(response.coupon, promocodeInput),
                        () => NorthCommerce.CouponManager.enablePromocodeForm()
                    )
                    return
                }

                const spc = e.target.closest(singlePageCheckoutSelector)
                if (spc && NorthCommerce.singlePageCheckoutManager) {
                    NorthCommerce.singlePageCheckoutManager.validatePromocode(
                        spc,
                        (response) => {
                            NorthCommerce.CouponManager.applyCoupon(response.coupon, promocodeInput)
                            NorthCommerce.singlePageCheckoutManager.updatePaymentSectionVisibility(spc)
                        },
                        () => NorthCommerce.CouponManager.enablePromocodeForm()
                    )
                    return
                }

                function disablePromocodeInput() {
                    promocodeInput.disabled = true
                    promocodeApplyBtn.disabled = true
                }
            }
        },

        setPromocodeRemoveListener() {
            const promocodeRemoveBtn = promoCodeContainer.querySelector('[data-nc-action="promocode-remove"]')

            if (!promocodeRemoveBtn) {
                return
            }

            document.addEventListener('click', handleCouponRemove)

            function handleCouponRemove(e) {
                if (
                    'promocode-remove' !== e.target.dataset.ncAction
                    && null === e.target.closest('[data-nc-action="promocode-remove"]')
                ) {
                    return
                }

                e.preventDefault()

                NorthCommerce.CouponManager.removeActiveCoupon(promoCodeContainer)
                NorthCommerce.CouponManager.clearPromocodeErrors()
            }
        },

        /** @since 0.1.25 */
        initialize() {
            if (!this.isDependenciesReachable()) {
                return this.waitForDependecies()
            }

            this.maybeApplySuitableCoupon()
        },

        maybeApplySuitableCoupon() {
            const localStorageCoupon = this.getCouponActive()

            if (localStorageCoupon) {
                if (this.automaticCouponUnapplicable(localStorageCoupon)) {
                    return
                }

                this.applyCoupon(localStorageCoupon)
                this.revalidateActiveCoupon()
                return
            }

            this.maybeApplyAutomaticCoupon()
        },

        automaticCouponUnapplicable(coupon) {
            return emptyCoupon()
                || notAutomatticCoupon()
                || promocodeIsActive.call(this)
                || freeShippingCouponUnapplicable()
                || promocodeInputHasFocus.call(this)

            function emptyCoupon() {
                return !coupon
            }

            function notAutomatticCoupon() {
                return 'automatic' !== coupon.modeSlug
            }

            function promocodeIsActive() {
                return this.getPromocodeActive()
                    || this.getPromocodeInputValue()
            }

            function freeShippingCouponUnapplicable() {
                return 'free-shipping' === coupon.discountTypeSlug
                    && shippingRateUnknown()

                function shippingRateUnknown() {
                    return !document.querySelector('.nc-shipping-rates-list [name="shipping_rate"]:checked')
                }
            }

            function promocodeInputHasFocus() {
                return document.activeElement === this.getPromocodeInput()
            }
        },

        removeActiveCoupon(promoCodeContainer) {
            promoCodeContainer ??= document.querySelector('[data-nc-selector="nc-promocode-container"]')

            if (promoCodeContainer) {
                const promocodeInput = promoCodeContainer.querySelector('[data-nc-input="promocode"]')

                promoCodeContainer.classList.remove('nc-promo-active')
                promoCodeContainer.querySelector('[data-nc-selector="active-promocode-name"]').innerText = ''
                this.resetStoredData()

                if (promocodeInput) {
                    promocodeInput.value = ''
                }
            }

            NorthCommerce.CouponManager.clearCartSummaryDecorations()

            if (isCheckoutPage) {
                return NorthCommerce.productOverviewUpdateOrderSummary()
            }

            if (isCartPage) {
                return NorthCommerce.cartUpdateOrderSummary()
            }

            const spcForm = getSinglePageCheckoutForm()
            if (spcForm) {
                NorthCommerce.singlePageCheckoutManager.updateOrderPricing(spcForm)
                NorthCommerce.singlePageCheckoutManager.updatePaymentSectionVisibility(spcForm)
            }

            this.unmapCouponFromOrder()

            function getSinglePageCheckoutForm() {
                return NorthCommerce.singlePageCheckoutManager
                    && promoCodeContainer.closest(singlePageCheckoutSelector)
            }
        },

        /** @since 0.1.25 */
        isDependenciesReachable() {
            NorthCommerce.CouponManager.startTime = NorthCommerce.CouponManager.startTime ?? Date.now()

            const dependencies = [
                typeof northCommerceSettings,
                typeof NorthCommerce.Cart,
                typeof NorthCommerce.CheckoutManager,
                typeof NorthCommerce.singlePageCheckoutManager,
            ]

            if (dependencies.includes('undefined')) {
                return false
            }

            return true
        },

        /** @since 0.1.25 */
        waitForDependecies() {
            if (NorthCommerce.CouponManager.startTime) {
                const TIME_LIMIT_S = 10 // seconds for awaiting dependecies
                if (Date.now() - NorthCommerce.CouponManager.startTime.startTime > (TIME_LIMIT_S * 1000)) {
                    throw new Error('Cannot initialize CouponManager: related dependencies are missing.')
                }
            }

            return setTimeout(() => this.initialize(), 5)
        },

        maybeApplyAutomaticCoupon() {
            if (
                this.isCouponActive()
                || this.getPromocodeInputValue()
            ) {
                return
            }

            if ('undefined' === typeof northCommerceSettings) {
                return setTimeout(
                    this.maybeApplyAutomaticCoupon.bind(this),
                    5
                )
            }

            const promocodeElementImitation = {
                nodeName: 'INPUT',
                value: '_',
                'nc-type': 'automatic',
            }

            this.requestCoupon(
                promocodeElementImitation,
                (response) => applyAutomaticCoupon.call(this, response.coupon)
            )

            function applyAutomaticCoupon(coupon) {
                if (this.automaticCouponUnapplicable(coupon)) {
                    return
                }

                this.applyCoupon(coupon)
            }
        },

        isCouponActive() {
            return !!this.getCouponActive()
        },

        getPromocodeInput() {
            return promoCodeContainer.querySelector('[data-nc-input="promocode"]')
        },

        getPromocodeInputValue() {
            return this.getPromocodeInput()?.value.trim() ?? ''
        },

        getPromocodeActive() {
            return promoCodeContainer.querySelector('[data-nc-selector="active-promocode-name"]')?.textContent.trim()
        },

        getCouponActive() {
            const localCouponData = this.getLocalCouponData()
            return localCouponData.length ? localCouponData[0] : null
        },

        getLocalCouponData() {
            try {
                const data = localStorage.getItem('nc-coupons')
                return data ? JSON.parse(data) : []
            } catch (e) {
                return []
            }
        },

        async requestCoupon(promocodeElement, cbSuccess, cbFinally) {
            this.clearPromocodeErrors(promocodeElement)
            const cartData = NorthCommerce.Cart.retrieveCartData()

            this.requestsCache ??= {}
            const cacheKey = currentStateJSON()

            if (this.requestsCache[cacheKey]) {
                return applyCachedCoupon.call(this)
            }

            this.requestFetching = cacheKey
            this.requestsCache[cacheKey] ??= 'fetching...'

            const promocodeText = 'INPUT' === promocodeElement.nodeName
                ? promocodeElement.value
                : promocodeElement.innerText

            return fetch(`${northCommerceSettings.restUrl}/promocode/${promocodeText}`, {
                method: 'POST',
                headers: requestHeaders(),
                body: JSON.stringify({
                    cart: cartData,
                    order: NorthCommerce.CheckoutManager.getEntity('order'),
                    customer: NorthCommerce.CheckoutManager.getEntity('customer'),
                })
            })
                .then((response) => response.json())
                .then((response) => {
                    if (unvalidResponse()) {
                        return
                    }

                    updateRequestsCache(response)

                    if (
                        'rest_forbidden' === response.code
                        || !response.success
                    ) {
                        return unsuccessResponse(response)
                    }

                    successResponse(response)
                })
                .finally(() => {
                    NorthCommerce.CouponManager.requestFetching = null
                })

            function finalizeRequestAttempt() {
                cbFinally && cbFinally()
            }

            function applyCachedCoupon() {
                if ('object' !== typeof this.requestsCache[cacheKey]) {
                    return
                }

                const cachedResponse = this.requestsCache[cacheKey]

                if (cachedResponse.success) {
                    successResponse(cachedResponse)
                    return
                }

                unsuccessResponse(cachedResponse)
            }

            function requestHeaders() {
                const headers = {
                    'Accept': 'application/json'
                }
                if (promocodeElement['nc-type']) {
                    headers['nc-type'] = promocodeElement['nc-type']
                }
                return headers
            }

            function unvalidResponse() {
                return NorthCommerce.CouponManager.requestFetching !== currentStateJSON()
            }

            function unsuccessResponse(response) {
                const errorText = response.message ?? response.data ?? 'internal error'
                NorthCommerce.CouponManager.showPromocodeErrors(errorText, promocodeElement)
                NorthCommerce.CouponManager.setCouponDataIntoLocalStorage()
                NorthCommerce.CouponManager.unmapCouponFromOrder()
                finalizeRequestAttempt()
            }

            function successResponse(response) {
                cbSuccess(response)
                finalizeRequestAttempt()
            }

            function currentStateJSON() {
                return JSON.stringify({
                    promocode: NorthCommerce.CouponManager.getCouponActive()?.name
                        ?? NorthCommerce.CouponManager.getPromocodeInputValue(),
                    cart: NorthCommerce.Cart.retrieveCartData()
                })
            }

            function updateRequestsCache(response) {
                const requestFetching = NorthCommerce.CouponManager.requestFetching

                if (1 === Object.keys(response).length) {
                    // TODO: revise error check
                    delete NorthCommerce.CouponManager.requestsCache[requestFetching]
                    return
                }

                NorthCommerce.CouponManager.requestsCache[requestFetching] = response
            }
        },

        applyCoupon(coupon, promocodeInput) {
            const container = promocodeInput
                ? promocodeInput.closest('[data-nc-selector="nc-promocode-container"]')
                : promoCodeContainer

            container.querySelector('[data-nc-selector="active-promocode-name"]').innerText = coupon.promocode

            const totalDiscount = NorthCommerce.formatPrice(coupon.totalCartDiscount)
            const currencySymbol = northCommerceSettings.currencySymbol

            const updateDiscountUI = {
                fixed: ` -${totalDiscount}`,
                percent: `-${totalDiscount} (${coupon.discountAmount}% Off)`,
                'free-shipping': 'Free Shipping',
            }

            if (!updateDiscountUI[coupon.discountTypeSlug]) {
                return
            }

            promoCodeContainer
                .querySelector('[data-nc-selector="active-promocode-amount"]')
                .innerText = updateDiscountUI[coupon.discountTypeSlug]

            promoCodeContainer.classList.remove('input-visible')
            promoCodeContainer.classList.add('nc-promo-active')
            this.showCartSummaryDecorations()
            this.setCouponDataIntoLocalStorage(coupon, promoCodeContainer)
       },

        showPromocodeErrors(errorText, promocodeEl) {
            const promoCodeContainer = promocodeEl?.closest('[data-nc-selector="nc-promocode-container"]')

            if (!promoCodeContainer) {
                return
            }

            promoCodeContainer.classList.remove('nc-promo-active')
            promoCodeContainer.classList.add('input-visible')

            const promocodeName = promoCodeContainer.querySelector('[data-nc-selector="active-promocode-name"]')

            const promocodeInput = promoCodeContainer.querySelector('[data-nc-input="promocode"]')
            if (!promocodeInput.value) {
                promocodeInput.value = promocodeName.innerText
                promocodeName.innerText = ''
            }

            const errorsContainer = promoCodeContainer.querySelector('[data-nc-selector="nc-promocode-errors"]')
            if (!errorsContainer) {
                return
            }
            errorsContainer.innerHTML = errorText.replace('\n', '<br>')
            errorsContainer.classList.add('has-errors')
        },

        clearPromocodeErrors(el) {
            let elContainer
            if (!el) {
                elContainer = promoCodeContainer
            }
            if (!elContainer && !el.closest) {
                return
            }
            if (!elContainer) {
                elContainer = el.closest('[data-nc-selector="nc-promocode-container"]')
            }

            const errorsContainer = elContainer.querySelector('[data-nc-selector="nc-promocode-errors"]')

            if (!errorsContainer) {
                return
            }

            errorsContainer.classList.remove('has-errors')
            errorsContainer.innerHTML = ''
        },

        showCartSummaryDecorations() {
            const lineThroughClass = 'line-through'

            lineThroughShippingTotals.call(this)

            function lineThroughShippingTotals() {
                const shippingPriceValue = document.querySelector('.nc-order-shipping-fee .nc-order-summary-total-value')

                isFreeShippingCoupon.call(this)
                    ? shippingPriceValue.classList.add(lineThroughClass)
                    : shippingPriceValue.classList.remove(lineThroughClass)

                function isFreeShippingCoupon() {
                    const coupon = this.getCouponActive()
                    return coupon
                        && 'free-shipping' === coupon.discountTypeSlug
                }
            }
        },

        clearCartSummaryDecorations() {
            document
                .querySelectorAll('.nc-checkout-order-summary .line-through')
                .forEach((lt) => lt.classList.remove('line-through'))
        },

        enablePromocodeForm() {
            promoCodeContainer.querySelector('[data-nc-input="promocode"]')?.removeAttribute('disabled')
            promoCodeContainer.querySelector('[data-nc-action="apply-promocode"]')?.removeAttribute('disabled')
        },

        revalidateActiveCoupon() {
            if (
                !promoCodeContainer.classList.contains('nc-promo-active')
                || promoCodeContainer.classList.contains('input-visible')
            ) {
                return
            }

            const activePromocode = promoCodeContainer.querySelector('[data-nc-selector="active-promocode-name"]')

            if (!activePromocode) {
                return
            }

            this.requestCoupon(
                activePromocode,
                (response) => this.setCouponDataIntoLocalStorage(response.coupon)
            )
        },

        resetCache() {
            this.requestsCache = null
            this.revalidateActiveCoupon()
            this.maybeApplyAutomaticCoupon()
        },

        setCouponDataIntoLocalStorage(coupon, promoCodeContainer) {
            const newCouponData = coupon ? [coupon] : []
            localStorage.setItem('nc-coupons', JSON.stringify(newCouponData))
            this.updateUITotals(promoCodeContainer)
        },

        updateUITotals(promoCodeContainer) {
            if (isCheckoutPage) {
                return updateCheckoutSummary()
            }

            if (isCartPage) {
                return updateCartSummary()
            }

            const spc = spcForm()
            if (spc) {
                return updateSpcSummary()
            }

            function updateCheckoutSummary() {
                return NorthCommerce.productOverviewUpdateOrderSummary?.()
            }

            function updateCartSummary() {
                return NorthCommerce.cartUpdateOrderSummary?.()
            }

            function spcForm() {
                return promoCodeContainer?.closest(singlePageCheckoutSelector)
            }

            function updateSpcSummary() {
                NorthCommerce.singlePageCheckoutManager.updateOrderPricing(spc)
                NorthCommerce.singlePageCheckoutManager.updatePaymentSectionVisibility(spc)
            }
        },

        getShippingCountrySlug() {
            const customer = NorthCommerce
                && NorthCommerce.CheckoutManager
                && NorthCommerce.CheckoutManager.getEntity('customer')

            if (!customer) {
                return
            }

            const shippingCountrySelect = document.querySelector('#shipping_country')
            return shippingCountrySelect && shippingCountrySelect.value
        },

        async mapCouponWithOrder({ order_id, promocode }) {
            return fetch(`${northCommerceSettings.restUrl}/coupon-orders`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
                body: JSON.stringify({ order_id, promocode })
            })
                .then((response) => response.json())
                .then((response) => {
                    if (
                        'rest_forbidden' === response.code
                        || ! response.success
                    ) {
                        const errorText = response.message ?? response.data ?? 'internal error'
                        return console.warn(errorText)
                    }

                    return response.couponOrderMapID
                })
        },

        async unmapCouponFromOrder() {
            const comID = await NorthCommerce.CheckoutManager.getEntity('couponOrderMapID')

            if (!comID) {
                return
            }

            return fetch(`${northCommerceSettings.restUrl}/coupon-orders`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
                body: JSON.stringify({ couponOrderMapID: comID })
            })
                .then((response) => response.json())
                .then((response) => {
                    const errorText = response.message ?? response.data ?? 'internal error'

                    if ('rest_forbidden' === response.code) {
                        return console.error(errorText)
                    }

                    if (! response.success) {
                        return errorText
                    }

                    return true
                })
        },

    }

    NorthCommerce.CouponManager.constructor()

})()
