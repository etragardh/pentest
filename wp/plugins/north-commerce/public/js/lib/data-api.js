/**
 * Data API manager.
 *
 * @since   0.1.3
 * @version 0.1.25
 */
;(function() {
    window.NorthCommerce = window.NorthCommerce ?? {}

    window.NorthCommerce.DataApi = {
        get(path, params) {
            return new Promise((resolve, reject) => {
                fetch(`/wp-json/nc-data/v1/${path}?` + (params ? new URLSearchParams(params) : ''), {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        Accept: 'application/json',
                    },
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data && data.code == 'ok') {
                            resolve(data.data)
                        } else {
                            reject(data.message)
                        }
                    })
                    .catch((error) => reject(error))
            })
        },

        post(path, payload) {
            return new Promise((resolve, reject) => {
                fetch(`/wp-json/nc-data/v1/${path}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload),
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data && data.code == 'ok') {
                            resolve(data.data)
                        } else {
                            reject(data.message)
                        }
                    })
                    .catch((error) => reject(error))
            })
        },

        nuke(path, payload) {
            return new Promise((resolve, reject) => {
                fetch(`/wp-json/nc-data/v1/${path}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload),
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data && data.code == 'ok') {
                            resolve(data.data)
                        } else {
                            reject(data.message)
                        }
                    })
                    .catch((error) => reject(error))
            })
        },

        getBySlug: async function (table, slugValue) {
            let found = await this.get(table, { filter: 'slug:eq:' + slugValue })
            if (found.length != 1) {
                throw new Error(`Can't find: ${table}.${slugValue}`)
            }
            return found[0]
        },

        getProductData: function (productID) {
            return this.get(`products/${productID}`)
        },

        getProductVariantData: function (productVariantId) {
            return this.get(`product-variants/${productVariantId}`)
        },

        getProductVariantOptionValuesData: function (productVariantId) {
            return this.get(`product-variants/${productVariantId}/product-variant-option-values`, {
                expand: 'product-option-value.product-option.product_option_type',
            })
        },
    }
})()
