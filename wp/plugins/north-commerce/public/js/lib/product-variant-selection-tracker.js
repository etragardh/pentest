/*
 * A JavaScript file for keeping track of what product variants have been
 * selected
 */

(function() {

    if (!window.NorthCommerce) {
        window.NorthCommerce = {};
    }

    window.NorthCommerce.ProductVariantSelectionTracker = {
        sequence: [],

        addUserSelection: function(productOption, optionValue)  {
            const productOptionId = productOption.getAttribute('data-id');
            const optionValueId = optionValue.getAttribute('value');

            this.sequence = this.sequence.filter(pv => pv.productOptionId != productOptionId);
            this.sequence.push({
                productOptionId: productOptionId,
                optionValueId: optionValueId
            });
        },

        forEachOptionValue: function(fn) {
            document.querySelectorAll('.nc-variations .nc-variation').forEach(productOption => {
                productOption.querySelectorAll('input[type=radio]').forEach(input => fn(productOption, input))
            });
        },

        showOnlyValidOptions: function() {
            const pvm = window.NorthCommerce.ProductVariantManager;

            let currentVariants = this.eligibleProductVariants();
            if(this.sequence.length > 0 && currentVariants == 0) {
                if(this.sequence.length > 1) {
                    this.uncheck(this.sequence[this.sequence.length - 2].optionValueId);
                    this.showOnlyValidOptions();
                    return;
                } else if(this.sequence == 1) {
                    this.uncheck(this.sequence[this.sequence.length - 1].optionValueId);
                    this.showOnlyValidOptions();
                    return;
                } else {
                    return;
                }
            }

            let lastSelected = this.sequence.length == 0 ?
                null :
                this.sequence[this.sequence.length - 1];

            this.forEachOptionValue((productOption, input) => {
                let productOptionId = productOption.getAttribute('data-id');
                let valueId = input.getAttribute('value');

                if(lastSelected != null) {
                    if(productOptionId == lastSelected.productOptionId) {
                        return;
                    } else if(this.hasProductOptionSelected(productOptionId) ||
                              pvm.isValidOptionValue(currentVariants, valueId)) {
                        this.show(valueId);
                    } else {
                        this.hide(valueId);
                    }
                }

                const inStock = pvm.isInStockOptionValue(currentVariants, valueId);
                if(inStock === true) {
                    this.mark(valueId, 'in-stock');
                } else if(inStock === false) {
                    this.mark(valueId, 'out-of-stock');
                }
            });

        },

        hasProductOptionSelected: function(productOptionId) {
            const found = this.sequence.filter(pv => pv.productOptionId == productOptionId);
            return found.length == 1;
        },

        eligibleProductVariants: function() {
            const pvm = window.NorthCommerce.ProductVariantManager;
            if(this.sequence.length == 0) {
                return pvm.allProductVariants();
            }

            const valueIds = this.sequence.map(pv => pv.optionValueId);
            return pvm.productVariants(valueIds)
        },

        selectedProductVariant: function() {
            if(this.sequence.length == this.productOptions().length) {
                let found = this.eligibleProductVariants();
                if(found.length == 1) {
                    return found[0];
                }

                throw new Error("Expeced 1 pv, got: " + found);
            }

            return null;
        },

        productOptions: function() {
            return Array.from(document.querySelectorAll('.nc-variations .nc-variation'));
        },

        mark: function(valueId, status) {
            let label = document.querySelector(`label[data-id='${valueId}']`);

            label.classList.forEach(c => {
                if(c.startsWith('status-')) {
                    label.classList.remove(c);
                }
            });

            label.classList.add('status-' + status);
        },

        show: function(valueId) {
            let label = document.querySelector(`label[data-id='${valueId}']`);
            if(!label) {
                throw new Error(`Can't find a label with the value id: ${valueId}`);
            }
            label.style.display = 'inline-block';
        },

        hide: function(valueId) {
            let label = document.querySelector(`label[data-id='${valueId}']`);
            label.style.display = 'none';
            this.uncheck(valueId);
        },

        uncheck: function(valueId) {
            this.sequence = this.sequence.filter(pv => pv.optionValueId != valueId);

            let radio = document.querySelector(`.nc-variations input[value='${valueId}']`);
            radio.checked = false;
        }

    };

})();
