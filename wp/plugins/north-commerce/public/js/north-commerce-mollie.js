// Create a Mollie client.

if ( '' !== mollie_data.public ) {
	const submit = document.querySelectorAll('.CheckoutFormBodySubmitButton')
	let generalMollieError

	try {
		var mollieClient = Mollie( mollie_data.public, {
			locale: 'en_US',
			testmode: mollie_data.test === "1"
		})

		submit.forEach((item) => {
			item.addEventListener('click', async (e) => {
				e.preventDefault();

				const spc = e.target.closest('[data-type="form"]')

				const anyMethodChosen = spc.querySelector('.DefaultButton.Card[style="display: none;"]')
				if (!anyMethodChosen) {
					showPaymentError('Choose your payment method.')
				}

				const mollieBtn = spc.querySelector('.Card.mollie')
				if (mollieBtn) {
					const mollieMethodsForm = mollieBtn.nextElementSibling;
					if (
						! mollieMethodsForm
						|| 'block' !== mollieMethodsForm.style.display
						|| 'none' !== mollieBtn.style.display
					) {
						// Bailout, if mollie is not active.
						return
					}
				}

				const btn = e.target
				generalMollieError = spc.querySelector('.mollieGeneralError')

				clearPaymentError()
				hideMollieGeneralError()

				let validPaymentMethod = true;
				let valid = NorthCommerce.singlePageCheckoutManager.validateCheckoutInputs( btn ) && (validPaymentMethod = checkPaymentMethod( spc ))

				if ( ! valid ) {
					if (validPaymentMethod) {
						showPaymentError('Invalid fields')
					}
					btn.classList.remove('disabled')

					// Bailout
					return
				}

				const args = new FormData()
				const fields = NorthCommerce.singlePageCheckoutManager.getCheckoutData(spc)

				let url
				if (spc.getAttribute('data-redirect') !== null) {
					url = spc.getAttribute('data-redirect')
				} else {
					url = window.location.href
				}

				fields.push({
					'name': 'redirect',
					'value': url
				})

				args.append('action', 'mollie_payment_process')
				args.append('data', JSON.stringify(fields))

				try {
					disableSubmitButton(btn)

					const response = await fetch(ajax_object.ajaxurl, {
						method: 'post',
						body: args,
						credentials: 'same-origin'
					})
					const result = await response.json()

					if (result['error']) {
						showPaymentError('Payment Error:' + result['error'])
					} else if (result['redirect']) {
						window.location.href = result['redirect']
					}
				} catch(error) {
					showPaymentError('Payment Error:' + error)
				} finally {
					enableSubmitButton(btn)
				}

			})
		})
	} catch(e) {
		console.error(e)
	}

	function disableSubmitButton(btn) {
		btn.classList.add('disabled')
		btn.firstElementChild.textContent = 'Loading...'
	}

	function enableSubmitButton(btn) {
		btn.classList.remove('disabled')
		btn.firstElementChild.textContent = 'Place order'
	}

	function checkPaymentMethod(form) {
		const mollieMethod = form.querySelector('.paymentMethodWrapper [name=mollie_method]:checked')

		if (!mollieMethod) {
			showPaymentError('Choose available payment method.')
		}

		return !!mollieMethod
	}

	const showMollieGeneralError = (error) => {
		generalMollieError.classList.add('input-error');
		generalMollieError.style.display = "flex";
		generalMollieError.querySelector('.ErrorText').innerHTML  = error;
	}

	function hideMollieGeneralError() {
		generalMollieError.classList.remove('input-error');
		generalMollieError.style.display = "none";
	}

	const showMollieError = (element, error) => {
		element.classList.add("ErrorTextFieldMain");
		element.nextElementSibling.classList.add('input-error');
		element.nextElementSibling.style.display = "flex";
		element.nextElementSibling.querySelector('.ErrorText').innerHTML  = error;
	}

	const hideMollieError = (element) => {
		element.classList.remove("ErrorTextFieldMain");
		element.nextElementSibling.classList.remove('input-error');
		element.nextElementSibling.style.display = "none";
	}

}
