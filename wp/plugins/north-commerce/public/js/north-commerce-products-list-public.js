/**
 * Products List
 *
 * @since   0.1.5
 * @version 0.1.21
 */
class ProductsList {

    constructor() {
        const isProductSinglePage = document.querySelector('.nc-container[data-type="product-overview"]')
        const productListContainer = document.querySelector('[data-nc-product-collection-grid]')

        if (
            document.querySelector('[data-add-to-cart-action]')
            && ! isProductSinglePage
        ) {
            this.setupAddProductToCartFunctionality()
        }

        if (productListContainer) {
            this.setupProductsList(productListContainer)
        }
    }

    /**
     * @version 0.1.21
     */
    setupAddProductToCartFunctionality() {
        document.addEventListener('click', handleAddToCartButton)

        async function handleAddToCartButton(e) {
            if (
                undefined === e.target.dataset.addToCartAction
                && null === e.target.closest('[data-add-to-cart-action]')
            ) {
                // Bailout
                return
            }

            if ( ! NorthCommerce.Cart ) {
                console.error( 'NorthCommerce Cart manager is missing.' )
            }

            const productContainer = e.target.closest('[data-type="nc-product"]')
            const productID = productContainer.dataset.id
            const productData = await NorthCommerce.Cart.getProductItemData(productID)
            const productVariants = productData.product_variants
            const activeOption = productContainer.querySelector('.product__options input[type="radio"]:checked')

            if ( productVariants.length > 1 && ! activeOption ) {
                return console.warn('Cart warning: active options of Product are missing.')
            }

            const product = {
                id: productData.id,
                price: productData.base_price,
                qty: 1,
            }

            if (activeOption) {
                product.product_variant_id = await NorthCommerce.Cart.retrieveVariantByOptions(product.id, [ activeOption.value ])
                const variantData = productVariants.find((variant) => parseInt(product.product_variant_id) === parseInt(variant.id))
                product.max_quantity = variantData.quantity ? variantData.quantity : productData.quantity
                product.price = variantData.price ? variantData.price : productData.base_price
            } else {
                const soloVariant = productVariants.find((variant) => 'solo' === variant.product_variant_type.slug)
                product.product_variant_id = soloVariant.id
                product.max_quantity = productData.quantity
            }

            let dispatchCartUpdatedEvent = false
            let qunatityErrorData = false
            const newCartData = NorthCommerce.Cart.retrieveCartData().map((cartItem) => {
                if (
                    parseInt(cartItem.product_id) === parseInt(product.id)
                    && parseInt(cartItem.product_variant_id) === parseInt(product.product_variant_id)
                ) {
                    dispatchCartUpdatedEvent = true
                    const newQuantity = parseInt(cartItem.qty) + 1
                    if (cartItem.max_quantity !== undefined && newQuantity > parseInt(cartItem.max_quantity)) {
                        qunatityErrorData = { item: cartItem, render: true }
                    } else {
                        cartItem.qty = newQuantity
                    }
                }

                return cartItem;
            })

            if (dispatchCartUpdatedEvent) {
                document.addEventListener('nc-cart-updated', NorthCommerce.Cart.openCartDrawer, { once: true })
                NorthCommerce.Cart.updateCartData(newCartData)
            } else {
                NorthCommerce.Cart.addProductToCart(product)
            }

            if (qunatityErrorData) {
                document.querySelectorAll(`#nc-cart-drawer [data-type="cart-product-item"][data-id="${qunatityErrorData.item.id}"]`).forEach((cartItem) => {
                    const errorContainer = cartItem.querySelector('[data-type="qty-counter-error"]')
                    errorContainer.innerHTML = '';
                    if (qunatityErrorData.render) {
                        errorContainer.innerHTML = `Max quantity for this product is ${qunatityErrorData.item.max_quantity}`;
                    }
                })
            }
        }
    }

    setupProductsList(productsListContainer) {

        setupChangeVariantFunctionality()
        setupLoadMorePagination()

        const productsGrid = productsListContainer.querySelector('[data-nc-rendered-product-collection]')
        const allProductsCounter = productsListContainer.querySelectorAll('[data-nc-all-products-counter]')
        const renderedProductsCounter = productsListContainer.querySelector('.rendered-products-counter')

        function setupLoadMorePagination() {
            const loadMoreButton = productsListContainer.querySelector('.load-more-button')

            if ( ! loadMoreButton ) {
                return
            }

            loadMoreButton.addEventListener('click', loadMoreProducts)

            function loadMoreProducts(e) {
                const limit = 15
                const loadMoreButtonText = loadMoreButton.innerHTML

                jQuery.ajax({
                    type: 'POST',
                    url: ajax_object.ajaxurl,
                    data: {
                        action: 'get_more_products',
                        page: loadMoreButton.dataset.page,
                        limit: limit,
                    },
                    beforeSend: function(){
                        loadMoreButton.disabled = true
                        loadMoreButton.textContent = 'Loading...'
                    },
                    success: function (result) {
                        if (result.success) {
                            productsGrid.insertAdjacentHTML('beforeend', result.data.html)

                            const currentPage = parseInt( loadMoreButton.dataset.page );
                            loadMoreButton.dataset.page = currentPage ? 1 + currentPage : 1;

                            allProductsCounter.forEach( (counter) => { counter.textContent = result.data.all_products_counter } )

                            const renderedProducts = loadMoreButton.dataset.page * limit
                            if (renderedProducts < result.data.all_products_counter) {

                                renderedProductsCounter.textContent = renderedProducts
                                loadMoreButton.innerHTML = loadMoreButtonText

                                const leftProductsCounter = result.data.all_products_counter - renderedProducts
                                if (leftProductsCounter < limit) {
                                    loadMoreButton.querySelector('.fetchable').textContent = leftProductsCounter
                                }

                            } else {

                                renderedProductsCounter.textContent = productsListContainer.querySelectorAll('.products-grid .product-wrapper').length
                                loadMoreButton.style.display = 'none'

                            }
                        }

                        loadMoreButton.disabled = false
                    }
                })
            }
        }

        // Sorting
        const sortingCheckbox = productsListContainer.querySelector('[data-sorting-filter-toggle]')
        const sortingFilter = productsListContainer.querySelector('[data-collection-sorting-filter]')
        let sortingLabel = sortingFilter.querySelector('[data-collection-sorting-select-filter]')

        // Change option selected
        sortingFilter.addEventListener('click', (e) => {
            if ('SELECT' === sortingFilter.tagName) {

                if (sortingFilter.dataset.sorted === sortingFilter.value) {
                    return
                }

                const selectedOption = sortingFilter.options[sortingFilter.selectedIndex]
                sortingLabel = selectedOption

            } else if ( ! e.target.classList.contains('dropdown__select-option') ) {
                return
            }

            const resortProduct = sortingLabel.dataset.sort !== e.target.dataset.sort

            if ('SELECT' === sortingFilter.tagName) {
                sortingFilter.dataset.sorted = e.target.value
            } else {
                sortingLabel.textContent = e.target.textContent
                sortingLabel.dataset.sort = e.target.dataset.sort
            }

            if (resortProduct) {
                sortProductsList()
            }
        })

        // Close dropdown on outside click
        if (sortingCheckbox) {
            sortingCheckbox.addEventListener('click', (e) => {
                if (e.target == sortingCheckbox) {
                    return
                }

                const isDropdownChild = e.target.closest('[data-collection-sorting-select-filter]');
                if (!isDropdownChild) {
                    sortingCheckbox.checked = false
                }
            })
        }


        function sortProductsList() {
            const productsWrapper = document.querySelector('[data-nc-rendered-product-collection]');
            const products = Array.from( productsWrapper.querySelectorAll('[data-product-collection-item]') );
            let productsSorted

            if (!products.length) {
                return
            }

            const sortingCriteria = sortingLabel.dataset.sort
            switch (sortingCriteria) {
                case 'price-desc':
                    productsSorted = sortProductsByPrice(products)
                    break;
                case 'price-asc':
                    productsSorted = sortProductsByPrice(products, 'asc')
                    break;

                case 'name-desc':
                    productsSorted = sortProductsByName(products)
                    break;
                case 'name-asc':
                    productsSorted = sortProductsByName(products, 'asc')
                    break;

                case 'date-desc':
                    productsSorted = sortProductsByDate(products)
                    break;
                case 'date-asc':
                    productsSorted = sortProductsByDate(products, 'asc')
                    break;
            }


            productsWrapper.innerHTML = ''
            productsSorted.forEach((product) => {
                productsWrapper.insertAdjacentHTML('beforeend', product.outerHTML)
            })
        };

        function sortProductsByPrice(products, direction = 'desc') {
            return products.sort((p1, p2) => {
                const p1Price = parseFloat( p1.querySelector('.description__price').textContent.replace(/[^\d.,]/g, '') )
                const p2Price = parseFloat( p2.querySelector('.description__price').textContent.replace(/[^\d.,]/g, '') )

                if ('desc' === direction) {
                    return p2Price - p1Price
                }

                return p1Price - p2Price
            });
        }

        function sortProductsByName(products, direction = 'desc') {
            return products.sort((p1, p2) => {
                const p1Name = p1.querySelector('.description__name').textContent
                const p2Name = p2.querySelector('.description__name').textContent

                if (p1Name === p2Name) {
                    return 0
                }

                if ('desc' === direction) {
                    return p2Name > p1Name ? 1 : -1
                }

                return p2Name < p1Name ? 1 : -1
            })
        }

        function sortProductsByDate(products, direction = 'desc') {
            return products.sort((p1, p2) => {
                const p1Date = parseInt( p1.querySelector('.product-item').dataset.timestamp )
                const p2Date = parseInt( p2.querySelector('.product-item').dataset.timestamp )

                if ('desc' === direction) {
                    return p2Date - p1Date
                }

                return p1Date - p2Date
            });
        }

        function setupChangeVariantFunctionality() {
            productsListContainer.addEventListener('click', handleChangeVariant)

            async function handleChangeVariant(e) {
                if (
                    'radio' === e.target.type
                    && null !== e.target.closest('[data-type="product-options"]')
                ) {
                    // do nothing
                } else {
                    return
                }

                if ( ! NorthCommerce.Cart ) {
                    console.error( 'NorthCommerce.Cart methods are missing.' )
                }

                const productContainer = e.target.closest('[data-type="nc-product"]')
                const productOptionsContainer = productContainer.querySelector('.product__options')

                productOptionsContainer.querySelectorAll('[data-type="option-label"]').forEach((label) => label.classList.remove('unavailable'))
                let checkedOptions = productOptionsContainer.querySelectorAll('input[type="radio"]:checked')

                if (checkedOptions.length !== productOptionsContainer.childElementCount) {
                    return
                }

                const productID = productContainer.dataset.id
                const checkedOptionsIDs = Array.from(checkedOptions).map((el) => el.value);
                const variantID = await NorthCommerce.Cart.retrieveVariantByOptions(productID, checkedOptionsIDs)

                const productItemData = await NorthCommerce.Cart.getProductItemData(productID);
                const variant = productItemData.product_variants.find((el) => el.id === variantID)

                const ctaButton = productContainer.querySelector('[data-add-to-cart-action]')
                const ctaButtonLabel = ctaButton.querySelector('[data-type="cta-button-label"]')

                variant.hasStock = null === variant.quantity || variant.quantity > 0
                if (!!variant.visible && variant.hasStock) {
                    ctaButton.disabled = false
                    ctaButtonLabel.textContent = ctaButtonLabel.dataset.enabledLabel
                } else {
                    ctaButton.disabled = true
                    ctaButtonLabel.textContent = ctaButtonLabel.dataset.disabledLabel
                    checkedOptions.forEach((opt) => opt.parentElement.querySelector('label').classList.add('unavailable'))
                }
            }
        }


    }

}
new ProductsList()
