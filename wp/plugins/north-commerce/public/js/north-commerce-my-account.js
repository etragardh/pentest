window.NorthCommerce = window.NorthCommerce ?? {}

class NCMyAccount {
  constructor() {
    this.container = document.querySelector('.nc-account')

    if (!this.container) {
      return
    }

    window.NorthCommerce.MyAccount = this

    this.active_view               = null
    this.tabsManager               = new NCMyAccountTabs(this.container)
    this.orderManager              = new NCMyAccountOrder(this.container)
    this.ordersManager             = new NCMyAccountOrders(this.container)
    this.personalInfomationManager = new NCMyAccountPersonalInformation(this.container)
    this.events()
    this.openFirstTab()
  }

  events() {
    window.addEventListener('popstate', event => {
      this.openView(event.state.tab)
    })
  }

  openView(view, setState = false) {
    view.includes('orders') && this.ordersManager.update()
    view.includes('order-') && this.handleOpenOrderView(view)

    this.active_view            = view
    this.container.dataset.view = this.active_view.replace(/-\d+/, '')
    this.tabsManager.setTab(this.active_view.replace(/-\d+/, ''))
    setState && this.setHistoryState()
  }

  handleOpenOrderView(view) {
    // Extract the order ID from the view string
    const orderId = view.replace('order-', '')

    // Update the order manager with the extracted order ID
    this.orderManager.update(orderId)

    // Return the string "order" as the view identifier
    return 'order'
  }

  openFirstTab() {
    const params       = new URLSearchParams(window.location.search)
    const isGetParamOk =
            params.get('tab') &&
            (
              this.tabsManager.tabs.includes(params.get('tab')) ||
              params.get('tab').includes('order-')
            )

    this.openView(isGetParamOk
      ? params.get('tab')
      : this.tabsManager.tabs[0],
    )
  }

  setHistoryState(orderId = null) {
    let newTabValue = this.active_view
    if (orderId) {
      newTabValue = `order-${orderId}`
    }
    const newUrl = `${location.pathname}?tab=${newTabValue}`
    window.history.pushState({ tab: newTabValue }, '', newUrl)

    // If an order ID is provided, make sure to refresh the order view
    if (orderId) {
      window.NorthCommerce.CustomerAccount.listOrders(window.AccountOrders)
    }
  }
}

class NCMyAccountTabs {
  constructor(container) {
    this.container  = container
    this.active_tab = ''
    this.tabs       = []

    //collect tabs
    this.container.querySelectorAll('.nc-account-tabs li').forEach(el => {
      this.tabs.push(el.dataset.tab)
    })

    this.events()
  }

  events() {
    this.container.querySelectorAll('.nc-account-tabs li').forEach(el => {
      el.addEventListener('click', event => {
        window.NorthCommerce.MyAccount.openView(event.target.dataset.tab, true)
      })
    })
  }

  setTab(tab) {
    window.scrollTo({
      top: document.querySelector('.nc-account').getBoundingClientRect().top + window.scrollY,
      behavior: 'smooth'
    })

    this.active_tab = tab

    this.setNavActive()
    this.setTabActive()
  }

  setNavActive() {
    this.container.querySelectorAll('.nc-account-tabs li').forEach(el => {
      el.classList.remove('active')
      el.dataset.tab === this.active_tab && el.classList.add('active')
    })
  }

  setTabActive() {
    this.container.querySelectorAll('.nc-account-tab').forEach(el => {
      el.style.display = el.dataset.tab === this.active_tab
        ? 'block'
        : 'none'
    })
  }
}

class NCMyAccountOrders {
  constructor(container) {
    this.container = container
  }

  update() {

  }
}

class NCMyAccountOrder {
  constructor(container) {
    this.container = container

    this.events()
  }

  events() {
    //handle View Order click
    this.container.addEventListener('click', event => {
      if (!event.target.matches('[data-my-account-open-view]')) {
        return
      }

      window.NorthCommerce.MyAccount.openView(event.target.dataset.myAccountOpenView, true)
    })
  }

  update(orderId) {
    window.NorthCommerce.MyAccount.setHistoryState(orderId)
  }
}

class NCMyAccountPersonalInformation {
  constructor(container) {
    this.container              = container
    this.submit_button          = this.container.querySelector('[data-save]')
    this.shippingAddressManager = new NCAccountShippingAddresses(this.container.querySelector('.nc-account-shipping-addresses'))
  }
}

class NCAccountShippingAddresses {
  constructor(container) {
    this.container   = container
    this.editManager = new NCAccountShippingAddressEdit(this.container.querySelector('.nc-account-shipping-address-edit'))
    this.items_raw   = []
    this.$items      = this.container.querySelector('.nc-account-shipping-addresses-items')

    this.events()
    this.update()
  }

  getItemId(node) {
    return node.closest('[data-id]').dataset.id
  }

  events() {
    this.container.addEventListener('click', event => {

      //handle new click
      if (event.target.matches('[data-shipping-address-new]')) {
        this.editManager.open()
      }

      //handle set default click
      if (event.target.matches('[data-set-default]')) {
        this.$items.querySelectorAll('[data-id][data-default]').forEach(el => {
          this.setItemDefault(el.dataset.id, false)
        })
        this.setItemDefault(this.getItemId(event.target), true, this.container, true)
      }

      //handle edit click
      if (event.target.matches('[data-edit]')) {
        this.editManager.open(this.getItemId(event.target))
      }

      //handle remove click
      if (event.target.matches('[data-remove]')) {
        this.remove(this.getItemId(event.target))
      }
    })
  }

  update() {
    const args = new FormData()
    args.append('action', 'get_public_current_user_addresses')

    fetch(ajax_object.ajaxurl, {
      method:      'POST',
      body:        args,
      credentials: 'same-origin',
    }).then(response => response.json()).then(response => {
      this.items_raw = response.data.addresses;
      this.$items.innerHTML = response.data.public_html
    }).catch(error => {
      console.error(`Error: ${error}`)
    })
  }

  getDataById(id) {
    return this.items_raw.find(item => item.id === id)
  }

  setItemDefault(id, status, node, update) {
    node && this.setBusyState(node)

    fetch(`${ajax_data.north_api}/addresses/${id}`, {
      method:  'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept':       'application/json',
      },
      body:    JSON.stringify({ 'is_default_shipping': status }),
    }).then(response => response.json()).then(data => {
    }).catch((error) => {
      console.error('Error:', error)
    }).finally(() => {
      node && this.setUnBusyState(node)
      update && this.update()
    })
  }

  remove(id) {
    console.log(`Remove: ${id}`)

    //TODO implement
    //this.setBusyState()
    //do request
    //then finally
    //this.setUnBusyState()
    //this.update()
  }

  setBusyState(node) {
    if (node) {
      node.classList.add('nc-busy')
    } else {
      this.container.classList.add('nc-busy')
    }
  }

  setUnBusyState(node) {
    if (node) {
      node.classList.remove('nc-busy')
    } else {
      this.container.classList.remove('nc-busy')
    }
  }
}

class NCAccountShippingAddressEdit {
  constructor(container) {
    this.container = container

    this.id          = null
    this.$close      = this.container.querySelector('[data-close-modal]')
    this.form        = this.container.querySelector('form')
    this.$submit     = this.form.querySelector('[type="submit"]')
    this.customer_id = this.form.dataset.customerId
    this.inputs      = {
      country_id:   this.container.querySelector('[name="country_id"]'),
      addressline1: this.container.querySelector('[name="addressline1"]'),
      city:         this.container.querySelector('[name="city"]'),
      state:        this.container.querySelector('[name="state"]'),
      zipcode:      this.container.querySelector('[name="zipcode"]'),
    }

    this.containers = {
      state:          this.container.querySelector('.nc-account-shipping-address-state-container'),
      zipcode:        this.container.querySelector('.nc-account-shipping-address-zipcode-container'),
      states_zipcode: this.container.querySelector('.nc-account-shipping-address-edit-2-columns'),
    }

    this.labels = {
      state:   this.container.querySelector('label[for="nc-account-shipping-address-address-state"]'),
      zipcode: this.container.querySelector('label[for="nc-account-shipping-address-address-zipcode"]'),
    }

    this.events()
    this.addCountriesOptions()
    this.inputs.country_id.dispatchEvent(new Event('change'))
  }

  events() {
    this.form.addEventListener('submit', event => {
      event.preventDefault()
      this.save()
    })

    this.inputs.country_id.addEventListener('change', () => {
      this.checkStates()
      this.setStatesAndZipCodeLabels()
      this.setStatesAndZipcodeVisibility()
      this.inputs.zipcode.value = ''
    })

    this.$close.addEventListener('click', () => {
      this.close()
    })
  }

  open(id) {
    this.id = id
    this.load()
    this.container.classList.add('open')
  }

  load() {
    if (!this.id) {
      return
    }

    const itemFromAddresses = window.NorthCommerce?.MyAccount?.personalInfomationManager?.shippingAddressManager.getDataById(this.id);

    if(itemFromAddresses) {
      this.fillFormValues(itemFromAddresses)
      return;
    }

    this.setBusyState()

    fetch(`${ajax_data.north_api}/addresses/${this.id}`, {
      method:  'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept':       'application/json',
      },
    }).then(response => response.json()).then(data => {
      console.log(data.data)

      this.fillFormValues(data.data)
    }).catch((error) => {
      console.error('Error:', error)
    }).finally(() => {
      this.setUnBusyState()
    })
  }

  save() {
    this.setBusyState()
    this.$submit.innerText = this.$submit.dataset.textSaving

    const data = {
      'country_id':   this.inputs.country_id.value,
      'state':        this.inputs.state.value,
      'city':         this.inputs.city.value,
      'addressline1': this.inputs.addressline1.value,
      'zipcode':      this.inputs.zipcode.value,
    }

    if (!this.id) {
      data.customer_id         = this.customer_id
      data.is_default_shipping = false
      data.is_default_billing  = false
      data.first_name          = document.getElementById('first_name')?.value
      data.last_name           = document.getElementById('last_name')?.value
    }

    fetch(`${ajax_data.north_api}/addresses/` + (this.id ?? ''), {
      method:  'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept':       'application/json',
      },
      body:    JSON.stringify(data),
    }).then(response => response.json()).then(data => {
      this.close()
      window.NorthCommerce.MyAccount?.personalInfomationManager?.shippingAddressManager?.update()
    }).catch((error) => {
      alert('Error while saving')
      console.error('Error:', error)
    }).finally(() => {
      this.$submit.innerText = this.$submit.dataset.textInitial
      this.setUnBusyState()
    })
  }

  fillFormValues(address) {
    this.inputs.country_id.value = address.country_id
    this.inputs.country_id.dispatchEvent(new Event('change'))

    this.inputs.state.value        = address.state
    this.inputs.addressline1.value = address.addressline1
    this.inputs.city.value         = address.city
    this.inputs.zipcode.value      = address.zipcode
  }

  close() {
    this.container.classList.remove('open')
    this.clear()
  }

  clear() {
    this.id = null
    this.form.reset()
    this.inputs.country_id.dispatchEvent(new Event('change'))
  }

  addCountriesOptions() {
    let option

    Object.entries(ncCountries).forEach(el => {
      const [key, data] = el

      option                      = document.createElement('option')
      option.value                = data.id
      option.dataset.abbreviation = data.abbreviation
      option.innerText            = data.name

      this.inputs.country_id.appendChild(option)
    })
  }

  checkStates() {
    this.inputs.state.value     = ''
    this.inputs.state.innerHTML = ''

    const countryData = this.getCountryData()

    if (!countryData) {
      return
    }

    let option
    Object.entries(countryData['subunits']).forEach(el => {
      const [key, value] = el

      option           = document.createElement('option')
      option.value     = value
      option.innerText = value

      this.inputs.state.appendChild(option)
    })
  }

  getCountryData() {
    const countryAbbreviation = this.inputs.country_id.options[this.inputs.country_id.selectedIndex]?.dataset.abbreviation

    if (!countryAbbreviation) {
      return null
    }

    return ncCountriesSubUnits[countryAbbreviation]
  }

  setStatesAndZipcodeVisibility() {
    const countryData = this.getCountryData()

    this.containers.state.style.display = countryData?.labels?.states
      ? 'block'
      : 'none'

    this.containers.zipcode.style.display = countryData?.labels?.zip
      ? 'block'
      : 'none'

    this.containers.states_zipcode.style.display =
      countryData?.labels?.states || countryData?.labels?.zip
        ? 'grid'
        : 'none'
  }

  setStatesAndZipCodeLabels() {
    const countryData = this.getCountryData()

    this.labels.state.innerText   = countryData?.name?.single ?? ''
    this.labels.zipcode.innerText = countryData?.labels?.zip ?? ''
  }

  setBusyState() {
    this.form.classList.add('nc-busy')
  }

  setUnBusyState() {
    this.form.classList.remove('nc-busy')
  }
}

document.addEventListener('DOMContentLoaded', function () {
  new NCMyAccount()

  // Handle enabling button, eventually should be moved into a utility file
  function enableButtonOnFormChange(formId, buttonId) {
    const form         = document.getElementById(formId)
    const submitButton = document.getElementById(buttonId)

    const enableSubmitButton = () => {
      submitButton.disabled = false
    }

    Array.from(form.elements).forEach(element => {
      if (element.tagName === 'INPUT' || element.tagName === 'SELECT' || element.tagName === 'TEXTAREA') {
        element.addEventListener('input', enableSubmitButton)
      }
    })

  }

  if (document.querySelector('#nc-account-form')) {
    enableButtonOnFormChange('nc-account-form', 'nc-save-info-button')
    document.getElementById('nc-account-form').addEventListener('submit', function (event) {
      event.preventDefault()
      let formBtn       = document.querySelector('#nc-save-info-button')
      let statusMessage = document.querySelector('.nc-account-tab-personal-information-form-btn-container-status-message')
      formBtn.value     = 'Loading...'

      let formData = new FormData(document.getElementById('nc-account-form'))
      formData.append('customer_id', document.getElementById('customer_id').value)
      formData.append('first_name', document.getElementById('first_name').value)
      formData.append('last_name', document.getElementById('last_name').value)
      formData.append('email', document.getElementById('email').value)
      formData.append('phone', document.getElementById('phone').value)

      fetch(`${ajax_data.rest_url}/update-user`, {
        method:  'POST',
        headers: {
          'Content-Type':  'application/json',
          'Accept':        'application/json',
          'X-WP-Nonce':    document.getElementById('nc-account-form').getAttribute('data-nonce'),
          'nc-form-nonce': document.getElementById('nc-account-form').getAttribute('data-form-nonce'),
          'nc_initiator':  'spc',
        },
        body:    JSON.stringify(Object.fromEntries(formData)),
      }).then(response => response.json()).then(data => {
        formBtn.value           = 'Save Information'
        statusMessage.innerText = 'Your information was saved successfully.'
        formBtn.disabled        = true

        // Set a timeout to clear the message after 5 seconds
        setTimeout(function () {
          statusMessage.innerText = ''
        }, 6000)
      }).catch((error) => {
        console.error('Error:', error)
        statusMessage.innerText = error
      })
    })
  }

  // Handle marketing optins
  const marketing_optin = document.getElementById('nc-subscriptions')
  const customer_id     = document.getElementById('customer_id')
  if (marketing_optin) {
    marketing_optin.addEventListener('change', (e) => {
      if (e.target.checked) {
        marketingOptin(true, customer_id.value)
      } else {
        marketingOptin(false, customer_id.value)
      }
    })
  }

  function marketingOptin(isChecked, customer_id) {
    const data = {
      'marketing_optin': isChecked,
    }

    fetch(`${ajax_data.north_api}/customers/${customer_id}`, {
      method:  'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept':       'application/json',
      },
      body:    JSON.stringify(data),
    }).then(response => response.json()).then(data => {
    }).catch((error) => {
      console.error('Error:', error)
    })

  }
})



