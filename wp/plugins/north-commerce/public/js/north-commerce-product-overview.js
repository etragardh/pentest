(function () {
    'use strict'

    const checkoutManager = window.NorthCommerce.CheckoutManager;

    const validateRequiredInput = function (e) {
        resetInputError(e);
        if (e.value.length > 0 || e.hasAttribute('required')) {
            if (e.value.length === 0) {
                const error = e.getAttribute('data-error-required')
                showInputError(e, error);
                return;
            }
        }
    }

    function validateInputEmail(e) {
        resetInputError(e)

        if (!e.value.length && !e.hasAttribute('required')) {
            return true
        }

        if (!e.value.length) {
            const error = e.getAttribute('data-error-required')
            showInputError(e, error)
            return false
        }

        const regexEmail = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
        if (!regexEmail.test(e.value)) {
            const error = e.getAttribute('data-error-email-format')
            showInputError(e, error)
            return false
        }

        return true
    }

    function showInputError(e, error) {
        e.classList.add("nc-input-field__input--error");
        const labelItem = e.closest('.nc-input-field').querySelector('.nc-input-field__label');
        const errorItem = e.closest('.nc-input-field').querySelector('.nc-input-field__error');
        if (labelItem !== null) {
            labelItem.classList.add("nc-input-field__label--error");
        }
        if (errorItem !== null) {
            errorItem.classList.add('nc-input-field__error--active')
            errorItem.querySelector('.nc-input-field__error span span').innerHTML = error;
        }
    }

    function resetInputError(inputElement) {
        inputElement.classList.remove('nc-input-field__input--error')
        const labelItem = inputElement.closest('.nc-input-field').querySelector('.nc-input-field__label')
        const errorItem = inputElement.closest('.nc-input-field').querySelector('.nc-input-field__error')

        if (labelItem) {
            labelItem.classList.remove('nc-input-field__label--error')
        }
        if (errorItem) {
            errorItem.classList.remove('nc-input-field__error--active')
            errorItem.querySelector('.nc-input-field__error span span').innerHTML = ''
        }
    };


    function formatNumber(number) {
        return NorthCommerce.formatPrice(number)
    }

    const productOverview = document.querySelector('.nc-container[data-type="product-overview"]')
    if (productOverview) {
        // ** cart functionality
        document.addEventListener('nc-cart-updated', handleCartItemsUpdated)

        // ** Product overview
        setupProductGallery();
        setupAddToCartFunctionality();
        setupProductQuantityChangeListeners()
        setupProductVariationsChange();
    }

    // ** checkout related functionality
    setupCheckoutShortcodeFunctionalities();

    function setupCheckoutShortcodeFunctionalities() {
        if (!document.querySelectorAll('.nc-checkout-container').length) {
            return
        }

        checkCartItems()

        // order items
        updateCheckoutOrderCart()
        setupOrderItemQuantityChangeListener()
        setupRemoveItemFromOrder()

        // ** Custom Info Step 1
        setupCheckoutCustomerInfoEdit()

        setupOrderItemVariationChange()

        // ** Custom Address info Step 2


        // Addresses fields setup
        setupCheckoutAddressInfoEdit();
        setupCheckoutAddressInfoSubmit();
        setupCheckoutInfoChange();

        setGoogleAddressAutocomplete()

        // ** payment

        setupPaymentIntegrations()
        setupPlaceOrderButton()

        // checkout page

        document.addEventListener('click', function (event) {
            if (
                event.target.closest('[data-type="variation-options"]') === null
                && event.target.closest('.nc-product-variant') === null
            ) {
                document.querySelectorAll('[data-type="variation-options"]').forEach(selector => {
                    selector.classList.add('hide')
                })
            }

            if (event.target.closest('.nc-product-variant-value') !== null) {
                const variantContainer = event.target.closest('[data-variant="nc-product-variant"]');
                const variantOptionsContainer = variantContainer.querySelector('[data-type="variation-options"]');
                if (variantOptionsContainer.classList.contains('hide')) {
                    document
                        .querySelectorAll('[data-type="variation-options"]')
                        .forEach((element) => element.classList.add('hide'))

                    variantOptionsContainer.classList.remove('hide')
                } else {
                    variantOptionsContainer.classList.add('hide')
                }
            }
        })
    }

    function setupPlaceOrderButton() {
        document.addEventListener('click', (e) => {
            if (!e.target.classList.contains('nc-place-order-btn')) {
                return
            }
            e.preventDefault()
            checkoutManager.placeOrder()
        })
    }

    function setupPaymentIntegrations() {
        window.NorthCommerce.PaymentProviderInstallers = {
            paypal: window.NorthCommerce.PaypalHelper,
            stripe: window.NorthCommerce.StripeHelper,
        }

        document
            .querySelectorAll('[name="nc-checkout-payment-service"]')
            .forEach((serviceElement) => {
                serviceElement.addEventListener('change', async function (event) {
                    const service = event.target.value
                    const orderTransaction = await checkoutManager.setPaymentProvider(service)

                if (window.NorthCommerce.PaymentProviderInstallers[service]) {
                    window.NorthCommerce.PaymentProviderInstallers[service].install()
                }

                    const serviceInputsContainer = document.querySelector(
                        `.nc-checkout-payment-item[data-type="${service}"]`
                    )
                    if (event.target.checked) {
                        document.querySelectorAll(`.nc-checkout-payment-item`).forEach((serviceItemContainer) => {
                            serviceItemContainer.classList.remove('nc-checkout-payment-item--active')
                        })
                        serviceInputsContainer.classList.add('nc-checkout-payment-item--active')
                    } else {
                        serviceInputsContainer.classList.remove('nc-checkout-payment-item--active')
                    }
                    const paymentSaveContainer = document.querySelector('.nc-payment-save-container')
                    paymentSaveContainer.classList.add('nc-payment-save-container--active')
                })
            })

        document
            .querySelector('.nc-checkout-step-container[data-type="payment-info"] form')
            .addEventListener('submit', async function (event) {
                event.preventDefault()
                const selectedService = document.querySelector('[name="nc-checkout-payment-service"]:checked');
                handleEnablePlaceOrder(selectedService.value, {});
            })
    }

    function handleEnablePlaceOrder(type, data) {
        console.log('handleEnablePlaceOrder', type, data)

        if(type === 'square') {
            data = NorthCommerce.SquareHelper.card_details
        }

        checkoutManager.setPaymentMethod({
            type: type,
            data: data
        });

        const paymentInfoContainer = document.querySelector('.nc-checkout-step-container[data-type="payment-info"]');
        const billingAddressSameAsShipping = document.querySelector('.nc-checkout-step-container[data-type="address-info"] #billing-address-source-handler').checked;
        const selectedService = paymentInfoContainer.querySelector('[name="nc-checkout-payment-service"]:checked');
        const paymentViewContainer = paymentInfoContainer.querySelector('.nc-checkout-step-view');
        paymentInfoContainer.querySelectorAll('.checkout-view-field').forEach(viewFieledElement => {
            viewFieledElement.classList.add('checkout-view-field--hide')
        })

        if (selectedService !== null) {
            if (selectedService.value === 'stripe') {
                const stripeViewField = paymentViewContainer.querySelector('.checkout-view-field[data-type="payment_service_stripe"]');
                stripeViewField.classList.remove('checkout-view-field--hide')
            } else if (selectedService.value === 'paypal') {
                const payPalViewField = paymentViewContainer.querySelector('.checkout-view-field[data-type="payment_service_paypal"]');
                payPalViewField.classList.remove('checkout-view-field--hide')
            }

            paymentInfoContainer.querySelector('input[name="nc-accordion"]').checked = false


            if (billingAddressSameAsShipping) {
                const billingAddressSameAsShippingViewField = paymentViewContainer.querySelector('.checkout-view-field[data-type="billing_address_same_as_shipping"]');
                billingAddressSameAsShippingViewField.classList.remove('checkout-view-field--hide')
            } else {
                const addressObj = getAddressByType('billing');
                const addressInfoContainer = document.querySelector('.nc-checkout-step-container[data-type="address-info"]');
                const billingFirstNameElement = addressInfoContainer.querySelector('#billing_first_name');
                const billingLastNameElement = addressInfoContainer.querySelector('#billing_last_name');
                const billingPhoneNumberElement = addressInfoContainer.querySelector('#billing_phone');
                const billingAddressLabel = getAddressLabel(addressObj.address, addressObj.zip_code, addressObj.city, addressObj.state, addressObj.country)

                const billingFullNameField = paymentViewContainer.querySelector('.checkout-view-field[data-type="billing_full_name"]');
                billingFullNameField.classList.remove('checkout-view-field--hide')
                billingFullNameField.querySelector('.checkout-view-field-value').innerHTML = billingFirstNameElement.value + ' ' +
                    billingLastNameElement.value;

                const billingAddressField = paymentViewContainer.querySelector('.checkout-view-field[data-type="billing_address"]');
                billingAddressField.classList.remove('checkout-view-field--hide')
                billingAddressField.querySelector('.checkout-view-field-value').innerHTML = billingAddressLabel;

                const billingPhoneNumberField = paymentViewContainer.querySelector('.checkout-view-field[data-type="billing_phone_number"]');
                billingPhoneNumberField.classList.remove('checkout-view-field--hide')
                billingPhoneNumberField.querySelector('.checkout-view-field-value').innerHTML = billingPhoneNumberElement.value;
            }
            paymentInfoContainer.querySelector('.nc-checkout-set-edit-handler').classList.add('nc-checkout-set-edit-handler--active')
            paymentViewContainer.classList.remove('hide');
            document.querySelectorAll('.nc-place-order-container').forEach((placeOrderBtn) => {
                placeOrderBtn.classList.add('nc-place-order-container--active')
            })
        }
    }

    function handleShippingServicesLoad() {
        const addressInfoContainer = document.querySelector('.nc-checkout-step-container[data-type="address-info"]');

        if (addressInfoContainer.querySelector('[name="shipping_service_enabled"]').value !== 'enabled') {
            return
        }

        addressInfoContainer.querySelector('.nc-shipping-rates').classList.remove('nc-shipping-rates--not-active')

        if (canProceedWithShipmentCall()) {
            const shippingAddress = getAddressByType('shipping')
            getShippingRates(shippingAddress)
            return
        }

        const shippingRatesContainer = addressInfoContainer.querySelector('.nc-shipping-rates-list')
        shippingRatesContainer.innerHTML = ''
        setShippingAndHandlingFees()
    }

    function checkCartItems() {
        fetch(`${ajax_data.rest_url}/cart-check`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                cart_items: getCartData()
            })
        })
            .then((response) => response.json())
            .then((response) => {
                if (!response.success) {
                    return
                }

                const shippingServicesContainer = document.querySelector('.nc-shipping-rates');
                const {
                    contains_shippable_products,
                    shipping_service_status
                } = response.data

                if (contains_shippable_products) {
                    shippingServicesContainer.classList.remove('nc-shipping-rates--not-active')
                    shippingServicesContainer.querySelector('[name="shipping_service_enabled"]').value = 'enabled'
                    return
                }

                shippingServicesContainer.classList.add('nc-shipping-rates--not-active')
                shippingServicesContainer.querySelector('.nc-shipping-rates-list').innerHTML = '';
                shippingServicesContainer.querySelector('[name="shipping_service_enabled"]').value = 'not_enabled'
            })
    }

    function getAddressByType(addressType = 'shipping') {
        const addressInfoContainer = document.querySelector('.nc-checkout-step-container[data-type="address-info"]');
        if (addressType === 'billing' && addressInfoContainer.querySelector('[name="billing_address_same_as_shipping"]').checked) {
            addressType = 'shipping';
        }
        const address = addressInfoContainer.querySelector(`input[name="${addressType}_address"]`).value;
        const zipCode = addressInfoContainer.querySelector(`input[name="${addressType}_zip_code"]`).value;
        const city = addressInfoContainer.querySelector(`input[name="${addressType}_city"]`).value;
        const state = addressInfoContainer.querySelector(`[name="${addressType}_state"]`).value;
        const country = addressInfoContainer.querySelector(`[name="${addressType}_country"]`).value;

        return {
            address: address,
            zip_code: zipCode,
            city: city,
            state: state,
            country: country,
        }
    }

    function getSelectedShippingRate() {
        const selectedShippingRateElement = document.querySelector('input[name="shipping_rate"]:checked')
        return selectedShippingRateElement
            ? JSON.parse(selectedShippingRateElement.getAttribute('data-rate'))
            : null
    }

    document.querySelectorAll('.nc-checkout-set-edit-handler').forEach(function (editElement) {
        editElement.addEventListener('click', function (e) {
            e.preventDefault()
            const stepId = e.target.closest('.nc-checkout-step-container').getAttribute('data-type')
            setCheckoutStep(stepId)
        })
    })

    function setCheckoutStep(stepId) {
        const customerContainer = document.querySelector('.nc-checkout-step-container[data-type="customer-info"]')
        const addressContainer = document.querySelector('.nc-checkout-step-container[data-type="address-info"]')
        const paymentContainer = document.querySelector('.nc-checkout-step-container[data-type="payment-info"]')
        const placeOrderContainer = document.querySelector('.nc-place-order-container')

        document.querySelectorAll('[name="nc-accordion"]:checked').forEach((input) => input.checked = false)
        customerContainer.classList.remove('active')
        addressContainer.classList.remove('active')
        paymentContainer.classList.remove('active')
        placeOrderContainer.classList.remove('nc-place-order-container--active')

        if ('customer-info' === stepId) {
            customerContainer.classList.add('active')
            customerContainer.querySelector('[name="nc-accordion"]').checked = true
            customerContainer.querySelector('.nc-input-field__input').focus()
        }

        if ('address-info' === stepId) {
            addressContainer.classList.add('active')
            addressContainer.querySelector('[name="nc-accordion"]').checked = true
            addressContainer.querySelector('#shipping_first_name').focus()
        }

        if ('payment-info' === stepId) {
            paymentContainer.classList.add('active')
            paymentContainer.querySelector('[name="nc-accordion"]').checked = true
            NorthCommerce.CouponManager.resetCache()
        }

        if ('place-order' === stepId) {
            customerContainer.querySelector('input[name="nc-accordion"]').checked = false
            addressContainer.querySelector('input[name="nc-accordion"]').checked = false
            paymentContainer.querySelector('input[name="nc-accordion"]').checked = false
            placeOrderContainer.classList.add('nc-place-order-container--active')
        }
    }

    function getShippingRates(address) {
        const addressInfoContainer = document.querySelector('.nc-checkout-step-container[data-type="address-info"]')
        const preLoadersContainer = addressInfoContainer.querySelector('.nc-shipping-rate-preloaders')
        const shippingRateList = addressInfoContainer.querySelector('.nc-shipping-rates-list')
        const checkoutErrorsContainer = addressInfoContainer.querySelector('.nc-checkout-errors')

        const cartData = getCartData()
        const selectedShippingRate = getSelectedShippingRate()

        clearCheckoutError()
        preLoadersContainer.classList.remove('loaded')
        shippingRateList.innerHTML = '';
        addressInfoContainer.querySelector('.nc-address-info-btn').setAttribute('disabled', true)

        fetch(`${ajax_data.rest_url}/shipping/rates`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                cart_items: cartData,
                address: address.address,
                zip_code: address.zip_code,
                city: address.city,
                state: address.state,
                country: address.country,
            })
        })
            .then((response) => response.json())
            .then((response) => {
                shippingRateList.innerHTML = ''
                preLoadersContainer.classList.add('loaded')

                if (!response.success) {
                    if (response.data?.errors?.shipping_profile_coverage) {
                        showCheckoutError(response.data.errors.shipping_profile_coverage)
                    }
                    return
                }

                let isPreviousSelectedShippingRateAvailable = false;
                shippingRateList.innerHTML = '';
                response.data.forEach((rate) => {
                    const shippingRateItem = getItemTemplate('tmpl-checkout-shipping-rate-item');

                    shippingRateItem.setAttribute('data-rate-type', rate.rate_type);
                    shippingRateItem.setAttribute('data-rate-icon', rate.rate_icon);
                    shippingRateItem.querySelector('.nc-shipping-rate-item-image img').setAttribute('src', rate.rate_icon)

                    shippingRateItem.querySelector('.nc-shipping-rate-item-price-value').innerHTML = parseFloat(rate.rate) === 0
                        ? 'Free'
                        : formatNumber(rate.rate)

                    if (
                        'local' === rate.zone_type_slug
                        || 'pickup' === rate.zone_type_slug
                    ) {
                        const zoneInstructions = shippingRateItem.querySelector('.nc-shipping-zone-instructions')
                        zoneInstructions.textContent = rate.zone_instructions
                    }

                    if (selectedShippingRate !== null && selectedShippingRate.id === rate.id) {
                        if (
                            'easypost' === rate.rate_type
                            && rate.carrier_id === selectedShippingRate.carrier_id
                            && rate.service === selectedShippingRate.service
                        ) {
                            shippingRateItem.classList.add('nc-shipping-rate-selected')
                            shippingRateItem.querySelector('.nc-shipping-rate-item-select input').checked = true
                            isPreviousSelectedShippingRateAvailable = true
                        }
                        if ('internal' === rate.rate_type) {
                            shippingRateItem.classList.add('nc-shipping-rate-selected')
                            shippingRateItem.querySelector('.nc-shipping-rate-item-select input').checked = true
                            isPreviousSelectedShippingRateAvailable = true
                        }
                    }

                    if (parseFloat(rate.rate) === 0) {
                        shippingRateItem.querySelector('.nc-shipping-rate-item-price-currency').remove()
                    }

                    shippingRateItem.querySelector('.nc-shipping-rate-item-select input').setAttribute('data-rate', JSON.stringify(rate));
                    if ('easypost' === rate.rate_type) {
                        shippingRateItem.querySelector('.nc-shipping-rate-item-name').innerHTML = rate.carrier
                        shippingRateItem.querySelector('.nc-shipping-rate-item-sub-name').innerHTML = insertSpacesBeforeUppercase(rate.service)
                        shippingRateItem.querySelector('.nc-shipping-rate-item-select input').setAttribute('value', `${rate.id}-${rate.easypost_rate_id}`)
                        shippingRateItem.querySelector('.nc-shipping-rate-item-select input').setAttribute('id', `${rate.id}-${rate.easypost_rate_id}`)
                        shippingRateItem.querySelector('.nc-shipping-rate-item-select label').setAttribute('for', `${rate.id}-${rate.easypost_rate_id}`)
                    }
                    if ('internal' === rate.rate_type) {
                        shippingRateItem.querySelector('.nc-shipping-rate-item-name').innerHTML = rate.rate_name;
                        shippingRateItem.querySelector('.nc-shipping-rate-item-sub-name').remove();
                        shippingRateItem.querySelector('.nc-shipping-rate-item-select input').setAttribute('id', rate.id);
                        shippingRateItem.querySelector('.nc-shipping-rate-item-select label').setAttribute('for', rate.id);
                    }

                    shippingRateList.appendChild(shippingRateItem);
                })

                if (
                    !isPreviousSelectedShippingRateAvailable
                    && !addressInfoContainer.querySelector('[name="nc-accordion"]').checked
                ) {
                    setCheckoutStep('address-info')
                    addressInfoContainer.querySelector('.nc-shipping-rates-list').scrollIntoView({
                        behavior: 'smooth',
                        inline: 'nearest'
                    })
                }

                if (isPreviousSelectedShippingRateAvailable) {
                    addressInfoContainer.querySelector('.nc-address-info-btn').removeAttribute('disabled');
                }

                setupShippingServiceChange()
            })
            .finally(() => setShippingAndHandlingFees())

        function showCheckoutError(errorText) {
            if (checkoutErrorsContainer.querySelector('.nc-checkout-error')) {
                return
            }

            const errorElement = document.createElement('li')
            errorElement.classList.add('nc-checkout-error')
            errorElement.textContent = errorText
            checkoutErrorsContainer.appendChild(errorElement)
            checkoutErrorsContainer.classList.add('nc-checkout-errors--active')
        }

        function clearCheckoutError() {
            checkoutErrorsContainer.innerHTML = ''
            checkoutErrorsContainer.classList.remove('nc-checkout-errors--active')
        }

        function insertSpacesBeforeUppercase(str) {
            return str.replace(/([A-Z])/g, ' $1').trim()
        }
    }

    function setGoogleAddressAutocomplete() {
        if (!window.google) {
            return
        }

        let autocompleteService
        let googlePlaceService
        let noFurtherShippingResults

        setAutocompleteAddressSuggestions()
        setAutocompleteAddressSubmit()

        function setAutocompleteAddressSuggestions() {
            const addressTypes = ['shipping', 'billing']

            addressTypes.forEach((addressType) => {
                const addressInputField = document.querySelector(`#${addressType}_address`)

                autocompleteService = new google.maps.places.AutocompleteService()
                const mapElement = document.createElement('div')
                const map = new google.maps.Map(mapElement, {
                    center: {lat: -33.8666, lng: 151.1958},
                    zoom: 15
                })
                googlePlaceService = new google.maps.places.PlacesService(map)

                google.maps.event.addDomListener(addressInputField, 'input', function (event) {
                    const value = event.target.value.trim()
                    const addressContainer = addressInputField.closest('.nc-input-field').querySelector('.address-suggestion-container')

                    if (value) {
                        return getPlacePredictions(value, addressContainer)
                    }

                    addressContainer.classList.add('address-suggestion-container--hidden')
                    addressContainer.innerHTML = ''
                })

                google.maps.event.addDomListener(addressInputField, 'focus', function (event) {
                    const value = event.target.value.trim()
                    const addressContainer = addressInputField.closest('.nc-input-field').querySelector('.address-suggestion-container')

                    if (value) {
                        return getPlacePredictions(value, addressContainer)
                    }
                })
            })

            function getPlacePredictions(search, addressContainer) {
                autocompleteService.getPlacePredictions({
                    input: search,
                    types: ['address']
                }, (predictions, status) => {
                    googleGetPlacePredictionsCallback(predictions, status, addressContainer)
                })
            }

            function googleGetPlacePredictionsCallback(predictions, status, addressContainer) {
                if (
                    status !== google.maps.places.PlacesServiceStatus.OK
                    || predictions === null
                    || !predictions.length
                ) {
                    // Place service status error
                    return
                }

                noFurtherShippingResults = false
                const addressSuggestionTemplate = getItemTemplate('tmpl-address-autocomplete-suggestion');
                const suggestionItemTemplate = addressSuggestionTemplate.querySelector('.address-suggestion-list li').cloneNode(true);
                addressSuggestionTemplate.querySelector('.address-suggestion-list li').remove();
                // Build output for each prediction
                for (let i = 0, prediction; prediction = predictions[i], i < predictions.length; i++) {
                    // Insert output in results container
                    const placeItem = suggestionItemTemplate.cloneNode(true);
                    let description = prediction.description;
                    let addedLength = 0;
                    prediction.matched_substrings.forEach(match => {
                        const startIndex = match.offset + addedLength;
                        let matchedString = description.substring(startIndex, startIndex + match.length);
                        const replaceWith = `<span>${matchedString}</span>`;
                        addedLength += replaceWith.length - match.length;
                        description = description.substring(0, startIndex) + replaceWith + description.substring(startIndex + match.length);
                    })
                    placeItem.setAttribute('data-place-id', prediction.place_id)
                    placeItem.querySelector('.address-suggestion-item__content').innerHTML = description;
                    addressSuggestionTemplate.querySelector('.address-suggestion-list').appendChild(placeItem);
                    // $(rootElement).find('.search_root-results').append('<div class="pac-item" data-placeid="' + prediction.place_id + '" data-value="' + prediction.description + '"  data-name="' + prediction.terms[0].value + '">' + prediction.description + '</div>')
                }
                addressContainer.innerHTML = '';
                addressContainer.appendChild(addressSuggestionTemplate);
                addressContainer.classList.remove('address-suggestion-container--hidden');
            }
        }

        function setAutocompleteAddressSubmit() {
            document.addEventListener('click', function (event) {
                if (!event.target) {
                    return
                }

                if (event.target.closest('.nc-input-field') === null) {
                    document
                        .querySelectorAll('.address-suggestion-container')
                        .forEach((element) => {
                            element.classList.add('address-suggestion-container--hidden')
                        })

                    return
                }

                handleSelectingSuggestedAddress(event.target.closest('.address-suggestion-item'))
            })

            function handleSelectingSuggestedAddress(suggestionItem) {
                if (!suggestionItem) {
                    return
                }

                const placeId = suggestionItem.getAttribute('data-place-id');
                googlePlaceService.getDetails({
                    placeId,
                    fields: ['address_component']
                }, function (place, status) {
                    if (status !== google.maps.places.PlacesServiceStatus.OK) {
                        return
                    }

                    let address = suggestionItem.innerText
                    let route
                    let street_number
                    let country
                    let city
                    let stateCode
                    let stateText = ''
                    let postal
                    const addressInputContainer = suggestionItem.closest('.nc-input-field')
                    const addressInput = addressInputContainer.querySelector('input.nc-input-field__input ');

                    let inputNameSlug = 'shipping_';
                    let addressTypeContainerSelector = '.nc-shipping-address-edit';
                    if (addressInput.name === 'billing_address') {
                        inputNameSlug = 'billing_';
                        addressTypeContainerSelector = '.nc-billing-address-edit';
                    }
                    const addressTypeContainer = document.querySelector(addressTypeContainerSelector)

                    for (let i = 0; i < place.address_components.length; i++) {
                        const plasceSuggestion = place.address_components[i]
                        if (['locality', 'postal_town'].includes(plasceSuggestion.types[0])) {
                            city = plasceSuggestion['long_name']
                            continue
                        }
                        if ('route' === plasceSuggestion.types[0]) {
                            route = plasceSuggestion['long_name']
                            continue
                        }
                        if ('street_number' === plasceSuggestion.types[0]) {
                            street_number = plasceSuggestion['long_name']
                            continue
                        }
                        if ('country' === plasceSuggestion.types[0]) {
                            country = plasceSuggestion['short_name']
                            continue
                        }
                        if ([plasceSuggestion.types[0], plasceSuggestion.types[1]].includes('postal_code')) {
                            postal = plasceSuggestion['long_name']
                            continue
                        }
                        if ('administrative_area_level_1' === plasceSuggestion.types[0]) {
                            stateCode = plasceSuggestion['short_name']
                            stateText = plasceSuggestion['long_name']
                            continue
                        }
                    }

                    const countryInput = document.querySelector(`select[name="${inputNameSlug}country"]`);
                    const countriesSubunitsMap = JSON.parse(document.querySelector('#list_states_by_countries').value);
                    const countryCode = country !== undefined ? country : '';
                    stateCode = stateCode !== undefined ? stateCode : '';
                    tail.select(countryInput).options.handle('select', countryCode,'#')

                    const previewsStateSource = addressTypeContainer.querySelector(`input[name="${inputNameSlug}address_state_field_source"]`).value
                    if (countriesSubunitsMap[countryCode] && countriesSubunitsMap[countryCode]['subunits']) {
                        addressTypeContainer.querySelector(`input[name="${inputNameSlug}address_state_field_source"]`).value = 'select';
                        const stateSelectTemplate = getItemTemplate('tmpl-checkout-state-input-select')
                        stateSelectTemplate.setAttribute('name', `${inputNameSlug}state`)

                        const tailSelectElement = addressTypeContainer.querySelector(`[name="${inputNameSlug}state"]`).closest('.nc-input-field').querySelector('.tail-select');
                        Object.keys(countriesSubunitsMap[countryCode]['subunits']).forEach((key) => {
                            const option = document.createElement('option');
                            option.text = countriesSubunitsMap[countryCode]['subunits'][key]
                            option.value = key
                            if (stateCode === key) {
                                option.selected = true;
                            }
                            stateSelectTemplate.appendChild(option)
                        });
                        if (tailSelectElement !== null) {
                            tailSelectElement.remove()
                        }

                        addressTypeContainer.querySelector(`[name="${inputNameSlug}state"]`).replaceWith(stateSelectTemplate)
                        const stateElement = addressTypeContainer.querySelector(`[name="${inputNameSlug}state"]`);
                        tail.select(stateElement).reload();
                        if (inputNameSlug === 'shipping_' && previewsStateSource !== 'select') {
                            addressTypeContainer.querySelector(`[name="${inputNameSlug}state"]`).addEventListener('change', validateCheckoutData)
                        }
                    } else {
                        const stateTextTemplate = getItemTemplate('tmpl-checkout-state-input-text');
                        stateTextTemplate.setAttribute('name', `${inputNameSlug}state`)

                        addressTypeContainer.querySelector(`input[name="${inputNameSlug}address_state_field_source"]`).value = 'text';
                        const stateElement = addressTypeContainer.querySelector(`[name="${inputNameSlug}state"]`);
                        if (stateElement.tagName.toLowerCase() === 'select') {
                            tail.select(stateElement).remove()
                        }
                        stateElement.replaceWith(stateTextTemplate)
                        if (inputNameSlug === 'shipment_' && previewsStateSource !== 'text') {
                            stateElement.addEventListener('change', validateCheckoutData)
                        }
                        document.querySelector(`input[name="${inputNameSlug}state"]`).value = stateText;
                    }

                    let addressCombination = `${street_number !== undefined ? street_number : ''} ${route !== undefined ? route : ''}`.trim()

                    document.querySelector(`input[name="${inputNameSlug}city"]`).value = city ?? ''
                    document.querySelector(`input[name="${inputNameSlug}zip_code"]`).value = postal ?? ''
                    document.querySelector(`input[name="${inputNameSlug}address"]`).value = addressCombination
                    addressInputContainer.querySelector('.address-suggestion-container').classList.add('address-suggestion-container--hidden')
                })
            }
        }
    }

    function setupCheckoutCustomerInfoEdit() {
        const customerInfo = document.querySelectorAll('.nc-checkout-step-container[data-type="customer-info"]')
        customerInfo.forEach((customerStepContainer) => {
            setupEmailInputListeners(customerStepContainer)

            const stepEdit = customerStepContainer.querySelector('.nc-checkout-step-edit')
            stepEdit.addEventListener('submit', async function (e) {
                e.preventDefault()

                const email = e.target.querySelector('.nc-input-field__input[name="email"]')

                if (!validateInputEmail(email)) {
                    return
                }

                const customerInfoContainer = e.target.closest('.nc-checkout-step-container');
                customerInfoContainer.querySelector('.nc-checkout-set-edit-handler').classList.add('nc-checkout-set-edit-handler--active')
                customerStepContainer.querySelector('.nc-checkout-step-view').classList.remove('hide');
                customerStepContainer.querySelector('.checkout-view-field[data-type="email"] .checkout-view-field-value').innerHTML = email.value;

                await checkoutManager.setCustomer({
                    email: email.value,
                    marketing_optin: document.querySelector('#nc-promo').checked
                })
                await checkoutManager.theOrder()
                await checkoutManager.theOrderTransaction()
                NorthCommerce.CouponManager.maybeApplyAutomaticCoupon()
                checkoutManager.setLineItems(getCartData())
                checkoutManager.prewarmPaymentProvider()

                focusNextCheckoutStep()
            })
        })

        document.querySelectorAll('.nc-checkout-set-edit-handler').forEach((checkoutEditHandler) => {
            checkoutEditHandler.addEventListener('click', function (event) {
                const checkoutEditHandler = event.target.closest('.nc-checkout-set-edit-handler')

                if (checkoutEditHandler.classList.contains('nc-checkout-set-edit-handler--active')) {
                    checkoutEditHandler.classList.remove('nc-checkout-set-edit-handler--active')
                    return
                }

                event.preventDefault()
            })
        })

        function setupEmailInputListeners(container) {
            const emailInput = container.querySelector('.nc-input-field__input[name="email"]')

            emailInput.addEventListener('keydown', (e) => {
                !['Enter', 'Tab'].includes(e.key) && resetInputError(e.target)
                ;['Enter', 'Tab'].includes(e.key) && validateInputEmail(e.target) && proceedNextCheckoutStep(e.target)
            })

            emailInput.addEventListener('blur', (e) => {
                validateInputEmail(e.target)
            })
        }

        function proceedNextCheckoutStep(target) {
            const checkoutStepForm = target.closest('.nc-checkout-step-edit')

            if (!checkoutStepForm) {
                return
            }

            const event = new Event('submit', {
                'bubbles' : true,
                'cancelable' : true,
            })
            checkoutStepForm.dispatchEvent( event )
        }

        function focusNextCheckoutStep() {
            const addressContainer = document.querySelector('.nc-checkout-step-container[data-type="address-info"]')
            const addressSaved = addressContainer.querySelector('.nc-checkout-set-edit-handler').classList.contains('nc-checkout-set-edit-handler--active')
            if (!addressSaved) {
                return setCheckoutStep('address-info')
            }

            const paymentContainer = document.querySelector('.nc-checkout-step-container[data-type="payment-info"]')
            const paymentSaved = paymentContainer.querySelector('.nc-checkout-set-edit-handler').classList.contains('nc-checkout-set-edit-handler--active')
            if (!paymentSaved) {
                return setCheckoutStep('payment-info')
            }

            setCheckoutStep('place-order')
        }
    }

    function setupCheckoutAddressInfoEdit() {
        // setting up tail selects elements
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll('select.nc-input-field__input:not(.hide)').forEach(selectElement => {
                //skip country, state, phone code
                if(selectElement.dataset.tailSkip) {
                    return;
                }

                const selectArgs = {
                    deselect: true,
                }
                if (selectElement.getAttribute('data-search') === 'true') {
                    selectArgs.search = true;
                }

                tail.select(selectElement, selectArgs);
            })

        });


        document.querySelector('#billing-address-source-handler').addEventListener('change', function (event) {
            const addressInfoContainer = document.querySelector('.nc-checkout-step-container[data-type="address-info"]');
            if (!event.target.checked) {
                addressInfoContainer.querySelector('input[name="billing_first_name"]').setAttribute('required', true);
                addressInfoContainer.querySelector('input[name="billing_last_name"]').setAttribute('required', true);
                addressInfoContainer.querySelector('input[name="billing_phone"]').setAttribute('required', true);
                addressInfoContainer.querySelector('input[name="billing_address"]').setAttribute('required', true);
                addressInfoContainer.querySelector('input[name="billing_zip_code"]').setAttribute('required', true);
                addressInfoContainer.querySelector('input[name="billing_city"]').setAttribute('required', true);
                addressInfoContainer.querySelector('[name="billing_state"]').setAttribute('required', true);
                addressInfoContainer.querySelector('[name="billing_country"]').setAttribute('required', true);
            } else {
                addressInfoContainer.querySelector('input[name="billing_first_name"]').removeAttribute('required');
                addressInfoContainer.querySelector('input[name="billing_last_name"]').removeAttribute('required');
                addressInfoContainer.querySelector('input[name="billing_phone"]').removeAttribute('required');
                addressInfoContainer.querySelector('input[name="billing_address"]').removeAttribute('required');
                addressInfoContainer.querySelector('input[name="billing_zip_code"]').removeAttribute('required');
                addressInfoContainer.querySelector('input[name="billing_city"]').removeAttribute('required');
                addressInfoContainer.querySelector('[name="billing_state"]').removeAttribute('required');
                addressInfoContainer.querySelector('[name="billing_country"]').removeAttribute('required');
            }

        })

        const addressTypes = [ 'shipping', 'billing' ];

        // This function might want to be moved into a manager so we can clean this file up.
        function handleCountryChange(event, addressType, addressTypeContainer, countriesSubunitsMap) {
            const countryCode = event.target.value;
            const isBillingChecked = !document.querySelector('#billing-address-source-handler').checked;
            const stateSourceFieldElement = addressTypeContainer.querySelector(`input[name="${addressType}_address_state_field_source"]`);
            const statePreviousSource = stateSourceFieldElement.value;
            let stateContainer = document.querySelector(`[data-${addressType}-state-container-selector]`);
            let stateLabel = document.querySelector(`[data-${addressType}-state-label]`);
            let zipCodeLabel = document.querySelector(`[data-${addressType}-zip-code-label]`);
            let cityLabel = document.querySelector(`[data-${addressType}-city-label]`);

            // Check to see if  states, provinces, regions etc exists for a specific country
            if (countriesSubunitsMap[countryCode] && countriesSubunitsMap[countryCode].labels.states) {
                stateSourceFieldElement.value = 'select';
                const stateSelectTemplate = getItemTemplate('tmpl-checkout-state-input-select')
                stateSelectTemplate.setAttribute('name', `${addressType}_state`)

                // Sets layout with states
                const constantShippingInputs = ['zip-code', 'city', 'state'];

                if (countriesSubunitsMap[countryCode].labels.states && countriesSubunitsMap[countryCode].labels.zip && countriesSubunitsMap[countryCode].labels.city) {
                    constantShippingInputs.forEach(inputType => {
                        const inputElement = document.querySelector(`[data-${addressType}-${inputType}-container-selector]`);
                        inputElement.classList.remove('nc-input-field--half');
                        inputElement.classList.add('nc-input-field--third');
                        inputElement.style.display = 'block';
                    })
                }

                if (countriesSubunitsMap[countryCode].labels.states && !countriesSubunitsMap[countryCode].labels.zip && countriesSubunitsMap[countryCode].labels.city) {
                    const zipCodeContainer = document.querySelector(`[data-${addressType}-zip-code-container-selector]`);
                    const stateCityContainer = document.querySelector(`[data-${addressType}-city-container-selector]`);

                    zipCodeContainer.style.display = 'none';
                    stateCityContainer.classList.remove('nc-input-field--full');
                    stateCityContainer.classList.remove('nc-input-field--third');
                    stateCityContainer.classList.add('nc-input-field--half');
                    stateContainer.classList.remove('nc-input-field--full');
                    stateContainer.classList.remove('nc-input-field--third');
                    stateContainer.classList.add('nc-input-field--half');
                    stateCityContainer.style.display = 'block';
                }

                stateLabel.innerText = countriesSubunitsMap[countryCode].name.single;
                zipCodeLabel.innerText = countriesSubunitsMap[countryCode].labels.zip;
                cityLabel.innerText = countriesSubunitsMap[countryCode].labels.city;

                Object.keys(countriesSubunitsMap[countryCode]['subunits']).forEach(key => {
                    const option = document.createElement("option");
                    option.text = countriesSubunitsMap[countryCode]['subunits'][key];
                    option.value = key;
                    stateSelectTemplate.appendChild(option);
                });
                stateContainer.style.display = 'block';
                stateSelectTemplate.setAttribute('required', isBillingChecked)
                const tailSelectElement = addressTypeContainer.querySelector(`[name="${addressType}_state"]`).closest('.nc-input-field').querySelector('.tail-select');
                if (tailSelectElement !== null) {
                    tailSelectElement.remove()
                }
                addressTypeContainer.querySelector(`[name="${addressType}_state"]`).replaceWith(stateSelectTemplate)
                const stateElement = addressTypeContainer.querySelector(`[name="${addressType}_state"]`);
                // tail.select(stateElement)
                if (addressType === 'shipping' && statePreviousSource !== 'select') {
                    addressTypeContainer.querySelector(`[name="${addressType}_state"]`).addEventListener('change', validateCheckoutData)
                }
            } else {
                const constantShippingInputs = ['zip-code', 'city'];
                stateContainer.style.display = 'none';

                if (stateContainer.querySelector('select')) {
                    stateContainer.querySelector('select').selectedIndex = -1; // Resetting the dropdown
                    stateContainer.querySelector('select').removeAttribute('required');  // Remove the required attribute
                }

                if (countriesSubunitsMap[countryCode].labels.zip && countriesSubunitsMap[countryCode].labels.city && !countriesSubunitsMap[countryCode].labels.states)  {
                    constantShippingInputs.forEach(inputType => {
                        const inputElement = document.querySelector(`[data-${addressType}-${inputType}-container-selector]`);
                        inputElement.classList.remove('nc-input-field--third');
                        inputElement.classList.add('nc-input-field--half');
                        inputElement.style.display = 'block';
                    })
                }

                if (!countriesSubunitsMap[countryCode].labels.zip && !countriesSubunitsMap[countryCode].labels.city && !countriesSubunitsMap[countryCode].labels.states) {
                    constantShippingInputs.forEach(inputType => {
                        const inputElement = document.querySelector(`[data-${addressType}-${inputType}-container-selector]`);
                        inputElement.style.display = 'none';
                    })
                }

                if (!countriesSubunitsMap[countryCode].labels.zip && countriesSubunitsMap[countryCode].labels.city && !countriesSubunitsMap[countryCode].labels.states) {
                    const zipCodeContainer = document.querySelector(`[data-${addressType}-zip-code-container-selector]`);
                    const cityContainer = document.querySelector(`[data-${addressType}-city-container-selector]`);
                    zipCodeContainer.style.display = 'none';
                    cityContainer.classList.remove('nc-input-field--third');
                    cityContainer.classList.remove('nc-input-field--half');
                    cityContainer.classList.add('nc-input-field--full');
                }


                cityLabel.innerText = countriesSubunitsMap[countryCode].labels.city;
                zipCodeLabel.innerText = countriesSubunitsMap[countryCode].labels.zip;
            }
        }

        // Handle the country change event uisng the above function
        addressTypes.forEach(addressType => {
            const addressTypeContainer = document.querySelector(`.nc-${addressType}-address-edit`);
            const countriesSubunitsMap = JSON.parse(document.querySelector('#list_states_by_countries').value);


            // Bind the change event
            addressTypeContainer.querySelector(`#${addressType}_country`).addEventListener('change', function (event) {
                handleCountryChange(event, addressType, addressTypeContainer, countriesSubunitsMap);
            });

            // Handle the default country on page load
            const defaultCountryCode = addressTypeContainer.querySelector(`#${addressType}_country`).value;  // Assuming the default value is set
            const defaultEvent = { target: { value: defaultCountryCode } };
            handleCountryChange(defaultEvent, addressType, addressTypeContainer, countriesSubunitsMap);
        })
    }

    function getAddressLabel(address, zipCode, city, state, country) {
        return `${address}, ${city}, ${state} ${zipCode}, ${country}`
    }

    function setupShippingServiceChange() {
        document
            .querySelectorAll('[name="shipping_rate"]')
            .forEach((shippingItemInput) => {
                shippingItemInput.addEventListener('change', function (event) {
                    document.querySelectorAll('.nc-shipping-rate-item').forEach((elem) => elem.classList.remove('nc-shipping-rate-selected'))
                    if (event.target.checked) {
                        event.target.closest('.nc-shipping-rate-item').classList.add('nc-shipping-rate-selected')
                    }
                    document.querySelector('.nc-checkout-step-container[data-type="address-info"] .nc-address-info-btn').removeAttribute('disabled')
                    setShippingAndHandlingFees()
                })
            })
    }

    function setShippingDetail(shippingRateData) {
        if (!shippingRateData) {
            checkoutManager.clearShippingDetail()
            return;
        }

        checkoutManager.setShippingDetail({
            shipping_rates_internal_id: 'internal' === shippingRateData.rate_type
                ? shippingRateData.id
                : null,
            shipping_rates_easypost_id: 'easypost' === shippingRateData.rate_type
                ? shippingRateData.id
                : null,
            carrier: shippingRateData.carrier ?? null,
            service: shippingRateData.service ?? null
        })
    }

    async function setupCheckoutAddressInfoSubmit() {
        document
            .querySelectorAll('.nc-checkout-step-container[data-type="address-info"] form')
            .forEach((checkoutAddressInfoForm) => {
                checkoutAddressInfoForm.addEventListener('submit', async function(event) {
                    event.preventDefault()

                    if (
                        document.querySelector('#sell_to_user_location') === 'false'
                        || document.querySelector('#ship_to_user_location').value === 'false'
                    ) {
                        return
                    }

                    const addressInfoContainer = event.target.closest('.nc-checkout-step-container')
                    const shippingFirstNameValue = addressInfoContainer.querySelector('#shipping_first_name').value.trim()
                    const shippingLastNameValue = addressInfoContainer.querySelector('#shipping_last_name').value.trim()
                    const shippingPhoneNumberElement = addressInfoContainer.querySelector('#shipping_phone')
                    const shippingAddressValue = addressInfoContainer.querySelector('#shipping_address').value.trim()
                    const shippingZipCodeValue = addressInfoContainer.querySelector('#shipping_zip_code').value.trim()
                    const shippingCityValue = addressInfoContainer.querySelector('#shipping_city').value.trim()
                    const shippingCountryValue = addressInfoContainer.querySelector('#shipping_country').value.trim()
                    const shippingStateValue = addressInfoContainer.querySelector('[name="shipping_state"]').value.trim()
                    const shippingRateData = getSelectedShippingRate()

                    addressInfoContainer
                        .querySelector('.nc-checkout-step-view [data-type="shipping_full_name"] .checkout-view-field-value')
                        .innerHTML = `${shippingFirstNameValue} ${shippingLastNameValue}`

                    addressInfoContainer
                        .querySelector('.nc-checkout-step-view [data-type="shipping_address"] .checkout-view-field-value')
                        .innerHTML = getAddressLabel(
                            shippingAddressValue,
                            shippingZipCodeValue,
                            shippingCityValue,
                            shippingStateValue,
                            shippingCountryValue
                        )

                    addressInfoContainer.querySelector('.nc-checkout-step-view [data-type="shipping_phone_number"] .checkout-view-field-value').innerHTML = shippingPhoneNumberElement.value
                    const shippingRateElement = addressInfoContainer.querySelector('[data-type="rate"]')

                    let addr = await checkoutManager.setAddress('shipping', {
                        first_name: shippingFirstNameValue,
                        last_name: shippingLastNameValue,
                        phone: shippingPhoneNumberElement.value,
                        addressline1: shippingAddressValue,
                        city: shippingCityValue,
                        zipcode: shippingZipCodeValue,
                        state: shippingStateValue,
                        country: shippingCountryValue,
                        is_default_shipping: 1
                    })
                    setShippingDetail(shippingRateData);

                    if (document.querySelector('input[name=billing_address_same_as_shipping]').checked) {
                        checkoutManager.setAddress('billing', null);
                    } else {
                        checkoutManager.setAddress('billing', {
                            first_name: document.querySelector('#billing_first_name').value,
                            last_name: document.querySelector('#billing_last_name').value,
                            phone: document.querySelector('#billing_phone').value,
                            addressline1: document.querySelector('#billing_address').value,
                            city: document.querySelector('#billing_city').value,
                            state: document.querySelector('[name="billing_state"]').value, // Temp Fix -- Bug with template in /templates/checkout/billing-address/state.php
                            country: document.querySelector('#billing_country').value,
                            zipcode: document.querySelector('#billing_zip_code').value,
                            is_default_billing: 1
                        });
                    }

                    if (shippingRateData !== null) {
                        shippingRateElement.classList.remove('checkout-view-field--hide')
                        shippingRateElement.querySelector('.checkout-view-field-icon img').setAttribute('src', shippingRateData.rate_icon)

                        shippingRateElement
                            .querySelector('.checkout-view-field-value')
                            .innerHTML = 'internal' === shippingRateData.rate_type ? shippingRateData.rate_name : shippingRateData.carrier
                    } else {
                        shippingRateElement.classList.add('checkout-view-field--hide')
                        shippingRateElement.querySelector('.checkout-view-field-icon img').setAttribute('src', '')
                    }

                    addressInfoContainer.querySelector('.nc-checkout-set-edit-handler').classList.add('nc-checkout-set-edit-handler--active')
                    addressInfoContainer.querySelector('.nc-checkout-step-view').classList.remove('hide')

                    proceedToNextStep()
                })
            })

        function proceedToNextStep() {
            const customerPaymentInfoContainer = document.querySelector('.nc-checkout-step-container[data-type="payment-info"]')
            const paymentSaved = customerPaymentInfoContainer
                .querySelector('.nc-checkout-set-edit-handler')
                .classList.contains('nc-checkout-set-edit-handler--active')

            !paymentSaved
                ? setCheckoutStep('payment-info')
                : setCheckoutStep('place-order')
        }
    }

    function setupCheckoutInfoChange() {
        const addressInfoContainer = document.querySelector('.nc-checkout-step-container[data-type="address-info"]');
        addressInfoContainer.querySelector('[name="shipping_address"]').addEventListener('change', validateCheckoutData);
        addressInfoContainer.querySelector('[name="shipping_zip_code"]').addEventListener('change', validateCheckoutData);
        addressInfoContainer.querySelector('[name="shipping_country"]').addEventListener('change', validateCheckoutData);
        addressInfoContainer.querySelector('[name="shipping_state"]').addEventListener('change', validateCheckoutData);

        const shippingEnabled = addressInfoContainer.querySelector('[name="shipping_service_enabled"]').value === 'enabled'


        //prevent going to payment without choosing shipping rate if should shipped
        addressInfoContainer.querySelectorAll('[name="shipping_address"],[name="shipping_zip_code"],[name="shipping_country"], [name="shipping_state"]').forEach((input) => {
            input.addEventListener('input', () => {
                if (!shippingEnabled) {
                    return;
                }

                document.querySelector('.nc-checkout-step-container[data-type="address-info"] .nc-address-info-btn').setAttribute('disabled', true);
            });
        });

    }

    function setShippingAndHandlingFees() {
        const selectedRate = getSelectedShippingRate()
        const shippingFeeElement = document.querySelector('.nc-order-summary-totals.nc-order-shipping-fee')

        selectedRate
            ? updateShippingAndHandlingTotals()
            : hideShippingAndHandlingTotals()

        updateOrderPricing()

        function updateShippingAndHandlingTotals() {
            updateCurrency()
            updatePrice()
            shippingFeeElement.classList.remove('nc-order-summary-totals--hidden')
            couponRelatedActions()

            function updateCurrency() {
                const currencySymbolEl = shippingFeeElement.querySelector('.currency')
                isRateFree()
                    ? currencySymbolEl.classList.add('hide')
                    : currencySymbolEl.classList.remove('hide')
            }

            function updatePrice() {
                const { priceDecimals } = northCommerceSettings

                shippingFeeElement
                    .querySelector('.nc-order-summary-total-value .value')
                    .textContent = isRateFree()
                        ? 'Free'
                        : parseFloat(selectedRate.rate).toFixed(priceDecimals)
            }

            function isRateFree() {
                return parseFloat(selectedRate.rate) === 0
            }

            function couponRelatedActions() {
                const couponManager = NorthCommerce.CouponManager

                if (!isRateFree()) {
                    couponManager.maybeApplyAutomaticCoupon()
                    couponManager.showCartSummaryDecorations()
                    return
                }

                couponManager.clearCartSummaryDecorations()
                const coupon = couponManager.getCouponActive()
                if (coupon && 'free-shipping' === coupon.discountTypeSlug) {
                    couponManager.removeActiveCoupon()
                }
            }
        }

        function hideShippingAndHandlingTotals() {
            shippingFeeElement.classList.add('nc-order-summary-totals--hidden')
            const rateDisplayElement = document.querySelector('.nc-checkout-step-container[data-type="address-info"] .nc-checkout-step-view .checkout-view-field[data-type="rate"]')
            rateDisplayElement.classList.add('checkout-view-field--hide')
            rateDisplayElement.querySelector('.checkout-view-field-value').innerHTML = ''
            rateDisplayElement.querySelector('.checkout-view-field-icon img').setAttribute('src', '')
            NorthCommerce.CouponManager.clearCartSummaryDecorations()
        }
    }

    function canProceedWithShipmentCall() {
        const shippingAddress = getAddressByType('shipping')

        return shippingAddress.address !== ''
            && shippingAddress.country !== ''
            && shippingAddress.zip_code !== ''
    }

    function validateCheckoutData() {
        const cartData = getCartData();
        const shippingAddress = getAddressByType('shipping')
        const billingAddress = getAddressByType('billing')

        // @todo add logic here and maybe create a function that validate the address
        if (shippingAddress.country === '') {
            return;
        }

        fetch(`${ajax_data.rest_url}/checkout-process`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                cart_items: cartData,
                shipping_address: shippingAddress,
                billing_address: billingAddress,
            })
        })
            .then(response => response.json())
            .then(response => {
                if (!response.success) {
                    return
                }

                const {errors} = response.data;
                const addressStepContainer = document.querySelector('.nc-checkout-step-container[data-type="address-info"]')
                const addressFormContainer = addressStepContainer.querySelector('.nc-checkout-step-edit')
                const checkoutErrorsContainer = addressFormContainer.querySelector('.nc-checkout-errors')
                checkoutErrorsContainer.innerHTML = ''
                let showErrors = false;
                document.querySelectorAll(`[data-type="nc-order-line-item"] .nc-product-checkout-error--active`).forEach(errorItem => {
                    errorItem.classList.remove('nc-product-checkout-error--active')
                })
                addressStepContainer.querySelectorAll('[type="submit"]').forEach((submitElement) => {
                    submitElement.removeAttribute('disabled');
                })
                addressStepContainer.querySelector('#ship_to_user_location').value = 'true';
                if (Object.keys(errors).length > 0) {

                    if (errors.selling_locations !== undefined) {
                        checkoutErrorsContainer.classList.add('nc-checkout-errors--active')
                        showErrors = true;
                        const errorElement = document.createElement('li')
                        errorElement.setAttribute('class', 'nc-checkout-error')
                        errorElement.innerHTML = errors.selling_locations.message
                        checkoutErrorsContainer.appendChild(errorElement)
                        document.querySelector('#sell_to_user_location').value = 'false';
                        addressStepContainer.querySelectorAll('[type="submit"]').forEach((submitElement) => {
                            submitElement.setAttribute('disabled', true)
                        })
                    } else {
                        if (errors.shipping_locations !== undefined) {
                            showErrors = true;
                            checkoutErrorsContainer.classList.add('nc-checkout-errors--active')
                            const errorElement = document.createElement('li');
                            errorElement.setAttribute('class', 'nc-checkout-error');
                            errorElement.innerHTML = errors.shipping_locations.message;
                            checkoutErrorsContainer.appendChild(errorElement)
                            document.querySelector('#ship_to_user_location').value = 'false';


                        } else if (errors.cart_shipping_location !== undefined) {
                            // TODO: NEED TO COME BACK HERE WHEN WE REFACTOR SHIPPING
                            // errors.cart_shipping_location.cart_items.forEach(cart_item => {
                            //     const productCheckoutErrorElement = document.querySelector(`[data-type="nc-order-line-item"][data-id="${cart_item.id}"] .nc-product-checkout-error`);
                            //     productCheckoutErrorElement.classList.add('nc-product-checkout-error--active')
                            //     productCheckoutErrorElement.innerHTML = `We can't ship this product to your area. Please remove it from your cart to continue`
                            // })

                        }
                        if (errors.shipping_locations !== undefined || errors.cart_shipping_location !== undefined) {
                            // TODO: NEED TO COME BACK HERE WHEN WE REFACTOR SHIPPING
                            // addressStepContainer.querySelectorAll('[type="submit"]').forEach(submitElement => {
                            //     submitElement.setAttribute('disabled', true)
                            // })
                            // const shippingServicesContainer = document.querySelector('.nc-shipping-rates');
                            // const shippingRateList = addressStepContainer.querySelector('.nc-shipping-rates-list');
                            // shippingRateList.innerHTML = '';
                            // shippingServicesContainer.classList.add('nc-shipping-rates--not-active')
                        }
                    }

                } else if (canProceedWithShipmentCall()) {
                    handleShippingServicesLoad()
                }

                if (!showErrors) {
                    checkoutErrorsContainer.classList.remove('nc-checkout-errors--active')
                }

            })
    }

    function handleCartItemsUpdated() {
        updateCheckoutOrderCart()
    }

    function setupOrderItemQuantityChangeListener() {
        document.addEventListener('click', function (event) {
            if (!event.target) {
                return
            }

            if (
                event.target.getAttribute('data-type') === 'nc-product-item-quantity-increase'
                || event.target.closest('[data-type="nc-product-item-quantity-increase"]') !== null
            ) {
                handleOrderItemQuantityIncrease(event)
            }

            if (
                event.target.getAttribute('data-type') === 'nc-product-item-quantity-decrease'
                || event.target.closest('[data-type="nc-product-item-quantity-decrease"]') !== null
            ) {
                handleOrderItemQuantityDecrease(event)
            }
        })

        document.addEventListener('change', function (event) {
            if (!event.target) {
                return
            }

            if (event.target.getAttribute('data-type') === 'nc-product-item-quantity-value') {
                handleChangeOrderItemQuantityInput(event);
            }
        })
    }

    function handleOrderItemQuantityIncrease(event) {
        const orderItemContainer = event.target.closest('[data-type="nc-order-line-item"]');
        const cartId = orderItemContainer.getAttribute('data-id')
        const productMaxQtyAttr = orderItemContainer.getAttribute('data-max-quantity')
        const productMaxQty = !isNaN(parseInt(productMaxQtyAttr)) ? parseInt(productMaxQtyAttr) : undefined

        const cartData = getCartData().map((cartItemData) => {
            if (parseInt(cartItemData.id) !== parseInt(cartId)) {
                return cartItemData
            }

            const newQuantity = parseInt(cartItemData.qty) + 1
            if (productMaxQty !== undefined && newQuantity > productMaxQty) {
                handleShowErrorOnOrderItemMaxQty(cartItemData, true)
            } else {
                cartItemData.qty = newQuantity;
            }
            const totalPriceEl = orderItemContainer.querySelector('[data-type="cart-item-total-price"]')
            totalPriceEl.innerHTML = formatNumber(cartItemData.price * cartItemData.qty)
            const quantityEl = orderItemContainer.querySelector('[data-type="nc-product-item-quantity-value"]')
            quantityEl.value = cartItemData.qty
            checkoutManager.updateLineItem(cartItemData)

            return cartItemData;
        })

        NorthCommerce.Cart.updateCartData(cartData)
        updateOrderPricing()
        validateCheckoutData()
        NorthCommerce.CouponManager.revalidateActiveCoupon()
        // NorthCommerce.Cart.updateCartDrawerTotals()
    }

    function handleOrderItemQuantityDecrease(event) {
        const orderItemContainer = event.target.closest('[data-type="nc-order-line-item"]');
        const cartId = orderItemContainer.getAttribute('data-id');
        const cartData = getCartData().map((cartItemData) => {
            if (parseInt(cartItemData.id) === parseInt(cartId)) {
                if (cartItemData.qty > 1) {
                    cartItemData.qty -= 1
                }
                handleShowErrorOnOrderItemMaxQty(cartItemData, false)

                orderItemContainer.querySelector('[data-type="cart-item-total-price"]').innerHTML = formatNumber(cartItemData.price * cartItemData.qty)
                orderItemContainer.querySelector('[data-type="nc-product-item-quantity-value"]').value = cartItemData.qty
                checkoutManager.updateLineItem(cartItemData)
            }

            return cartItemData;
        });
        NorthCommerce.Cart.updateCartData(cartData)
        updateOrderPricing()
        validateCheckoutData()
        NorthCommerce.CouponManager.revalidateActiveCoupon()
        // NorthCommerce.Cart.updateCartDrawerTotals()
    }

    function handleChangeOrderItemQuantityInput(event) {
        const newQuantity = event.target.value;
        const orderItemContainer = event.target.closest('[data-type="nc-order-line-item"]');
        const cartId = orderItemContainer.getAttribute('data-id');
        const productMaxQty = !isNaN(parseInt(orderItemContainer.getAttribute('data-max-quantity'))) ? parseInt(orderItemContainer.getAttribute('data-max-quantity')) : undefined;
        const cartData = getCartData().map(cartItemData => {
            if (parseInt(cartItemData.id) === parseInt(cartId)) {
                let showError = false;
                if (newQuantity < 1) {
                    cartItemData.qty = 1;
                } else if (productMaxQty !== undefined && newQuantity > productMaxQty) {
                    showError = true;
                    cartItemData.qty = productMaxQty;
                } else {
                    cartItemData.qty = newQuantity;
                }
                checkoutManager.updateLineItem(cartItemData);
                handleShowErrorOnOrderItemMaxQty(cartItemData, showError);

                orderItemContainer.querySelector('[data-type="cart-item-total-price"]').innerHTML = formatNumber(cartItemData.price * cartItemData.qty);
                orderItemContainer.querySelector('[data-type="nc-product-item-quantity-value"]').value = cartItemData.qty;
            }

            return cartItemData;
        });

        NorthCommerce.Cart.updateCartData(cartData)
        updateOrderPricing()
        validateCheckoutData()
        NorthCommerce.CouponManager.revalidateActiveCoupon()
        // NorthCommerce.Cart.updateCartDrawerTotals()
    }

    function setupRemoveItemFromOrder() {
        document.addEventListener('click', function (event) {
            if (
                event.target && (event.target.getAttribute('data-type') === 'nc-product-item-remove'
                || event.target.closest('[data-type="nc-product-item-remove"]') !== null)
            ) {
                handleRemoveItemFromOrder(event)
            }
        })
    }

    function handleRemoveItemFromOrder(event) {
        const orderItemContainer = event.target.closest('[data-type="nc-order-line-item"]');
        const cartId = orderItemContainer.getAttribute('data-id');
        const cartDataToRemove = getCartData().filter((cartItemData) => parseInt(cartItemData.id) == parseInt(cartId))
        const cartData = getCartData().filter((cartItemData) => parseInt(cartItemData.id) !== parseInt(cartId))

        if (cartDataToRemove.length == 1) {
            checkoutManager.removeLineItem(cartDataToRemove[0]);
        }

        NorthCommerce.Cart.updateCartData(cartData)
        orderItemContainer.remove()
        updateOrderPricing()
        checkCartItems()
        validateCheckoutData()
        NorthCommerce.CouponManager.revalidateActiveCoupon()
    }

    function handleShowErrorOnOrderItemMaxQty(cartItemData, showError) {
        const cartItems = document.querySelectorAll(`[data-type="nc-order-line-item"][data-id="${cartItemData.id}"]`);
        cartItems.forEach((cartItem) => {
            cartItem.querySelectorAll('[data-type="nc-product-item-qty-counter-error"]').forEach(errorContainer => {
                if (showError) {
                    errorContainer.innerHTML = `Max quantity for this product is ${cartItemData.max_quantity}`;
                } else {
                    errorContainer.innerHTML = '';
                }
            })
        })
    }

    function setupOrderItemVariationChange() {
        document.querySelector('[data-type="nc-order-line-items"]').addEventListener('click', async function (event) {
            // nc-product-variant-text--disabled
            if (
                event.target && event.target.closest('[data-type="variant"]') !== null
                && !event.target.closest('[data-type="variant"]').classList.contains('nc-variant-disabled')
            ) {
                const variantItem = event.target.closest('[data-type="variant"]');
                const variationElement = variantItem.closest('[data-variant="nc-product-variant"]')

                if (variationElement.getAttribute('data-variant-value') === variantItem.getAttribute('data-variant-value')) {
                    variantItem.closest('[data-type="variation-options"]').classList.add('hide')
                } else {
                    // change product variation
                    const cartData = getCartData();
                    const cartItemElement = variantItem.closest('[data-type="nc-order-line-item"]');
                    const cartId = cartItemElement.getAttribute('data-id');
                    const variantName = variantItem.getAttribute('data-variant');
                    const variantType = variantItem.getAttribute('data-variant-type');
                    const variantValue = variantItem.getAttribute('data-variant-value');

                    let newCartData = cartData.map((cartItem) => {
                        if (parseInt(cartItem.id) === parseInt(cartId)) {
                            return {
                                ...cartItem,
                                variant: [
                                    ...cartItem.variant.map(_variant => {
                                        if (_variant.type === variantType && _variant.name === variantName) {
                                            return {
                                                ..._variant,
                                                value: variantValue,
                                            }
                                        }
                                        return _variant;
                                    })
                                ]
                            }
                        }
                        return cartItem;
                    })

                    const cartItemData = newCartData.find(({id}) => parseInt(id) === parseInt(cartId))
                    if (cartItemData) {
                        const productItemData = await getProductItemData(cartItemData.product_id);
                        const product = await getProductData(cartItemData.product_id);
                        const cartElements = document.querySelectorAll(`[data-type="nc-order-line-item"][data-id="${cartItemData.id}"]`);
                        const showQuantityError = productItemData.inventory !== '' && parseInt(cartItemData.qty) > parseInt(productItemData.inventory);

                        cartItemData.qty = showQuantityError ? productItemData.inventory : cartItemData.qty;
                        cartItemData.max_quantity = productItemData.inventory;
                        cartItemData.price = productItemData.price;
                        newCartData = newCartData.map(_cartItemData => {
                            if (parseInt(_cartItemData.id) === parseInt(cartItemData.id)) {

                                return {
                                    ...cartItemData,
                                }
                            }
                            return _cartItemData;
                        })
                        cartElements.forEach(cartElement => {
                            renderOrderItemTemplate(cartElement, product, productItemData, cartItemData, showQuantityError)
                        })
                    }

                    NorthCommerce.Cart.updateCartData(newCartData)
                    variantItem.closest('[data-type="variation-options"]').classList.add('hide')
                    updateOrderPricing(newCartData)

                    // call an api with the new product update check
                    // check if there are shipping products
                    handleShippingServicesLoad()
                }

            }

        })
    }

    function renderOrderItemTemplate(template, product, productItemData, cartItemData, showQuantityError = false) {
        if ('' !== productItemData.inventory) {
            template.setAttribute('data-max-quantity', cartItemData.max_quantity);
        }

        var imgUrl = productItemData.product_images && productItemData.product_images.length
            ? productItemData.product_images[0].image_url
            : null;
        template.setAttribute('data-id', cartItemData.id);
        template.querySelector('[data-type="cart-item-title"]').innerHTML = productItemData.name;
        template.querySelector('[data-type="cart-item-price"]').innerHTML = formatNumber(cartItemData.price);
        template.querySelector('[data-type="cart-item-total-price"]').innerHTML = formatNumber(cartItemData.qty * cartItemData.price);
        template.querySelector('[data-type="nc-product-item-quantity-value"]').value = cartItemData.qty;


        let variationHTML = template.querySelector('[data-type="nc-product-variations"]').cloneNode(false);

        NorthCommerce.DataApi.getProductVariantOptionValuesData(cartItemData.product_variant_id).then((all) => {
            var imagePvovs = all.filter(pvov => pvov.product_option_value.product_option.name == 'Image')
            let imgSrc

            if (imagePvovs.length) {
                imgSrc = imagePvovs[0].product_option_value.value
            } else if (imgUrl) {
                imgSrc = imgUrl
            }
            if (imgSrc) {
                template.querySelector('[data-type="cart-item-image"]').classList.remove('nc-skeleton-thumbnail')
                template.querySelector('[data-type="cart-item-image"]').setAttribute('src', imgSrc)
                template.querySelector('[data-type="cart-item-image"]').setAttribute('srcset', imgSrc)
            }

            all
                .filter(pvov => 'image' != pvov.product_option_value.product_option.product_option_type.slug)
                .forEach((pvov) => {
                    const type = pvov.product_option_value.product_option.product_option_type.slug
                    const name = pvov.product_option_value.product_option.name
                    const value = pvov.product_option_value.value
                    const variantTemplateType = getVariantTemplateType(name)
                    const variationTemplate = getOrderItemVariationTemplate(variantTemplateType)
                    const variationOptionsContainer = variationTemplate.querySelector('[data-type="variation-options"]')

                    variationTemplate.setAttribute('data-type', name)
                    variationTemplate.setAttribute('data-variant-name', name)
                    variationTemplate.setAttribute('data-variant-value', value)
                    variationTemplate.querySelector('[data-type="nc-product-variant-label"]').innerHTML = name
                    if ('color' == type) {
                        variationTemplate.querySelector('[data-type="nc-product-variant-value"]').innerHTML =
                            `<div class="nc-cart-option-color" style="background-color: ${value}"></div>`
                    } else {
                        variationTemplate.querySelector('[data-type="nc-product-variant-value"]').innerHTML = value
                    }
                    variationHTML.append(variationTemplate)
                })
        })

        template.querySelector('[data-type="nc-product-variations"]').replaceWith(variationHTML);

        return template;
    }

    function getVariantTemplateType(variationType) {
        return 'north-color' === variationType ? 'color' : 'text';
    }

    function getOrderItemTemplate() {
        return getItemTemplate('tmpl-checkout-cart-item-template')
    }

    function getOrderItemVariationTemplate(type) {
        return getItemTemplate(`tmpl-checkout-cart-item-variant-${type}-template`)
    }

    function updateCheckoutOrderCart() {
        if (!document.querySelectorAll('[data-type="nc-order-review-container"]').length) {
            return
        }

        const emptyCartContainer = document.querySelector('.nc-checkout-cart-empty')
        const checkoutContainer = document.querySelector('.nc-checkout-container')
        const cartData = getCartData()

        if (!cartData.length) {
            emptyCartContainer.classList.remove('nc-checkout-cart-empty--hidden')
            checkoutContainer.classList.add('nc-checkout-container--hidden')
            return
        }

        emptyCartContainer.classList.add('nc-checkout-cart-empty--hidden')
        checkoutContainer.classList.remove('nc-checkout-container--hidden')
        cartData.forEach(async (cartItemData) => {
            const cartElements = document.querySelectorAll(`[data-type="nc-order-line-item"][data-id="${cartItemData.id}"]`);
            const productItemData = await getProductItemData(cartItemData.product_id);
            const product = await getProductData(cartItemData.product_id);

            if (!cartElements.length) {
                const template = getOrderItemTemplate();
                const cartItemElement = renderOrderItemTemplate(template, product, productItemData, cartItemData)
                document
                    .querySelectorAll('[data-type="nc-order-line-items"]')
                    .forEach((cartDrawerItems) => cartDrawerItems.append(cartItemElement))
            } else {
                cartElements.forEach((cartElement) => {
                    renderOrderItemTemplate(cartElement, product, productItemData, cartItemData, 'order-item')
                })
            }
        })

        updateOrderPricing(cartData)
    }

    function updateOrderPricing(cartData) {
        cartData ??= getCartData()

        const subtotalEl = document.querySelector('.nc-order-subtotal')
        const totalEl = document.querySelector('.nc-order-total')
        const taxEl = document.querySelector('.nc-order-tax')

        const coupon = NorthCommerce.CouponManager.getCouponActive()
        const subtotalValue = cartSubtotal()
        const shippingValue = shippingRate()
        const taxValue = orderTax()
        const totalValue = orderTotal()

        subtotalEl.querySelector('.nc-order-subtotal-value').innerHTML = formatNumber(subtotalValue)
        if (0 !== taxPercentage()) {
            taxEl.querySelector('.nc-order-tax-value').innerHTML = formatNumber(taxValue)
        }
        totalEl.querySelector('.nc-order-total-value').innerHTML = formatNumber(totalValue)

        function cartSubtotal() {
            let subtotal = 0
            cartData.length && cartData.forEach((cartItem) => {
                subtotal += parseFloat(cartItem.price) * cartItem.qty
            })

            if (coupon && ['fixed', 'percent'].includes(coupon.discountTypeSlug)) {
                subtotal -= parseFloat(coupon.totalCartDiscount)
                checkoutManager.setCouponOrderMap(coupon)
            }

            if (subtotal < 0) {
                subtotal = 0 // safeguard
            }

            return subtotal
        }

        function shippingRate() {
            let shipping = parseFloat(getSelectedShippingRate()?.rate ?? 0)

            if (coupon && 'free-shipping' === coupon.discountTypeSlug) {
                shipping = 0
                checkoutManager.setCouponOrderMap(coupon)
            }

            if (shipping < 0) {
                shipping = 0 // safeguard
            }

            return shipping
        }

        function orderTax() {
            return (subtotalValue + shippingValue) * taxPercentage() / 100
        }

        function taxPercentage() {
            return parseFloat(document.querySelector('[name="cart_tax_percentage"]').value)
        }

        function orderTotal() {
            return subtotalValue + shippingValue + taxValue
        }
    }

    window.NorthCommerce.productOverviewUpdateOrderSummary = updateOrderPricing

    // checkout page end

    function setupProductQuantityChangeListeners() {
        document.querySelectorAll('[data-type="product-overview"] .qty-increase').forEach((element) => {
            element.addEventListener('click', handleProductQuantityIncrease)
        })

        document.querySelectorAll('[data-type="product-overview"] .qty-decrease').forEach((element) => {
            element.addEventListener('click', handleProductQuantityDecrease)
        })

        document.querySelectorAll('[data-type="product-overview"] .qty-input').forEach((qtyInput) => {
            qtyInput.addEventListener('change', handleProductQuantityInputChange)
        })
    }

    function handleProductQuantityIncrease() {
        const productNode = this.closest('[data-type="product-overview"]')
        const counterContainer = this.closest('.qty-counter')

        if (!counterContainer) {
            return
        }

        const maxInventory = productNode.getAttribute('data-quantity-max')

        if (!maxInventory) {
            throw new Error('Product node has no `quantity-max` attribute.')
        }

        counterContainer
            .querySelectorAll('.qty-input')
            .forEach((inputElement) => {
                const inputValue = parseInt(inputElement.value)

                if ('null' === maxInventory) {
                    inputElement.value = inputValue + 1
                } else if (maxInventory) {
                    inputElement.value = inputValue + 1 < parseInt(maxInventory)
                        ? inputValue + 1
                        : parseInt(maxInventory)
                }

                counterContainer
                    .querySelectorAll('.qty-decrease')
                    .forEach(decreaseElement => decreaseElement.removeAttribute('disabled'))
            })

        updateProductPrice(counterContainer.closest('[data-type="product-overview"]'))
    }

    function handleProductQuantityDecrease() {
        const counterContainer = this.closest('.qty-counter');

        if (!counterContainer) {
            return
        }

        counterContainer
            .querySelectorAll('.qty-input')
            .forEach((inputElement) => {
                const inputValue = parseInt(inputElement.value)
                if (inputValue > 1) {
                    inputElement.value = inputValue - 1
                    if (inputValue === 2) {
                        this.setAttribute('disabled', true)
                    }
                }
            })

        updateProductPrice(counterContainer.closest('[data-type="product-overview"]'))
    }

    function handleProductQuantityInputChange() {
        const productNode = document.querySelector('[data-type="product-overview"]')
        const input = document.querySelector('.qty-input')

        const maxInventory = productNode.getAttribute('data-quantity-max');

        if (!maxInventory) {
            throw new Error('Product node has no `quantity-max` attribute.')
        }

        let value = parseInt(input.value)

        value = value < 1 ? 1 : value
        if (maxInventory !== 'null') {
            value = value < parseInt(maxInventory)
                ? value
                : parseInt(maxInventory)
        }

        input.value = value;

        updateProductPrice(productNode)
    }

    function outOfStock() {
        const product = document.querySelector('.nc-container[data-type="product-overview"]')

        if (!product) {
            return
        }

        const addToCartBtn = document.querySelector('.nc-cart-btn span');
        const product_qty = product.getAttribute('data-quantity-max');
        const qty_counter = document.querySelector('.qty-counter');

        if (!isNaN(parseInt(product)) && product_qty < 1) {
            qty_counter.style.display = "none";
            addToCartBtn.innerText = "Out Of Stock";
        }
    }
    outOfStock()

    function setupProductVariationsChange() {
        document.querySelectorAll('.nc-variation input[type=radio]').forEach(elt => {
            elt.addEventListener('change', handleVariationsChange)
        })
    }

    function preselectVariant() {
        const pvm = document.NcProductVariantManager;
        const allVariants = pvm.getAllVariants();
        let firstAvailableVariant = allVariants[0];

        if (firstAvailableVariant) {
            firstAvailableVariant.product_option_value_ids.forEach(optionValueId => {
                const radioButtons = document.querySelectorAll('.size-radio, .color-radio, .image-radio');
                radioButtons.forEach(radioButton => {
                    if (radioButton.value == optionValueId) {
                        radioButton.checked = true;
                        handleVariationsChange()
                    }
                });
            });
        }
    }

    function forEachVariation(expr, callback) {
        document.querySelectorAll('.nc-variations .nc-variation' + expr).forEach(productOption => {
            productOption.querySelectorAll('input[type=radio]' + expr).forEach(input => {
                const label = document.querySelector('label[for=' + input.id + ']');
                callback(productOption, input, label);
            });
        });
    }

    function productOptionByOptionValue(optionValueInput) {
        return optionValueInput.closest('.nc-variation');
    }

    function showJoinWaitlist() {
        document.querySelector('.nc-join-waitlist').classList.remove('hidden')
    }

    function hideJoinWaitlist() {
        document.querySelector('.nc-join-waitlist').classList.add('hidden')
    }

    const variationsTracker = NorthCommerce.ProductVariantSelectionTracker;

    function handleVariationsChange() {
        const lastClickedOptionValue = this;
        const lastClickedProductOption = productOptionByOptionValue(lastClickedOptionValue);

        variationsTracker.addUserSelection(lastClickedProductOption, lastClickedOptionValue);
        variationsTracker.showOnlyValidOptions();

        const selected = variationsTracker.selectedProductVariant();
        if (selected === null) {
            hideJoinWaitlist();
            setAddToCartButton(false, 'disabled')
        } else {
            getProductVariantData(selected).then((pv) => {
                updateProductVariant(pv)
                if(pv.quantity > 0) {
                    hideJoinWaitlist();
                    setAddToCartButton(true, 'enabled');
                } else {
                    showJoinWaitlist();
                    setAddToCartButton(false, 'out-of-stock');
                }
            })
        }

        function setAddToCartButton(isEnabled, labelType) {
            const ctaButton = document.querySelector('[data-add-to-cart-action]')
            if (isEnabled) {
                ctaButton.removeAttribute('disabled');
            } else {
                ctaButton.setAttribute('disabled', 'true');
            }
            ctaButton.querySelector('span').innerText = ctaButton.getAttribute(`data-${labelType}-label`)
        }

        function updateProductVariant(productVariant) {
            const po = document.querySelector('[data-type="product-overview"]');
            po.setAttribute(
                'data-product-variant-id',
                productVariant ? productVariant.id : ''
            )
            po.setAttribute(
                'data-product-variant-quantity-max',
                productVariant ? productVariant.quantity : ''
            )
            po.setAttribute(
                'data-product-variant-price',
                productVariant ? productVariant.price : ''
            )

            let productPrice = po.getAttribute('data-product-price');
            let productQuantity = po.getAttribute('data-product-quantity-max');

            if (!isNaN(parseInt(po.getAttribute('data-product-variant-id')))) {
                po.setAttribute(
                    'data-price',
                    productVariant.price === null ? productPrice : productVariant.price
                )
                po.setAttribute(
                    'data-quantity-max',
                    productVariant.quantity === null ? productQuantity : productVariant.quantity
                );
            } else {
                po.setAttribute(
                    'data-price',
                    po.getAttribute('data-product-price')
                );
                po.setAttribute(
                    'data-quantity-max',
                    po.getAttribute('data-product-quantity-max')
                );
            }

            handleProductQuantityInputChange()
        }
    }

    function getProductItemData(productID) {
        return NorthCommerce.Cart.getProductItemData(productID)
    }

    function getProductData(productID) {
        return NorthCommerce.DataApi.getProductData(productID);
    }

    function getProductVariantData(productVariantId) {
        return NorthCommerce.DataApi.getProductVariantData(productVariantId);
    }

    async function updateProductComponent(product, element) {
        getProductItemData(product.id)
            .then(product => {
                updateProduct(element, product);
                updateProductInputQty(element);
                updateProductPrice(element);
            })
            .catch(error => {
                console.dir(error);
            })
    }

    function updateProduct(element, info) {
        const inventory = info.status === 'false' ? 0 : info.inventory;
        element.setAttribute('data-price', info.price);
        element.setAttribute('data-quantity-max', inventory);
    }

    function updateProductInputQty(productNode) {
        const input = productNode.querySelector('.qty-input');

        if (input == null)
            return;

        const maxInventory = productNode.getAttribute('data-quantity-max');
        let value = parseInt(input.value);

        value = value < 0 ? 0 : value;
        if (maxInventory !== '') {
            value = value < parseInt(maxInventory) ? value : parseInt(maxInventory);
        }

        input.value = value;
        updateProductPrice(productNode);
    }

    function updateProductPrice(element) {
        const qty = element.querySelector('.qty-input') !== null ? element.querySelector('.qty-input').value : 1;
        const price = parseFloat(element.getAttribute('data-price'));
        element.querySelector('.nc-product-price .value').innerHTML = formatNumber(price);
    }

    function setupProductGallery() {
        if (!document.querySelectorAll('.nc-product-gallery').length) {
            return
        }

        var flkty = new Flickity('.nc-product-gallery', {
            cellAlign: 'center',
            contain: true,
            lazyLoad: true,
            imagesLoaded: true,
            wrapAround: true,
            resize: true,
            prevNextButtons: false
        })

        flkty.on('dragStart', () => (document.ontouchmove = e => e.preventDefault()));
        flkty.on('dragEnd', () => (document.ontouchmove = () => true));


        /* Select featured image within flickity */

        var thumbnailGroup = document.querySelector('.nc-product-thumbnails');
        var thumbnail = thumbnailGroup.querySelectorAll('.nc-product-thumbnail');
        thumbnail = fizzyUIUtils.makeArray(thumbnail);

        thumbnailGroup.addEventListener('click', (event) => {
            // Filter for button clicks
            if (!matchesSelector(event.target, '.nc-product-thumbnail')) {
                return;
            }

            var index = thumbnail.indexOf(event.target);
            flkty.select(index, false, true);
        })
    }

    function setupAddToCartFunctionality() {
        document.addEventListener('nc-add-to-cart', handleAddToCartEvent)
        document.querySelectorAll('.nc-cart-btn').forEach((cartBtn) => {
            cartBtn.addEventListener('click', handleAddToCartTrigger)
        })

        function handleAddToCartEvent(event) {
            const { product } = event.detail

            if (!product) {
                return
            }

            const cartData = getCartData();
            const cartProductItem = cartData.find((cartItem) => compareProductWithCartItem(cartItem, product))
            const productMaxQty = !isNaN(parseInt(product.max_quantity)) ? product.max_quantity : undefined;
            let isQuantityAboveMax = false;
            let newProductQty = parseInt(product.qty);

            if (cartProductItem !== undefined) {
                newProductQty += parseInt(cartProductItem.qty);
                if (productMaxQty !== undefined && productMaxQty < newProductQty) {
                    isQuantityAboveMax = true;
                } else {
                    updateCartProductItem(product)
                }
            } else {
                NorthCommerce.Cart.addProductToCart(product);
            }
            if (!isQuantityAboveMax) {
                document.querySelectorAll('.nc-add-to-cart-error').forEach((errorElement) => errorElement.innerHTML = '')
                NorthCommerce.Cart.openCartDrawer()
            } else {
                document.querySelectorAll('.nc-add-to-cart-error').forEach(errorElement => {
                    errorElement.innerHTML = `<span class="nc-error">Product can't be added to the cart because it exceeded the quantity limit</span>`;
                })
            }

        }

        function handleAddToCartTrigger(e) {
            const btnClicked = e.target;
            const product = getProductValues(btnClicked)
            NorthCommerce.Cart.dispatchAddToCartEvent({ product })

            function getProductValues(button) {
                const productContainer = button.closest('[data-type="product-overview"]')
                const qntInput = productContainer.querySelector('.qty-input')

                const product = {
                    id: productContainer.dataset.productId,
                    price: productContainer.dataset.price,
                    qty: qntInput !== null ? parseInt(qntInput.value) : 1,
                }

                const product_max_quantity = productContainer.dataset.quantityMax
                const product_variant_max_quantity = productContainer.dataset.productVariantQuantityMax
                if (!isNaN( parseInt(product_variant_max_quantity) )) {
                    product.max_quantity = product_variant_max_quantity;
                } else if (!isNaN( parseInt(product_max_quantity) )) {
                    product.max_quantity = product_max_quantity;
                }

                const product_variant_price = productContainer.dataset.productVariantPrice
                if (!isNaN(parseFloat(product_variant_price))) {
                    product.price = product_variant_price;
                }

                const productVariantID = productContainer.dataset.productVariantId
                if (!isNaN( parseInt(productVariantID) )) {
                    product.product_variant_id = productVariantID;
                }

                return product;
            }
        }
    }

    // Cart Features

    function compareProductWithCartItem(cartItem, product) {
        return cartItem.product_variant_id === product.product_variant_id;
    }

    function getItemTemplate(templateId) {
        const template = document.querySelector(`#${templateId}`).cloneNode(true);
        const div = document.createElement('div');
        div.innerHTML = template.innerHTML.trim();

        // Change this to div.childNodes to support multiple top-level nodes.
        return div.firstChild;
    }

    function updateCartProductItem(product) {
        const cartData = getCartData()
        const newCartData = cartData.map((cartItem) => {
            // add logic here
            const isProductEqualToCartItem = compareProductWithCartItem(cartItem, product)
            if (isProductEqualToCartItem) {
                cartItem.qty += parseInt(product.qty);
            }
            return cartItem;
        })

        NorthCommerce.Cart.updateCartData(newCartData)
    }

    function getCartData() {
        return NorthCommerce.Cart.retrieveCartData()
    }

})()
