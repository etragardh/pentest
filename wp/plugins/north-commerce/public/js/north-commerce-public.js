/**
 * Single Page Checkout Manager
 *
 * @version 0.1.24
 */

window.NorthCommerce = window.NorthCommerce ?? {}

window.NorthCommerce.singlePageCheckoutManager = {

	selector: {
		spc: '[data-nc-selector="single-page-checkout"]',
	},
    phoneUtil: null,

	constructor() {
		this.ensureCheckedProduct()
		this.maybeApplyCoupon()
		this.setListeners()
	},

	ensureCheckedProduct() {
		const firstProduct = document.querySelectorAll(`${this.selector.spc} .ProductRadio`)[0]

		if (!firstProduct) {
			return
		}

		firstProduct.checked = true
		// Check if paypalInit is defined before calling it
		// XXX Temporary fix until new checkout is implemented
		if (typeof paypalInit === "function") {
			paypalInit()
		} else {
			console.error('paypalInit is not defined. Make sure the north-commerce-paypal.js file is loaded.');
		}

		const spc = firstProduct.closest(`${this.selector.spc}`)
		this.updatePaymentSectionVisibility(spc)
	},

	maybeApplyCoupon() {
		if (!NorthCommerce.CouponManager) {
			return setTimeout(
				NorthCommerce.singlePageCheckoutManager.maybeApplyCoupon,
				5
			)
		}

		document
			.querySelectorAll(`${this.selector.spc}`)
			.forEach((spc) => {
				NorthCommerce.singlePageCheckoutManager.getAutomaticCoupon(spc)
			})
	},

	getAutomaticCoupon: async (spc) => {
		const promocodeInput = spc.querySelector('[data-nc-input="promocode"]')

		if (promocodeInput.value) {
			return
		}

		spc.promocode = {
			nodeName: 'INPUT',
			value: '_',
			'nc-type': 'automatic',
		}

		await NorthCommerce.singlePageCheckoutManager.validatePromocode(
			spc,
			(response) => {
				const promocodeInput = spc.querySelector('[data-nc-input="promocode"]')

				if (document.activeElement === promocodeInput) {
					return
				}

				if (response.coupon) {
					NorthCommerce.CouponManager.applyCoupon(response.coupon, promocodeInput)
				}

				NorthCommerce.singlePageCheckoutManager.updatePaymentSectionVisibility(spc)
			}
		)
	},

	setListeners() {
		this.setProductChangeListener()
		this.setNameInputListeners()
		this.setEmailInputListeners()
		this.setPhoneInputListeners()
		this.setAddressInputListeners()
		this.setTextareaInputListeners()
		this.setPasswordInputListeners()
	},

	setProductChangeListener() {
		const products = document.querySelectorAll('.ProductRadio')

		products.forEach((product) => {
			const productID = product.closest('[data-product-id]').dataset.productId
			NorthCommerce.Cart.getVariantOptionsMap(productID, true)

			product.addEventListener('change', (e) => changeCurrentProduct(e.target))
		})

		function changeCurrentProduct(target) {
			const spc = target.closest('[data-type="form"]')
			spc.querySelectorAll('.ProductRadio:checked').forEach((item) => item.checked = false)

			target.checked = true
			NorthCommerce.singlePageCheckoutManager.updateOrderPricing(spc)
			clearPaymentError()

			const max = target.closest('[data-type="product"]')
			const status = max === null || (max.getAttribute('data-qty-max') !== '' && parseInt(max.getAttribute('data-qty-max')) > 0) ? true : false

			updatePaymentButtonState(status)
			paypalReInit()
			NorthCommerce.singlePageCheckoutManager.reValidateActivePromocode(spc)
		}
	},

    setNameInputListeners() {
        const firstNames = document.querySelectorAll(`${this.selector.spc} [data-type="firstName"] .textFieldInput`)
        const secondNames = document.querySelectorAll(`${this.selector.spc} [data-type="secondName"] .textFieldInput`)
        const fullNames = document.querySelectorAll(`${this.selector.spc} [data-type="fullName"] .textFieldInput`)

        firstNames.forEach((item) => {
            item.addEventListener('change', (e) => this.resetInputName(e.target))
            item.addEventListener('keyup', (e) => this.resetInputName(e.target))
            item.addEventListener('blur', (e) => this.validateInputName(e.target))
        }, this)

        secondNames.forEach((item) => {
            item.addEventListener('change', (e) => this.resetInputName(e.target))
            item.addEventListener('keyup', (e) => this.resetInputName(e.target))
            item.addEventListener('blur', (e) => this.validateInputName(e.target))
        }, this)

        fullNames.forEach((item) => {
            item.addEventListener('change', (e) => this.resetInputName(e.target))
            item.addEventListener('keyup', (e) => this.resetInputName(e.target))
            item.addEventListener('blur', (e) => this.validateInputName(e.target))
        }, this)
    },

	setEmailInputListeners() {
		const emails = document.querySelectorAll(`${this.selector.spc} [data-type="email-input"] .textFieldInput`)

		emails.forEach((input) => {
			input.addEventListener('keyup', (e) => {
				if (!e.key) {
					return
				}

				'Enter' !== e.key && this.resetInputEmail(e.target)
				'Enter' === e.key && this.validateInputEmail(e.target)
			})
			input.addEventListener('blur', (e) => this.validateInputEmail(e.target))
		}, this)
	},

    setPhoneInputListeners() {
        if (typeof libphonenumber === 'undefined' || !libphonenumber.PhoneNumberUtil) {
            return
        }

        this.phoneUtil = libphonenumber.PhoneNumberUtil.getInstance()

        const phoneInputs = document.querySelectorAll('.phoneInput')
        phoneInputs.forEach((item) => {
            item.addEventListener('change', (e) => this.resetInputPhone(e.target))
            item.addEventListener('keyup', (e) => this.resetInputPhone(e.target))
            item.addEventListener('blur', (e) => this.validatePhoneInput(e.target))
        }, this)

        const phoneCountries = document.querySelectorAll('.phoneSelect')
        phoneCountries.forEach((select) => {
            select.addEventListener('change', (e) => phoneCountryChange(e.target))
            initPhoneSelect(select)
            initPhoneFormat(select)
        })

        function initPhoneSelect(select) {
            const countries = NorthCommerce.singlePageCheckoutManager.phoneUtil.getSupportedRegions()
            countries.map((item) => {
                const opt = document.createElement('option')
                opt.className = 'phoneSelectOption'
                opt.value = item
                opt.innerHTML = item
                select.appendChild(opt)
            })
        }

        function initPhoneFormat(select) {
            const code = select.value
            const input = select.parentNode.querySelector('.phoneInput')
            input.placeholder = NorthCommerce.singlePageCheckoutManager.phoneUtil.formatOutOfCountryCallingNumber(
                NorthCommerce.singlePageCheckoutManager.phoneUtil.getExampleNumber(code)
            )
        }

        function phoneCountryChange(e) {
            const code = e.value
            const input = e.parentNode.querySelector('.phoneInput')
            const phoneUtil = NorthCommerce.singlePageCheckoutManager.phoneUtil

            input.placeholder = phoneUtil.formatOutOfCountryCallingNumber(
                phoneUtil.getExampleNumber(code)
            )
            validatePhoneInput(input)
        }
    },

    setAddressInputListeners() {
        const address = document.querySelectorAll(`${this.selector.spc} .checkout_address`)
        const countryAddress = document.querySelectorAll(`${this.selector.spc} .checkout_country`)
        const city = document.querySelectorAll(`${this.selector.spc} .checkout_city`)
        const state = document.querySelectorAll(`${this.selector.spc} .checkout_state`)
        const zip = document.querySelectorAll(`${this.selector.spc} .checkout_zip`)

        address.forEach((item) => {
            item.addEventListener('change', (e) => this.resetInputAddress(e.target))
            item.addEventListener('keyup', (e) => this.resetInputAddress(e.target))
            item.addEventListener('blur', (e) => this.validateAddress(e.target))
        }, this)

        city.forEach((item) => {
            item.addEventListener('change', (e) => this.resetInputAddress(e.target))
            item.addEventListener('keyup', (e) => this.resetInputAddress(e.target))
            item.addEventListener('blur', (e) => this.validateAddress(e.target))
        }, this)

        state.forEach((item) => {
            item.addEventListener('change', (e) => this.resetInputAddress(e.target))
            item.addEventListener('keyup', (e) => this.resetInputAddress(e.target))
            item.addEventListener('blur', (e) => this.validateAddress(e.target))
        }, this)

        countryAddress.forEach((item) => {
            item.addEventListener('change', (e) => this.resetInputAddress(e.target))
            item.addEventListener('keyup', (e) => this.resetInputAddress(e.target))
            item.addEventListener('blur', (e) => this.validateAddress(e.target))
        }, this)

        zip.forEach((item) => {
            item.addEventListener('change', (e) => this.resetInputAddress(e.target))
            item.addEventListener('keyup', (e) => this.resetInputAddress(e.target))
            item.addEventListener('blur', (e) => this.validateAddress(e.target))
        }, this)
    },

    setTextareaInputListeners() {
        const textFields = document.querySelectorAll(`${this.selector.spc} textarea.textFieldInput`)

        textFields.forEach((item) => {
            item.addEventListener('change', (e) => this.resetInputTextField(e.target))
            item.addEventListener('keyup', (e) => this.resetInputTextField(e.target))
            item.addEventListener('blur', (e) => this.validateTextField(e.target))
        }, this)
    },

    /**
     * Licences Host
     */
    setPasswordInputListeners() {
        const password = document.querySelector('.textFieldInput[type="password"]')
        if (!password) {
            return
        }

        password.addEventListener('change', (e) => NorthCommerce.singlePageCheckoutManager.resetInputEmail(e.target))
        password.addEventListener('keyup', (e) => NorthCommerce.singlePageCheckoutManager.resetInputEmail(e.target))
        password.addEventListener('blur', (e) => NorthCommerce.singlePageCheckoutManager.validateInputPassword(e.target))
    },

	resetInputEmail(target) {
		target.classList.remove('ErrorTextFieldMain')
		target.parentNode.querySelector('.textFieldLabel').classList.remove('ErrorTextFieldLabel')
		target.parentNode.nextElementSibling.style.display = 'none'
		target.parentNode.nextElementSibling.classList.remove('input-error')

		if (!target.parentNode.nextElementSibling.classList.contains('customError')) {
			const nextSibling = target.parentNode.nextElementSibling.querySelector('[data-type="error-icon"]').nextSibling
			if (nextSibling) {
				nextSibling.nodeValue = ''
			}
		}
	},

	validateInputEmail(emailInput) {
		NorthCommerce.singlePageCheckoutManager.resetInputEmail(emailInput)

		if (!emailInput.value.length && !emailInput.hasAttribute('required')) {
			return true
		}

		if (!emailInput.value.length) {
			NorthCommerce.singlePageCheckoutManager.showEmailError(emailInput, 'required')
			return false
		}

		const regexEmail = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
		if (!regexEmail.test(emailInput.value)) {
			NorthCommerce.singlePageCheckoutManager.showEmailError(emailInput, 'Invalid email')
			return false
		}

		return true
	},

	showEmailError(e, error) {
		e.classList.add('ErrorTextFieldMain')
		e.parentNode.querySelector('.textFieldLabel').classList.add('ErrorTextFieldLabel')
		e.parentNode.nextElementSibling.style.display = 'flex'
		e.parentNode.nextElementSibling.classList.add('input-error')

		if (!e.parentNode.nextElementSibling.classList.contains('customError')) {
			e.parentNode.nextElementSibling
				.querySelector('span[data-type="error-icon"]')
				.nextSibling.nodeValue = error
		}
	},

	resetInputPhone(target) {
		target.parentNode.classList.remove('ErrorTextFieldMain')
		target.parentNode.querySelector('.phoneLabel').classList.remove('ErrorTextFieldLabel')
		target.parentNode.nextElementSibling.style.display = 'none'
		target.parentNode.nextElementSibling.classList.remove('input-error')

		if (!target.parentNode.nextElementSibling.classList.contains('customError')) {
			target.parentNode.nextElementSibling
				.querySelector('[data-type="error-icon"]')
				.nextSibling.nodeValue = ''
		}
	},

	validatePhoneInput(target) {
		NorthCommerce.singlePageCheckoutManager.resetInputPhone(target)

		if (!target.value.length || !target.hasAttribute('required')) {
            return
        }

        if (target.value.length === 0) {
            const phoneErrorContainer = target.parentNode.nextElementSibling
            phoneErrorContainer.querySelector('.phoneErrorIcon').nextSibling.nodeValue = 'required'
            phoneErrorContainer.style.display = 'flex'
            return
        }

        if (this.phoneUtil) {
            const countrySelect = target.parentNode.querySelector('.phoneSelect')
            const countryCode = countrySelect.value
            try {
                const number = this.phoneUtil.parseAndKeepRawInput(target.value, countryCode)
                if (!this.phoneUtil.isValidNumberForRegion(number, countryCode)) {
                    const result = this.phoneUtil.isPossibleNumberWithReason(number)
                    showPhoneError(target, 'Invalid phone number')
                }
            } catch(error) {
                showPhoneError(target, error.message)
            }
        }

		function showPhoneError(target, error) {
			target.parentNode.classList.add('ErrorTextFieldMain')
			target.parentNode.querySelector('.phoneLabel').classList.add('ErrorTextFieldLabel')
			target.parentNode.nextElementSibling.style.display = 'flex'
			target.parentNode.nextElementSibling.classList.add('input-error')

			if (!target.parentNode.nextElementSibling.classList.contains('customError')) {
				target.parentNode.nextElementSibling
					.querySelector('[data-type="error-icon"]')
					.nextSibling.nodeValue = error
			}
		}
	},

    showAddressError(target, error) {
		target.parentNode.classList.add('ErrorTextFieldMain')
		target.parentNode.querySelector('.phoneLabel').classList.add('ErrorTextFieldLabel')
		target.parentNode.nextElementSibling.style.display = 'flex'
		target.parentNode.nextElementSibling.classList.add('input-error')

		if (!target.parentNode.nextElementSibling.classList.contains('customError')) {
			target.parentNode.nextElementSibling
				.querySelector('[data-type="error-icon"]')
				.nextSibling.nodeValue = error
		}
	},

    resetInputName(target) {
		target.classList.remove('ErrorTextFieldMain')
		target.parentNode.querySelector('.textFieldLabel').classList.remove('ErrorTextFieldLabel')
		target.parentNode.nextElementSibling.style.display = 'none'
		target.parentNode.nextElementSibling.classList.remove('input-error')

		if (!target.parentNode.nextElementSibling.classList.contains('customError')) {
			target.parentNode.nextElementSibling
				.querySelector('[data-type="error-icon"]')
				.nextSibling.nodeValue = ''
		}
	},

    validateInputName(target) {
        const regexIntlName = /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u
		NorthCommerce.singlePageCheckoutManager.resetInputName(target)

		if (target.value.length > 0 || target.hasAttribute('required')) {
			if (!target.value.length) {
				showNameError(target, 'required')
				return
			}
			if (!regexIntlName.test(target.value)) {
				showNameError(target, 'Invalid Field')
			}
		}

		function showNameError(target, error) {
			target.classList.add('ErrorTextFieldMain')
			target.parentNode.querySelector('.textFieldLabel').classList.add('ErrorTextFieldLabel')
			target.parentNode.nextElementSibling.style.display = 'flex'
			target.parentNode.nextElementSibling.classList.add('input-error')

			if (!target.parentNode.nextElementSibling.classList.contains('customError')) {
				target.parentNode.nextElementSibling
					.querySelector('[data-type="error-icon"]')
					.nextSibling.nodeValue = error
			}
		}
	},

    resetInputAddress(target) {
		target.parentNode.classList.remove('ErrorTextFieldMain')
		target.parentNode.querySelector('.addressLabel').classList.remove('ErrorTextFieldLabel')
		target.parentNode.nextElementSibling.style.display = 'none'
		target.parentNode.nextElementSibling.classList.remove('input-error')

		if (!target.parentNode.nextElementSibling.classList.contains('customError')) {
			target.parentNode.nextElementSibling
				.querySelector('[data-type="error-icon"]')
				.nextSibling.nodeValue = ''
		}
	},

    validateAddress(target) {
		NorthCommerce.singlePageCheckoutManager.resetInputAddress(target)

		if (!target.value.length && target.hasAttribute('required') ) {
			NorthCommerce.singlePageCheckoutManager.showEmailError(target, 'required')
			return
		}
	},

    resetInputTextField(e) {
		target.classList.remove('ErrorTextFieldMain')
		target.parentNode.querySelector('.textFieldLabel').classList.remove('ErrorTextFieldLabel')
		target.parentNode.nextElementSibling.style.display = 'none'
		target.parentNode.nextElementSibling.classList.remove('input-error')

		if (!target.parentNode.nextElementSibling.classList.contains('customError')) {
			target.parentNode.nextElementSibling
				.querySelector('[data-type="error-icon"]')
				.nextSibling.nodeValue = ''
		}
	},

    validateTextField(target) {
		NorthCommerce.singlePageCheckoutManager.resetInputName(target)

		if (target.value.length > 0 || target.hasAttribute('required')) {
			if (target.value.length <= 0) {
				showTextFieldError(target, 'required')
				return
			}
		}

        function showTextFieldError(target, error) {
            target.classList.add('ErrorTextFieldMain')
            target.parentNode.querySelector('.textFieldLabel').classList.add('ErrorTextFieldLabel')
            target.parentNode.nextElementSibling.style.display = 'flex'
            target.parentNode.nextElementSibling.classList.add('input-error')

            if (!target.parentNode.nextElementSibling.classList.contains('customError')) {
                target.parentNode.nextElementSibling
                    .querySelector('[data-type="error-icon"]')
                    .nextSibling.nodeValue = error
            }
        }
	},

    validateInputPassword(target) {
        NorthCommerce.singlePageCheckoutManager.resetInputEmail(target)

        if (target.value.length > 0 || target.hasAttribute('required')) {
            if (!target.value.length) {
                showPasswordError(target, 'required')
                return
            }
            if (target.value.length <= 5) {
                showPasswordError(target, 'At least 6 characters long')
                return
            }
        }

        function showPasswordError(target, error) {
            target.classList.add('ErrorTextFieldMain')
            target.parentNode.querySelector('.textFieldLabel').classList.add('ErrorTextFieldLabel')
            target.parentNode.nextElementSibling.style.display = 'flex'
            target.parentNode.nextElementSibling.classList.add('input-error')

            if (!target.parentNode.nextElementSibling.classList.contains('customError')) {
                target.parentNode.nextElementSibling
                    .querySelector('[data-type="error-icon"]')
                    .nextSibling.textContent = error
            }
        }
    },

	updateOrderPricing(spc) {
		const orderContainer = spc.querySelector('.spc-order')

		if (!orderContainer) {
			return
		}

		const subtotalAmount = NorthCommerce.singlePageCheckoutManager.getCartSubtotal(spc)
		const totalAmount = NorthCommerce.singlePageCheckoutManager.getCartTotal(spc, subtotalAmount)
		updateUiElements()
		NorthCommerce.singlePageCheckoutManager.updatePaymentSectionVisibility(spc)

		function updateUiElements() {
			const subtotalValueElement = orderContainer.querySelector('.spc-subtotal__value .value')
			if (subtotalValueElement) {
				subtotalValueElement.innerHTML = NorthCommerce.formatPrice(subtotalAmount)
			}

			const totalValueElement = orderContainer.querySelector('[data-type="spc-total"] .value')
			if (totalValueElement) {
				totalValueElement.innerHTML = NorthCommerce.formatPrice(totalAmount)
			}
		}
	},

	getCartSubtotal: (form) => {
		const products = form.querySelectorAll('[data-type="product"]')
		let subtotal = 0

		products.forEach((product) => {
			if (product.querySelector('.ProductRadio:checked') !== null) {
				let price = parseFloat(product.getAttribute('data-price'))
				const count = product.querySelector('.ProductQntInt')

				if (count !== null) {
					price = price * parseInt(count.value)
				}

				subtotal += price
			}
		})

		return subtotal
	},

	getCartTotal: (form, subtotalAmount) => {
		let total = subtotalAmount ?? NorthCommerce.singlePageCheckoutManager.getCartSubtotal(form)

		const promocodeInput = form.querySelector('.nc-promocode-container.nc-promo-active [data-nc-input="promocode"]')

		if (promocodeInput && NorthCommerce.CouponManager) {
			const activeCoupon = NorthCommerce.CouponManager.getCouponActive()
			if (activeCoupon) {
				total -= activeCoupon.totalCartDiscount

				if (total < 0) {
					total = 0 // safeguard
				}
			}
		}

		const bumps = form.querySelectorAll('[data-type="orderBump"]')
		bumps.forEach((bump) => {
			if (bump.querySelector('.BumpRadio:checked') !== null) {
				let price = parseFloat(bump.getAttribute('data-price'))
				total += price
			}
		})

		return total
	},

	getProductValues(productContainer) {
		const spc = productContainer.closest(`${this.selector.spc}`)
		const productOptions = productContainer.querySelectorAll('[data-type="product-options"]');
		const qnt = productContainer.querySelector('[data-type="qty-input"]');

		const product = {
			'id' : productContainer.getAttribute('data-product-id'),
			'qty' : qnt !== null ? parseInt(qnt.value) : 1,
		}

		if (productOptions) {
			product['product_options'] = [];
			productOptions.forEach((item) => {
				const optionValueID = item.querySelector(':checked').value;
				product['product_options'].push(optionValueID);
			})

			if (!product['product_options'].length) {
				delete product['product_options'];
			}
		}

		const promocode = spc.querySelector('[data-nc-selector="active-promocode-name"]')
		if (promocode) {
			product.promocode = promocode.innerText
		}

		return product
	},

	reValidateActivePromocode: async (spc, cbSuccess) => {
		const activePromocode = spc.querySelector('[data-nc-selector="active-promocode-name"]')
		if (!activePromocode.innerText) {
			return
		}

		NorthCommerce.singlePageCheckoutManager.validatePromocode(
			spc,
			(response) => {
				const promocodeInput = spc.querySelector('[data-nc-input="promocode"]')

				if (response.coupon) {
					NorthCommerce.CouponManager.applyCoupon(response.coupon, promocodeInput)
				}

				NorthCommerce.singlePageCheckoutManager.updatePaymentSectionVisibility(spc)
			}
		)
	},

	validatePromocode: async (spc, cbSuccess, cbFinally) => {
		const promocodeInput = spc.querySelector('[data-nc-input="promocode"]')

		const promocodeText = promocodeInput.value ? promocodeInput.value : spc.querySelector('[data-nc-selector="active-promocode-name"]').innerText

		if (!promocodeText) {
			return
		}

		const productRadio = spc.querySelector('[data-type="product"] .ProductRadio:checked')

		if (!productRadio) {
			NorthCommerce.CouponManager.showCouponErrors('Choose any product', promocodeInput)
			cbFinally && cbFinally()
			return
		}

		const product = productRadio.closest('[data-type="product"]')
		const productID = product.id
		const productQuantity = product.querySelector('[data-type="qty-input"]').value

		const productData = await NorthCommerce.Cart.getProductItemData(productID)
		let productPrice = productData.base_price

		const productOptionsContainer = product.querySelector('.product__options')
		const checkedOptions = productOptionsContainer.querySelectorAll('input[type="radio"]:checked')
		const checkedOptionsIDs = Array.from(checkedOptions).map((el) => el.value)
		let variantID = await NorthCommerce.Cart.retrieveVariantByOptions(productID, checkedOptionsIDs)

		if (!variantID) {
			const productVariants = productData.product_variants
			const productVariantsLength = productData.product_variants.length

			for (let i = 0; i < productVariantsLength; i++) {
				if ('solo' === productData.product_variants[i].product_variant_type.slug) {
					variantID = productData.product_variants[i].id
					if (productData.product_variants[i].price) {
						productPrice = productData.product_variants[i].price
					}

					break
				}
			}
		}

		const headers = {
			'Content-Type': 'application/json',
			'Accept': 'application/json',
			'nc-initiator': 'spc'
		}
		if (spc.promocode && spc.promocode['nc-type']) {
			headers['nc-type'] = spc.promocode['nc-type']
			delete spc.promocode
		}

		return fetch(`${ajax_data.rest_url}/promocode/${promocodeText}`, {
			method: 'POST',
			headers,
			body: JSON.stringify({
				cart: [{
					product_id: productID,
					product_variant_id: variantID,
					price: productPrice,
					qty: productQuantity,
				}],
				customer: {
					firstName: spc.querySelector('[data-type="firstName-input"] input').value,
					secondName: spc.querySelector('[data-type="secondName"] input').value,
					email: spc.querySelector('[data-type="email-input"] input').value,
				},
				shipping: {
					address: spc.querySelector('[data-nc-selector="spc-shipping-address"]').value,
					city: spc.querySelector('[data-nc-selector="spc-shipping-city"]').value,
					subunit: spc.querySelector('[data-nc-selector="spc-shipping-subunit"]').value,
					zip: spc.querySelector('[data-nc-selector="spc-shipping-zip"]').value,
					country: spc.querySelector('[data-nc-selector="spc-shipping-country"]').value,
				}
			})
		})
			.then((response) => response.json())
			.then((response) => {
				if (!response.success) {
					const promocodeContainer = promocodeInput.closest('[data-nc-selector="nc-promocode-container"]')
					NorthCommerce.CouponManager.removeActiveCoupon(promocodeContainer)
					NorthCommerce.CouponManager.showCouponErrors(response.message, promocodeInput)
					cbFinally && cbFinally()
					return
				}

				cbSuccess && cbSuccess(response)
				cbFinally && cbFinally()
			})
	},

	validateCheckoutInputs(target) {
        const spc = target.closest(`${this.selector.spc}`)
        const selectedProduct = spc.querySelector('.ProductRadio:checked')
        const productWrapper = selectedProduct.closest('[data-type="product"]')
        const productOptions = productWrapper.querySelectorAll('[data-type="product-options"]')

        if (productOptions.length) {
            const optionsWrapper = productWrapper.querySelector('.ProductProps')
            hideProductOptionsError(optionsWrapper)
            if (!validateProductOptions(optionsWrapper)) {
                showProductOptionsError(optionsWrapper, 'Select preffered options')
            }
        }

        spc.querySelectorAll('.phoneInput').forEach((phone) => this.validatePhoneInput(phone), this)
        spc.querySelectorAll('[data-type="email-input"] .textFieldInput').forEach((email) => this.validateInputEmail(email), this)
        spc.querySelectorAll('[data-type="firstName"] .textFieldInput').forEach((name) => this.validateInputName(name), this)
        spc.querySelectorAll('[data-type="secondName"] .textFieldInput').forEach((name) => this.validateInputName(name), this)
        spc.querySelectorAll('[data-type="fullName"] .textFieldInput').forEach((name) => this.validateInputName(name), this)
        spc.querySelectorAll('textarea.textFieldInput').forEach((field) => this.validateTextField(field), this)

        spc.querySelectorAll('.checkout_address').forEach((field) => this.validateAddress(field), this)
        spc.querySelectorAll('.checkout_country').forEach((field) => this.validateAddress(field), this)
        spc.querySelectorAll('.checkout_city').forEach((field) => this.validateAddress(field), this)
        spc.querySelectorAll('.checkout_state').forEach((field) => this.validateAddress(field), this)
        spc.querySelectorAll('.checkout_zip').forEach((field) => this.validateAddress(field), this)

        const password = spc.querySelector('.textFieldInput[type="password"]')
        if (password) {
            this.validateInputPassword(password)
        }

        const errors = spc.querySelectorAll('.input-error')
        if (!errors.length) {
            return true
        }

        errors[0].scrollIntoView({block: 'center', behavior: 'smooth'})
        return false

        function showProductOptionsError(optionsWrapper, errorText) {
            const textFieldError = optionsWrapper.querySelector('.textFieldError')

            if ('flex' === textFieldError.style.display) {
                return
            }

            textFieldError.style.display = 'flex'
            textFieldError.classList.add('input-error')
            textFieldError
                .querySelector('[data-type="error-icon"]')
                .insertAdjacentHTML('afterend', `<span class="error-text">${errorText}</span>`)
        }
	},

	getCheckoutData: (spc) => {
		const spcData = []

		spc.querySelectorAll('.textFieldInput[type="email"]').forEach((email) => { spcData.push({ 'name': 'email', 'value': email.value }) })
		spc.querySelectorAll('[data-type="firstName"] .textFieldInput').forEach((name) => { spcData.push({ 'name': 'firstName', 'value': name.value }) })
		spc.querySelectorAll('[data-type="secondName"] .textFieldInput').forEach((name) => { spcData.push({ 'name': 'secondName', 'value': name.value }) })
		spc.querySelectorAll('[data-type="fullName"] .textFieldInput').forEach((name) => { spcData.push({ 'name': 'fullName', 'value': name.value }) })
		spc.querySelectorAll('textarea.textFieldInput').forEach((field) => { spcData.push({ 'name': 'textField', 'value': field.value }) })

		spc.querySelectorAll('.checkout_address').forEach((field) => { spcData.push({ 'name': 'checkout_address', 'value': field.value }) })
		spc.querySelectorAll('.checkout_country').forEach((field) => { spcData.push({ 'name': 'checkout_country', 'value': field.value }) })
		spc.querySelectorAll('.checkout_city').forEach((field) => { spcData.push({ 'name': 'checkout_city', 'value': field.value }) })
		spc.querySelectorAll('.checkout_state').forEach((field) => { spcData.push({ 'name': 'checkout_state', 'value': field.value }) })
		spc.querySelectorAll('.checkout_zip').forEach((field) => { spcData.push({ 'name': 'checkout_zip', 'value': field.value }) })

		const password = spc.querySelector('.textFieldInput[type="password"]')
		if (password) {
			spcData.push({ 'name': 'password', 'value': password.value })
		}

		spc.querySelectorAll('.phoneInput').forEach((phone) => {
			const selector = phone.closest('.phoneMain').querySelector('.phoneSelect');
			spcData.push({
				'name' : 'phone',
				'value' : phone.value,
				'code' : selector.options[selector.selectedIndex].value
			})
		})

		const product = spc.querySelector('.ProductRadio:checked').closest('[data-type="product"]')
		spcData.push({
			'name': 'product',
			'value': NorthCommerce.singlePageCheckoutManager.getProductValues(product)
		})

		const promocode = spc.querySelector('[data-nc-selector="active-promocode-name"]')
		if (promocode) {
			spcData.push({
				'name': 'promocode',
				'value': promocode.innerText
			})
		}

		const bump = spc.querySelector('.BumpRadio:checked')
		if (bump != null) {
			spcData.push({
				'name': 'bump',
				'value': bump.closest('[data-type="orderBump"]').getAttribute('data-product-id')
			})
		}

		if (
			typeof card !== 'undefined'
			&& card != null
			&& spc.querySelector('#stripe_token')
		) {
			spcData.push({
				'name': 'stripe',
				'value': {
					'card_last_four': spc.querySelector('#card_last_four').value,
					'card_brand': spc.querySelector('#card_brand').value,
					'card_exp_date': spc.querySelector('#card_exp_date').value,
					'stripe_token' : spc.querySelector('#stripe_token').value
				}
			})
		}

		if (
			typeof mollieClient !== 'undefined'
			&& null != mollieClient
			&& spc.querySelector('[name=mollie_method]:checked')
		) {
			spcData.push({
				'name': 'mollie',
				'value': spc.querySelector('[name=mollie_method]:checked').value
			});
		}

		return spcData
	},

	stripeTokenHandler: (spc, token) => {
		// Insert the token ID into the form so it gets submitted to the server
		const tokenField = spc.querySelector('#stripe_token')
		const lastFour = spc.querySelector('#card_last_four')
		const brand = spc.querySelector('#card_brand')
		const expDate = spc.querySelector('#card_exp_date')

		tokenField.value = token.id
		lastFour.value = token.card.last4
		brand.value = token.card.brand

		let exp_month = '' + token.card.exp_month
		if (exp_month.length < 2) { exp_month = '0' + exp_month }
		expDate.value = exp_month + '/' + token.card.exp_year
	},

	updatePaymentSectionVisibility(spc) {
		const totalValue = spc.querySelector('[data-type="spc-total"] .value').innerText

		spc
			.querySelector('.paymentMethodWrapper')
			.style.display = 0 == totalValue ? 'none' : 'block'
	},

    updateProductElement(element, productVariant) {
        updateInventoryText()
        updateMaxQuantity()
        updatePrice()

        function updateInventoryText() {
            const inventoryText = element.querySelector('.ProductStockInventory[data-type="stock-value"]')

            if (!inventoryText) {
                return
            }

            if (!productVariant.status) {
                inventoryText.textContent = '0 in stock'
                return
            }

            if (productVariant.inventory === null) {
                inventoryText.textContent = '∞ in stock'
                return
            }

            inventoryText.textContent = productVariant.inventory + ' in stock'
        }

        function updateMaxQuantity() {
            const inventory = !productVariant.status ? 0 : productVariant.inventory
            element.setAttribute('data-qty-max', inventory)
        }

        function updatePrice() {
            element.setAttribute('data-price', productVariant.price)
        }
    },

    updateProductPrice(productElement) {
        const qty = productElement.querySelector('.ProductQntInt') !== null
            ? productElement.querySelector('.ProductQntInt').value
            : 1

        const newPrice = parseFloat(productElement.getAttribute('data-price')) * parseInt(qty)

        productElement
            .querySelector('.productPrice[data-type="total-value"] .value')
            .innerHTML = NorthCommerce.formatPrice(newPrice)
    },

    updateProductInputQty(target) {
        const productElement = target.closest('[data-type="product"]')
        const input = productElement.querySelector('.ProductQntInt')

        if (!input) {
            return
        }

        const maxInventory = productElement.getAttribute('data-qty-max') !== 'null' ? productElement.getAttribute('data-qty-max') : ''
        let value = parseInt(input.value)

        value = value < 1 ? 1 : value

        if (maxInventory !== '') {
            value = value < parseInt(maxInventory) ? value : parseInt(maxInventory)
        }

        input.value = value

        paypalReInit()
        NorthCommerce.singlePageCheckoutManager.updateProductPrice(productElement)

        const spc = productElement.closest(`${this.selector.spc}`)
        NorthCommerce.singlePageCheckoutManager.updateOrderPricing(spc)
        NorthCommerce.singlePageCheckoutManager.reValidateActivePromocode(spc)
    }

}

window.NorthCommerce.formatPrice = (priceValue) => {
    priceValue ??= 0

    const {
        currencySymbol,
        currencyPosition,
        priceDecimals,
        decimalOperator,
        thousandsSeparator
    } = northCommerceSettings

    const parts = parseFloat(priceValue).toFixed(priceDecimals).toString().split('.')
    const integerPart = parts[0]
    const decimalPart = parts[1]
    const thousands = /\B(?=(\d{3})+(?!\d))/g

    // Format the integer part with the thousands separator
    const formattedIntegerPart = integerPart.replace(thousands, thousandsSeparator);
    // Combine formatted integer part with the decimal part if it exists
    const completeFormattedPrice = formattedIntegerPart + (decimalPart ? decimalOperator + decimalPart : '');

    // Add the currency symbol based on the position defined in settings
    if (currencyPosition === "left_space") {
        return currencySymbol + " " + completeFormattedPrice;
    } else if (currencyPosition === "left") {
        return currencySymbol + completeFormattedPrice;
    } else if (currencyPosition === "right") {
        return completeFormattedPrice + currencySymbol;
    } else if (currencyPosition === "right_space") {
        return completeFormattedPrice + " " + currencySymbol;
    } else {
        // Default to left if no valid position is provided
        return currencySymbol + completeFormattedPrice;
    }
}

NorthCommerce.singlePageCheckoutManager.constructor()

async function initAutocomplete() {
    if (typeof google === 'undefined') {
        return
    }

    const address = document.querySelectorAll('.checkout_address')

    if (!address || !address.length) {
        return
    }

    let autocomplete
    let useGmaps = false
    const service = new google.maps.places.AutocompleteService()

    await service.getPlacePredictions(
        {
            input: 'Brisbane,Australia',
            types: ['(cities)'],
        },
        function (predictions, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                useGmaps = true
            }
        }
    );

    if (useGmaps === true && typeof(google) !== 'undefined') {
        autocomplete = new google.maps.places.Autocomplete(
            document.querySelector('.checkout_address'), { types: ['geocode'] }
        )

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete.setFields(['address_component'])

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        autocomplete.addListener('place_changed', fillInAddress)
    }

    function fillInAddress() {
        var place = autocomplete.getPlace()
        let country, city, state, postal

        for (let i = 0; i < place.address_components.length; i++) {
            const plasceSuggestion = place.address_components[i]
            if (['locality', 'postal_town'].includes(plasceSuggestion.types[0])) {
                city = plasceSuggestion['long_name']
            }
            if ('country' === plasceSuggestion.types[0]) {
                country = plasceSuggestion['long_name']
            }
            if ([plasceSuggestion.types[0], plasceSuggestion.types[1]].includes('postal_code')) {
                postal = plasceSuggestion['short_name']
            }
            if ('administrative_area_level_1' === plasceSuggestion.types[0]) {
                state = plasceSuggestion['short_name']
            }
        }

        document.querySelector('.checkout_country').value = country ?? ''
        document.querySelector('.checkout_city').value = city ?? ''
        document.querySelector('.checkout_state').value = state ?? ''
        document.querySelector('.checkout_zip').value = postal ?? ''
    }

    function geolocate() {
        if (!navigator.geolocation) {
            return
        }

        navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
                center: geolocation,
                radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
        })
    }
}

/**
 * Product Handler
 */

	const variantsWrapper = document.querySelectorAll('.ProductProps');
	const qtyButtons = document.querySelectorAll('.ProductQntBtn');
	const qtyInput = document.querySelectorAll('.ProductQntInt');

	const disabledVariations = []

	function updateProductQty(target) {
		const productElement = target.closest('[data-type="product"]')
		const input = productElement.querySelector('.ProductQntInt')
		const maxInventory = productElement.getAttribute('data-qty-max')

		let value = parseInt(input.value)
		if (target.closest('button').getAttribute('data-qnt-type') === 'plus') {
			if (!!maxInventory) {
				value = value + 1 < parseInt(maxInventory) ? value + 1 : parseInt(maxInventory)
			} else {
				value += 1
			}
			input.value = value
		} else {
			if (value - 1 < 0) {
				return
			}

			input.value = value - 1
		}

		paypalReInit()
		NorthCommerce.singlePageCheckoutManager.updateProductPrice(productElement)
        NorthCommerce.singlePageCheckoutManager.updatePaymentSectionVisibility()

		const spc = productElement.closest('form[data-nc-selector="single-page-checkout"]')
		NorthCommerce.singlePageCheckoutManager.updateOrderPricing(spc)
		NorthCommerce.singlePageCheckoutManager.reValidateActivePromocode(spc)
	}

	const updateProductComponent = async function(product, element) {
		const data = new FormData();
		data.append('action', 'get_product');
		data.append('data', JSON.stringify(product));

		try {
            const response = await fetch(ajax_object.ajaxurl, {
                method: 'post',
                body: data,
                credentials: 'same-origin'
            })
            const result = await response.json()

            NorthCommerce.singlePageCheckoutManager.updateProductElement(element, result)
            NorthCommerce.singlePageCheckoutManager.updateProductInputQty(element)

            const inventory = !result.status ? 0 : result.inventory
            updatePaymentButtonState(inventory !== 0)
            maybeDisableVariationOptions(result, product, element)
		} catch (error) {
			console.dir(error)
		}
	}

    function updatePaymentButtonState(status) {
        const paypal = document.querySelector('#paypal-buttons')

        if (!paypal) {
            return
        }

        status
            ? paypal.classList.remove('disabled')
            : paypal.classList.add('disabled')
    }

	const productSettingChange = function(target) {
		const productNode = target.closest('[data-type="product"]');
		const product = NorthCommerce.singlePageCheckoutManager.getProductValues(productNode)

		if (
			disabledVariations.length
			&& isChoseVariationDisabled(product.product_options)
		) {
			return false
		}

		updateProductComponent(product, productNode)
	}

	const hideProductOptionsError = (optionsWrapper) => {
		const textFieldError = optionsWrapper.querySelector('.textFieldError')
		if ('flex' !== textFieldError.style.display) {
			return
		}

		textFieldError.style.display = 'none';
		textFieldError.classList.remove('input-error');
		const errorText = textFieldError.querySelector('span.error-text')
		if (errorText) {
			errorText.textContent = ''
		}
	}

	const validateProductOptions = (optionsWrapper) => {
		// enforce customer to choose each variant option
		let allValid
		let isVariantDisabled

		if (disabledVariations.length) {
			const productValues = NorthCommerce.singlePageCheckoutManager.getProductValues(optionsWrapper.parentNode)
			disabledVariations.forEach((disabledVariant) => {
				if (isChoseVariationDisabled(productValues.product_options)) {
					markProductOptionsAsDisabled(productValues.product_options, optionsWrapper)
					isVariantDisabled = true
				}
			})
		}

		if (isVariantDisabled) {
			// Bailout
			return
		}

		optionsWrapper
			.querySelectorAll('[data-type="product-options"]')
			.forEach((inputWrapper) => {
				const checked = inputWrapper.querySelector('input[type="radio"]:checked')
				const valid = !!checked

				if (false === valid || undefined === allValid) {
					allValid = valid
				}
			})

		return allValid
	}

	variantsWrapper.forEach((item) => {
		item.addEventListener('change', (e) => {
			const productOptionsWrapper = e.target.closest('.ProductProps')
			hideProductOptionsError(productOptionsWrapper)
			unmarkUnavailableProductOptions(productOptionsWrapper)
			if (validateProductOptions(productOptionsWrapper)) {
				productSettingChange(e.target)
			}
			markUnavailableProductOptions(productOptionsWrapper)
		})
	})

	const maybeDisableVariationOptions = (productVariant, variantdata, element) => {
		const isVariantDisabled = !productVariant.status || '0' === productVariant.inventory

		if (!isVariantDisabled || !variantdata.product_options) {
			return
		}

		markProductOptionsAsDisabled(variantdata.product_options, element)
		disabledVariations.push(variantdata.product_options)
	}

	const isChoseVariationDisabled = (productOptionsIDs) => {
		let isDisabled
		disabledVariations.forEach((disabledVariant) => {
			const containsAll = disabledVariant.every((el) => productOptionsIDs.includes(el));
			if (containsAll) {
				isDisabled = true
			}
		})
		return isDisabled
	}

	const markProductOptionsAsDisabled = (povIDs, productWrapper) => {
		const productID = productWrapper.closest('[data-product-id]').dataset.productId
		povIDs.forEach((povID) => {
			const idAttr = `product_${productID}__option_value_${povID}`
			productWrapper.querySelector(`label[for="${idAttr}"]`).classList.add('unavailable')
		});
		productWrapper.closest('form').querySelector('.CheckoutFormBodySubmitButton').classList.add('disabled')
	}

	const unmarkUnavailableProductOptions = (optionsWrapper) => {
		disabledOptions = optionsWrapper.querySelectorAll('label.unavailable')

		if (!disabledOptions.length) {
			return
		}

		disabledOptions.forEach((label) => {
			label.classList.remove('unavailable')
		})

		optionsWrapper.closest('form').querySelector('.CheckoutFormBodySubmitButton').classList.remove('disabled')
	}

	qtyButtons.forEach((item) => item.addEventListener('click', (e) => updateProductQty(e.target)))
	qtyInput.forEach((item) => item.addEventListener('change', (e) => NorthCommerce.singlePageCheckoutManager.updateProductInputQty(e.target)))


	const bumps = document.querySelectorAll('.BumpRadio')
	bumps.forEach((item) => {
		item.addEventListener('change', (e) => changeCurrentBump(e.target))
	})

	const changeCurrentBump = function(target) {
		const form = target.closest('form[data-type="form"]');

		// const submitButton = form.querySelector('.CheckoutFormBodySubmitButton')
		// submitButton.classList.remove('disabled')
		// if (form.querySelector('.BumpRadio:checked')) {
		// 	submitButton.classList.add('disabled')
		// 	return; // prevent submitting witn Bump product
		// }

		if (target.checked) {
			form.querySelectorAll('.BumpRadio').forEach((item) => {
				item.checked = false;
			});
			target.checked = true;
		}

		NorthCommerce.singlePageCheckoutManager.updateOrderPricing(form)
		updateOrderSpecialOffer(form)

		function updateOrderSpecialOffer(form) {
			const bump = form.querySelector('.BumpRadio:checked')
			const specialOffer = form.querySelector('.spc-special-offer')
			if (bump !== null) {
				specialOffer.style.display = 'flex';
				specialOffer.querySelector('.spc-special-offer__value .value').innerHTML = NorthCommerce.formatPrice(parseFloat(bump.closest('.OrderBumpWrapper').getAttribute('data-price')));
			} else {
				specialOffer.style.display = 'none';
			}
		}
	}


async function markUnavailableProductOptions(optionsContainer) {
	const productID = optionsContainer.closest('[data-type="product"]').dataset.productId
	const productData = await NorthCommerce.Cart.getProductItemData(productID)

	const optionsSets = Array.from( optionsContainer.querySelectorAll('[data-type="product-options"]') )
	const activeOptions = Array.from( optionsContainer.querySelectorAll('input[type="radio"]:checked') )

	const forEachSet = (sets) => {
		sets.forEach((optionSet) => {
			const unactiveOptions = Array.from( optionsContainer.querySelectorAll(`.option__set[data-id="${optionSet.id}"] input[type="radio"]:not(:checked)`) )

			if (!unactiveOptions.length) {
				return
			}

			const siblingSets = optionsSets.filter((set) => parseInt(set.dataset.id) !== parseInt(optionSet.id))
			const siblingActiveOptionsIDs = siblingSets.map((set) => parseInt( set.querySelector('input[type="radio"]:checked').value) )

			unactiveOptions.forEach(async (opt) => {
				const optionID = parseInt(opt.value)
				const variantID = await NorthCommerce.Cart.retrieveVariantByOptions(productID, [ optionID, ...siblingActiveOptionsIDs ])

				const productVariantData = variantID
					? productData.product_variants.find((variant) => variant.id === variantID)
					: null

				const isVariantDisabled = !variantID
					|| undefined === productVariantData
					|| (productVariantData.deleted || !parseInt(productVariantData.visible) || '0' === productVariantData.quantity)

				if (isVariantDisabled) {
					const optlabel = optionsContainer.querySelector(`label[for="${opt.id}"]`)
					if (optlabel) {
						optlabel.classList.add('unavailable')
					}
				}
			})
		})
	}

	let sets = []
	if (optionsSets.length - 1 === activeOptions.length) {
		sets = productData.product_options.filter((optionSet) => {
			const checked = optionsContainer.querySelector(`.option__set[data-id="${optionSet.id}"] input[type="radio"]:checked`)
			return !checked
		})
	}
	if (optionsSets.length === activeOptions.length) {
		sets = productData.product_options
	}

	forEachSet(sets)
}


const forms = document.querySelectorAll('form[data-type="form"]');
forms.forEach((form) => NorthCommerce.singlePageCheckoutManager.updateOrderPricing(form))

	/** Show card form on `.DefaultButton` click */
	document.querySelectorAll('.Card').forEach(card => {
		card.addEventListener('click', function(e) {
			const btn = e.target;
			const el = btn.nextElementSibling;
			if (el !== null) {
				el.style.display = 'block';
				btn.style.display = 'none';
			}

			// Hide other forms
			if (
				(window.mollie_data && '' !== mollie_data.public)
				&& e.target.classList.contains('stripe')
			) {
				const mollieBtn = e.target.closest('.PaymentWrapper').querySelector('.DefaultButton.mollie')
				if (mollieBtn && 'none' === mollieBtn.style.display) {
					const mollieForm = mollieBtn.nextElementSibling;
					if (mollieForm) {
						mollieForm.style.display = 'none';
						mollieBtn.style.display = 'flex';
					}
				}
			} else if (e.target.classList.contains('mollie')) {
				const stripeBtn = e.target.closest('.PaymentWrapper').querySelector('.DefaultButton.stripe')
				if (stripeBtn && 'none' === stripeBtn.style.display) {
					const stripeForm = stripeBtn.nextElementSibling;
					if (stripeForm) {
						stripeForm.style.display = 'none';
						stripeBtn.style.display = 'flex';
					}
				}
			}
		});
	});


/**
 * Payment handler
 */

const paymentError = document.querySelector('.payment-error')
const generalMollieError = document.querySelector('.mollieGeneralError')

function clearPaymentError() {
	if (paymentError !== null) {
		paymentError.innerHTML = ''
	}

	if (window.mollie_data && mollie_data.public !== '') {
		generalMollieError.classList.remove('input-error')
		generalMollieError.style.display = 'none'
	}
}

function showPaymentError(text) {
	if (paymentError !== null) {
		paymentError.innerHTML = text
	}
}

/**
 * Submit Form
 *
 * Stripe payment method
 */
const submit = document.querySelectorAll('.CheckoutFormBodySubmitButton')
submit.forEach((item) => {
	item.addEventListener('click', async function(e) {
		e.preventDefault()

		const btn = e.target
		const spc = btn.closest('[data-type="form"]')
		const paymentSection = spc.querySelector('.SectionWrapper.paymentMethodWrapper')

		const productPrice = spc.querySelector('.ProductRadio:checked').closest('[data-type="product"]').dataset.price
		if (0 == productPrice) {
			return processZeroPriceProductOrder({ e, btn, spc })
		}

		const activePromocodeName = spc.querySelector('[data-nc-selector="active-promocode-name"]').innerText
		if (activePromocodeName) {
			const orderTotal = spc.querySelector('[data-type="spc-total"] .value').innerText
			const paymentMethodContainer = spc.querySelector('.paymentMethodWrapper')
			if (
				0 === parseInt( orderTotal )
				&& 'none' === paymentMethodContainer.style.display
			) {
				return processZeroPriceProductOrder({ e, btn, spc })
			}
		}

		const anyMethodChosen = paymentSection.querySelector('.DefaultButton.Card[style="display: none;"]')
		if (!anyMethodChosen) {
			showPaymentError('Choose your payment method.')
		}

		const stripeBtn = paymentSection.querySelector('.Card.stripe')
		if (stripeBtn) {
			const stripeCardForm = stripeBtn.nextElementSibling
			if (
				! stripeCardForm
				|| 'block' !== stripeCardForm.style.display
				|| 'none' !== stripeBtn.style.display
			) {
				// Bailout, if stripe is not active.
				return
			}
		}

		const element = spc.querySelector('#card-element')
		clearPaymentError()

		btn.classList.add('disabled')
		btn.firstElementChild.textContent = 'Loading...'

		let validSPC = NorthCommerce.singlePageCheckoutManager.validateCheckoutInputs(btn)

		if (!validSPC) {
			btn.classList.remove('disabled')
			btn.firstElementChild.textContent = 'Place order'
			showPaymentError('Invalid fields')
			return
		}

		if (element) {
			error_stripe = await stripe.createToken(card).then(function (result) {
				if (result.error) {
					validSPC = false
					const card = spc.querySelector('.Card')
					card.click()
					showPaymentError(result.error.message)
					btn.classList.remove('disabled')
					btn.firstElementChild.textContent = 'Place order'
				} else {
					// save the token for next submmiting
					NorthCommerce.singlePageCheckoutManager.stripeTokenHandler(spc, result.token)
					validSPC = true
				}
			})
		} else {
			btn.classList.remove('disabled')
			btn.firstElementChild.textContent = 'Place order'
			return
		}

		if (!validSPC) {
			return
		}

		const args = new FormData()
		args.append('action', 'stripe_payment_process')
		args.append('data', JSON.stringify( NorthCommerce.singlePageCheckoutManager.getCheckoutData(spc) ))

		try {
			const response = await fetch(ajax_object.ajaxurl, {
				method: 'post',
				body: args,
				credentials: 'same-origin'
			})
			const result = await response.json()

			if (result['error'] !== undefined) {
				showPaymentError(result['error'])
				return
			}

			let url
			if (spc.getAttribute('data-redirect') !== null) {
				url = spc.getAttribute('data-redirect')
			} else {
				url = window.location.href
			}
			window.location.href = url

		} catch (error) {
			showPaymentError('Payment Error:' + error)
		} finally {
			btn.classList.remove('disabled')
			btn.firstElementChild.textContent = 'Place order'
		}

	})
})

/**
 * Submit Form
 *
 * Zero Price Product Order
 */
async function processZeroPriceProductOrder({ e, btn, spc }) {
	clearPaymentError()

	btn.classList.add('disabled')
	btn.firstElementChild.textContent = 'Loading...'

	let valid = NorthCommerce.singlePageCheckoutManager.validateCheckoutInputs(btn)
	if (!valid) {
		btn.classList.remove('disabled')
		btn.firstElementChild.textContent = 'Place order'
		showPaymentError('Invalid fields')
		return
	}

	const args = new FormData()
	args.append('action', 'zero_price_payment_process')
	args.append('data', JSON.stringify( NorthCommerce.singlePageCheckoutManager.getCheckoutData(form) ))

	try {

		const response = await fetch(ajax_object.ajaxurl, {
			method: 'post',
			body: args,
			credentials: 'same-origin'
		})
		const result = await response.json()

		if (result['error'] !== undefined) {
			showPaymentError(result['error'])
			return
		}

		let url
		if (form.getAttribute('data-redirect') !== null) {
			url = form.getAttribute('data-redirect')
		} else {
			url = window.location.href
		}
		window.location.href = url

	} catch(error) {
		showPaymentError('Payment Error:' + error)
	} finally {
		btn.classList.remove('disabled')
		btn.firstElementChild.textContent = 'Place order'
	}
}


// flickity carousel
jQuery('.nc-main-carousel').flickity({
	cellAlign: 'left',
	contain: true,
	groupCells: true,
	freeScroll: false,
	wrapAround: true,
	groupCells: 2,
	autoPlay: false,
	pauseAutoPlayOnHover: false,
	initialIndex: 1,
	wrapAround: true,
	prevNextButtons: true,
	pageDots: false
});
