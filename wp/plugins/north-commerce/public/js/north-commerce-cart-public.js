/**
 * Cart Page
 */

const cartContainer = document.querySelector('.nc-cart.nc-main-wrapper')
const checkoutManager = window.NorthCommerce.CheckoutManager;


if (cartContainer) {

    let imagePlaceholderSrc = null

    renderCartTable()
    setupQuantityChangeEvent()
    setupRemoveFromCartEvent()
    setupOptionChangeEvent()

    function renderCartTable() {
        const cartData = retrieveCartData()

        if (!cartData.length) {
            return
        }

        const productsContainer = cartContainer.querySelector('.cart-products')
        const productTemplate = cartContainer.querySelector('.nc-product.template')
        imagePlaceholderSrc = productTemplate.querySelector('.nc-product-image').src

        cartData.forEach(async (cartItem, itemIndex) => {
            const newProduct = productTemplate.cloneNode(true)
            newProduct.classList.remove('template')
            newProduct.dataset.id = cartItem.id

            const productData = await NorthCommerce.Cart.getProductItemData(cartItem.product_id)
            let variantData = productData.product_variants.find((variant) => variant.id === cartItem.product_variant_id)
            variantData = variantData ? variantData : {}

            // Image
            let image_url = variantData.image_url
            if (!image_url && productData.product_images.length) {
                image_url = productData.product_images[0].image_url
            }
            newProduct.querySelector('.nc-product-image').src = image_url ? image_url : imagePlaceholderSrc

            // Name
            newProduct.querySelector('.name__text').textContent = productData.name

            // Options
            const productOptionsContainer = newProduct.querySelector('.nc-product-options')
            const optionsSetTemplate = productOptionsContainer.querySelector('.option__set')
            optionsSetTemplate.remove()
            const productVariantsOptionsMap = productData.product_options.length
                ? await NorthCommerce.Cart.getVariantOptionsMap(cartItem.product_id)
                : []
            const variantOptionsMap = productVariantsOptionsMap[ parseInt(cartItem.product_variant_id) ]

            productData.product_options.filter(optionSet => optionSet.deleted === null).forEach((optionSet) => {

                const newOptionSet = optionsSetTemplate.cloneNode(true)
                const optionSetType = optionSet.product_option_type.slug

                newOptionSet.dataset.id = optionSet.id
                newOptionSet.querySelector('.option__label').textContent = `${optionSet.name}: `

                if ('image' === optionSetType) {
                    newOptionSet.querySelector('.icon.arrow-down').remove()
                } else {
                    newOptionSet.querySelector('.icon.settings').remove()
                }

                const optionSelector = newOptionSet.querySelector('.option__selector')
                const selectorValue = newOptionSet.querySelector('.option__value')
                selectorValue.remove()
                optionSet.product_option_values.forEach((opt) => {
                    if (opt.deleted) {
                        return
                    }

                    const newOptionValue = selectorValue.cloneNode(true)
                    newOptionValue.dataset.type = optionSetType
                    newOptionValue.dataset.id = opt.id

                    if ('image' === optionSetType) {
                        if (opt.value.startsWith('http://') || opt.value.startsWith('https://')) {
                            newOptionValue.innerHTML = `<img src="${opt.value}" alt="" title="${opt.display_value}">`
                        } else {
                            newOptionValue.textContent = opt.display_value
                            delete newOptionValue.dataset.type
                        }
                    } else if ('color' === optionSetType) {
                        newOptionValue.style.backgroundColor = opt.value
                        newOptionValue.title = opt.display_value
                    } else {
                        newOptionValue.textContent = opt.display_value
                    }

                    if (variantOptionsMap && variantOptionsMap.includes(parseInt(opt.id))) {
                        newOptionValue.classList.add('active')
                        if (!opt.value.startsWith('http://') && !opt.value.startsWith('https://')) {
                            newOptionSet.querySelector('.option__chose .current').textContent = opt.display_value
                        }
                    }

                    optionSelector.appendChild(newOptionValue)
                })

                productOptionsContainer.appendChild(newOptionSet)
            })

            // Quantity
            newProduct.querySelector('.nc-quantity .input-number').value = cartItem.qty

            // Price
            const price = variantData.price ? variantData.price : productData.base_price
            newProduct.querySelector('.product__total .total__price').textContent = formatPrice(price * cartItem.qty)

            if ( ! cartData.awaitingRender ) {
                cartData.awaitingRender = cartData.length
            }

            productsContainer.appendChild(newProduct)

            cartData.awaitingRender = cartData.awaitingRender - 1
            if ( 0 === cartData.awaitingRender ) {
                updateOrderSummary()
                showCartTable()
                forEachCartItem(markUnavailableOptions)
            }
        });
    }

    function retrieveCartData() {
        return NorthCommerce.Cart.retrieveCartData()
    }

    function formatPrice(number) {
        return NorthCommerce.formatPrice(number)
    }

    function showCartTable() {
        cartContainer.querySelector('.nc-wrapper-container').classList.remove('cart-empty')
    }

    function hideCartTable() {
        cartContainer.querySelector('.nc-wrapper-container').classList.add('cart-empty')
    }

    function setupQuantityChangeEvent() {
        const handleQuantityChange = (e) => {
            let updateTotals = false

            if ('decrement' === e.target.dataset.quantity && 'click' === e.type) {
                NorthCommerce.Cart.decreaseCartItemQuantity(e.target)
                updateTotals = true
            }

            if ('increment' === e.target.dataset.quantity && 'click' === e.type) {
                NorthCommerce.Cart.increaseCartItemQuantity(e.target)
                updateTotals = true
            }

            if ('cart-item-quantity-value' === e.target.dataset.type && 'change' === e.type) {
                NorthCommerce.Cart.changeCartItemQuantity(e.target)
                updateTotals = true
            }

            if (updateTotals) {
                updateProductTotal(e.target)
                updateOrderSummary()
                NorthCommerce.Cart.syncCartDrawerItems()
                // Dispatch `nc-cart-update` event
                document.dispatchEvent(new Event('nc-cart-updated', { bubbles: true, cancelable: false }))
            }
        }

        cartContainer.addEventListener('click', handleQuantityChange)
        cartContainer.addEventListener('change', handleQuantityChange)
    }

    function setupRemoveFromCartEvent() {
        const removeItemFromCart = (e) => {
            if ('nc-delete-from-cart' !== e.target.dataset.type) {
                return
            }

            const orderItemContainer = e.target.closest('[data-type=cart-product-item]');
            const cartId = orderItemContainer.getAttribute('data-id');

            const cartDataToRemove = retrieveCartData().filter((cartItemData) => parseInt(cartItemData.id) == parseInt(cartId))
            
            checkoutManager.removeLineItem(cartDataToRemove[0]);
           
            NorthCommerce.Cart.removeItem(e)

            updateOrderSummary()

            if (!retrieveCartData().length) {
                hideCartTable()
            }
        }

        cartContainer.addEventListener('click', removeItemFromCart)
    }

    function updateProductTotal(target) {
        const productItem = target.closest('[data-type="cart-product-item"]')
        const productData = retrieveCartData().find((item) => parseInt(item.id) === parseInt(productItem.dataset.id))
        productItem.querySelector('.product__total .total__price').textContent = formatPrice( parseFloat(productData.price) * productData.qty )
    }

    function updateOrderSummary() {
        const cartData = retrieveCartData()
        const couponData = NorthCommerce.CouponManager.getLocalCouponData()

        let subtotal = 0
        if (cartData.length === 1) {
            subtotal = cartData[0].price * cartData[0].qty
        }
        if (cartData.length > 1) {
            subtotal = cartData.reduce((prev, current) => {
                if (typeof prev === 'object') {
                    prev = prev.price * prev.qty
                }
                return prev + current.price * current.qty
            })
        }

        let total = subtotal

        if (couponData.length) {
            couponData.forEach((coupon) => {
                total -= coupon.totalCartDiscount;
            })

            if (total < 0) {
                total = 0 // safeguard
            }
        }

        const formattedSubtotal = formatPrice(subtotal)
        const formattedTotal = formatPrice(total)
        cartContainer.querySelector('.nc-subtotal .value__price').textContent = formattedSubtotal
        cartContainer.querySelector('.nc-total .value__price').textContent = formattedTotal
    }

    // Expose `updateOrderSummary` to the window
    window.NorthCommerce.cartUpdateOrderSummary = updateOrderSummary;

    function setupOptionChangeEvent() {
        cartContainer.addEventListener('click', handleOptionChange)

        async function handleOptionChange(e) {
            if (
                !e.target.classList.contains('option__value')
                && null === e.target.closest('.option__value')
            ) {
                return
            }

            const currentOption = e.target.classList.contains('option__value') ? e.target : e.target.closest('.option__value')

            if (
                ! (
                    ! currentOption.classList.contains('active')
                    && ! currentOption.classList.contains('unavailable')
                )
            ) {
                return
            }

            const productContainer = currentOption.closest('[data-type="cart-product-item"]')
            const optionsSetContainer = currentOption.closest('.option__set')
            const productOptionsContainer = productContainer.querySelector('.nc-product-options')

            const prevOption = optionsSetContainer.querySelector('.option__value.active')
            prevOption.classList.remove('active')
            currentOption.classList.add('active')

            const cartItem = retrieveCartData().find((cartitem) => cartitem.id === parseInt(productContainer.dataset.id))
            const productID = cartItem.product_id

            const activeOptions = Array.from( productOptionsContainer.querySelectorAll('.option__value.active') )
            const optionsID = activeOptions.map((opt) => opt.dataset.id)

            const variantID = await NorthCommerce.Cart.retrieveVariantByOptions(productID, optionsID)
            const productData = await NorthCommerce.Cart.getProductItemData(productID)
            const productVariantData = productData.product_variants.find((variant) => variant.id === variantID)

            const isVariantDisabled = undefined === productVariantData || (productVariantData.deleted || !parseInt(productVariantData.visible) || '0' === productVariantData.quantity)
            if (isVariantDisabled) {
                activeOptions.forEach((opt) => opt.classList.add('unavailable') )
                return // Bailout.
            }

            optionsSetContainer.querySelector('.option__chose .current').textContent = e.target.textContent
            handleVaritaionChange({ productContainer, productData, productVariantData })
        }

        function handleVaritaionChange(data) {
            const { productContainer, productData, productVariantData } = data
            const cartItemID = productContainer.dataset.id;
            const productCartData = NorthCommerce.Cart.getProductFromCartById(cartItemID)

            // Image
            let image_url = productVariantData.image_url
            if (!image_url && productData.product_images.length) {
                image_url = productData.product_images[0].image_url
            }
            productContainer.querySelector('.nc-product-image').src = image_url ? image_url : imagePlaceholderSrc

            // Quantity
            const newMaxQuantity = productVariantData.quantity ? +productVariantData.quantity : productData.quantity
            let newQuantity = productCartData.qty
            if (null !== newMaxQuantity) {
                newQuantity = productCartData.qty > newMaxQuantity ? newMaxQuantity : productCartData.qty
            }
            newQuantity = newQuantity ? newQuantity : 1
            productContainer.querySelector('[data-type="cart-item-quantity-value"]').value = newQuantity

            // Price
            const newPrice = productVariantData.price ? productVariantData.price : productData.base_price
            productContainer.querySelector('[data-type="cart-item-price"]').textContent = formatPrice(newPrice)

            // Update Local Cart Data
            let updatedCartItem = null
            const newCartData = retrieveCartData().map((cartItem) => {
                if (parseInt(cartItem.id) === parseInt(cartItemID)) {
                    cartItem.product_variant_id = productVariantData.id
                    cartItem.max_quantity = newMaxQuantity
                    cartItem.qty = newQuantity
                    cartItem.price = newPrice
                    updatedCartItem = cartItem
                }

                return cartItem;
            })

            document.addEventListener('nc-cart-updated', updateOrderSummary, { once: true })
            NorthCommerce.Cart.updateCartData(newCartData)
            if (updatedCartItem) {
                markUnavailableOptions(updatedCartItem)
            }
        }
    }

    function forEachCartItem(cb) {
        retrieveCartData().forEach((cartItem) => cb(cartItem))
    }

    async function markUnavailableOptions(cartItem) {
        const productContainer = cartContainer.querySelector(`[data-type="cart-product-item"][data-id="${cartItem.id}"]`)
        const productID = cartItem.product_id
        const productData = await NorthCommerce.Cart.getProductItemData(productID)

        const productOptionsContainer = productContainer.querySelector('.nc-product-options')
        const optionsSets = Array.from( productOptionsContainer.querySelectorAll('.option__set') )
        const activeOptions = Array.from( productOptionsContainer.querySelectorAll('.option__value.active') )

        if (activeOptions.length !== productData.product_options.length) {
            return
        }

        const unavailableOptions = Array.from( productOptionsContainer.querySelectorAll('.option__value.unavailable') )
        unavailableOptions.forEach((opt) => opt.classList.remove('unavailable'))

        productData.product_options.forEach((optionSet) => {
            const unactiveOptions = Array.from( productOptionsContainer.querySelectorAll(`.option__set[data-id="${optionSet.id}"] .option__value:not(.active)`) )

            if (!unactiveOptions.length) {
                return
            }

            const siblingSets = optionsSets.filter((set) => parseInt(set.dataset.id) !== parseInt(optionSet.id))
            const siblingActiveOptionsIDs = siblingSets.map((set) => set.querySelector('.option__value.active').dataset.id)

            unactiveOptions.forEach(async (opt) => {
                const optionID = parseInt(opt.dataset.id)
                const variantID = await NorthCommerce.Cart.retrieveVariantByOptions(productID, [ optionID, ...siblingActiveOptionsIDs ])

                const productVariantData = variantID
                    ? productData.product_variants.find((variant) => variant.id === variantID)
                    : null

                const isVariantDisabled = !variantID
                    || undefined === productVariantData
                    || (productVariantData.deleted || !parseInt(productVariantData.visible) || '0' === productVariantData.quantity)

                if (isVariantDisabled) {
                    opt.classList.add('unavailable')
                }
            })

        })
    }
}
