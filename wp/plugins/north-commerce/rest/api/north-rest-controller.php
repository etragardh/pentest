<?php

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\Collections\{
	PaymentStatuses,
	OrderStatuses,
};
use NorthCommerce\Db\Shipping\Shipping_Manager;
use NorthCommerce\Api\{
	Customer_Helper,
	Shipment_Helper,
	Coupon_Helper,
	Order_Helper

};
use NorthCommerce\Models\{
	ShippingProfileModel,
	ProductModel,
	OrderModel,
	CountryModel
};
use North_Commerce_Easypost as Easypost;

/**
 * REST controller.
 *
 * @package north-commerce/rest/api
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.25
 */
class North_Rest_Conrtoller extends WP_REST_Controller {

	/**
	 * @since 0.1.21
	 */
	private const NAMESPACE = 'north-commerce/v1';

    private const PUBLIC_KEY = '6IgGwbz7E';
    private const PRIVATE_KEY = 'AwGQHJGkx';

	/**
	 * @since 0.1.21
	 */
	public static function get_namespace() {
		return self::NAMESPACE;
	}

	/**
	 * @version 0.1.21
	 */
	public static function get_url() {
		return get_rest_url() . self::NAMESPACE;
	}

	/**
	 * @version 0.1.21
	 */
	public function __construct() {
		$this->namespace = self::NAMESPACE;
	}

	/**
	 * @version 0.1.24
	 */
	public function register_routes() {

		register_rest_route( $this->namespace, '/form/(?P<id>\d+)', [
			[
				'methods' => WP_REST_Server::EDITABLE,
				'callback' => [ $this, 'update_form' ],
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'id' => [
						'type' => 'integer',
						'required' => true
					],
					'name' => [
						'type' => 'string'
					],
					'form' => [
						'type' => 'object',
						'required' => true,
					]
				]
			],
			[
				'methods' => WP_REST_Server::DELETABLE,
				'callback' => [ $this, 'delete_form' ],
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'id' => [
						'type' => 'integer',
						'required' => true
					],
				]
			],
			[
				'methods' => WP_REST_Server::READABLE,
				'callback' => [ $this, 'get_form' ],
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'id' => [
						'type' => 'integer',
						'required' => true
					],
				]
			],
		] );

		register_rest_route( $this->namespace, '/products', [
			[
				'methods' => WP_REST_Server::READABLE,
				'callback' => [ $this, 'get_products' ],
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'name' => [ 'type' => 'string' ],
					'type' => [
						'type' => 'string',
						'default' => 'any',
						'enum' => [
							'any',
							'one-time',
							'subscription',
							'payment-plan',
						]
					],
					'sort' => [
						'type' => 'string',
						'default' => 'asc',
						'enum' => [
							'asc',
							'desc',
							'a-z',
							'z-a'
						]
					],
					'page' => [
						'type' => 'integer',
						'default' => 1,
						'validate_callback' => function( $param, $request, $key ) {
							return is_numeric( $param ) && $param >= 1;
						},
					],
					'per_page' => [
						'type' => 'integer',
						'default' => 20,
						'validate_callback' => function( $param, $request, $key ) {
							return is_numeric( $param ) && $param >= 1;
						},
					]
				]
			],
		] );

		register_rest_route( $this->namespace, '/products/(?P<id>\d+)', [
			[
				'methods' => WP_REST_Server::READABLE,
				'callback' => [ $this, 'get_product' ],
				'permission_callback' => '__return_true',
				'args' => [
					'id' => [
						'type' => 'number',
						'required' => true,
					],
				]
			],
		] );

		/**
		 * The request method of this route should be READABLE by convention
		 * but the GET request is limited to  2,048 characters and the variants data could extend the GET request limit
		 *
		 * This could be fixed when adding an id for product variation items
		 */
		register_rest_route( $this->namespace, '/product-item/(?P<id>\d+)', [
			[
				'methods' => WP_REST_Server::CREATABLE,
				'callback' => [ $this, 'get_product_item' ],
				'permission_callback' => '__return_true',
				'args' => [
					'id' => [
						'type' => 'number',
						'required' => true,
					],
					'variant' => [
						'type' => 'array',
						'default' => [],
					],
					'variant_status' => [
						'type' => 'string',
					],
				]
			],
		] );

		register_rest_route( $this->namespace, '/mollie-payment', [
			[
				'methods' => WP_REST_Server::CREATABLE ,
				'callback' => [ $this, 'mollie_payment_webhook' ],
				'permission_callback' => '__return_true',
				'args' => [
					'id' => [
						'type' => 'string',
						'required' => true
					]
				]
			],
		] );

		/**
		 * @version 0.1.10
		 */
		register_rest_route( $this->namespace, '/address', [
			[
				'methods' => WP_REST_Server::CREATABLE,
				'callback' => [ $this, 'create_shipping_address' ],
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'address' => [
						'type' => 'string',
						'required' => true,
					],
					'city' => [
						'type' => 'string',
						'required' => true,
					],
					'country' => [
						'type' => 'string',
						'required' => true,
					],
					'zipcode' => [
						'type' => 'string',
						'required' => true,
					],
					'state' => [
						'type' => 'string',
						'required' => true,
					],
				]
			]
		] );

		/**
		 * @since   0.1.2
		 * @version 0.1.13
		 */
		register_rest_route( $this->namespace, '/address/(?P<id>\d+)', [
			[
				'methods' => WP_REST_Server::EDITABLE,
				'callback' => [ $this, 'update_shipping_address' ],
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'id' => [
						'type' => 'integer',
						'required' => true
					],
					'address' => [
						'type' => 'string',
						'required' => true,
					],
					'city' => [
						'type' => 'string',
						'required' => true,
					],
					'country' => [
						'type' => 'string',
						'required' => true,
					],
					'zipcode' => [
						'type' => 'string',
						'required' => true,
					],
					'state' => [
						'type' => 'string',
						'required' => true,
					],
				]
			],
			[
				'methods' => WP_REST_Server::DELETABLE,
				'callback' => [ $this, 'delete_shipping_address' ],
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'id' => [
						'type' => 'integer',
						'required' => true
					],
				]
			],
		] );

		/**
		 * @since   0.1.2
		 * @version 0.1.24
		 */
		register_rest_route( $this->namespace, '/shipping-profile', [
			[
				'methods' => WP_REST_Server::CREATABLE,
				'callback' => function ( $request ) {
					return Shipment_Helper::instance()->create_regional_profile( $request );
				},
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'all_variants_included' => [
						'type' => 'string',
						'required' => true,
						'enum' => [ '1', '0' ]
					],
					'products' => [
						'type' => 'string',
						'required' => false
					],
				]
			],
		] );

		/**
		 * @since   0.1.2
		 * @version 0.1.24
		 */
		register_rest_route( $this->namespace, '/shipping-profile/(?P<id>\d+)', [
			[
				'methods' => WP_REST_Server::EDITABLE,
				'callback' => function ( $request ) {
					return Shipment_Helper::instance()->store_profile( $request );
				},
				'permission_callback' => function ( $request ) {
					return Shipment_Helper::instance()->permission_callback( $request );
				},
				'args' => [
					'id' => [
						'type' => 'integer',
						'required' => true
					],
				]
			],
			[
				'methods' => WP_REST_Server::DELETABLE,
				'callback' => function ( $request ) {
					return Shipment_Helper::instance()->delete_regional_profile( $request );
				},
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'id' => [
						'type' => 'integer',
						'required' => true
					],
				]
			],
		] );

		/**
		 * @since   0.1.2
		 * @version 0.1.13
		 */
	    register_rest_route( $this->namespace, '/shipping-profile/(?P<id>\d+)/address/(?P<address_id>\d+)', [
		    [
			    'methods' => WP_REST_Server::EDITABLE,
			    'callback' => [ $this, 'set_shipping_profile_address' ],
			    'permission_callback' => [ $this, 'get_permissions_check' ],
			    'args' => [
				    'id' => [
					    'type' => 'integer',
					    'required' => true
					],
				    'address_id' => [
					    'type' => 'integer',
					    'required' => true
					],
				]
			],
	    ] );

		register_rest_route( $this->namespace, '/shipping-profiles-remove-product', [
			[
				'methods' => WP_REST_Server::DELETABLE,
				'callback' => [ $this, 'shipping_profiles_remove_product' ],
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'product_id' => [
						'type' => 'integer',
						'required' => true
					],
					'item_type' => [
						'type'  => 'string',
						'required' => true,
						'enum'  => [
							'variant',
							'product'
						]
					],
					'variation_index' => [
						'type' => 'integer',
					],
					'shipping_profiles_ids' => [
						'type' => 'array',
					]
				]
			],
		] );

		/**
		 * @since   0.1.2
		 * @version 0.1.13
		 */
		register_rest_route( $this->namespace, '/easypost/carriers', [
			[
				'methods' => WP_REST_Server::READABLE,
				'callback' => [ $this, 'get_easypost_carriers' ],
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'addressID' => [
						'type' => 'integer',
						'required' => true
					],
					'countryCodes' => [
						'type' => 'array',
						'required' => true
					],
				]
			],
		] );

		/**
		 * @deprecated 0.1.10
		 */
		register_rest_route( $this->namespace, '/easypost/carrier/(?P<id>[0-9a-z\\-_]+)/services', [
			[
				'methods' => WP_REST_Server::READABLE,
				'callback' => [ $this, 'get_easypost_carrier_services' ],
				'permission_callback' => [ $this, 'get_permissions_check' ],
				'args' => [
					'id' => [
						'type' => 'string',
						'required' => true
					],
					'addressID' => [
						'type' => 'integer',
						'required' => true
					],
					'countryCodes' => [
						'type' => 'array',
						'required' => true
					],
				]
			],
		] );

		register_rest_route( $this->namespace, '/checkout-process', [
			[
				'methods'  => WP_REST_Server::CREATABLE,
				'callback' => [ $this, 'validate_checkout_data' ],
				'permission_callback' => '__return_true',
				'args' => [
					'cart_items' => [
						'type' => 'array',
						'required' => true
					],
				]
			],
		] );

		register_rest_route( $this->namespace, '/shipping/rates', [
			[
				'methods'  => WP_REST_Server::CREATABLE,
				'callback' => [ $this, 'get_shipping_rates' ],
				'permission_callback' => '__return_true',
				'args' => [
					'cart_items' => [
						'type' => 'array',
						'required' => true
					],
					'address' => [
						'type' => 'string',
						'required' => true
					],
					'zip_code' => [
						'type' => 'string',
						'required' => true
					],
					'city' => [
						'type' => 'string',
						'required' => true
					],
					'state' => [
						'type' => 'string',
						'required' => true
					],
					'country' => [
						'type' => 'string',
						'required' => true
					]
				]
			],
		] );

		register_rest_route( $this->namespace, '/shipping/buy', [
			[
				'methods'  => WP_REST_Server::CREATABLE,
				'callback' => [ $this, 'buy_shipping_label' ],
				'permission_callback' => '__return_true',
				'args' => [
					'rate_id' => [
						'type' => 'string',
						'required' => true
					],
					'shipment_id' => [
						'type' => 'string',
						'required' => true
					],
					'order_id' => [
						'type' => 'string',
						'required' => true
					]
				]
			],
		] );

		register_rest_route( $this->namespace, '/cart-check', [
			[
				'methods' => WP_REST_Server::CREATABLE,
				'callback' => [ $this, 'check_cart_items' ],
				'permission_callback' => '__return_true',
				'args' => [
					'cart_items' => [
						'type' => 'array',
						'required' => true
					],
				]
			],
		] );

		/**
		 * @version 0.1.21
		 */
		register_rest_route( $this->namespace, '/coupon', [
			[
				'methods' => WP_REST_Server::CREATABLE,
				'callback' => function ( $request ) {
					return Coupon_Helper::instance()->create_coupon( $request );
				},
				'permission_callback' => function ( $request ) {
					return Coupon_Helper::instance()->permission_callback( $request );
				},
			],
		] );

		/**
		 * @version 0.1.21
		 */
		register_rest_route( $this->namespace, '/coupon/(?P<id>\d+)', [
			[
				'methods' => WP_REST_Server::READABLE,
				'callback' => function ( $request ) {
					return Coupon_Helper::instance()->get_coupon( $request );
				},
				'permission_callback' => function ( $request ) {
					return Coupon_Helper::instance()->permission_callback( $request );
				},
				'args' => [
					'id' => [
						'type' => 'integer',
						'required' => true
					],
				],
			],
			[
				'methods' => WP_REST_Server::EDITABLE,
				'callback' => function ( $request ) {
					return Coupon_Helper::instance()->update_coupon( $request );
				},
				'permission_callback' => function ( $request ) {
					return Coupon_Helper::instance()->permission_callback( $request );
				},
				'args' => [
					'id' => [
						'type' => 'integer',
						'required' => true
					],
				],
			],
			[
				'methods' => WP_REST_Server::DELETABLE,
				'callback' => function ( $request ) {
					return Coupon_Helper::instance()->delete_coupon( $request );
				},
				'permission_callback' => function ( $request ) {
					return Coupon_Helper::instance()->permission_callback( $request );
				},
				'args' => [
					'id' => [
						'type' => 'integer',
						'required' => true
					],
				],
			],
		] );

		/**
		 * @version 0.1.21
		 */
		register_rest_route( $this->namespace, '/coupons', [
			[
				'methods' => WP_REST_Server::READABLE,
				'callback' => function ( $request ) {
					return Coupon_Helper::instance()->get_coupons_list( $request );
				},
				'permission_callback' => function ( $request ) {
					return Coupon_Helper::instance()->permission_callback( $request );
				},
			],
		] );

		/**
		 * @version 0.1.25
		 */
		register_rest_route( $this->namespace, '/promocode/(?P<code>(.+))', [
			[
				'methods' => WP_REST_Server::CREATABLE,
				'callback' => function ( $request ) {
					$coupon_helper = Coupon_Helper::instance();

					if ( 'spc' ===  $request->get_header( 'nc_initiator' ) ) {
						return $coupon_helper->calculate_coupon_discount_on_single_page_checkout( $request );
					}

					return $coupon_helper->apply_coupon_on_checkout( $request );
				},
				'permission_callback' => '__return_true',
				'args' => [
					'code' => [
						'type' => 'string',
						'required' => true
					],
				],
			],
		] );

		/**
		 * @version 0.1.23
		 */
		register_rest_route( $this->namespace, '/create-user', [
			[
				'methods' => WP_REST_Server::CREATABLE,
				'callback' => function ( $request ) {
					$user = North_Commerce_User::instance();
					if ( 'spc' ===  $request->get_header( 'nc_initiator' ) ) {
						return $user->create_user( $request );
					} else {
						return '';
					}
				},
				'permission_callback' => function ( $request ) {
					return North_Commerce_User::instance()->permission_callback( $request );
				},
			],
		] );

		/**
		 * @version 0.1.23
		 */
		register_rest_route( $this->namespace, '/update-user', [
			[
				'methods' => WP_REST_Server::CREATABLE,
				'callback' => function ( $request ) {
					$user = North_Commerce_User::instance();
					return $user->update_user( $request );
				},
				'permission_callback' => function ( $request ) {
					return North_Commerce_User::instance()->permission_callback( $request );
				},
			],
		] );

		/**
		 * @version 0.1.21
		 */
		register_rest_route( $this->namespace, '/coupon-orders', [
			[
				'methods' => WP_REST_Server::CREATABLE,
				'callback' => function ( $request ) {
					return Coupon_Helper::instance()->create_coupon_order_map( $request );
				},
				'permission_callback' => '__return_true',
				'args' => [
					'order_id' => [
						'type' => 'string',
						'required' => true
					],
					'promocode' => [
						'type' => 'string',
						'required' => true
					],
				],
			],
			[
				'methods' => WP_REST_Server::DELETABLE,
				'callback' => function ( $request ) {
					return Coupon_Helper::instance()->delete_coupon_order_map( $request );
				},
				'permission_callback' => '__return_true',
				'args' => [
					'couponOrderMapID' => [
						'type' => 'string',
						'required' => true
					],
				],
			],
		] );

		/**
		 * @since   0.1.24
		 * @version 0.1.24
		 */
		register_rest_route( $this->namespace, '/customer', [
			[
				'methods' => WP_REST_Server::CREATABLE,
				'callback' => function ( $request ) {
					return Customer_Helper::instance()->create_customer( $request );
				},
				'permission_callback' => function ( $request ) {
					return Customer_Helper::instance()->permission_callback( $request );
				},
				'args' => [
					'customer' => [
						'type' => 'object',
						'required' => true
					],
				],
			],
		] );

		/**
		 * @since   0.1.24
		 * @version 0.1.25
		 */
		register_rest_route( $this->namespace, '/orders/(?P<id>[a-z0-9]+)', [
			[
				'methods' => WP_REST_Server::EDITABLE,
				'callback' => function ( $request ) {
					$order_manager = Order_Helper::instance( $request );
					if ( $order_manager->draft_creation() ) {
						return $order_manager->create_draft();
					}

					return $order_manager->update_order();
				},
				'permission_callback' => function ( $request ) {
					return Order_Helper::instance( $request )->permission_callback();
				},
				'args' => [
					'shipping' => [
						'type' => 'object',
					],
					'tax' => [
						'type' => 'object',
					],
					'payment_status' => [
						'type' => 'object',
					],
				],
			],
		] );
	}

	public function disable_cors() {
		remove_filter( 'rest_pre_serve_request', 'rest_send_cors_headers' );

		add_filter( 'rest_pre_serve_request', function ( $value ) {
			if ( ! headers_sent() ) {
				header( 'Access-Control-Allow-Origin: *' );
				header( 'Access-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE, PATCH' );
				header( 'Access-Control-Allow-Credentials: true' );
				header( 'Access-Control-Allow-Headers: Origin, X-Requested-With, X-WP-Nonce, Content-Type, Accept, Authorization, public-key, secret-key' );
			}

			if ( 'OPTIONS' == $_SERVER['REQUEST_METHOD'] ) {
				status_header( 200 );
			}

			return $value;
		} );
	}

	/**
	 * Determine if we have shipping options for the current cart
	 *
	 * @version 0.1.24
	 */
	public function validate_checkout_data( $request ) {
		$params           = $request->get_params();
		$shipping_address = $params['shipping_address'];
		$cart_items       = $params['cart_items'];
		$errors = [];
		$mgr = Shipping_Manager::instance();

		$to_address = [
			'street1' => $shipping_address['address'],
			'city' => $shipping_address['city'],
			'state' => $shipping_address['state'],
			'country' => $shipping_address['country'],
			'zip' => $shipping_address['zip_code'],
		];

		$has_address = $mgr->isAddressComplete( $to_address );

		if ( $has_address ) {
			$shipping_criteria = $mgr->shippingCriteriaByCart( $to_address, $cart_items );
			$shipping_options = $mgr->availableOptions( $shipping_criteria );

			if (
				$shipping_criteria->cart_weight > 0
				&& count( $shipping_options ) == 0
			) {
				$errors['shipping_locations'] = [
					'message'    => "Sorry we don't ship to your location",
					'cart_items' => $cart_items
				];
			}
		}

		$debug = [
			'shipping_address' => $to_address,
			'has_address' => $has_address,
			'shipping_options'  => $shipping_options ?? null,
			'shipping_criteria' => $shipping_criteria ?? null,
		];

		return [
			'success' => true,
			'debug' => $debug,
			'data' => [
				'errors' => $errors,
			]
		];
	}

	/**
	 * @version 0.1.24
	 */
	public function get_shipping_rates( $request ) {
		$shipping_manager = Shipping_Manager::instance();

		$cart_items = $request->get_param( 'cart_items' );
		$to_address    = [
			'street1' => $request->get_param( 'address' ),
			'city'    => $request->get_param( 'city' ),
			'state'   => $request->get_param( 'state' ),
			'zip'     => $request->get_param( 'zip_code' ),
			'country' => $request->get_param( 'country' ),
		];

		$shipping_criteria = $shipping_manager->shippingCriteriaByCart( $to_address, $cart_items );

		$rates = array_map(
			function( $shipping_option ) {
				return $shipping_option->summary();
			},
			$shipping_manager->availableOptions( $shipping_criteria )
		);

		if ( count( $rates ) == 0 ) {
 			$errors['shipping_profile_coverage'] = __( "Sorry, we can't ship selected products to your area.", 'north-commerce' );
		}

		$result = [
			'success' => true,
			'data' => $rates
		];

		if ( ! empty( $errors ) ) {
			$result['success'] = false;
			$result['data'] = [
				'errors' => $errors,
			];
		}

		return rest_ensure_response( $result );
	}

	public function buy_shipping_label( $request ) {
		$result = [];
		$result['success'] = true;

		try {

			$order_id                = sanitize_text_field($request->get_param( 'order_id' ));
			$rate_id                 = sanitize_text_field($request->get_param( 'rate_id' ));
			$shipment_id             = sanitize_text_field($request->get_param( 'shipment_id' ));
			$mgr = Shipping_Manager::instance();
			$shipping_details = $mgr->purchaseShippingLabel($order_id, $rate_id, $shipment_id);

			$ea = North_Commerce_Db_Agent::instance()->entityAccess();
			$order = $ea->ref($order_id);

			$result['data'] = [
				'shipping_details' => $shipping_details,
				'order_status_id' => $order['order_status_id']
			];

		} catch(Exception $ex) {
			$result['success'] = false;
			$result['data'] = [
				'errors' => [$ex->getMessage()]
			];
		}

		return rest_ensure_response( $result );
	}

	public function check_cart_items( $request ) {
		$cart_items              = $request->get_param( 'cart_items' );
		$easyPostIntegration     = new Easypost();
		$shipping_service_status = $easyPostIntegration->is_connected();
		$product_model           = new ProductModel();

		$cart_contains_shippable_products = false;
		foreach ( $cart_items as $item ) {
			$id = (int) sanitize_text_field( $item['product_id'] );
			$product = $product_model->get_by_id( $id );
			if ( (bool) $product['is_physical_product'] ) {
				$cart_contains_shippable_products = true;
				break;
			}
		}

		$result = [
			'success' => true,
			'data'    => [
				'contains_shippable_products' => $cart_contains_shippable_products,
				'shipping_service_status'     => $shipping_service_status
			]
		];

		return rest_ensure_response( $result );
	}

	/**
	 * @deprecated 0.1.3
	 */
	public function get_product_item( $request ) {
		$id     = (int) sanitize_text_field( $request['id'] );
		$params = $request->get_params();

		$variant        = $request->get_param( 'variant' );
		$variant_status = $request->get_param( 'variant_status' );
		$product        = new North_Commerce_Product( $id );

		$data = $product->get_product_variant_data( $id, $variant, $variant_status );

		return rest_ensure_response( [
			'success' => true,
			'data'    => $data
		] );
	}

	/**
	 * @deprecated 0.1.3
	 */
	public function update_form( $request ) {
		$id   = (int) sanitize_text_field( $request['id'] );
		$name = $request->get_param( 'name' );
		$form = json_encode( $request->get_param( 'form' ) );

		$result = North_Form_DB_Controller::update_form( $id, $name, $form );

		if ( $result === false ) {
			global $wpdb;

			return new WP_Error( 'form_update', var_dump( $wpdb->last_query ), [ 'status' => 404 ] );
		}

		$response = rest_ensure_response( array(
			'status' => 'updated',
		) );

		return $response;
	}

	/**
	 * @deprecated 0.1.3
	 */
	public function delete_form( $request ) {
		$id     = (int) sanitize_text_field( $request['id'] );
		$result = North_Form_DB_Controller::delete_form( $id );

		if ( $result === false ) {
			global $wpdb;

			return new WP_Error( 'form_update', var_dump( $wpdb->last_query ), [ 'status' => 404 ] );
		}

		$response = rest_ensure_response( array(
			'status' => 'removed',
		) );

		return $response;

	}

	/**
	 * @deprecated 0.1.3
	 */
	public function get_form( $request ) {
		$id   = (int) sanitize_text_field( $request['id'] );
		$form = North_Form_DB_Controller::get_form( $id );
        if(empty($form))
			return new WP_Error( 'no_form_by_id', 'Form not found.', [ 'status' => 404 ] );

		$response = rest_ensure_response( North_Commerce_Forms::prepare_form_to_output( $form ) );

		return $response;
	}

	/**
	 * @deprecated 0.1.3
	 */
	public function get_forms( $request ) {
		$forms    = North_Form_DB_Controller::get_forms();
		$response = array(
			'meta' => [
				'count' => count( $forms )
			],
			'data' => North_Commerce_Forms::prepare_forms( $forms ),
		);
		rest_ensure_response( $response );

		return $response;
	}

	/**
	 * @deprecated 0.1.3
	 */
	public function get_product( $request ) {
		$id      = (int) sanitize_text_field( $request['id'] );
		$product = null;

		if ( ! $product ) {
			return new WP_Error( 'nc_invalid_product_id', 'Invalid product ID', array( 'status' => 404 ) );
		}

		return rest_ensure_response( [
			'success'=> true,
			'data' => $product
		] );
	}

	/**
	 * @deprecated 0.1.3
	 */
	public function get_products( $request ) {
		$params = $request->get_params();

		$page = intval( $params['page'] ?? 1 );
		$per_page = intval( $params['per_page'] ?? 20 );
		$type = $params['type'] ?? 'any';
		$sort = $params['sort'] ?? 'asc';
		$name = $params['name'] ?? null;

		$products = [];
		if ( empty( $products ) ) {
			return new WP_Error( 'not_found', 'Products not found', [ 'status' => 404 ] );
		}

		return rest_ensure_response( $products );
	}

	/**
	 * @since   0.1.2
	 * @version 0.1.25
	 */
    public function mollie_payment_webhook( $request ) {

        $mollie_payment = new North_Commerce_Mollie();
        $id = $request->get_param( 'id' );

        if ( empty( $id ) && ! $mollie_payment->is_connected() ) {
			// Bailout.
			return;
		}

		try {
			$mollie = new \Mollie\Api\MollieApiClient();
			$mollie->setApiKey( $mollie_payment->get_api_key() );
			$payment = $mollie->payments->get( $id );
		} catch ( \Mollie\Api\Exceptions\ApiException $e ) {
			echo 'API call failed: ' . htmlspecialchars( $e->getMessage() );
		} catch ( Exception $e ) {
			echo 'Exception: ' . htmlspecialchars( $e->getMessage() );
		}

		if ( isset( $e ) ) {
			// Bailout in case of exception
			return;
		}

		$order_model = new OrderModel();
		$pm = North_Commerce_Db_Agent::instance()->perspectiveManager();

		$is_bump_product = $payment->metadata->bump_product ?? false;
		$index = $is_bump_product ? 1 : 0;
		$order_id = $payment->metadata->order_id;

		$order = $pm->asAdministrator( function() use ( $order_model, $order_id ) {
			return $order_model->get_by_id( $order_id );
		} );

		$order_has_bump = (bool) ( $bump_product_id ?? null );

		if ( ! empty( $payment->details->cardNumber ) ) {
			$payment_method_data = [
				'customer_id' => $order['customer_id'],
				'payment_provider_id' => $order_model->get_payment_provider_by_slug( 'mollie' )['id'],
				'token' => null,
				'last4' => $payment->details->cardNumber,
				'brand' => $payment->details->cardLabel ?? null,
				'expiration_month' => null,
				'expiration_year' => null,
			];

			$customer_payment_method_id = $pm->asAdministrator(
				function() use ( $order_model, $payment_method_data ) {
					return $order_model->retrieve_customer_payment_method_id( $payment_method_data );
				}
			);

			$order_data = [
				'id' => $order_id,
				'customer_payment_method_id' => $customer_payment_method_id
			];

			$updated_payment_method_order = $pm->asAdministrator(
				function() use ( $order_model, $order_data ) {
					return $order_model->store( $order_data );
				}
			);
		}

		if (
			$payment->isPaid()
			&& ! $payment->hasRefunds()
			&& ! $payment->hasChargebacks()
		) {

			$product_type_slug = $order['line_items'][ $index ]['product_variant']['product']['product_type']['slug'];
			$new_paid_amount = floatval( $order['paid'] ) + floatval( $payment->amount->value );

			$updated_paid_amount_order = $pm->asAdministrator(
				function() use ( $order_model, $order_id, $new_paid_amount ) {
					return $order_model->update_paid_amount( $order_id, $new_paid_amount );
				}
			);

			if ( 'oneoff' === $payment->sequenceType ) {

				if ( $order_has_bump && ! $is_bump_product ) {
					// waiting for bump product payment
					$pm->asAdministrator(
						function() use ( $order_model, $order_id ) {
							$result = $order_model->update_order_status( $order_id, OrderStatuses::partiallyFulfilled()->id );
							$result = $order_model->update_payment_status( $order_id, PaymentStatuses::partiallyPaid()->id );
						}
					);
				} else {
					$pm->asAdministrator(
						function() use ( $order_model, $order_id ) {
							$result = $order_model->update_order_status( $order_id, OrderStatuses::unfulfilled()->id );
							$result = $order_model->update_payment_status( $order_id, PaymentStatuses::paid()->id );
						}
					);
				}

			}

			if ( 'first' === $payment->sequenceType ) {

				$recurring = $mollie_payment->create_recurring_payment( $id, $order_id );

				if ( 'subscription' === $product_type_slug ) {

					if ( $order_has_bump && ! $is_bump_product ) {
						// waiting for bump product payment
						$pm->asAdministrator(
							function() use ( $order_model, $order_id ) {
								$result = $order_model->update_order_status( $order_id, OrderStatuses::partiallyFulfilled()->id );
								$result = $order_model->update_payment_status( $order_id, PaymentStatuses::partiallyPaid()->id );
							}
						);
					} else {

						if ( $order_has_bump && $is_bump_product && ! $new_paid_amount ) {
							$pm->asAdministrator(
								function() use ( $order_model, $order_id ) {
									$result = $order_model->update_order_status( $order_id, OrderStatuses::partiallyFulfilled()->id );
									$result = $order_model->update_payment_status( $order_id, PaymentStatuses::partiallyPaid()->id );
								}
							);
						} else {
							$pm->asAdministrator(
								function() use ( $order_model, $order_id ) {
									$result = $order_model->update_order_status( $order_id, OrderStatuses::fulfilled()->id );
									$result = $order_model->update_payment_status( $order_id, PaymentStatuses::paid()->id );
								}
							);
						}

					}

				}

				if ( 'payment-plan' === $product_type_slug ) {

					$product_payment_detail = $order['line_items'][ $index ]['product_variant']['product']['payment_detail'];

					$payments_counter = intval( $product_payment_detail['num_payments'] );
					if ( (bool) $product_payment_detail['has_first_payment'] ) {
						$payments_counter -= 1;
					}

					if ( $payments_counter > 0 ) {
						$pm->asAdministrator(
							function() use ( $order_model, $order_id ) {
								$result = $order_model->update_payment_status( $order_id, PaymentStatuses::partiallyPaid()->id );
							}
						);
					} else {
						$pm->asAdministrator(
							function() use ( $order_model, $order_id ) {
								$result = $order_model->update_payment_status( $order_id, PaymentStatuses::paid()->id );
							}
						);
					}

					update_option( "nc/order_{$order_id}/num_payments_left", $payments_counter );

					// $order_model->update_attribute_value( // TODO: tbd
					// 	$order_id,
					// 	'remaining_payments_counter',
					// 	$payments_counter
					// );

					if ( $order_has_bump && ! $is_bump_product ) {
						// waiting for bump product payment
						$pm->asAdministrator(
							function() use ( $order_model, $order_id ) {
								$result = $order_model->update_order_status( $order_id, OrderStatuses::partiallyFulfilled()->id );
							}
						);
					} else {

						if ( $order_has_bump && $is_bump_product && ! $new_paid_amount ) {
							$pm->asAdministrator(
								function() use ( $order_model, $order_id ) {
									$result = $order_model->update_order_status( $order_id, OrderStatuses::partiallyFulfilled()->id );
									$result = $order_model->update_payment_status( $order_id, PaymentStatuses::partiallyPaid()->id );
								}
							);
						} else {
							$pm->asAdministrator(
								function() use ( $order_model, $order_id ) {
									$result = $order_model->update_order_status( $order_id, OrderStatuses::fulfilled()->id );
								}
							);
						}

					}
				}

			}

			if ( 'recurring' === $payment->sequenceType ) {

				if ( 'payment-plan' === $product_type_slug ) {

					// $remaining_payments_counter = $order_model->get_attribute_value( // TODO: tbd
					// 	$order_id,
					// 	'remaining_payments_counter',
					// );

					$remaining_payments_counter = get_option( "nc/order_{$order_id}/num_payments_left" );

					$payments_counter = intval( $remaining_payments_counter ) - 1;

					if ( $payments_counter <= 0 ) {
						$payments_counter = 0;

						if (
							$order_has_bump
							&& (
								$is_bump_product
								|| ( ! $is_bump_product && intval( get_post_field( 'bump_product_payment_numbers_left', $order_id ) ) )
							)
						) {
							// keep `partially-fulfilled` payment status
						} else {
							$pm->asAdministrator(
								function() use ( $order_model, $order_id ) {
									$result = $order_model->update_order_status( $order_id, OrderStatuses::fulfilled()->id );
									$result = $order_model->update_payment_status( $order_id, PaymentStatuses::paid()->id );
								}
							);
						}
					}

					update_option( "nc/order_{$order_id}/num_payments_left", $payments_counter );

					// $order_model->update_attribute_value( // TODO: tbd
					// 	$order_id,
					// 	'remaining_payments_counter',
					// 	$payments_counter
					// );

				}

			}

		} elseif ( $payment->isOpen() || $payment->isPending() ) {
			$pm->asAdministrator(
				function() use ( $order_model, $order_id ) {
					$result = $order_model->update_order_status( $order_id, OrderStatuses::onHold()->id );
					$result = $order_model->update_payment_status( $order_id, PaymentStatuses::pending()->id );
				}
			);
		} else {

			if (
				$order_has_bump
				&& (
					( $is_bump_product && floatval( $order['paid'] ) )
					|| ! $is_bump_product
				)
			) {
				$pm->asAdministrator(
					function() use ( $order_model, $order_id ) {
						$result = $order_model->update_order_status( $order_id, OrderStatuses::partiallyFulfilled()->id );
						$result = $order_model->update_payment_status( $order_id, PaymentStatuses::partiallyPaid()->id );
					}
				);
			} else {
				$pm->asAdministrator(
					function() use ( $order_model, $order_id ) {
						$result = $order_model->update_order_status( $order_id, OrderStatuses::unfulfilled()->id );
						$result = $order_model->update_payment_status( $order_id, PaymentStatuses::unpaid()->id );
					}
				);
			}

		}

    }

	/**
	 * @since   0.1.2
	 * @version 0.1.13
	 */
	public function create_shipping_address( $request ) {

		$profile_model = new ShippingProfileModel();
		$country_model = new CountryModel();

		$params = $request->get_params();

		$address_data = [
			'address' => trim( $params['address'] ),
			'city' => trim( $params['city'] ),
			'state' => trim( $params['state'] ),
			'zipcode' => trim( $params['zipcode'] ),
			'country_id' => $country_model->get_by_abbreviation( $params['country'] )['id'],
		];

		$new_address = $profile_model->store_address( $address_data );

		if ( empty( $new_address['id'] ) ) {
			return rest_ensure_response( [
				'success' => false,
				'message' => esc_html__( 'Shipping Address can not be created.', 'north-commerce' ),
			] );
		}

		if ( 1 === $profile_model->count_addresses() ) {
			$profile_model->assign_first_address_to_shipping_profiles( $new_address['id'] );
		}

		return rest_ensure_response( [
			'success' => true,
			'message' => esc_html__( 'Shipping Address created successfully.', 'north-commerce' ),
			'data' => $new_address,
		] );

	}

	/**
	 * @since   0.1.2
	 * @version 0.1.13
	 */
	public function update_shipping_address( $request ) {

		$profile_model = new ShippingProfileModel();
		$country_model = new CountryModel();

		$params = $request->get_params();

		$shipping_address = $profile_model->get_shipping_address_by_id( $params['id'] );

		if ( isset( $shipping_address['id'] ) ) {
			$address_data = [
				'id' => $shipping_address['id'],
				'address' => trim( $params['address'] ),
				'city' => trim( $params['city'] ),
				'zipcode' => trim( $params['zipcode'] ),
				'state' => trim( $params['state'] ),
				'country_id' => $country_model->get_by_abbreviation( $params['country'] )['id'],
			];

			$updated_address = $profile_model->store_address( $address_data );
		}

		if (
			empty( $shipping_address['id'] )
			|| empty( $updated_address['id'] )
		) {
			return rest_ensure_response( [
				'success' => false,
				'message' => esc_html__( 'Shipping Address can not be updated.', 'north-commerce' ),
			] );
		}

		return rest_ensure_response( [
			'success' => true,
			'message' => esc_html__( 'Shipping Address updated successfully.', 'north-commerce' ),
			'data' => $updated_address
		] );

	}

	/**
	 * @since   0.1.0
	 * @version 0.1.13
	 */
	public function delete_shipping_address( $request ) {

		$profile_model = new ShippingProfileModel();

		$address_id = sanitize_text_field( $request['id'] );

		$shipping_address = $profile_model->get_shipping_address_by_id( $address_id );

		$connected_shipping_profiles = $profile_model->list_by_shipping_address_id( $shipping_address['id'] );
		foreach ( $connected_shipping_profiles as $profile ) {
			$connected_profile_names = isset( $connected_profile_names )
				? $connected_profile_names . ', "' . $profile['name'] . '"'
				: '"' . $profile['name'] . '"';
		}

		if ( ! empty ( $connected_profile_names ) ) {
			return rest_ensure_response( [
				'success' => false,
				'message' => sprintf(
					esc_html__( 'Address can`t be deleted since it currently assigned to %s %s', 'north-commerce' ),
					$connected_profile_names,
					_n( 'Shipping Profile', 'Shipping Profiles', count( $connected_shipping_profiles )  )
				)
			] );
		}

		$profile_model->delete_address_by_id( $address_id );

		return rest_ensure_response( [
			'success' => true,
			'message' => esc_html__( 'Shipping Address deleted successfully.', 'north-commerce' ),
		] );

	}

	/**
	 * Setting a Shipping Address ID to Shipping Profile
	 *
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function set_shipping_profile_address( $request ) {

		$profile_model = new ShippingProfileModel();

		$profile_id = $request->get_param( 'id' );
		$address_id = $request->get_param( 'address_id' );

		$shipping_profile = $profile_model->get_by_id( $profile_id );

		if (
			empty( $shipping_profile['shipping_address']['id'] )
			|| intval( $address_id ) !== intval( $shipping_profile['shipping_address']['id'] )
		) {
			$profile_data = [
				'id' => $profile_id,
				'shipping_address_id' => $address_id,
			];

			$updated_profile = $profile_model->store( $profile_data );

			if ( empty( $updated_profile['id'] ) ) {
				return rest_ensure_response( [
					'success' => false,
					'message' => esc_html__( 'The Shipping address can`t be set.', 'north-commerce' ),
				] );
			}
		}

		return rest_ensure_response( [
			'success' => true,
			'message' => esc_html__( 'Address set successfully.', 'north-commerce' ),
		] );

	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function get_easypost_carrier_services( $request ) {

		$profile_model = new ShippingProfileModel();
		$easypost = new Easypost();

		$carrier_id = $request->get_param( 'id' );
		$address_id = $request->get_param( 'addressID' );
		$country_codes = $request->get_param( 'countryCodes' );

		$shipping_address = $profile_model->get_shipping_address_by_id( $address_id );
		$from_address = [
			'street1' => $shipping_address['address'],
			'city'    => $shipping_address['city'],
			'state'   => $shipping_address['state'],
			'zip'     => $shipping_address['zipcode'],
			'country' => $shipping_address['country']['abbreviation'],
		];

		$services = [];
		$dummy_addresses = Easypost::list_dummy_addresses();

		foreach ( $country_codes as $country_code ) {

			if ( isset( $dummy_addresses->{ $country_code } ) ) {
				$to_address = (array) $dummy_addresses->{ $country_code };
				$to_address['country'] = $country_code;
			} else {
				$US_default_address_processed = $US_default_address_processed ?? true;
				if ( $US_default_address_processed ) {
					// Prevent duplicate requests
					continue;
				}

				$to_address = (array) $dummy_addresses->US;
				$to_address['country'] = 'US';
			}

			$shipment_params = [
				'carrier_accounts' => [ $carrier_id ],
				'to_address' => $to_address,
				'from_address' => $from_address,
				'parcel' => [
					'weight' => 1
				]
			];

			try {

				$current_shipment_services = $easypost->get_shipment_services( $shipment_params );
				$services = array_merge( $services, $current_shipment_services );

			} catch ( Exception $exception ) {

				return rest_ensure_response( [
					'success' => false,
					'message' => $exception->getMessage(),
				] );

			}

		}

		$services = array_unique( $services, SORT_REGULAR );

		return rest_ensure_response( [
			'success' => true,
			'message' => __( 'List of Services for a specific carrier', 'north-commerce' ),
			'data' => $services
		] );

	}

	/**
	 * @since   0.1.0
	 * @version 0.1.13
	 */
	public function get_easypost_carriers( $request ) {

		$easypost = new Easypost();
		$profile_model = new ShippingProfileModel();

		$address_id = (int) sanitize_text_field( $request['addressID'] );
		$shiping_address = $profile_model->get_shipping_address_by_id( $address_id );

		$from_address = [
			'street1' => $shiping_address['address'],
			'city'    => $shiping_address['city'],
			'state'   => $shiping_address['state'],
			'zip'     => $shiping_address['zipcode'],
			'country' => $shiping_address['country']['abbreviation'],
		];

		$carrier_account_ids = [];
		$dummy_addresses = Easypost::list_dummy_addresses();
		foreach ( $request['countryCodes'] as $country_code ) {
			if ( isset( $dummy_addresses->{ $country_code } ) ) {
				$to_address = (array) $dummy_addresses->{ $country_code };
				$to_address['country'] = $country_code;
			} else {
				$US_default_address_processed = $US_default_address_processed ?? true;
				if ( $US_default_address_processed ) {
					// Prevent duplicate requests
					continue;
				}

				$to_address = (array) $dummy_addresses->US;
				$to_address['country'] = 'US';
			}

			$shipment_params = [
				'to_address' => $to_address,
				'from_address' => $from_address,
				'parcel' => [
					'weight' => 1
				]
			];

			try {

				$carrier_ids_for_current_shipment = $easypost->get_carrier_account_ids_for_shipment( $shipment_params );
				$carrier_account_ids = array_merge( $carrier_account_ids, $carrier_ids_for_current_shipment );

			} catch ( Exception $exception ) {

				return rest_ensure_response( [
					'success' => false,
					'message' => $exception->getMessage(),
				] );

			}
		}

		$carrier_account_ids = array_unique( $carrier_account_ids, SORT_REGULAR );

		$carriers = [];
		foreach ( $easypost->get_all_carrier_accounts() as $carrier ) {
			if ( ! in_array( $carrier->id, $carrier_account_ids, true ) ) {
				continue;
			}

			$carriers[] = [
				'id' => $carrier->id,
				'type' => $carrier->type,
				'description' => $carrier->description,
				'label' => 'UPSDAP' === $carrier->readable ? 'UPS' : $carrier->readable,
			];
		}

		return rest_ensure_response( [
			'success' => true,
			'message' => __( 'List of carriers depending on selected countries', 'north-commerce' ),
			'data' => $carriers
		] );

	}

	/**
	 * @deprecated 0.1.10
	 */
	public function shipping_profiles_remove_product( $request ) {

		$profile_model = new ShippingProfileModel();

		$result = [
			'success' => true,
			'message'=> esc_html__( 'Products where removed from other Shipping Profiles', 'north-commerce' )
		];

		$params = $request->get_params();

		$product_id = $params['product_id'];
		$shipping_profiles_ids = $params['shipping_profiles_ids'];
		$variation_index = $params['variation_index'];
		$item_type = $params['item_type'];

		foreach ( $shipping_profiles_ids as $shipping_profile_id ) {
			$shipping_profile = new North_Commerce_Shipping_Profile( $shipping_profile_id );
			if ( $shipping_profile['is_default'] && false /* $shipping_profile->is_all_variants_included() */ ) { // need revision
				// update_post_meta( $shipping_profile_id, 'products', $profile_model->list_related_products( $shipping_profile_id ) /*$shipping_profile->get_products()*/ );
				// update_post_meta( $shipping_profile_id, 'all_variants_included', 'false' );
			}

			$new_products = [];
			foreach ( $profile_model->list_related_products( $shipping_profile_id ) /*$shipping_profile->get_products()*/ as $product ) {
				if ( (int) $product['id'] === (int) $product_id ) {
					if ( $item_type === 'variant' ) {
						$product['partially'] = 'true';

						$product_variations = array();
						foreach ( $product['variations'] as $product_variation_index ) {
							if ( (int) $product_variation_index !== (int) $variation_index ) {
								$product_variations[] = $product_variation_index;
							}
						}

						if ( count( $product_variations ) > 0 ) {
							$product['variations'] = $product_variations;
							$new_products[] = $product;
						}
					}
				} else {
					$new_products[] = $product;
				}
			}

			// update_post_meta( $shipping_profile_id, 'products', $new_products ); // revise

		}

		return rest_ensure_response( $result );

	}

	public function get_permissions_check( WP_REST_Request $request ) {

		$user = wp_get_current_user();

		if ( $user instanceof WP_User && $user->has_cap( 'manage_options' ) ) {
			return true;
	    }

		$public_key = $request->get_param( 'public_key' );
		$secret_key = $request->get_param( 'secret_key' );

		if (
			$public_key === self::PUBLIC_KEY
			&& $secret_key === self::PRIVATE_KEY
		) {
            return true;
		}

        return false;
    }

}
