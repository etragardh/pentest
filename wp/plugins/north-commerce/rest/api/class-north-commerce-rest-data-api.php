<?php

define( 'NORTH_COMMERCE_REST_DATA_API_NAMESPACE', 'nc-data/v1' );

/**
 * Rest Data Api.
 *
 * Implementation of our data API
 *
 * @see     https://github.com/kelleymuro/north-commerce/wiki/Data-Api-Guide
 * @package north-commerce/rest/api
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.3
 * @version 0.1.21
 */
class North_Commerce_Rest_Data_Api {

	private $responder;

	function __construct() {
		$this->responder = new North_Commerce_Api_Responder();
	}

	public function registerRoutes() {
		$routes = [
			'/(?P<entity>[a-z-]+)' => [
				'GET' => 'listAll',
				'POST' => 'create',
				'params' => [ 'entity' ]
			],
			'/(?P<entity>[a-z-]+)/(?P<id>[a-z0-9]+)' => [
				'GET' => 'get',
				'POST' => 'update',
				'DELETE' => 'delete',
				'params' =>  [ 'entity', 'id' ]
			],
			'/(?P<parent>[a-z-]+)/(?P<id>[a-z0-9]+)/(?P<child>[a-z-]+)' => [
				'GET' => 'listBy',
				'POST' => false,
				'params' => [ 'parent', 'id', 'child' ]
			]
		];

		$validator = new North_Commerce_Api_Validator();

		$query_params = [
			'GET' => $this->responder->prepareQueryParams( [
				'limit', 'page', 'sort', 'filter', 'expand'
			], $validator ),
			'POST' =>  $this->responder->prepareQueryParams( [
				'expand'
			], $validator ),
			'DELETE' => []
		];

		$param_builder = function( $required_names, $query_params ) use ( $validator ) {
			$required_params = array_reduce( $required_names, function( $carry, $name ) use ( $validator ) {
				$carry[ $name ] = [
					'required' => true,
					'validate_callback' => [ $validator, 'validate'. ucfirst($name) ]
				];
				return $carry;
			}, [] );

			return $required_params + $query_params;
		};

		foreach ( $routes as $path => $route_defn ) {
			$rest_defn = [];
			foreach( [ 'GET', 'POST', 'DELETE' ] as $method ) {

				if ( empty( $route_defn[ $method ] ) ) {
					continue;
				}

				$rest_defn[] = [
					'methods' => $method,
					'callback' => [ $this, $route_defn[ $method ] ],
					'permission_callback' => '__return_true',
					'args' => $param_builder( $route_defn['params'], $query_params[ $method ] )
				];

			}
			register_rest_route( NORTH_COMMERCE_REST_DATA_API_NAMESPACE, $path, $rest_defn );
		}

	}

	public function listAll( $req ) {
		try {
			$parser = new North_Commerce_Api_Parser();
			$ctx = $this->responder->newRequestCtx( $req );
			$agent = North_Commerce_Db_Agent::instance();
			$ea = $agent->entityAccess();

			$limit = $this->responder->pager()->limit( $req ) + 1;
			$offset = $this->responder->pager()->offset( $req );
			$entity = $req->get_param( 'entity' );
			$expand = $req->get_param( 'expand' );

			$order_by = $req->has_param( 'sort' )
				? $parser->parseSort( $req->get_param( 'sort' ), $req )
				: 'id';

			$criteria = $req->has_param('filter')
				? $parser->parseFilter( $req->get_param( 'filter' ), $req )
				: [ 1 => 1 ];

			$table = $agent->entityToTableName( $entity );
			$value = $ea->list( $table, $criteria, [
				'limit' => $limit,
				'offset' => $offset,
				'order_by' => $order_by,
				'expand' => $expand
			] );

			return $this->responder->prepareResponse( $ctx, $value, [ 'paging' => true ] );
		} catch ( Exception $ex ) {
			return new WP_Error(
				'rest_invalid_list_request',
				$ex->getMessage(),
				[ 'status' => 400 ]
			);
		}
	}

	public function get( $req ) {
		try {
			$ctx = $this->responder->newRequestCtx( $req );
			$agent = North_Commerce_Db_Agent::instance();
			$ea = $agent->entityAccess();

			$entity = $req->get_param( 'entity' );
			$id  = $req->get_param( 'id' );
			$table = $agent->entityToTableName( $entity );
			$expand = $req->get_param( 'expand' );
			$value = $ea->get( $table, [ 'id' => $id ], [
				'expand' => $expand,
			] );
			return $this->responder->prepareResponse( $ctx, $value );
		} catch ( Exception $ex ) {
			return new WP_Error(
				'rest_invalid_get_request',
				$ex->getMessage(),
				[ 'status' => 400 ]
			);
		}
	}

	public function listBy( $req ) {
		try {

			$parser = new North_Commerce_Api_Parser();
			$ctx = $this->responder->newRequestCtx( $req );
			$agent = North_Commerce_Db_Agent::instance();
			$ea = $agent->entityAccess();

			$parent_id = $req->get_param('id');
			$parent_table = $agent->entityToTableName( $req->get_param( 'parent' ) );
			$child_slug = $agent->entityToTableName( $req->get_param( 'child' ) );

			$expand = $req->get_param('expand');
			$limit = $this->responder->pager()->limit( $req ) + 1;
			$offset = $this->responder->pager()->offset( $req );
			$order_by = $req->has_param( 'sort' )
				? $parser->parseSort( $req->get_param( 'sort' ), $req )
				: 'id';

			$criteria = $req->has_param( 'filter' )
				? $parser->parseFilter( $req->get_param( 'filter' ), $req )
				: [ 1 => 1 ];

			$parent_col = $agent->schema()->tableRefColumn( $child_slug, $parent_table, [ 'not_found' => false ] );
			$child_table = $agent->schema()->idRefTable( $parent_table, "{$child_slug}_id", [ 'not_found' => false ] );
			$value = false;
			if ( $parent_col ) {
				$criteria[$parent_col] = $parent_id;

				$value = $ea->list($child_slug, $criteria, [
					'limit' => $limit,
					'offset' => $offset,
					'order_by' => $order_by,
					'expand' => $expand
				]);
			} elseif ( $child_table ) {
				$parent = $ea->get( $parent_table, [ 'id' => $parent_id ] );
				$criteria['id'] = $parent ? $parent["{$child_slug}_id"] : -1;
				$value = $ea->get($child_table, $criteria, [
					'limit' => $limit,
					'offset' => $offset,
					'order_by' => $order_by,
					'expand' => $expand
				]);
			}

			return $this->responder->prepareResponse(
				$ctx,
				$value,
				[ 'paging' => true ]
			);

		} catch(Exception $ex) {
			return new WP_Error(
				'rest_invalid_list_request',
				$ex->getMessage(),
				['status' => 400]
			);
		}
	}

	public function create( $req ) {
		return $this->store( $req, false );
	}

	public function update( $req ) {
		return $this->store( $req, $req->get_param( 'id' ) );
	}

	private function store( $req, $id ) {
		$validator = new North_Commerce_Api_Validator();
		$body = $req->get_json_params();
		$ok = $validator->validateBody( $body, $req );
		$ctx = $this->responder->newRequestCtx( $req );
		$expand = $req->get_param( 'expand' );

		if ( ! $ok ) {
			return new WP_Error(
				'rest_invalid_param',
				'Invalid param: body',
				[ 'status' => 400 ]
			);
		}

		if ( isset( $body['id'] ) ) {
			return new WP_Error(
				'rest_invalid_param',
				'Invalid param: body.id',
				[ 'status' => 400 ]
			);
		}

		if ( $id ) {
			$body['id'] = $id;
		}

		$agent = North_Commerce_Db_Agent::instance();
		$table = $agent->entityToTableName( $req->get_param( 'entity' ) );
		$ea    = $agent->entityAccess();

		try {
			$entity = $ea->store( $table, $body, compact( 'expand' ) );
		} catch( Exception $ex ) {
			return new WP_Error(
				'rest_invalid_storage_request',
				$ex->getMessage(),
				[ 'status' => 400 ]
			);
		}

		return $this->responder->prepareResponse( $ctx, $entity );
	}

	public function delete( $req ) {
		$agent = North_Commerce_Db_Agent::instance();
		$ea    = $agent->entityAccess();
		$id    = $req->get_param('id');
		$table = $agent->entityToTableName($req->get_param('entity'));

		try {
			$ea->delete($table, ['id' => $id]);
		} catch(Exception $ex) {
			return new WP_Error(
				'reset_invalid_delete_request',
				$ex->getMessage(),
				['status' => 400]
			);
		}
		$ctx = $this->responder->newRequestCtx($req);
		return $this->responder->prepareResponse($ctx, true);
	}
}
