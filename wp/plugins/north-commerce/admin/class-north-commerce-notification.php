<?php

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Models\{
    NotificationModel,
    OrderModel
};
use NorthCommerce\Db\Collections\{
    OrderStatuses,
    PaymentStatuses,
    NotificationTypes
};
use NorthCommerce\Traits\Queueable;
use North_Commerce_Notification_Template_Variables as Template_Variables;
use North_Commerce_Settings as Settings;

/**
 * Notifications controller class.
 *
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.24
 */
class North_Commerce_Notification {

    use Queueable;

    protected $notification_model;
    protected $template_variables_controller;
    protected $notification;

    /**
     * @version 0.1.24
     */
    public function __construct() {
        $this->notification_model = new NotificationModel();

        add_action( 'north-commerce/order/created', [ $this, 'trigger_order_created' ] );
        add_action( 'north-commerce/order/status/fulfilled', [ $this, 'trigger_order_fulfilled' ] );
        $this->register_action_scheduler_actions();
    }

    /**
     * @since 0.1.24
     */
    protected function register_action_scheduler_actions() {
        add_action( 'north-commerce/schedule/email', [ $this, 'send_scheduled_notification_email' ], 10, 2 );
        add_action( 'north-commerce/schedule/sms', [ $this, 'send_notification_sms_action' ], 10, 2 ); // TODO: revise same as `send_scheduled_notification_email()`
    }

    /**
     * @version 0.1.19
     */
    public function toggle_desktop_notifications() {
        $status = sanitize_text_field( $_POST['status'] ?? '' );
        update_option( 'notification_desktop',  $status );

        $type_admin = $this->notification_model->get_type_by_slug( 'admin' );

        if ( empty( $type_admin['id'] ) ) {
            return wp_send_json_error();
        }

        $new_data = [
            'id' => $type_admin['id'],
            'desktop_enabled' => filter_var( $status, FILTER_VALIDATE_BOOLEAN )
        ];

        $updated = $this->notification_model->store_type( $new_data );

        empty( $updated['id'] )
            ? wp_send_json_error()
            : wp_send_json_success();
    }

    /**
     * @version 0.1.19
     */
    public function toggle_notification_email() {
        $slug = sanitize_text_field( $_POST['slug'] ?? '' );
        $status = sanitize_text_field( $_POST['status'] ?? '' );

        $notification = $this->notification_model->get_by_slug( $slug );

        if ( empty( $notification['id'] ) || ! $status ) {
            return wp_send_json_error();
        }

        $new_data = [
            'id' => $notification['id'],
            'email_enabled' => filter_var( $status, FILTER_VALIDATE_BOOLEAN )
        ];

        $updated = $this->notification_model->store( $new_data );

        empty( $updated['id'] )
            ? wp_send_json_error()
            : wp_send_json_success();
    }

    /**
     * @version 0.1.19
     */
    public function toggle_notification_sms() {
        $slug = sanitize_text_field( $_POST['slug'] ?? '' );
        $status = sanitize_text_field( $_POST['status'] ?? '' );

        $notification = $this->notification_model->get_by_slug( $slug );

        if ( empty( $notification['id'] ) || ! $status ) {
            return wp_send_json_error();
        }

        $new_data = [
            'id' => $notification['id'],
            'sms_enabled' => filter_var( $status, FILTER_VALIDATE_BOOLEAN )
        ];

        $updated = $this->notification_model->store( $new_data );

        empty( $updated['id'] )
            ? wp_send_json_error()
            : wp_send_json_success();
    }

    /**
     * @version 0.1.19
     */
    public function get_test_email( $subject, $body, $relation ) {
        $template_args = [
            'relation' => $relation,
            'is_test' => true,
        ];

        return [
            'email_subject' => $this->determine_template_variables( $subject, $template_args ),
            'email_body' => $this->determine_template_variables( $body, $template_args ),
        ];
    }

    /**
     * @version 0.1.21
     */
    public function determine_template_variables( string $template_string, array $args ) {
        $template_string = $template_string ?? '';

        if (
            ! empty( $args['relation'] )
            && Template_Variables::VAR_LIST[ $args['relation'] ]
        ) {
            if ( empty( $this->template_variables_controller ) ) {
                $this->template_variables_controller = new Template_Variables();
            }

            $template_string = $this->template_variables_controller->replace_template_variables( $template_string, $args );
        }

        return $template_string;
    }

    /**
     * @version 0.1.19
     */
    public function build_test_email() {
        $subject = sanitize_text_field( trim( $_POST['subject'] ?? '' ) );
        $body = wp_specialchars_decode( $_POST['body'] ?? '' );
        $relation = sanitize_text_field( $_POST['relation'] ?? '' );

        $email = $this->get_test_email( $subject, $body, $relation );

        wp_send_json_success( stripcslashes( '<h1>' .  $email['email_subject'] . '</h1>' . $email['email_body'] ) );
    }

    /**
     * @version 0.1.19
     */
    public function build_test_sms() {
        $sms_template = wp_specialchars_decode( $_POST['body'] ?? '' );
        $relation = sanitize_text_field( $_POST['relation'] ?? null );

        $sms_body = $this->determine_template_variables( $sms_template, [
            'relation' => $relation,
            'is_test' => true,
        ] );

        wp_send_json_success( $sms_body );
    }

    public function process_test_email() {
        $email = ! empty( $_POST['email'] )
            ? sanitize_text_field( trim( $_POST['email'] ) )
            : get_option( 'admin_email' );

        $is_valid_email = filter_var( $email, FILTER_VALIDATE_EMAIL );
        if ( ! $is_valid_email ) {
            wp_send_json_error( 'Unvalid email. Try again.' );
        }

        $subject = sanitize_text_field( trim( $_POST['subject'] ?? '' ) );
        $body = wp_specialchars_decode( $_POST['body'] ?? '' );
        $body = wp_unslash( $body );
        $relation = sanitize_text_field( $_POST['relation'] ?? null );

        return $this->send_email(
            $email,
            $this->get_test_email( $subject, $body, $relation )
        );
    }

    /**
     * @version 0.1.19
     */
    public function send_test_email() {
        $result = $this->process_test_email();

        wp_send_json( [
            'success' => $result,
            'data' => false === $result ? 'Error on email sending. Please check logs.' : '',
        ] );
    }

    public function process_test_sms() {
        $phone = sanitize_text_field( trim( $_POST['phone'] ?? '' ) );

        $sms_template = wp_specialchars_decode( $_POST['body'] ?? '' );
        $relation = sanitize_text_field( $_POST['relation'] ?? null );

        $sms_body = $this->determine_template_variables( $sms_template, [
            'relation' => $relation,
            'is_test' => true,
        ] );

        return $this->send_sms( $phone, $sms_body );
    }

    /** @deprecated 0.1.19 */
    public function send_test_sms() {
        $result = $this->process_test_sms();
        return wp_send_json( $result );
    }

    /**
     * @version 0.1.24
     */
    public function update_notification() {
        $slug = sanitize_text_field( $_POST['data']['notification-id'] );
        $notification = $this->notification_model->get_by_slug( $slug );

        if ( empty( $notification['id'] ) ) {
            return wp_send_json_error();
        }

		$validate_template = $this->get_test_email($_POST['data']['notification-email'], $_POST['data']['notification-email-body'], 'order');
		if ( empty( $validate_template ) ) {
            return wp_send_json_error();
        }

        $email_enabled = sanitize_text_field( $_POST['data']['notification-email'] ?? '' );
        $email_subject = sanitize_text_field( trim( $_POST['data']['notification-email-subject'] ?? '' ) );

        $recipients_list = sanitize_text_field( trim( $_POST['data']['notification-recipients-list'] ?? '' ) );
        $recipients = explode( ',', $recipients_list );
        $valid_recipients = [];

        foreach ( $recipients as $recipient ) {
            $recipient = trim( $recipient );

            if ( ! filter_var( $recipient, FILTER_VALIDATE_EMAIL ) ) {
                // Handle invalid email (log, skip, or return an error)
                continue;
            }

            $valid_recipients[] = $recipient;
        }

        $email_body = wp_specialchars_decode( trim( $_POST['data']['notification-email-body'] ?? '' ) );
        $email_body = str_replace( "\r", '', $email_body );
        $email_body = wp_unslash( $email_body );

        $sms_enabled = sanitize_text_field( $_POST['data']['notification-sms'] ?? '' );
        $sms_body = sanitize_textarea_field( $_POST['data']['notification-sms-content'] ?? '' );

        $new_data = [
            'id' => $notification['id'],
            'email_enabled' => filter_var( $email_enabled, FILTER_VALIDATE_BOOLEAN ),
            'email_subject' => $email_subject,
            'recipients_list' => implode( ', ', $valid_recipients ),
            'email_body' => htmlentities( $email_body, ENT_QUOTES|ENT_SUBSTITUTE|ENT_HTML5 ),
            'sms_enabled' => filter_var( $sms_enabled, FILTER_VALIDATE_BOOLEAN ),
            'sms_body' => trim( $sms_body )
        ];

        $update = $this->notification_model->store( $new_data );

        return ! empty( $update['id'] )
            ? wp_send_json_success()
            : wp_send_json_error();
    }

    /**
     * @since 0.1.24
     */
    public function send_scheduled_notification_email( $email_data_option_name ) {
        $serializes_data = get_option( $email_data_option_name );

        if ( ! $serializes_data ) {
            return;
        }

        delete_option( $email_data_option_name );
        $notification_data = unserialize( $serializes_data );
        return $this->send_notification_email_action(
            $notification_data['email'],
            $notification_data['notification'],
        );
    }

    /**
     * @version 0.1.24
     */
    public function send_notification_email_action( $email, $notification ) {
        if (
            empty( $notification['email_subject'] )
            || empty( $notification['email_body'] )
        ) {
            return false;
        }

        $headers = [
            'MIME-Version: 1.0',
            'Content-Type: text/html; charset=UTF-8',
            'From: ' . North_Commerce_Settings::get_company_name() . '<' . get_option( 'admin_email' ) . '>',
        ];

        $result = wp_mail(
            $email,
            $notification['email_subject'],
            $notification['email_body'],
            $headers
        );

        return $result;
    }

    /**
     * @version 0.1.24
     */
    private function send_email( $email, $notification ) {
        $disable_email_schedule = defined( 'DISABLE_EMAIL_SCHEDULE' ) ? DISABLE_EMAIL_SCHEDULE : false;

        // temporary define until UI is in place
        if (
            ! $disable_email_schedule
            && Settings::get_scheduler_status( 'email' )
        ) {
            $email_data_option_name = 'north-commerce/schedule/email/' . microtime( true );
            update_option(
                $email_data_option_name,
                serialize( compact( 'email', 'notification' ) )
            );
            $result = $this->schedule_single_action( 'north-commerce/schedule/email', compact(
                'email_data_option_name',
            ) );
        } else {
            $result = $this->send_notification_email_action( $email, $notification );
        }

        return $result;
    }

    public function send_notification_sms_action( $phone, $sms_body ) {
        $twilio = new North_Commerce_Twilio();

        if ( ! $twilio->is_connected() ) {
            return [
                'success' => false,
                'data' => 'Connect Twilio on <a href="' . get_admin_url( null, 'admin.php?page=north-commerce-integration' ) . '" target="_blank">Integration tab</a>.',
            ];
        }

        $sms_result = $twilio->send_sms( $phone, $sms_body );

        return $sms_result;
    }

    /**
     * @version 0.1.24
     */
    protected function send_sms( $phone = null, $sms_body = '' ) {
        // temporary define until UI is in place
        if ( Settings::get_scheduler_status( 'sms' ) === true ) {
            $result = $this->schedule_single_action( 'north-commerce/schedule/sms', [
                'phone' => $phone,
                'sms_body' => $sms_body
            ] );
        } else {
            $result = $this->send_notification_sms_action( $phone, $sms_body );
        }

        return $result;
    }

    /**
     * @version 0.1.24
     */
    public function send_notifications( $notification_slug, array $notification_data ) {
        if ( ! $notification_slug ) {
            // Bailout.
            return;
        }

        $this->notification = $this->notification_model->get_by_slug( $notification_slug );
        $this->notification['data'] = $notification_data;

        if (
            empty( $this->notification['id'] )
            || empty( $this->notification['data']['relation'] )
        ) {
            throw new Exception( 'Requiered notification arguments are missed.' );
        }

        $this->send_notifications_email();
        $this->send_notifications_sms();
        $this->send_notifications_desktop();
    }

    /**
     * @since 0.1.24
     */
    protected function send_notifications_email() {
        $recipient_emails = $this->get_recipient_emails();
        foreach ( $recipient_emails as $email ) {
            $this->send_email( $email, [
                'email_subject' => $this->determine_template_variables( $this->notification['email_subject'], $this->notification['data'] ),
                'email_body' => $this->determine_template_variables( $this->notification['email_body'], $this->notification['data'] ),
            ] );
        }
    }

    /**
     * @since 0.1.24
     */
    protected function get_recipient_emails():array {
        if ( ! $this->notification['email_enabled'] ) {
            return [];
        }

        $recipient_emails_list = [];
        $notification_type_id = $this->notification['notification_type']['id'];

        if ( NotificationTypes::customer()->id === $notification_type_id ) {
            $recipient_emails_list[] = $this->notification['data']['email'];
        }

        if ( NotificationTypes::admin()->id === $notification_type_id ) {
	        if ( $this->notification['recipients_list'] ) {
		        $notification_recipients = explode( ',', $this->notification['recipients_list'] );
		        if ( sizeof( $notification_recipients ) > 0 ) {
			        $recipient_emails_list = array_merge( $recipient_emails_list, $notification_recipients );
		        }
	        }
        }

        return $recipient_emails_list;
    }

    /**
     * @since   0.1.19
     * @version 0.1.19
     */
    public function trigger_order_created( $order_id ) {
        $order_model = new OrderModel();
        $order = $order_model->get_by_id( $order_id );

        if ( empty( $order['id'] ) ) {
            // Bailout.
            return;
        }

        $order_status = $order['order_status_id'];
        $payment_status = $order['payment_status_id'];

        $db_order_statuses = [
            'cretated' => OrderStatuses::created()->id,
            'fulfilled' => OrderStatuses::fulfilled()->id,
            'unfulfilled' => OrderStatuses::unfulfilled()->id,
        ];
        $db_payment_statuses = [
            'paid' => PaymentStatuses::paid()->id,
            'void' => PaymentStatuses::void()->id,
            'unpaid' => PaymentStatuses::unpaid()->id,
            'partiallyPaid' => PaymentStatuses::partiallyPaid()->id,
        ];

        switch ( true ) {
            case $order_status === $db_order_statuses['cretated'] :
            case $order_status === $db_order_statuses['fulfilled'] && $payment_status === $db_payment_statuses['paid'] :
            case $order_status === $db_order_statuses['fulfilled'] && $payment_status === $db_payment_statuses['partiallyPaid'] :
            default:
                $customer_notification_slug = 'order_confirmation';
                $admin_notification_slug = 'new_order';
                break;

            case $order_status === $db_order_statuses['unfulfilled'] && $payment_status === $db_payment_statuses['void'] :
            case $order_status === $db_order_statuses['unfulfilled'] && $payment_status === $db_payment_statuses['unpaid'] :
                $customer_notification_slug = 'payment_error';
                $admin_notification_slug = null;
                break;
        }

        $customer_notification_data = [
            'order' => $order,
            'relation' => 'order',
            'email' => $order['customer']['email'],
            'phone' => $order['customer']['phone'],
        ];
        $this->send_notifications( $customer_notification_slug, $customer_notification_data );

        $admin_notification_data = [
            'order_id' => $order['id'],
            'relation' => 'order',
            'email' => get_option( 'admin_email' ),
            'phone' => null // TODO:
        ];
        $this->send_notifications( $admin_notification_slug, $admin_notification_data );
    }

    /**
     * @since   0.1.19
     * @version 0.1.19
     */
    public function trigger_order_fulfilled( $order_id ) {
        $order_model = new OrderModel();
        $order = $order_model->get_by_id( $order_id );

        if ( empty( $order['id'] ) ) {
            // Bailout.
            return;
        }

        $order_status = $order['order_status_id'];

        $db_order_statuses = [
            'fulfilled' => OrderStatuses::fulfilled()->id,
        ];

        if ( $order_status !== $db_order_statuses['fulfilled'] ) {
            return;
        }

        $customer_notification_data = [
            'order' => $order,
            'relation' => 'order',
            'email' => $order['customer']['email'],
            'phone' => $order['customer']['phone'],
        ];
        $this->send_notifications( 'shipping_confirmation', $customer_notification_data );
    }

    /**
     * @since 0.1.24
     */
    protected function send_notifications_sms() {
        if (
            ! $this->notification['sms_enabled']
            || empty( $this->notification['data']['phone'] )
            || ! $this->notification['sms_body']
        ) {
            return;
        }

        $this->send_sms(
            $this->notification['data']['phone'],
            $this->determine_template_variables( $this->notification['sms_body'], $this->notification['data'] )
        );
    }

    protected function send_notifications_desktop() {
        if ( ! $this->notification['notification_type']['desktop_enabled'] ) {
            return;
        }

        // TODO: add logic
    }


}
