/**
 * @since   0.1.24
 * @version 0.1.24
 */
export class LocalDelivery {

    constructor() {
        this.determineVariables()
        this.reconfigureLocalDeliveryContainer()
        this.reconfigureRateManagerPopup()
        this.reconfigureTemplates()
        this.setListeners()
        this.validateLocalDeliveryForm()
    }

    determineVariables() {
        const shippingProfileID = new URL(location).searchParams.get('local-delivery')
        this.restEndpoint = `${ajax_object.rest_url}/shipping-profile/${shippingProfileID}`
        this.localDeliveryContainer = document.querySelector('.local-delivery-profile')
        this.zoneManager = document.querySelector('#delivery-zone-manager-modal form.local-delivery-zone')
        this.rateManager = document.querySelector('form.shipping-zone-add-rate-popup')

        this.determineDeliveryContainerVariables()
        this.determinePopupVariables()
    }

    determineDeliveryContainerVariables() {
        if (!this.localDeliveryContainer) {
            throw new Error('Local Delivery Form is absent')
        }

        this.localDeliveryContainer.profile = this.localDeliveryContainer.querySelector('#shipping_profile_data').value
        this.localDeliveryContainer.createZoneHandlerButton = this.localDeliveryContainer.querySelector('.create_shipping_zone__handler')
        this.localDeliveryContainer.zonesListContainer = this.localDeliveryContainer.querySelector('.shipping-zone-list')
        this.localDeliveryContainer.errorContainer = this.localDeliveryContainer.querySelector('.admin-popup__notice .north-error')
        this.localDeliveryContainer.loader = this.localDeliveryContainer.querySelector('.shipping-profile-wait')
        this.localDeliveryContainer.submitBtn = this.localDeliveryContainer.querySelector('.btn--submit')
    }

    determinePopupVariables() {
        this.determineZoneManagerPopupVariables()
        this.determineRateManagerPopupVariables()
    }

    determineZoneManagerPopupVariables() {
        if (!this.zoneManager) {
            throw new Error('Zone Manager is absent')
        }

        this.zoneManager.zoneIdInput = this.zoneManager.querySelector('[name="shipping_zone_id"]')
        this.zoneManager.loader = this.zoneManager.querySelector('.admin-popup__header .loader')
        this.zoneManager.zoneNameInput = this.zoneManager.querySelector('#delivery-zone-name')
        this.zoneManager.searchInput = this.zoneManager.querySelector('#delivery-country-filter-name')
        this.zoneManager.regionsContainer = this.zoneManager.querySelector('.popup-countries-list')
        this.zoneManager.countriesList = this.zoneManager.querySelectorAll('[data-level="country"]')
        this.zoneManager.cancelBtn = this.zoneManager.querySelector('.btn--cancel')
        this.zoneManager.submitBtn = this.zoneManager.querySelector('.local-delivery-submit')

        this.zoneManager.selectors = {
            region: '[data-level="region"]',
            country: '[name="applied_countries[]"]',
        }
    }

    determineRateManagerPopupVariables() {
        if (!this.rateManager) {
            throw new Error('Rate Manager is absent')
        }

        this.rateManager.configuration = {
            internal: this.rateManager.querySelector('.rate-type-configuration.internal'),
            easypost: this.rateManager.querySelector('.rate-type-configuration.easypost'),
        }
    }

    reconfigureLocalDeliveryContainer() {
        ensureRequieredAttributesForZoneHandlerButtons.call(this)
        removeEasypostRatesTables.call(this)

        function ensureRequieredAttributesForZoneHandlerButtons() {
            this.localDeliveryContainer
                .querySelectorAll('.zone-item__header__actions__edit')
                .forEach((btn) => this.addZoneManagerOpenAttribute(btn))
        }

        function removeEasypostRatesTables() {
            this.localDeliveryContainer
                .querySelectorAll(`.rates-table.easypost`)
                .forEach((el) => el.remove())
        }
    }

    reconfigureRateManagerPopup() {
        removeEasypostConfigurationSections.call(this)

        function removeEasypostConfigurationSections() {
            this.rateManager
                .querySelectorAll('[name="rate_calculation"]')
                .forEach((input) => {
                    if ('internal' === input.value) {
                        input.checked = true
                    }
                    if ('easypost' === input.value) {
                        input.closest('.rate-type').remove()
                    }
                })

            this.rateManager.configuration.easypost.remove()
        }
    }

    reconfigureTemplates() {
        reconfigureRateItemTemplate()

        function reconfigureRateItemTemplate() {
            if (!NorthCommerce?.templates?.zone) {
                throw new Error('Zone Item template is absent')
            }

            NorthCommerce.templates.zone
                .querySelector('.rates-table.easypost')
                ?.remove()
        }
    }

    setListeners() {
        this.setLocalDeliveryListeners()
        this.setPopupsListeners()
    }

    setLocalDeliveryListeners() {
        setZoneManagerPopupOpenListener.call(this)
        setSubmitEventListener.call(this)

        function setZoneManagerPopupOpenListener() {
            this.localDeliveryContainer.addEventListener('click', handleOpenClick.bind(this))

            function handleOpenClick({target}) {
                if (
                    target.classList.contains('create_shipping_zone__handler')
                    || null !== target.closest('.create_shipping_zone__handler')
                ) {
                    openZoneManagerForCreating.call(this)
                }

                if (
                    target.classList.contains('zone-item__header__actions__edit')
                    || null !== target.closest('.zone-item__header__actions__edit')
                ) {
                    openZoneManagerForEditing.call(this, target)
                }
            }

            function openZoneManagerForCreating() {
                resetZoneManagerForm.call(this)
                changeSubmitButtonText.call(this, 'create')
            }

            function openZoneManagerForEditing(target) {
                const zoneItem = target.closest('.zone-item')
                const zoneDataJSON = zoneItem.dataset.options
                let zoneData
                if (zoneDataJSON) {
                    zoneData = JSON.parse(zoneDataJSON)
                }

                resetZoneManagerForm.call(this, zoneData)
                this.zoneManager.zoneIdInput.value = zoneItem.dataset.id
                syncRegions.call(this, zoneData)
                changeSubmitButtonText.call(this, 'edit')

                function syncRegions(zoneData = {}) {
                    const zoneRegions = zoneData.regions

                    if (!zoneRegions) {
                        return
                    }

                    const countriesContainer = this.zoneManager.querySelector('.popup-countries-list')

                    for (const regionSlug in zoneRegions) {
                        for (const countrySlug in zoneRegions[regionSlug]) {
                            const countryInput = countriesContainer.querySelector(
                                `#region-${regionSlug} ${this.zoneManager.selectors.country}[value="${countrySlug}"]`
                            )

                            if (!countryInput) {
                                continue
                            }

                            const zipcodeInput = countryInput.closest('[data-level="country"]').querySelector('.chip__value-input')

                            zoneRegions[regionSlug][countrySlug].forEach((zipcode) => {
                                zipcodeInput.value = zipcode
                                this.addZoneManagerCountryZipcode(zipcodeInput)
                            })
                        }
                    }
                }
            }

            function resetZoneManagerForm(zoneData = {}) {
                this.zoneManager.zoneIdInput.value = ''
                this.zoneManager.loader.style.display = 'none'
                this.zoneManager.zoneNameInput.value = zoneData.name ?? ''
                this.zoneManager.searchInput.value = ''
                resetCountriesZipcodes.call(this)
                this.resetZoneManagerRegionsList()
                this.zoneManager.submitBtn.disabled = true

                function resetCountriesZipcodes() {
                    this.zoneManager
                        .querySelectorAll(`${this.zoneManager.selectors.country}:checked`)
                        .forEach((countryInput) => {
                            countryInput.checked = false

                            countryInput
                                .closest('.country__item')
                                .querySelectorAll('[data-chip-id]')
                                .forEach((chip) => chip.remove())
                        })
                }
            }

            function changeSubmitButtonText(mode = 'create') {
                let btnText = this.zoneManager.submitBtn.dataset.ncValueCreate
                if ('edit' === mode) {
                    btnText = this.zoneManager.submitBtn.dataset.ncValueEdit
                }
                this.zoneManager.submitBtn.value = btnText
            }
        }

        function setSubmitEventListener() {
            this.localDeliveryContainer.submitBtn.addEventListener('click', this.handleLocalDeliverySubmit.bind(this))
        }
    }

    setPopupsListeners() {
        this.setZoneManagerPopupListeners()
    }

    setZoneManagerPopupListeners() {
        setNameInputChangeEventListener.call(this)
        setCountriesSearchFunctionality.call(this)
        setRegionsToggleClickListener.call(this)
        setCountriesChangeListener.call(this)
        setZipcodesEvents.call(this)
        setZoneSubmitListener.call(this)

        function setNameInputChangeEventListener() {
            this.zoneManager.zoneNameInput.addEventListener('input', this.validateZoneManager.bind(this))
        }

        function setCountriesSearchFunctionality() {
            if (!this.zoneManager.searchInput) {
                throw new Error('There in no search input in Zone Manager Modal window')
            }

            this.zoneManager.searchInput.addEventListener('input', handleCountriesSearch.bind(this))

            function handleCountriesSearch({target}) {
                this.resetZoneManagerRegionsList()
                const searchText = target.value.toLowerCase()

                if (!searchText) {
                    return
                }

                this.zoneManager.countriesList.forEach((country) => {
                    const hasCollision = country.dataset.countryName.toLowerCase().includes(searchText)

                    if (hasCollision) {
                        const regionSelector = this.zoneManager.selectors.region
                        country.closest(regionSelector).classList.add('opened')
                        return
                    }

                    country.classList.add('hide')
                })

                function unfoldAllRegions() {
                    this.zoneManager.regionsContainer
                        .querySelectorAll(`:scope > ${this.zoneManager.selectors.region}:not(.opened)`)
                        .forEach((region) => region.classList.add('opened'))
                }
            }
        }

        function setRegionsToggleClickListener() {
            this.zoneManager.addEventListener('click', handleRegionHeaderClick.bind(this))

            function handleRegionHeaderClick({target}) {
                const regionHeaderClass = 'region__header'
                if (
                    !target.classList.contains(regionHeaderClass)
                    && null === target.closest(`.${regionHeaderClass}`)
                ) {
                    return
                }

                const regionSlug = target.dataset.region
                    ?? target.closest(`.${regionHeaderClass}`).dataset.region

                this.toggleZoneManagerRegionVisibility(regionSlug)
            }
        }

        function setCountriesChangeListener() {
            this.zoneManager.addEventListener('change', handleCountryChange.bind(this))

            function handleCountryChange({target}) {
                if (target.name !== this.zoneManager.selectors.country) {
                    return
                }

                this.validateZoneManager()
            }
        }

        function setZipcodesEvents() {
            this.zoneManager.regionsContainer.addEventListener('focusout', ({target}) => {
                if (!target.classList.contains('chip__value-input')) {
                    return
                }

                this.addZoneManagerCountryZipcode(target)
            })

            this.zoneManager.regionsContainer.addEventListener('keydown', (e) => {
                if (!e.target.classList.contains('chip__value-input')) {
                    return
                }

                if (
                    'Tab' === e.key
                    || 'Enter' === e.key
                    || ',' === e.key
                ) {
                    e.preventDefault()
                    this.addZoneManagerCountryZipcode(e.target)
                }
            })

            this.zoneManager.regionsContainer.addEventListener('click', ({target}) => {
                if (!target.classList.contains('chip__remove')) {
                    return
                }

                removeZipcode.call(this, target)
            })

            function removeZipcode(removeElement) {
                const zipcodeElement = removeElement.closest('.chip__value')
                zipcodeElement.parentNode.removeChild(zipcodeElement)
                this.validateZoneManager()
            }
        }

        function setZoneSubmitListener() {
            this.zoneManager.addEventListener('submit', handleZoneSubmitEvent.bind(this))

            function handleZoneSubmitEvent(e) {
                e.preventDefault()
                disableZoneManager.call(this)

                const zoneID = this.zoneManager.zoneIdInput.value
                const newZoneItem = fllZoneItemTemplateWithData.call(this)

                zoneID
                    ? updateZoneItem.call(this, zoneID)
                    : addZoneItem.call(this)

                hideEmptyListNotice.call(this)
                dispatchZonesRatesRerenderEvent.call(this)
                this.zoneManager.cancelBtn.click() // close modal

                function updateZoneItem(zoneID) {
                    const oldZoneItem = this.localDeliveryContainer.zonesListContainer.querySelector(`.zone-item-${zoneID}`)

                    if (!oldZoneItem) {
                        return
                    }

                    let internalRatesJSON = ''

                    oldZoneItem
                        .querySelectorAll('.rate-item')
                        .forEach((rateItem) => {
                            const rateOptions = JSON.parse(rateItem.dataset.options)
                            if ('internal' === rateOptions.calculation) {
                                internalRatesJSON = internalRatesJSON
                                    ? `${internalRatesJSON},${rateItem.dataset.options}`
                                    : rateItem.dataset.options
                            }
                            if ('easypost' === rateOptions.calculation) {
                                throw new Error('Easypost is not compatible with Local delivery zones')
                            }
                        })

                    oldZoneItem.replaceWith(newZoneItem)

                    this.localDeliveryContainer
                        .querySelector(`.zone-item-${zoneID} .rates-table.internal`)
                        .dataset.originalRates = `[${internalRatesJSON}]`
                }

                function addZoneItem() {
                    this.localDeliveryContainer
                        .zonesListContainer
                        .insertAdjacentElement('beforeend', newZoneItem)
                }

                function hideEmptyListNotice() {
                    this.localDeliveryContainer.querySelector('.shipping-zone-list__empty').classList.add('hide')
                }

                function dispatchZonesRatesRerenderEvent() {
                    const rerenderRates = new CustomEvent('rerender-zones-rates-table', {
                        detail: { zoneID },
                        bubbles: true,
                    })
                    this.localDeliveryContainer.zonesListContainer.dispatchEvent(rerenderRates)
                }
            }

            function fllZoneItemTemplateWithData() {
                const zoneTemplate = NorthCommerce.templates.zone.cloneNode(true)

                if (!zoneTemplate) {
                    throw new Error('Zone Item template is absent')
                }

                const zoneData = getDeliveryZoneData.call(this)

                zoneTemplate.dataset.id = zoneData.id
                zoneTemplate.dataset.options = JSON.stringify(zoneData)
                zoneTemplate.classList.add(`zone-item-${zoneData.id}`)
                zoneTemplate.querySelector('.zone-item__region').textContent = zoneData.name
                zoneTemplate.querySelector('.zone-item__countries').textContent = getZoneRegionsList.call(this, zoneData)

                zoneTemplate.querySelector('.rates-table.internal').classList.add('hide')
                if (zoneTemplate.querySelector('.rates-table.easypost')) {
                    throw new Error('Easypost is not compatible with Local Delivery')
                }
                zoneTemplate.querySelector('.zone-item__notice').classList.remove('hide')

                modifyZoneEditButton.call(this)

                return zoneTemplate

                function modifyZoneEditButton() {
                    const editButton = zoneTemplate.querySelector('.zone-item__header__actions__edit')
                    this.addZoneManagerOpenAttribute(editButton)
                }
            }

            function disableZoneManager() {
                this.zoneManager.loader.style.display = 'block'
                this.zoneManager.submitBtn.disabled = true
            }

            function getDeliveryZoneData() {
                const zoneId = this.zoneManager.zoneIdInput.value

                const data = {
                    id: zoneId ? zoneId : `new-zone-${new Date().valueOf()}`,
                    name: this.zoneManager.zoneNameInput.value.trim(),
                    regions: {}
                }

                const selectedCountries = this.zoneManager.querySelectorAll(`${this.zoneManager.selectors.country}:checked`)
                selectedCountries.forEach((countryInput) => {
                    const countrySlug = countryInput.value
                    const chips = countryInput.closest('[data-level="country"]').querySelectorAll('.chip__value')

                    const zipCodes = Array.from(chips).map((chip) => {
                        return chip.dataset.chipId.split('-')[1] // assuming the format is 'CountryCode-ZipCode'
                    })

                    if (!zipCodes.length) {
                        return
                    }

                    const regionSlug = countryInput.closest(this.zoneManager.selectors.region).dataset.region
                    if (!data.regions[regionSlug]) {
                        data.regions[regionSlug] = {}
                    }

                    data.regions[regionSlug][countrySlug] = zipCodes
                })

                return data
            }

            function getZoneRegionsList({regions}) {
                const validCountriesList = ajax_object.countriesList
                let regionsList = ''

                for (const regionSlug in regions) {
                    for (const countrySlug in regions[regionSlug]) {
                        if (!validCountriesList[countrySlug]) {
                            continue
                        }

                        regionsList += `${validCountriesList[countrySlug]}: ${regions[regionSlug][countrySlug].join(', ')}; `
                    }
                }

                if (!regionsList) {
                    console.warn('Empty regions list')
                }

                return regionsList
            }
        }
    }

    validateLocalDeliveryForm() {
        if (!this.localDeliveryContainer.profile) {
            return
        }

        const profile = JSON.parse(this.localDeliveryContainer.profile)

        if (profile.shipping_address_id) {
            this.localDeliveryContainer.submitBtn.removeAttribute('disabled')
        }
    }

    // Zone Manager Methods

    validateZoneManager() {
        const hasName = this.zoneManager.zoneNameInput.value
        const hasZipcodes = this.zoneManager.querySelector('.chip__value[data-chip-id]')

        this.zoneManager.submitBtn.disabled = !(hasName && hasZipcodes)
    }

    resetZoneManagerRegionsList() {
        foldAllRegions.call(this)
        revealAllCountries.call(this)

        function foldAllRegions() {
            this.zoneManager.regionsContainer
                .querySelectorAll(`:scope > ${this.zoneManager.selectors.region}.opened`)
                .forEach((region) => region.classList.remove('opened'))
        }

        function revealAllCountries() {
            this.zoneManager.regionsContainer
                .querySelectorAll('[data-level="country"].hide')
                .forEach((country) => {
                    country.classList.remove('hide')
                })
        }
    }

    addZoneManagerOpenAttribute(element) {
        element.dataset.ncCustomPopup = '#delivery-zone-manager-modal'
    }

    toggleZoneManagerRegionVisibility(regionSlug, forceOpen) {
        const containerClass = `${this.zoneManager.selectors.region}.region-${regionSlug}`
        const regionContainer = this.zoneManager.querySelector(containerClass)

        if (!regionContainer) {
            throw new Error('Uknown region for search')
        }

        const openClass = 'opened'

        if (forceOpen) {
            regionContainer.classList.add(openClass)
            return
        }

        regionContainer.classList.toggle(openClass)
    }

    addZoneManagerCountryZipcode(input) {
        const chipValue = input.value.trim()

        if (!chipValue) {
            return
        }

        if (zipcodeIsNotUnique(input)) {
            return resetZipcodeInput()
        }

        const countryItem = input.closest('.country__item')
        const chipHTML = getFilledChipTemplate()

        const parser = new DOMParser()
        const chipElement = parser.parseFromString(chipHTML, 'text/html').body.firstChild

        const chipsContainer = input.parentNode
        chipsContainer.insertBefore(chipElement, input)

        checkCountryInput.call(this)
        unfoldRegion.call(this)
        resetZipcodeInput.call(this)
        this.validateZoneManager()

        function zipcodeIsNotUnique(input) {
            const zipcodes = input.parentElement.querySelectorAll('.chip__name')
            return zipcodes.length
                ? Array.from(zipcodes).some((el) => el.textContent === input.value)
                : false
        }

        function getFilledChipTemplate() {
            const countrySlug = countryItem ? countryItem.getAttribute('data-country-slug') : ''
            const newChipId = `${countrySlug}-${chipValue}`
            return `
                <div class="chip__value" data-chip-id="${newChipId}">
                    <span class="chip__name">${chipValue}</span>
                    <span class="chip__remove"></span>
                </div>
            `;
        }

        function checkCountryInput() {
            countryItem.querySelector('[type=checkbox]').checked = true
        }

        function unfoldRegion() {
            const regionElement = countryItem.closest(this.zoneManager.selectors.region).querySelector('[data-region]')
            const regionSlug = regionElement.dataset.region
            this.toggleZoneManagerRegionVisibility(regionSlug, true)
        }

        function resetZipcodeInput() {
            input.value = ''
        }
    }

    // Main methods

    async handleLocalDeliverySubmit(e) {
        e.preventDefault()
        disableLocalDeliveryForm.call(this)
        removeErrors.call(this)

        return fetch(this.restEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-WP-Nonce': ajax_object.rest_nonce,
                'NC-Profile': 'local',
            },
            body: this.getDeliveryZonesDataJSON(),
        })
            .then((response) => response.json())
            .then((response) => {
                if (
                    'rest_forbidden' === response.code
                    || !response.success
                ) {
                    const errorText = response.message ?? response.data ?? 'internal error'
                    return showError.call(this, errorText)
                }

                if (response.redirect) {
                    location.href = response.redirect
                }
            })
            .catch((error) => showError.call(this, error.toString()))
            .finally(() => enableLocalDeliveryForm.call(this))

        function disableLocalDeliveryForm() {
            this.localDeliveryContainer.submitBtn.disabled = true
            this.localDeliveryContainer.loader.style.display = 'block'
        }

        function enableLocalDeliveryForm() {
            this.localDeliveryContainer.submitBtn.removeAttribute('disabled')
            this.localDeliveryContainer.loader.style.display = 'none'
        }

        function showError(errortext) {
            this.localDeliveryContainer.errorContainer.textContent = errortext
            this.localDeliveryContainer.errorContainer.style.display = errortext ? 'block' : 'none'

            scrollTo({
                top: document.body.scrollHeight,
                left: 0,
                behavior: 'smooth'
            })
        }

        function removeErrors() {
            return showError.call(this, '')
        }
    }

    getDeliveryZonesDataJSON() {
        const deliveryZonesData = {}

        this.localDeliveryContainer.zonesListContainer
            .querySelectorAll('.zone-item')
            .forEach((zoneItem) => {
                if (!zoneItem.dataset.options) {
                    throw new Error('Zone item options are absent')
                }

                const zoneID = zoneItem.dataset.id
                deliveryZonesData[zoneID] = {
                    zoneData: zoneItem.dataset.options,
                    ratesData: getRatesData(zoneItem),
                    zoneInstructions: getDeliveryInstructions(zoneItem),
                }
            })

        return JSON.stringify(deliveryZonesData)

        function getRatesData(zoneItem) {
            const ratesData = []

            zoneItem
                .querySelectorAll('.rate-item')
                .forEach((rateItem) => {
                    if (!rateItem.dataset.options) {
                        throw new Error('Rate item options are absent')
                    }

                    ratesData.push(rateItem.dataset.options)
                })

            return ratesData
        }

        function getDeliveryInstructions(zoneItem) {
            return zoneItem
                .querySelector('.zone-item__instructions')
                .value
        }
    }

}
