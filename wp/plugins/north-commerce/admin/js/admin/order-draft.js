/**
 * Order Draft Page
 *
 * @since   0.1.24
 * @version 0.1.25
 */
export class OrderDraft {

    /** @version 0.1.25 */
    constructor() {
        if (!this.isDependenciesReachable()) {
            return this.waitForDependecies()
        }

        this.determineVariables()
        this.hydratePage()
        this.setListeners()
        this.enableActionButtons()
        this.ensureChekoutManagerEntities()
    }

    /** @since 0.1.25 */
    isDependenciesReachable() {
        OrderDraft.startTime = OrderDraft.startTime ?? Date.now()

        const dependencies = [
            typeof northCommerceSettings,
            typeof NorthCommerce.CheckoutManager,
            typeof NorthCommerce.StripeHelper,
        ]

        if (dependencies.includes('undefined')) {
            return false
        }

        return true
    }

    /** @since 0.1.25 */
    waitForDependecies() {
        if (OrderDraft.startTime) {
            const TIME_LIMIT_S = 10 // seconds for awaiting dependecies
            if (Date.now() - OrderDraft.startTime > (TIME_LIMIT_S * 1000)) {
                throw new Error('Cannot initialize OrderDraft class: related dependencies are missing.')
            }
        }

        return setTimeout(() => new this.constructor(), 5)
    }

    /** @version 0.1.25 */
    determineVariables() {
        const draftOrderContainer = document.querySelector('[data-nc-order-status="draft"]')
        const orderContent = draftOrderContainer.querySelector('.order__content')

        this.settings = {
            order: {
                id: new URLSearchParams(location.search).get('id')
            },
            customer: {
                id: draftOrderContainer.dataset.ncCustomerId,
            },
        }

        this.sections = {
            products: orderContent.querySelector('.card.products'),
            payment: orderContent.querySelector('.card.totals'),
        }

        this.actionBtns = {}

        this.determineProductsSectionVariables()
        this.determinePaymentSectionVariables()
        this.determinePopupVariables()
    }

    determineProductsSectionVariables() {
        this.sections.products.list = this.sections.products.querySelector('.list-products')
        this.sections.products.productItemTmpl = this.getTemplate('nc-tmpl-product-item')

        this.settings.order.lineItems = this.sections.products.list.dataset.orderLineItems
        if (this.settings.order.lineItems) {
            this.settings.order.lineItems = JSON.parse(this.settings.order.lineItems)
        }

        this.actionBtns.searchProducts = this.sections.products.querySelector(
            '.search_products[data-nc-custom-popup="#products-modal"]'
        )
        this.actionBtns.addProducts = this.sections.products.querySelector(
            '.add_products[data-nc-custom-popup="#products-modal"]'
        )
    }

    determinePaymentSectionVariables() {
        this.sections.payment.infos = {
            shipping: this.sections.payment.querySelector('.shipping.payment .payment__value'),
            tax: this.sections.payment.querySelector('.tax.payment .payment__value'),
        }

        this.sections.payment.values = {
            subtotal: this.sections.payment.querySelector('[data-nc-type="subtotal"] .value'),
            shipping: this.sections.payment.querySelector('[data-nc-type="shipping"] .value'),
            tax: this.sections.payment.querySelector('[data-nc-type="tax"] .value'),
            total: this.sections.payment.querySelector('[data-nc-type="total"] .value'),
        }

        actionButtonsVariables.call(this)

        function actionButtonsVariables() {
            this.actionBtns.addShipping = this.sections.payment.querySelector(
                '[data-nc-custom-popup="#shipping-modal"]'
            )
            this.actionBtns.addTaxes = this.sections.payment.querySelector('[data-nc-custom-popup="#taxes-modal"]')
            this.actionBtns.saveDraft = this.sections.payment.querySelector('[data-nc-action="draft"]')
            this.actionBtns.sendInvoice = this.sections.payment.querySelector('[data-nc-action="invoice"]')
            this.actionBtns.collectPayment = this.sections.payment.querySelector('[data-nc-action="collect-payment"]')
            collectPaymentExtraVariables.call(this)

            function collectPaymentExtraVariables() {
                this.actionBtns.collectPayment.ncNonce =
                    this.sections.payment.querySelector('#admin_order_create').value
                this.actionBtns.collectPayment.ncReferer =
                    this.sections.payment.querySelector('[name="_wp_http_referer"]').value
            }
        }
    }

    determinePopupVariables() {
        this.modals = {}

        productsPopupVariables.call(this)
        shippingPopupVariables.call(this)
        taxesPopupVariables.call(this)
        paidOrderNoticeVariables.call(this)
        paymentOrderVariables.call(this)

        function productsPopupVariables() {
            this.modals.products = document.querySelector('#products-modal')

            if (!this.modals.products) {
                return
            }

            this.modals.products.searchInputContainer = this.modals.products.querySelector('.search-input-wrapper')
            this.modals.products.productsList = this.modals.products.querySelector('.popup-products-list')
            this.modals.products.emptyList = this.modals.products.querySelector('.empty-list')
            this.modals.products.btnSubmit = this.modals.products.querySelector('.admin-popup-submit')

            this.modals.products.checkbox = {
                products: {
                    name: 'order_products[]',
                    get selector() {
                        return `[name="${this.name}"]`
                    },
                },
                variants: {
                    name: 'order_variants[]',
                    get selector() {
                        return `[name="${this.name}"]`
                    },
                },
            }
        }

        /** @version 0.1.25 */
        function shippingPopupVariables() {
            this.modals.shipping = document.querySelector('#shipping-modal')

            if (!this.modals.shipping) {
                return
            }

            this.modals.shipping.loader = this.modals.shipping.querySelector('.admin-popup__header .loader')
            this.modals.shipping.options = this.modals.shipping.querySelector('.shipping-options')
            this.modals.shipping.options.calculated = this.modals.shipping.querySelector('#shipping_option_calculated')
            shippingOptionsCalculatedVariables.call(this)
            this.modals.shipping.options.flat = this.modals.shipping.querySelector('#shipping_option_flat')
            shippingOptionsFlatVariables.call(this)
            this.modals.shipping.btnSubmit = this.modals.shipping.querySelector('.admin-popup-submit')

            function shippingOptionsCalculatedVariables() {
                const container = this.modals.shipping.querySelector('.shipping-options_calculated')
                this.modals.shipping.options.calculated.extra = {
                    container,
                    errors: container.querySelector('.errors'),
                    notices: container.querySelector('.notices'),
                }

                this.modals.shipping.options.calculated.extra.notices.textContent =
                    this.modals.shipping.options.calculated.extra.notices.textContent.trim()
            }

            function shippingOptionsFlatVariables() {
                this.modals.shipping.options.flat.extra = {
                    container: this.modals.shipping.querySelector('.shipping-options_flat'),
                    select: this.modals.shipping.querySelector('#shipping_flat_rate'),
                }
            }
        }

        function taxesPopupVariables() {
            this.modals.taxes = document.querySelector('#taxes-modal')

            if (!this.modals.taxes) {
                return
            }

            this.modals.taxes.chargeCheckbox = this.modals.taxes.querySelector('#taxes_charge')
            this.modals.taxes.rateInput = this.modals.taxes.querySelector('#taxes_rate')
            this.modals.taxes.btnSubmit = this.modals.taxes.querySelector('.admin-popup-submit')
        }

        function paidOrderNoticeVariables() {
            this.modals.orderPaidNotice = document.querySelector('#order-paid-create-modal')

            if (!this.modals.orderPaidNotice) {
                return
            }

            this.modals.orderPaidNotice.loader = this.modals.orderPaidNotice.querySelector('.admin-popup__header .loader')
            this.modals.orderPaidNotice.orderTotalValue =
                this.modals.orderPaidNotice.querySelector('.order_total .value')
            this.modals.orderPaidNotice.btnSubmit = this.modals.orderPaidNotice.querySelector(
                '[data-nc-action="order-mark-paid"]'
            )
        }

        function paymentOrderVariables() {
            this.modals.orderPayment = document.querySelector('#order-payment-modal')

            if (!this.modals.orderPayment) {
                return
            }

            this.modals.orderPayment.loader = this.modals.orderPayment.querySelector('.admin-popup__header .loader')
            this.modals.orderPayment.options = this.modals.orderPayment.querySelector('.payment-options')
            this.modals.orderPayment.stripeElement = this.modals.orderPayment.querySelector('#stripe-element')
            this.modals.orderPayment.cardElement = null
            this.modals.orderPayment.errors = this.modals.orderPayment.querySelector('.errors')
            this.modals.orderPayment.btnSubmit = this.modals.orderPayment.querySelector('[data-nc-action="order-pay"]')
        }
    }

    /** @since 0.1.25 */
    hydratePage() {
        this.hydrateProductsList()
        this.hydrateShippingPopup()
        this.hydrateTaxPopup()
    }

    /** @since 0.1.25 */
    hydrateProductsList() {
        if (!this.settings.order.lineItems) {
            return
        }

        this.updateOrderProductsList(this.settings.order.lineItems)
    }

    /** @since 0.1.25 */
    hydrateShippingPopup() {
        const shippingInfo = this.sections.payment.infos.shipping

        if (!shippingInfo.dataset.rateTypeId) {
            return
        }

        const choseOption = this.modals.shipping.options.querySelector(`[name="shipping_option"][data-rate-type-id="${shippingInfo.dataset.rateTypeId}"]`)

        if (!choseOption) {
            return
        }

        choseOption.checked = true
        this.shippingPopupChangeExtraOptionsVisibility()

        if ('flat' !== choseOption.value) {
            return
        }

        const savedOptionName = this.sections.payment.infos.shipping.textContent.trim()
        if (!savedOptionName) {
            return
        }

        const selectEl = this.modals.shipping.options.flat.extra.select
        const selectOptions = Array.from(selectEl.options)
        const choseSelectOption = selectOptions.find(((opt) => opt.dataset.name === savedOptionName))
        if (choseSelectOption) {
            selectEl.selectedIndex = selectOptions.indexOf(choseSelectOption)
        }
    }

    /** @since 0.1.25 */
    hydrateTaxPopup() {
        const taxInfo = this.sections.payment.infos.tax.textContent.trim()

        if (!taxInfo.includes('%')) {
            return
        }

        const [ taxValue ] = taxInfo.split('%')

        this.modals.taxes.chargeCheckbox.checked = true
        this.modals.taxes.rateInput.value = taxValue
        this.modals.taxes.btnSubmit.classList.remove('disabled')
    }

    setListeners() {
        this.setProductsListUpdateProductQtyChangeListener()
        this.setProductsListItemDeleteClickListener()
        this.setSaveDraftButtonClickListener()
        this.setCollectPaymentButtonClickListener()
        this.setPopupsListeners()
    }

    setProductsListUpdateProductQtyChangeListener() {
        this.sections.products.list.addEventListener('change', this.handleProductsListQtyUpdate.bind(this))
        this.sections.products.list.addEventListener('click', this.handleProductsListQtyUpdate.bind(this))
    }

    setProductsListItemDeleteClickListener() {
        this.sections.products.list.addEventListener('click', removeProductsListItem.bind(this))

        function removeProductsListItem(e) {
            if (!isDeleteAction(e.target)) {
                return
            }

            e.target.closest('.product__wrapper').remove()

            this.changeProductsListButton()
            if (!this.isProductsListHasItems()) {
                this.closeCollectPaymentButtonInnerContainer()
            }
            this.updateOrderTotals()
        }

        function isDeleteAction(target) {
            return target.classList.contains('list__item-delete')
        }
    }

    setSaveDraftButtonClickListener() {
        this.actionBtns.saveDraft.addEventListener('click', this.saveOrderDraft.bind(this))
    }

    setCollectPaymentButtonClickListener() {
        this.actionBtns.collectPayment.addEventListener('click', handleActionsContainerClick.bind(this))

        function handleActionsContainerClick(e) {
            if (!e.target.classList.contains('action-save')) {
                return this.actionBtns.collectPayment.classList.remove('opened')
            }

            this.actionBtns.collectPayment.classList.toggle('opened')
        }
    }

    // Popup methods

    setPopupsListeners() {
        this.setPopupsOpenListener()
        this.setPopupsCloseListener()
        this.setProductPopupListeners()
        this.setShippingPopupListeners()
        this.setTaxesPopupListeners()
        this.setOrderPaidNoticePopupListeners()
        this.setOrderPaymentPopupListeners()
    }

    setPopupsOpenListener() {
        this.sections.products.addEventListener('click', handlePopupsOpen.bind(this))
        this.sections.payment.addEventListener('click', handlePopupsOpen.bind(this))

        function handlePopupsOpen(e) {
            const productsModalID = '#products-modal'
            if (
                productsModalID === e.target.dataset.ncCustomPopup
                || e.target.closest(`[data-nc-custom-popup="${productsModalID}"]`)
            ) {
                return this.handleProductsPopupOpen()
            }

            const shippingModalID = '#shipping-modal'
            if (
                shippingModalID === e.target.dataset.ncCustomPopup
                || e.target.closest(`[data-nc-custom-popup="${shippingModalID}"]`)
            ) {
                return this.handleShippingPopupOpen()
            }

            const orderPaidCreateModalID = '#order-paid-create-modal'
            if (
                orderPaidCreateModalID === e.target.dataset.ncCustomPopup
                || e.target.closest(`[data-nc-custom-popup="${orderPaidCreateModalID}"]`)
            ) {
                return this.handleOrderPaidNoticePopupOpen()
            }

            const orderPaymentModalID = '#order-payment-modal'
            if (
                orderPaymentModalID === e.target.dataset.ncCustomPopup
                || e.target.closest(`[data-nc-custom-popup="${orderPaymentModalID}"]`)
            ) {
                return this.handleOrderPaymentPopupOpen()
            }
        }
    }

    setPopupsCloseListener() {
        this.modals.orderPaidNotice.addEventListener('click', handleOrderPaidPopupClose.bind(this))

        function handleOrderPaidPopupClose(e) {
            if (
                e.target.dataset.ncCustomPopupClose
                || e.target.closest(`[data-nc-custom-popup-close]`)
            ) {
                return this.closeCollectPaymentButtonInnerContainer()
            }
        }
    }

    setProductPopupListeners() {
        if (!this.modals.products) {
            return console.warn('modals.products is empty')
        }

        this.setProductPopupCheckboxChangeListener()
        this.setProductPopupNameSearchListener()
        this.setProductPopupSubmitListener()
    }

    setShippingPopupListeners() {
        if (!this.modals.shipping) {
            return console.warn('modals.shipping is empty')
        }

        this.setShippingPopupShippingOptionChangeListener()
        this.setShippingPopupErrorClickListener()
        this.setShippingPopupSubmitListener()
    }

    setTaxesPopupListeners() {
        if (!this.modals.taxes) {
            return console.warn('modals.taxes is empty')
        }

        this.setTaxesPopupChargeCheckboxChangeListener()
        this.setTaxesPopupSubmitListener()
    }

    closePopup() {
        const activePopup = document.querySelector('#orders-tab > .nc-custom-popup--active')

        if (!activePopup) {
            return
        }

        activePopup.classList.remove('nc-custom-popup--active')
        activePopup.setAttribute('aria-hidden', 'true')
        document.body.style.marginRight = ''
        document.body.style.overflow = ''
    }

    // Products Popup methods

    setProductPopupCheckboxChangeListener() {
        if (!this.modals.products.productsList) {
            return
        }

        this.modals.products.productsList.addEventListener('change', handleProductCheckboxChange.bind(this))

        const checkbox = this.modals.products.checkbox

        function handleProductCheckboxChange(e) {
            const targetName = e.target.name

            if (
                checkbox.products.name !== targetName
                && checkbox.variants.name !== targetName
            ) {
                return
            }

            const productContainer = e.target.closest('[data-level="product"]')

            const productCheckbox =
                checkbox.products.name === targetName
                    ? e.target
                    : productContainer.querySelector(checkbox.products.selector)

            if (checkbox.products.name === targetName) {
                handleProductLevelChange()
            }

            if (checkbox.variants.name === targetName) {
                handleVariantLevelChange()
            }

            updateSubmitButton.call(this)


            function handleProductLevelChange() {
                productCheckbox.removeAttribute('partially')

                if (isCheckEvent()) {
                    markAllVariantsAsChecked()
                    productContainer.querySelector('.product__expander').checked = true
                }

                if (isUncheckEvent()) {
                    markAllVariantsAsUnchecked()
                }
            }

            function handleVariantLevelChange() {
                if (isCheckEvent()) {
                    const hasUncheckedVariants = isProductHasUnchekedVariants()
                    productCheckbox.checked = true
                    productCheckbox.setAttribute('partially', hasUncheckedVariants)
                }

                if (isUncheckEvent()) {
                    const hasCheckedVariants = isProductHasCheckedVariants()
                    productCheckbox.checked = hasCheckedVariants
                    productCheckbox.setAttribute('partially', hasCheckedVariants)
                }
            }

            function isCheckEvent() {
                return e.target.checked
            }

            function isUncheckEvent() {
                return !isCheckEvent()
            }

            function markAllVariantsAsChecked() {
                productContainer
                    .querySelectorAll(`${checkbox.variants.selector}:not(:checked)`)
                    .forEach((el) => (el.checked = true))
            }

            function markAllVariantsAsUnchecked() {
                productContainer
                    .querySelectorAll(`${checkbox.variants.selector}:checked`)
                    .forEach((el) => {
                        el.hasAttribute('checked') ? el.removeAttribute('checked') : null
                        el.checked = false
                    })
            }

            function isProductHasUnchekedVariants() {
                return !!productContainer.querySelector(`${checkbox.variants.selector}:not(:checked)`)
            }

            function isProductHasCheckedVariants() {
                return !!productContainer.querySelector(`${checkbox.variants.selector}:checked`)
            }

            function updateSubmitButton() {
                determineButtonStatus.call(this)

                function determineButtonStatus() {
                    popupListHasCheckedItems.call(this)
                        ? enableButton.call(this)
                        : disableButton.call(this)
                }

                function popupListHasCheckedItems() {
                    return !!this.modals.products.productsList.querySelector(
                        `${checkbox.products.selector}:checked, ${checkbox.variants.selector}:checked`
                    )
                }

                function enableButton() {
                    this.modals.products.btnSubmit.classList.remove('disabled')
                }

                function disableButton() {
                    this.modals.products.btnSubmit.classList.add('disabled')
                }
            }
        }
    }

    setProductPopupNameSearchListener() {
        const nameFilter = this.modals.products.querySelector('#product-variant-filter-name')

        if (!nameFilter) {
            return
        }

        nameFilter.addEventListener('input', this.handleProductsPopupListFilter.bind(this))
    }

    /** @version 0.1.25 */
    setProductPopupSubmitListener() {
        this.modals.products.addEventListener('submit', handleSubmit.bind(this))
        this.modals.products.btnSubmit.addEventListener('click', handleProductsSubmit.bind(this))

        function handleSubmit(e) {
            e.preventDefault()
        }

        function handleProductsSubmit(e) {
            e.preventDefault()
            this.updateOrderProductsList.call(this)
            this.changeProductsListButton()
            this.updateOrderTotals()
            this.closePopup()
        }
    }

    handleProductsPopupOpen() {
        resetSections.call(this)
        refreshProductsList.call(this)
        markSelectedProducts.call(this)
        resetSubmitButton.call(this)


        function resetSections() {
            this.modals.products.searchInputContainer
                .querySelector('input')
                .value = ''

            this.modals.products.emptyList.classList.add('hide')
        }

        function refreshProductsList() {
            this.modals.products.productsList
                .querySelectorAll(`${this.modals.products.checkbox.products.selector}:checked, ${this.modals.products.checkbox.variants.selector}:checked`)
                .forEach((checkbox) => checkbox.checked = false)

            this.modals.products.productsList
                .querySelectorAll('.list__product.hide')
                .forEach((item) => item.classList.remove('hide'))
        }

        function markSelectedProducts() {
            const productVariantsMap = this.productsListVariants()

            for (let productID in productVariantsMap) {
                const productCheckbox = this.modals.products.productsList.querySelector(
                    `${this.modals.products.checkbox.products.selector}[value="${productID}"]`
                )

                productCheckbox
                    ? productCheckbox.checked = true
                    : null

                if (!productVariantsMap[productID]) {
                    continue
                }

                const productContainer = productCheckbox.closest('[data-level="product"]')

                productVariantsMap[productID].forEach((variantID) => {
                    const variantCheckbox = productContainer.querySelector(
                        `${this.modals.products.checkbox.variants.selector}[value="${variantID}"]`
                    )

                    variantCheckbox
                        ? variantCheckbox.checked = true
                        : null
                })
            }
        }

        function resetSubmitButton() {
            this.modals.products.btnSubmit.classList.add('disabled')
        }
    }

    handleProductsPopupListFilter(e) {
        const productItemSelector = '[data-level="product"]'
        const variantItemSelector = '[data-level="variant"]'

        const self = this.handleProductsPopupListFilter
        self.throttleLimit = 700 // ms
        self.lastRan = self.lastRan ?? Date.now()

        if (self.timeoutID) {
            clearTimeout(self.timeoutID)
        }

        self.timeoutID = setTimeout(() => {
            if (Date.now() - self.lastRan >= self.throttleLimit) {
                throttledFilterByProductName.call(this, e)
                self.lastRan = Date.now()
            }
        }, self.throttleLimit - (Date.now() - self.lastRan))

        function throttledFilterByProductName(e) {
            this.modals.products.filterValue = e.target.value.toLowerCase().trim()

            this.modals.products.productsList
                .querySelectorAll(`${productItemSelector}.filter-matches-variant`)
                .forEach((product) => product.classList.remove('filter-matches-variant'))

            if (!this.modals.products.filterValue) {
                this.modals.products.productsList
                    .querySelectorAll(`${productItemSelector}.hide, ${variantItemSelector}.hide`)
                    .forEach((item) => item.classList.remove('hide'))

                toggleEmptyResultMessage.call(this)
                return
            }

            checkProductNames.call(this)
            checkVariantNames.call(this)
            toggleEmptyResultMessage.call(this)
        }

        function checkProductNames() {
            this.modals.products.productsList
                .querySelectorAll(`${productItemSelector}`)
                .forEach((product) => {
                    const productName = product.querySelector('.product__name').textContent.trim().toLowerCase()

                    productName.includes(this.modals.products.filterValue)
                        ? product.classList.remove('hide')
                        : product.classList.add('hide')
                })
        }

        function checkVariantNames() {
            const ForEachBreak = {}

            try {
                recursiveCheck.call(this)
            } catch (e) {
                recursiveCheck.call(this)
            }

            function recursiveCheck() {
                this.modals.products.productsList
                    .querySelectorAll(`${productItemSelector}.hide:not(.filter-matches-variant) ${variantItemSelector}`)
                    .forEach((variant) => {
                        const variantName = variant.querySelector('.variant__label').textContent.trim().toLowerCase()

                        if (variantName.includes(this.modals.products.filterValue)) {
                            const product = variant.closest(productItemSelector)
                            product.classList.remove('hide')
                            product.classList.add('filter-matches-variant')

                            throw ForEachBreak
                        }
                    })
            }
        }

        function toggleEmptyResultMessage() {
            const hasElements = this.modals.products.productsList
                .querySelector(`${productItemSelector}:not(.hide)`)

            hasElements
                ? hideEmptyResultMessage.call(this)
                : showEmptyResultMessage.call(this)

            function showEmptyResultMessage() {
                const emptyList = this.modals.products.emptyList
                emptyList.querySelector('.search-query').textContent = this.modals.products.filterValue
                emptyList.classList.remove('hide')
            }

            function hideEmptyResultMessage() {
                const emptyList = this.modals.products.emptyList
                emptyList.querySelector('.search-query').textContent = ''
                emptyList.classList.add('hide')
            }
        }
    }

    // Shipping Popup methods

    handleShippingPopupOpen() {
        maybeRecalculateShippingRates.call(this)

        function maybeRecalculateShippingRates() {
            const activeOption = this.getShippingPopupShippingOption()

            const isEmptyList = activeOption
                && 'calculated' === activeOption.value
                && !this.modals.shipping.options.querySelector('[name="shipping_rate_option"]')

            const hasNotice = this.sections.payment.infos.shipping.querySelector('.value__notice')

            if (!isEmptyList || !!hasNotice) {
                return
            }

            this.requestShippingRates()
        }
    }

    setShippingPopupShippingOptionChangeListener() {
        this.modals.shipping.options.addEventListener('change', handleShippingOptionChange.bind(this))

        function handleShippingOptionChange(e) {
            if (e.target.classList.contains('flat-rates-dropdown')) {
                emableSubmitButton.call(this)
                return
            }

            if (!e.target.classList.contains('shipping_option')) {
                return
            }

            this.shippingPopupChangeExtraOptionsVisibility()
            emableSubmitButton.call(this)

            if ('calculated' === e.target.value) {
                this.requestShippingRates()
            }
        }

        function emableSubmitButton() {
            this.modals.shipping.btnSubmit.classList.remove('disabled')
        }
    }

    setShippingPopupErrorClickListener() {
        if (!this.modals.shipping.options.calculated.extra.errors) {
            return
        }

        this.modals.shipping.options.calculated.extra.errors.addEventListener('click', handleErrorDeletion.bind(this))

        function handleErrorDeletion(e) {
            if (!e.target.classList.contains('error')) {
                return
            }

            e.target.classList.add('delete')
            setTimeout(() => e.target.remove(), 300)
        }
    }

    /** @version 0.1.25 */
    setShippingPopupSubmitListener() {
        this.modals.shipping.btnSubmit.addEventListener('click', handleShippingCalculation.bind(this))
        this.modals.shipping.addEventListener('submit', handleSubmit.bind(this))

        function handleShippingCalculation() {
            const activeOption = this.getShippingPopupShippingOption()

            switch (activeOption.value) {
                case 'flat':
                    getFlatValues.call(this)
                    break

                case 'calculated':
                    getCalculatedValues.call(this)
                    break

                default:
                    updateShippingValue.call(this)
                    break
            }

            this.updateOrderTotals.initiator = 'shipping'
            this.updateOrderTotals()
            this.closePopup()
        }

        function getFlatValues() {
            const selectedIndex = this.modals.shipping.options.flat.extra.select.selectedIndex
            const selectedOptionEl = this.modals.shipping.options.flat.extra.select.options[ selectedIndex ]
            const rateName = selectedOptionEl.dataset.name
            const ratePrice = selectedOptionEl.dataset.price
            updateShippingValue.call(this, rateName, ratePrice)
        }

        function getCalculatedValues() {
            let infoLabel
            let priceValue
            let externalValue

            const activeOption = this.getShippingPopupShippingRateOption()
            if (activeOption) {
                const optionContainer = activeOption.closest('.radio-container')
                infoLabel = activeOption.value
                priceValue = optionContainer.querySelector('.rate_price .value').textContent
                externalValue = 'calculated' === activeOption.dataset.ncType
            }

            updateShippingValue.call(this, infoLabel, priceValue, externalValue)
        }

        function updateShippingValue(infoLabel, priceValue, externalValue = false) {
            const shippingInfo = this.sections.payment.infos.shipping

            shippingInfo.textContent = infoLabel ?? shippingInfo.dataset.labelZero
            shippingInfo.dataset.ncShippingPrice = priceValue ?? 0

            priceValue
                ? submitShippingPriceValue.call(this, externalValue)
                : resetShippingPriceValue.call(this)


            function submitShippingPriceValue(externalValue) {
                externalValue
                    ? (shippingInfo.dataset.ncExternalValue = externalValue)
                    : shippingInfo.removeAttribute('data-nc-external-value')

                    shippingInfo.dataset.ncShippingPrice = this.formatPrice(priceValue)
            }

            function resetShippingPriceValue() {
                shippingInfo.removeAttribute('data-nc-external-value')
                shippingInfo.removeAttribute('data-nc-shipping-price')
            }
        }

        function handleSubmit(e) {
            e.preventDefault
            handleShippingCalculation.call(this)
        }
    }

    /** @version 0.1.25 */
    shippingPopupChangeExtraOptionsVisibility() {
        hideActiveOptionalContainer.call(this)
        ativateRelatedOptionalContainer.call(this)

        function hideActiveOptionalContainer() {
            this.modals.shipping.options
                .querySelectorAll('.optional-container.active')
                .forEach((container) => container.classList.remove('active'))
        }

        function ativateRelatedOptionalContainer() {
            const activeOption = this.getShippingPopupShippingOption()
            const relatedOptionalContainer = this.modals.shipping.options.querySelector(
                `.optional-container[data-nc-type="${activeOption.value}"]`
            )

            if (!relatedOptionalContainer) {
                return
            }

            relatedOptionalContainer.classList.add('active')
        }
    }

    getShippingPopupShippingOption() {
        return this.modals.shipping.options.querySelector('[name="shipping_option"]:checked')
    }

    getShippingPopupShippingRateOption() {
        return this.modals.shipping.options.calculated.extra.container.querySelector(
            '[name="shipping_rate_option"]:checked'
        )
    }

    /** @version 0.1.25 */
    async requestShippingRates() {
        const EasyPostManager = NorthCommerce.EasyPostManager ?? null
        if (!EasyPostManager) {
            console.error('NorthCommerce.EasyPostManager is empty')
            updateShippingValue.call(this)
            return
        }

        const customerAddressJSON = this.modals.shipping.options.calculated.extra.container.dataset.ncCustomerAddress
        const customerAddress = JSON.parse(customerAddressJSON)
        if (!customerAddress) {
            return renderError.call(this, 'Customer shipping address is uknown.')
        }

        const lineItems = this.orderLineItems()
        if (!lineItems.length) {
            return renderNotice.call(this, 'Your Cart is empty. Please add Products.')
        }

        let noticeText = 'Waiting Shipping Rates calculation...'
        emableFormCalculationIndication.call(this, noticeText)

        refreshRatesList.call(this)

        const response = await EasyPostManager.retrieveShippingRates(lineItems, customerAddress)

        if (!response.success) {
            if (response.data.errors) {
                return renderError.call(this, response.data.errors.shipping_profile_coverage)
            }

            return renderNotice.call(this, 'Something went wrong. Please, try again.')
        }

        const shippingRates = response.data

        renderNewRatesList.call(this)
        disableFormCalculationIndication.call(this)


        function emableFormCalculationIndication(noticeText) {
            this.modals.shipping.loader.style.display = 'block'
            this.modals.shipping.options.calculated.extra.notices.classList.remove('error')
            this.modals.shipping.options.calculated.extra.notices.textContent = noticeText
            this.modals.shipping.btnSubmit.classList.add('disabled')
        }

        function disableFormCalculationIndication(noticeText, isError) {
            this.modals.shipping.loader.style.display = 'none'
            this.modals.shipping.options.calculated.extra.notices.textContent = noticeText
            if (isError) {
                this.modals.shipping.options.calculated.extra.notices.classList.add('error')
            }
            this.modals.shipping.btnSubmit.classList.remove('disabled')
        }

        function refreshRatesList() {
            this.modals.shipping.options.calculated.extra.container
                .querySelectorAll('.radio-container.shipping-rate')
                .forEach((rate) => rate.remove())
        }

        function renderNewRatesList() {
            shippingRates.forEach((rateData) => {
                const itemTemplate = this.getTemplate('nc-tmpl-shipping-rate-item')

                const optionInput = itemTemplate.querySelector('.shipping_rate_option')
                const rateName = itemTemplate.querySelector('.rate_name')
                const ratePrice = itemTemplate.querySelector('.rate_price .value')

                if ('internal' === rateData.rate_type) {
                    optionInput.value = rateData.rate_name
                    rateName.textContent = rateData.rate_name
                    ratePrice.textContent = this.formatPrice(rateData.rate)
                }

                if ('easypost' === rateData.rate_type) {
                    optionInput.value = rateData.service
                    optionInput.dataset.ncType = 'calculated'
                    optionInput.dataset.carrierId = rateData.carrier_id
                    optionInput.dataset.easyPostRateId = rateData.easypost_rate_id
                    rateName.textContent = `${rateData.carrier}: ${rateData.service}`
                    ratePrice.textContent = this.formatPrice(rateData.rate)
                }

                this.modals.shipping.options.calculated.extra.container.insertAdjacentElement('beforeend', itemTemplate)
            })
        }

        function renderNotice(text) {
            return disableFormCalculationIndication.call(this, text)
        }

        function renderError(text) {
            const isError = true
            return disableFormCalculationIndication.call(this, text, isError)
        }
    }

    // Taxes Popup methods

    setTaxesPopupChargeCheckboxChangeListener() {
        this.modals.taxes.chargeCheckbox.addEventListener('change', handleChange.bind(this))

        function handleChange(e) {
            enableSubmitButton.call(this)
        }

        function enableSubmitButton() {
            this.modals.taxes.btnSubmit.classList.remove('disabled')
        }
    }

    /** @version 0.1.25 */
    setTaxesPopupSubmitListener() {
        this.modals.taxes.btnSubmit.addEventListener('click', handleTaxesCalculation.bind(this))
        this.modals.taxes.addEventListener('submit', handleSubmit.bind(this))

        function handleTaxesCalculation() {
            this.modals.taxes.chargeCheckbox.checked
                ? submitTaxesValue.call(this)
                : resetTaxesValue.call(this)

            this.updateOrderTotals.initiator = 'taxes'
            this.updateOrderTotals()
            this.closePopup()
        }

        function submitTaxesValue() {
            this.sections.payment.infos.tax.textContent = `${this.modals.taxes.rateInput.value}%`
            this.sections.payment.infos.tax.dataset.ncTaxPercent = this.modals.taxes.rateInput.value
        }

        function resetTaxesValue() {
            this.sections.payment.infos.tax.textContent = this.sections.payment.infos.tax.dataset.labelZero
            this.sections.payment.infos.tax.removeAttribute('data-nc-tax-percent')
            this.sections.payment.values.tax.textContent = this.formatPrice()
        }

        function handleSubmit(e) {
            e.preventDefault()
            handleTaxesCalculation.call(this)
        }
    }

    // Paid Order Creation Popup methods

    setOrderPaidNoticePopupListeners() {
        this.modals.orderPaidNotice.btnSubmit.addEventListener('click', this.setOrderStatusPaid.bind(this))
    }

    handleOrderPaidNoticePopupOpen() {
        this.modals.orderPaidNotice.orderTotalValue.textContent = this.getOrderTotalValue()
    }

    // Order Payment Popup methods

    setOrderPaymentPopupListeners() {
        this.modals.orderPayment.options.addEventListener('change', handlePaymentOptionChange.bind(this))
        this.modals.orderPayment.btnSubmit.addEventListener('click', this.handleOrderPaymentActionClick.bind(this))
        this.modals.orderPayment.addEventListener('submit', handleSubmit.bind(this))

        async function handlePaymentOptionChange(e) {
            if (!e.target.classList.contains('payment__option')) {
                return
            }

            emableSubmitButton.call(this, e.target.value)
            changeExtraOptionsVisibility.call(this)

            function emableSubmitButton(activeOptionValue) {
                this.modals.orderPayment.btnSubmit.classList.remove('disabled')

                if (
                    'stripe' === activeOptionValue
                    && (!ncStripe || !ncStripe.public)
                ) {
                    return disableSubmitButton.call(this)
                }
            }

            function disableSubmitButton() {
                this.modals.orderPayment.btnSubmit.classList.add('disabled')
            }

            function changeExtraOptionsVisibility() {
                hideActiveOptionalContainer.call(this)
                ativateRelatedOptionalContainer.call(this)

                function hideActiveOptionalContainer() {
                    this.modals.orderPayment.options
                        .querySelectorAll('.optional-container.active')
                        .forEach((container) => container.classList.remove('active'))
                }

                function ativateRelatedOptionalContainer() {
                    const activeOption = this.modals.orderPayment.options.querySelector('.payment__option:checked')
                    const relatedOptionalContainer = this.modals.orderPayment.options.querySelector(
                        `.optional-container[data-nc-type="${activeOption.value}"]`
                    )

                    if (!relatedOptionalContainer) {
                        return
                    }

                    relatedOptionalContainer.classList.add('active')
                }
            }
        }

        function handleSubmit(e) {
            e.preventDefault()
        }
    }

    handleOrderPaymentPopupOpen() {
        this.mountStripeElement()
    }

    // Helper methods

    /** @version 0.1.25 */
    getTemplate(templateId) {
        const template = document.querySelector(`#${templateId}`)
        if (!template) {
            throw new Error(`Template is missing: #${templateId}`)
        }
        template.cloneNode(true)
        const newDiv = document.createElement('div')
        newDiv.innerHTML = template.innerHTML.trim()
        return newDiv.firstChild
    }

    formatPrice(priceValue) {
        priceValue ??= 0

        const {
            priceDecimals,
            decimalOperator,
            thousandsSeparator
        } = northCommerceSettings

        const parts = parseFloat(priceValue).toFixed(priceDecimals).toString().split('.')
        const integerPart = parts[0]
        const decimalPart = parts[1]
        const thousands = /\B(?=(\d{3})+(?!\d))/g

        return integerPart.replace(thousands, thousandsSeparator)
            + (decimalPart ? decimalOperator + decimalPart : '')
    }

    /** @version 0.1.25 */
    enableActionButtons() {
        const mainActions = [
            'saveDraft',
            'sendInvoice',
            'collectPayment',
        ]
        for (const btn in this.actionBtns) {
            if (
                !this.settings.order.lineItems
                && mainActions.includes(btn)
            ) {
                return
            }

            this.actionBtns[btn].classList.remove('disabled')
        }
    }

    disableActionButtons() {
        for (const btn in this.actionBtns) {
            this.actionBtns[btn].classList.add('disabled')
        }
    }

    // Products Section Methods

    /** @version 0.1.25 */
    updateOrderProductsList(productsSelected) {
        productsSelected = productsSelected ?? selectedProducts.call(this)

        for (let productID in productsSelected) {
            const refProduct = this.modals.products.productsList.querySelector(
                `[data-level="product"][data-id="${productID}"]`
            )

            if (!refProduct) {
                continue
            }

            productsSelected[productID].forEach((variantIdQty) => {
                const [variantID, liQty] = variantIdQty.split(':')

                const variantAlreadyPicked = this.sections.products.list.querySelector(
                    `.product__wrapper[data-variant-id="${variantID}"]`
                )
                if (variantAlreadyPicked) {
                    return
                }

                let productTemplate = this.sections.products.productItemTmpl.cloneNode(true)
                productTemplate = fillUpProductData({ productTemplate, refProduct, productID, liQty })
                productTemplate.dataset.variantId = variantID
                const variantContainer = refProduct.querySelector(
                    `${this.modals.products.checkbox.variants.selector}[value="${variantID}"]`
                )
                if (variantContainer) {
                    const variantName = variantContainer
                        .closest('.variant__wrapper')
                        .querySelector('.variant__label.slug')
                        .textContent.trim()
                    productTemplate.querySelector('.variant_name').textContent = variantName

                    if (variantContainer.dataset.ncPrice) {
                        productTemplate.dataset.productPrice = variantContainer.dataset.ncPrice.replace(',', '')
                        productTemplate.querySelector('.product__price .value').textContent =
                            variantContainer.dataset.ncPrice
                    }
                }

                this.sections.products.list.insertAdjacentElement('beforeend', productTemplate)
            })
        }

        function selectedProducts() {
            const checkbox = this.modals.products.checkbox

            const selectedProducts = {}
            this.modals.products
                .querySelectorAll(`${checkbox.products.selector}:checked`)
                .forEach((product) => {
                    selectedProducts[product.value] = []

                    const productContainer = product.closest('[data-level="product"]')

                    if (productContainer.dataset.variantId) {
                        // solo variant
                        selectedProducts[product.value].push(productContainer.dataset.variantId)
                    }

                    productContainer
                        .querySelectorAll(`${checkbox.variants.selector}:checked`)
                        .forEach((variantCheckbox) => {
                            selectedProducts[product.value].push(variantCheckbox.value)
                        })
                })

            return selectedProducts
        }

        function fillUpProductData({ productTemplate, refProduct, productID, liQty }) {
            productTemplate.dataset.productId = productID

            const img = productTemplate.querySelector('.product__img')
            const refImg = refProduct.querySelector('.product__img img')
            img.src = refImg.src
            img.alt = refImg.alt

            productTemplate.querySelector('.info__name').textContent = refProduct
                .querySelector('.product__name')
                .textContent.trim()

            const refProductPrice = refProduct.querySelector('.product__price')
            const refProductPriceValue = refProductPrice.querySelector('.value').textContent.trim().replace(',', '')
            productTemplate.dataset.productPrice = refProductPriceValue
            productTemplate.querySelector('.product__price').innerHTML = refProductPrice.innerHTML.trim()

            const refQuantity = refProduct.querySelector('.product__quantity .quantity__value')
            if (refQuantity) {
                productTemplate.dataset.maxQuantity = refQuantity.textContent.trim()
            }

            if (liQty) {
                productTemplate.querySelector('[data-type="qty-input"]').value = liQty
            }

            return productTemplate
        }
    }

    handleProductsListQtyUpdate(e) {
        const isQntBtn = e.target.classList.contains('ProductQntBtn')
        const isQntInput = e.target.classList.contains('ProductQntInt')

        if (!isQntInput && !isQntBtn) {
            return
        }

        if (isQntInput && 'click' === e.type) {
            return
        }

        const parentNode = e.target.closest('[data-type="product-qnt"]')
        const productNode = parentNode.closest('.product__wrapper')
        const quantityInput = productNode.querySelector('.ProductQntInt')
        const productMaxQuantity = getAvailableMaxQuantity.call(this)

        let value = parseInt(quantityInput.value)

        if (isQntBtn) {
            handleBtnClick()
        }

        if (isQntInput) {
            handleInputChange()
        }

        updateProductPrice.call(this, productNode, quantityInput)
        this.updateOrderTotals()

        function getAvailableMaxQuantity() {
            let availableMaxQuantity = productNode.dataset.maxQuantity

            if (productNode.dataset.variantId) {
                this.sections.products.list
                    .querySelectorAll(`.product__wrapper[data-product-id="${productNode.dataset.productId}"]`)
                    .forEach((product) => {
                        if (productNode == product) {
                            return
                        }

                        availableMaxQuantity -= product.querySelector('.ProductQntInt').value
                    })
            }

            return availableMaxQuantity
        }

        function handleBtnClick() {
            if (!e.target.dataset.qntType) {
                return
            }

            if ('plus' === e.target.dataset.qntType) {
                if (productMaxQuantity) {
                    value = value + 1 < parseInt(productMaxQuantity)
                        ? value + 1
                        : parseInt(productMaxQuantity)
                } else {
                    value += 1
                }
                quantityInput.value = value
            }

            if ('minus' === e.target.dataset.qntType) {
                quantityInput.value = value - 1 < 1
                    ? 1
                    : value - 1
            }
        }

        function handleInputChange() {
            value = value < 1 ? 1 : value

            if (productMaxQuantity) {
                value = value < parseInt(productMaxQuantity)
                    ? value
                    : parseInt(productMaxQuantity)
            }

            quantityInput.value = value
        }

        function updateProductPrice(productNode, quantityInput) {
            const productPrice = parseFloat(productNode.dataset.productPrice)
            productNode.querySelector('.product__price .value').textContent = this.formatPrice(
                productPrice * quantityInput.value
            )
        }
    }

    changeProductsListButton() {
        if (this.isProductsListHasItems()) {
            this.actionBtns.searchProducts.classList.add('hide')
            this.actionBtns.addProducts.classList.remove('hide')
            return
        }

        this.actionBtns.searchProducts.classList.remove('hide')
        this.actionBtns.addProducts.classList.add('hide')
    }

    isProductsListHasItems() {
        return !!this.sections.products.list.querySelector('.product__wrapper')
    }

    productsListVariants() {
        const appliedProductVariants = []

        this.sections.products.list
            .querySelectorAll('.product__wrapper')
            .forEach((product) => {
                if (!appliedProductVariants[product.dataset.productId]) {
                    appliedProductVariants[product.dataset.productId] = []
                }

                if (product.dataset.variantId) {
                    appliedProductVariants[product.dataset.productId].push(product.dataset.variantId)
                }
            })

        return appliedProductVariants
    }

    disableProductsListButtons() {
        this.sections.products.list
            .querySelectorAll('.list__item-delete')
            .forEach((btn) => btn.classList.add('disabled'))
    }

    enableProductsListDeleteButtons() {
        this.sections.products.list
            .querySelectorAll('.list__item-delete.disabled')
            .forEach((btn) => btn.classList.remove('disabled'))
    }

    // Payment Section Methods

    updateOrderTotals() {
        updateSubtotal.call(this)
        updateShipping.call(this)
        updateTax.call(this)
        updateTotal.call(this)

        function updateSubtotal() {
            const subtotal = this.getOrderSubtotalValue()
            this.sections.payment.values.subtotal.textContent = subtotal

            const isPositive = parseFloat(subtotal)
            if (isPositive) {
                this.actionBtns.saveDraft.classList.remove('disabled')
                this.actionBtns.collectPayment.classList.remove('disabled')
                return
            }

            this.actionBtns.saveDraft.classList.add('disabled')
            this.actionBtns.collectPayment.classList.add('disabled')
        }

        function updateShipping() {
            this.sections.payment.values.shipping.textContent = this.getOrderShippingValue()
            maybeAddShippingRecalculationNotice.call(this)

            function maybeAddShippingRecalculationNotice() {
                if (
                    'shipping' === this.updateOrderTotals.initiator
                    || 'taxes' === this.updateOrderTotals.initiator
                ) {
                    return delete this.updateOrderTotals.initiator
                }

                if (
                    !this.sections.payment.values.shipping.dataset.ncExternalValue
                    || this.sections.payment.infos.shipping.querySelector('.value__notice')
                ) {
                    return
                }

                const notice = `<span class="value__notice" style="margin-left: 15px; color: red;">Need recalculation</span>`
                this.sections.payment.infos.shipping.insertAdjacentHTML('beforeend', notice)
            }
        }

        function updateTax() {
            this.sections.payment.values.tax.textContent = this.getOrderTaxValue()
        }

        function updateTotal() {
            this.sections.payment.values.total.textContent = this.getOrderTotalValue()
        }
    }

    getOrderSubtotalValue() {
        let subtotal = 0

        this.sections.products.list
            .querySelectorAll('.product__wrapper')
            .forEach((product) => {
                const productPrice = parseFloat(product.dataset.productPrice)
                const productQty = parseFloat(product.querySelector('[data-type="qty-input"]').value)
                subtotal += productPrice * productQty
            })

        return this.formatPrice(subtotal)
    }

    /** @version 0.1.25 */
    getOrderShippingValue() {
        const shippingPrice = this.sections.payment.infos.shipping.dataset.ncShippingPrice
        const shippingPriceValue = parseFloat(shippingPrice ?? 0)
        return this.formatPrice(shippingPriceValue)
    }

    /** @version 0.1.25 */
    getOrderTaxValue() {
        if (!this.sections.payment.infos.tax.dataset.ncTaxPercent) {
            return this.formatPrice()
        }

        const subtotal = parseFloat(this.sections.payment.values.subtotal.textContent)
        const shipping = parseFloat(this.sections.payment.values.shipping.textContent)
        const taxPercent = parseFloat(this.sections.payment.infos.tax.dataset.ncTaxPercent)

        const taxableAmount = subtotal + shipping
        const taxValue = this.formatPrice((taxableAmount * taxPercent) / 100)

        if (isNaN(taxValue)){
            throw Error('Tax calculation error.')
        }

        return taxValue
    }

    getOrderTotalValue() {
        const subtotal = parseFloat(this.sections.payment.values.subtotal.textContent)
        const shipping = parseFloat(this.sections.payment.values.shipping.textContent)
        const tax = parseFloat(this.sections.payment.values.tax.textContent)

        const total = subtotal + shipping + tax
        return this.formatPrice(total)
    }

    closeCollectPaymentButtonInnerContainer() {
        this.actionBtns.collectPayment.classList.remove('opened')
    }

    // Order Creation methods

    showOrderPaymentError(errorText) {
        if (this.modals.orderPayment.errors.timeoutID) {
            clearTimeout(this.modals.orderPayment.errors.timeoutID)
        }

        this.modals.orderPayment.errors.textContent = errorText
        this.modals.orderPayment.errors.timeoutID = setTimeout(this.hideOrderPaymentError.bind(this), 5000)
    }

    hideOrderPaymentError() {
        this.modals.orderPayment.errors.textContent = ''
    }

    ensureChekoutManagerEntities() {
        const checkoutManager = NorthCommerce.CheckoutManager
        const api = NorthCommerce.DataApi

        checkoutManager.resetEntities()
        const tasksQueue = [
            ensureOrderEntity.call(this),
            ensureCustomerEntity.call(this),
        ]
        Promise.all(tasksQueue)

        async function ensureOrderEntity() {
            try {
                checkoutManager.setEntity(
                    'order',
                    await api.get(`orders/${this.settings.order.id}`)
                )
            } catch(e) {
                return console.error(e)
            }
        }

        async function ensureCustomerEntity() {
            try {
                checkoutManager.setEntity(
                    'customer',
                    await api.get(`customers/${this.settings.customer.id}`)
                )
            } catch(e) {
                return console.error(e)
            }
        }
    }

    restHeaders() {
        return {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'X-WP-Nonce': northCommerceSettings.rest_nonce,
            'nc-order-nonce': this.actionBtns.collectPayment.ncNonce,
            'nc-order-referer': this.actionBtns.collectPayment.ncReferer,
        }
    }

    /** @version 0.1.25 */
    async saveOrderDraft() {
        const checkoutManager = NorthCommerce.CheckoutManager

        this.updateOrderTotals()
        this.disableActionButtons()
        this.disableProductsListButtons()
        enableSubmittionIndication.call(this)

        const response = await this.patchOrder({}, () => {
            this.enableProductsListDeleteButtons()
            this.enableActionButtons()
            disableSubmittionIndication.call(this)
        })

        if (!response.success) {
            return
        }

        checkoutManager.resetEntities()

        if (response.redirect) {
            location.href = response.redirect
        }

        function enableSubmittionIndication() {
            this.actionBtns.saveDraft.textContent = this.actionBtns.saveDraft.dataset.titleSaving
        }

        function disableSubmittionIndication() {
            this.actionBtns.saveDraft.textContent = this.actionBtns.saveDraft.dataset.titleIdle
        }
    }

    /** @version 0.1.25 */
    async setOrderStatusPaid() {
        const checkoutManager = NorthCommerce.CheckoutManager

        emableSubmittinngIndication.call(this)
        this.updateOrderTotals()
        this.disableActionButtons()
        this.disableProductsListButtons()

        await checkoutManager.setPaymentProvider('none')

        const response = await this.patchOrder(
            {
                payment_status: {
                    slug: 'paid'
                },
            },
            () => {
                this.enableProductsListDeleteButtons()
                this.enableActionButtons()
                disableSubmittingIndication.call(this)
            }
        )

        if (!response.success) {
            return
        }

        checkoutManager.resetEntities()

        if (response.redirect) {
            location.href = response.redirect
        }

        function emableSubmittinngIndication() {
            this.modals.orderPaidNotice.loader.style.display = 'block'
            this.modals.orderPaidNotice.btnSubmit.classList.add('disabled')
        }

        function disableSubmittingIndication() {
            this.modals.orderPaidNotice.loader.style.display = 'none'
            this.modals.orderPaidNotice.btnSubmit.classList.remove('disabled')
        }
    }

    mountStripeElement() {
        const isMounted = this.modals.orderPayment.stripeElement?.querySelector('iframe')
        if (isMounted) {
            return
        }

        if (!ncStripe || !ncStripe.public) {
            return
        }

        const stripeHelper = NorthCommerce.StripeHelper

        try {
            stripeHelper.stripeApi = Stripe(ncStripe.public)
            stripeHelper.elements = stripeHelper.stripeApi.elements()
            this.modals.orderPayment.cardElement = stripeHelper.elements.create('card')
            this.modals.orderPayment.cardElement.mount(`#${this.modals.orderPayment.stripeElement.id}`)
        } catch(e) {
            return console.warn(e)
        }
    }

    async handleOrderPaymentActionClick(e) {
        const stripeHelper = NorthCommerce.StripeHelper

        this.updateOrderTotals()
        emableSubmittinngIndication.call(this)
        this.hideOrderPaymentError()
        await retrievePaymentElementData.call(this)

        if (
            'stripe' !== getActivePaymentOptionValue.call(this)
            || !stripeHelper.paymentElement
        ) {
            disableSubmittingIndication.call(this)
            return
        }

        await this.createStripePaidOrder()

        disableSubmittingIndication.call(this)

        function retrievePaymentElementData() {
            return stripeHelper.stripeApi
                .createToken(this.modals.orderPayment.cardElement)
                .then(({error, token}) => {
                    if (error) {
                        this.showOrderPaymentError(error.message)
                        return
                    }

                    if (token) {
                        stripeHelper.paymentElement = token
                    }
                })
        }

        function getActivePaymentOptionValue() {
            return this.modals.orderPayment.options.querySelector(
                '[name="payment_option"]:checked'
            ).value
        }

        function emableSubmittinngIndication() {
            this.modals.orderPayment.loader.style.display = 'block'
            this.modals.orderPayment.btnSubmit.classList.add('disabled')
        }

        function disableSubmittingIndication() {
            this.modals.orderPayment.loader.style.display = 'none'
            this.modals.orderPayment.btnSubmit.classList.remove('disabled')
            this.modals.orderPayment.btnSubmit.blur()
        }
    }

    /** @version 0.1.25 */
    async createStripePaidOrder() {
        const checkoutManager = NorthCommerce.CheckoutManager
        const stripeHelper = NorthCommerce.StripeHelper

        this.disableProductsListButtons()
        this.disableActionButtons()

        await checkoutManager.setPaymentProvider('stripe')
        await this.patchOrder()

        try {
            const paymentResult = await stripeHelper.stripeApi.confirmPayment({
                clientSecret: stripeHelper.clientSecret,
                confirmParams: {
                    return_url: getStripeWebhook(),
                    payment_method_data: {
                        type: 'card',
                        card: {
                            token: stripeHelper.paymentElement.id,
                        },
                    },
                },
            })

            if (paymentResult.error) {
                throw paymentResult.error
            }
        } catch (e) {
            this.enableProductsListDeleteButtons()
            this.enableActionButtons()

            e = 'object' === typeof e ? e.toString() : e
            return this.showOrderPaymentError(e)
        }

        this.enableProductsListDeleteButtons()
        this.enableActionButtons()

        function getStripeWebhook() {
            const stripeWebhook = new URL(northCommerceSettings.stripeConfirmPaymentURL)
            stripeWebhook.searchParams.set('redirect', 'order-single')
            return stripeWebhook.href
        }
    }

    /** @since 0.1.25 */
    async patchOrder(body = {}, finallyCB = () => {}) {
        const defaultBody = {
            line_items: this.orderLineItems(),
            shipping: this.orderShippingData(),
            tax: this.orderTaxData(),
        }

        return fetch(`${northCommerceSettings.rest_url}/orders/${this.settings.order.id}`, {
            method: 'PATCH',
            headers: this.restHeaders(),
            body: JSON.stringify({ ...defaultBody, ...body }),
        })
            .then((response) => response.json())
            .then((response) => {
                if (!response.success) {
                    return alert(response.message)
                }
                return response
            })
            .catch((error) => console.error(error))
            .finally(finallyCB)
    }

    orderLineItems() {
        const lineItems = []

        this.sections.products.list
            .querySelectorAll('.product__wrapper')
            .forEach((product) => {
                lineItems.push({
                    price: product.dataset.productPrice,
                    product_variant_id: product.dataset.variantId,
                    product_id: product.dataset.productId,
                    max_quantity: product.dataset.maxQuantity ?? null,
                    qty: parseFloat(product.querySelector('[data-type="qty-input"]').value),
                })
            })

        return lineItems
    }

    /** @version 0.1.25 */
    orderShippingData() {
        const rateType = this.getShippingPopupShippingOption().value

        const data = {
            option: rateType,
        }

        if ('flat' === rateType) {
            const selectEl = this.modals.shipping.options.flat.extra.select
            const selectedOptionEl = selectEl.options[ selectEl.selectedIndex ]
            data[rateType] = {
                rateId: selectedOptionEl.value,
                rateTypeId: selectEl.dataset.rateTypeId,
            }
        }

        if ('calculated' === rateType) {
            const shippingRateOption = this.getShippingPopupShippingRateOption()
            const rateType = shippingRateOption?.dataset.ncType ?? null

            const ratePriceValue =
                shippingRateOption
                    ?.closest('.shipping-rate')
                    ?.querySelector('.rate_price .value').textContent ?? null

            const rateName = shippingRateOption?.value ?? null
            const rateTypeId = shippingRateOption.closest('.optional-container').dataset.rateTypeId

            data[rateType] = {
                rateType,
                rateTypeId,
                ratePrice: this.formatPrice(ratePriceValue)
            }

            if ('internal' === rateType) {
                data[rateType].rateName = rateName
            }

            if ('calculated' === rateType) {
                let carrier = null
                if (rateName) {
                    const rateNameRaw = shippingRateOption?.closest('.shipping-rate')?.querySelector('.rate_name')
                    if (rateNameRaw) {
                        carrier = rateNameRaw.textContent.split(':')[0]
                    }
                }

                data[rateType].easyPostRateID = shippingRateOption.dataset.easyPostRateId
                data[rateType].carrierID = shippingRateOption.dataset.carrierId
                data[rateType].carrier = carrier
                data[rateType].service = rateName
            }
        }

        return data
    }

    orderTaxData() {
        return {
            charge: this.modals.taxes.chargeCheckbox.checked,
            rate: this.modals.taxes.rateInput.value,
        }
    }

}