/**
 * Coupons List
 *
 * @since   0.1.21
 * @version 0.1.21
 */
export class CouponsList {

    constructor() {
        this.determineVariables()
        this.setListeners()
    }

    determineVariables() {
        this.listContainer = document.querySelector('#coupons-tab .coupons.list')
        this.restRoute = `${ajax_object.rest_url}/coupons`
        this.listTable = this.listContainer.querySelector('.result__coupons')
        this.statusFiltersContainer = this.listContainer.querySelector('.coupons__statuses')
        this.boardResult = this.listContainer.querySelector('.board .board__result')
        this.filtersForm = this.listContainer.querySelector('.board__form.filters')
    }

    setListeners() {
        this.setListItemClickListener()
        this.setCheckboxChangeListener()
        this.setStatusClickListener()
        this.setPaginationBtnClickListener()
        this.setFiltersChangeListener()
        this.setFiltersFormSubmitListener()
    }

    setListItemClickListener() {
        if (!this.listTable) {
            return
        }

        this.listTable.addEventListener('click', this.handleCouponItemClick.bind(this))
    }

    setCheckboxChangeListener() {
        const CouponsList = this

        this.listContainer
            .querySelectorAll('#all_coupons')
            .forEach((checkbox) => {
                checkbox.addEventListener('change', CouponsList.handleAllCouponsSelection.bind(CouponsList))
            })

        if (this.listTable) {
            this.listTable.addEventListener('change', CouponsList.handleCouponItenSelection.bind(CouponsList))
        }
    }

    setStatusClickListener() {
        const CouponsList = this

        this.statusFiltersContainer
            .querySelectorAll('[data-status-filter]')
            .forEach((filter) => {
                filter.addEventListener('click', CouponsList.handleStatusClick.bind(CouponsList))
            })
    }

    setPaginationBtnClickListener() {
        const CouponsList = this

        this.listContainer
            .querySelectorAll('.coupon-prev, .coupon-next')
            .forEach((btn) => {
                btn.addEventListener('click', CouponsList.handlePaginationBtnClick.bind(CouponsList))
            })
    }

    setFiltersChangeListener() {
        this.filtersForm
            .querySelectorAll('select')
            .forEach((select) => {
                jQuery(select).on('select2:select', this.handleFiltersSelectChange.bind(this))
            })
    }

    setFiltersFormSubmitListener() {
        this.filtersForm.addEventListener('submit', this.handleFiltersFormSubmit.bind(this))
    }

    handleCouponItemClick(e) {
        if (
            'A' === e.target.tagName
            || e.target.closest('a')
            || e.target.closest('.item__selector')
        ) {
            return
        }

        const couponItem = e.target.closest('[data-coupon-id]')

        if (!couponItem) {
            return
        }

        if (this.countCheckedCouponsItems()) {
            const checkbox = couponItem.querySelector('[name="selected"]')
            return this.toggleCheckbox(checkbox)
        }

        this.redirectToCouponSingle(couponItem.dataset)
    }

    toggleCheckbox(checkbox) {
        checkbox.checked = !checkbox.checked
        this.updateSelectedCounter()
    }

    redirectToCouponSingle({couponPermalink}) {
        if (!couponPermalink) {
            return
        }

        window.location.href = couponPermalink
    }

    handleAllCouponsSelection(e) {
        const targetChecked = e.target.checked
        const selectorSuffix = targetChecked ? 'not(:checked)' : 'checked'

        this.listTable
            .querySelectorAll(`.item__selector [name="selected"]:${selectorSuffix}`)
            .forEach((checkbox) => checkbox.checked = targetChecked)

        this.updateSelectedCounter()
    }

    handleCouponItenSelection(e) {
        if ('selected' !== e.target.name) {
            return
        }

        this.updateSelectedCounter()
    }

    updateSelectedCounter() {
        this.selectedCounter = this.selectedCounter ?? this.boardResult.querySelector('.selected__counter')

        const checkedInpoutsCounter = this.countCheckedCouponsItems()

        if (!checkedInpoutsCounter) {
            this.boardResult.classList.remove('has-selected')
            return
        }

        this.boardResult.classList.add('has-selected')
        this.selectedCounter.textContent = checkedInpoutsCounter
    }

    countCheckedCouponsItems() {
        return this.listTable.querySelectorAll('[name="selected"]:checked').length
    }

    handleStatusClick(e) {
        if (e.target.classList.contains('active')) {
            return
        }

        const status = e.target.dataset.statusFilter
        this.updateListPage({ status })
    }

    handlePaginationBtnClick(e) {
        if (!this.listTable) {
            return
        }

        const currentPage = parseInt( this.listTable.dataset.currentPage )

        if (e.target.classList.contains('coupon-prev')) {
            if (1 === currentPage) {
                return
            }
            const prevPage = currentPage - 1
            if (prevPage <= 0) {
                return
            }

            this.updateListPage({ paged: prevPage })
        }

        if (e.target.classList.contains('coupon-next')) {
            const maxPage = parseInt( this.listTable.dataset.maxPage )
            if (currentPage >= maxPage) {
                return
            }

            const nextPage = currentPage + 1
            if (nextPage > maxPage) {
                return
            }

            this.updateListPage({ paged: nextPage })
        }
    }

    handleFiltersFormSubmit(e) {
        e.preventDefault()
        this.updateListPage()
    }

    handleFiltersSelectChange(e) {
        this.updateListPage()
    }

    async updateListPage({ paged, status } = {}) {
        const formData = this.serializeForm(this.filtersForm)
        formData.paged = paged ?? 1
        formData.status = status ?? this.getActiveStatus()

        const couponSearch = formData['coupon_search']
        delete formData['coupon_search']

        const getParams = new URLSearchParams(formData).toString()

        this.disableAllActions()

        return fetch(`${this.restRoute}?${getParams}`, {
            method: 'GET',
            headers: {
                'X-WP-Nonce': ajax_object.rest_nonce,
                'nc-coupon-search': JSON.stringify({couponSearch})
            },
        })
            .then((response) => response.json())
            .then((response) => {

                if ( ! response.success ) {
                    return
                }

                this.updateStatusFilters(response)
                this.updatePaginationElements(response)

                this.listTable.innerHTML = response.coupons_html

            })
            .catch((error) => console.error(error))
            .finally(() => this.enableAllActions())

    }

    disableAllActions() {
        this.statusFiltersContainer
            .querySelectorAll('[data-status-filter]')
            .forEach((statusFilter) => statusFilter.classList.add('disabled'))

        this.listContainer
            .querySelectorAll(`.coupon-prev:not(.disabled), .coupon-next:not(.disabled)`)
            .forEach((paginationBtn) => paginationBtn.classList.add('disabled'))

        this.listContainer
            .querySelectorAll('.board__overlay')
            .forEach((overlay) => overlay.style.display = 'block')
    }

    enableAllActions() {
        this.statusFiltersContainer
            .querySelectorAll('[data-status-filter].disabled')
            .forEach((disabledFilter) => disabledFilter.classList.remove('disabled'))

        this.listContainer
            .querySelectorAll('.board__overlay')
            .forEach((overlay) => overlay.style.display = 'none')

    }

    getActiveStatus() {
        return this.listContainer
            .querySelector('.coupons__statuses .status__filter.active')
            .dataset.statusFilter
    }

    updateStatusFilters({currentStatus, statusCounters}) {
        this.listContainer
            .querySelectorAll(`.coupons__statuses .status__filter.active`)
            .forEach((statusActive) => statusActive.classList.remove('active'))

        this.listContainer
            .querySelectorAll(`.coupons__statuses [data-status-filter]`)
            .forEach((statusEL) => {
                const statusFilter = statusEL.dataset.statusFilter

                if (statusFilter === currentStatus) {
                    statusEL.classList.add('active')
                }

                if (statusCounters[statusFilter]) {
                    statusEL.querySelector('.counter').textContent = `(${statusCounters[statusFilter]})`
                }
            })
    }

    updatePaginationElements({ currentPage, maxPage, paginationText }) {

        this.listTable.dataset.currentPage = currentPage
        this.listTable.dataset.maxPage = maxPage

        this.listContainer
            .querySelectorAll(`.board__actions .action__result span`)
            .forEach((paginationEl) => paginationEl.textContent = paginationText)

        this.listContainer
            .querySelectorAll(`.coupon-prev.disabled, .coupon-next.disabled`)
            .forEach((btn) => btn.classList.remove('disabled'))

        if (currentPage >= maxPage) {
            this.listContainer
                .querySelectorAll(`.coupon-next`)
                .forEach((btn) => btn.classList.add('disabled'))
        }

        if (currentPage <= 1) {
            this.listContainer
                .querySelectorAll(`.coupon-prev`)
                .forEach((btn) => btn.classList.add('disabled'))
        }

    }

    serializeForm(form) {
        const formData = new FormData(form)
        const pairs = {}
        for (const [ name, value ] of formData) {
            if (value) {
                pairs[ name ] = value
            }
        }
        return pairs
    }

}