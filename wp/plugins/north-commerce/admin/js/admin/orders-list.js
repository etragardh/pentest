/**
 * Orders List Page
 *
 * @since   0.1.23
 * @version 0.1.24
 */
export class OrdersList {

    constructor() {
        this.determineVariables()
        this.setListeners()
        this.initCustomerCreationForm()
    }

    determineVariables() {
        this.determinePopupVariables()
    }

    determinePopupVariables() {
        this.modals = {}
        this.newOrderButton = document.querySelector('[data-nc-custom-popup="#customers-modal"]')

        this.determineCustomersPopupVariables()
    }

    determineCustomersPopupVariables() {
        this.modals.customers = document.querySelector('#customers-modal')

        if (!this.modals.customers) {
            return console.warn('modals.customers is empty')
        }

        this.modals.customers.titleText = this.modals.customers.querySelector('.integration-popup-name')
        this.modals.customers.loader = this.modals.customers.querySelector('.loader')
        this.modals.customers.searchInputContainer = this.modals.customers.querySelector('.search-input-wrapper')
        this.modals.customers.searchInput = this.modals.customers.searchInputContainer.querySelector('#customer-filter-name')
        this.modals.customers.list = this.modals.customers.querySelector('.popup-customers-list')
        this.modals.customers.emptyList = this.modals.customers.querySelector('.empty-list')
        this.modals.customers.creationForm = this.modals.customers.querySelector('.create-new-customer')
        this.modals.customers.errors = this.modals.customers.querySelector('.form-errors')
        this.modals.customers.btnSubmit = this.modals.customers.querySelector('.admin-popup-submit')
    }

    setListeners() {
        this.setPopupsListeners()
    }

    async initCustomerCreationForm() {
        if ('undefined' === typeof libphonenumber) {
            await import('../../../libs/Intl-Tel/build/libphonenumber.js')
        }
        this.phoneUtil = libphonenumber.PhoneNumberUtil.getInstance()

        setNameInputListeners.call(this)
        setEmailInputListeners.call(this)
        setPhoneInputListeners.call(this)


        function setNameInputListeners() {
            const customerNames = this.modals.customers.querySelectorAll('.form-row.names input')
            customerNames.forEach((nameInput) => {
                nameInput.addEventListener('keyup', (e) => {
                    'Enter' !== e.key && this.resetCustomerNameInput(e.target)
                    'Enter' === e.key && this.validateCustomerNameInput(e.target)
                })
                nameInput.addEventListener('blur', (e) => this.validateCustomerNameInput(e.target))
            })
        }

        function setEmailInputListeners() {
            const emailInput = this.modals.customers.querySelector(`[name="customer_email"]`)

            if (!emailInput) {
                return
            }

            emailInput.addEventListener('keyup', (e) => {
                'Enter' !== e.key && this.resetCustomerInputEmail(e.target)
                'Enter' === e.key && this.validateCustomerEmailInput(e.target)
            })
            emailInput.addEventListener('blur', (e) => this.validateCustomerEmailInput(e.target))
        }

        function setPhoneInputListeners() {
            const phoneCountriesSelect = this.modals.customers.querySelector('.phone-select')
            if (phoneCountriesSelect) {
                initPhoneSelect.call(this, phoneCountriesSelect)
                initPhoneFormat.call(this, phoneCountriesSelect)
                phoneCountriesSelect.addEventListener('change', phoneCountryChange.bind(this))
            }

            const phoneInput = this.modals.customers.querySelector('.phone-input')
            if (phoneInput) {
                phoneInput.addEventListener('keyup', (e) => {
                    'Enter' !== e.key && this.resetCustomerPhoneInput(e.target)
                    'Enter' === e.key && this.validateCustomerPhoneInput(e.target)
                })
                phoneInput.addEventListener('blur', (e) => this.validateCustomerPhoneInput.call(this, e.target))
            }

            function initPhoneSelect(phoneCountriesSelect) {
                const countries = this.phoneUtil.getSupportedRegions()
                countries.map((item) => {
                    const opt = document.createElement('option')
                    opt.className = 'phoneSelectOption'
                    opt.value = item
                    opt.innerHTML = item
                    phoneCountriesSelect.appendChild(opt)
                })
            }

            function initPhoneFormat(phoneCountriesSelect) {
                const code = phoneCountriesSelect.value
                const input = phoneCountriesSelect.parentNode.querySelector('.phone-input')
                input.placeholder = this.phoneUtil.formatOutOfCountryCallingNumber(this.phoneUtil.getExampleNumber(code))
            }

            function phoneCountryChange(e) {
                const code = e.target.value
                const input = e.target.parentNode.querySelector('.phone-input')
                input.placeholder = this.phoneUtil.formatOutOfCountryCallingNumber(this.phoneUtil.getExampleNumber(code))
                this.validateCustomerPhoneInput.call(this, input)
            }
        }
    }

    // Popup methods

    setPopupsListeners() {
        this.setPopupsOpenListener()
        this.setCustomersPopupCheckboxChangeListener()
        this.setCustomersPopupNameSearchListener()
        this.setCustomersPopupSubmitListener()
    }

    setPopupsOpenListener() {
        this.newOrderButton.addEventListener('click', handlePopupsOpen.bind(this))
        this.newOrderButton.removeAttribute('disabled')

        function handlePopupsOpen(e) {
            const customersModalID = '#customers-modal'
            if (
                customersModalID === e.target.dataset.ncCustomPopup
                || e.target.closest(`[data-nc-custom-popup="${customersModalID}"`)
            ) {
                this.handleCustomersPopupOpen()
            }
        }
    }

    closePopup() {
        const activePopup = document.querySelector('#orders-tab > .nc-custom-popup--active')

        if (!activePopup) {
            return
        }

        activePopup.classList.remove('nc-custom-popup--active')
        activePopup.setAttribute('aria-hidden', 'true')
    }

    // Customers Popup methods

    handleCustomersPopupOpen() {
        resetSearchInput.call(this)
        refreshCustomresList.call(this)
        resetErrorsSection.call(this)
        refreshSectionsVisibility.call(this)
        resetCreateSubmitButton.call(this)

        function resetSearchInput() {
            this.modals.customers.searchInput.value = ''
        }

        function refreshCustomresList() {
            this.modals.customers.list
                .querySelectorAll('.list__item.hide')
                .forEach((item) => item.classList.remove('hide'))

            this.modals.customers.list
                .querySelectorAll('[type="checkbox"]:checked')
                .forEach((checkbox) => checkbox.checked = false)
        }

        function resetErrorsSection() {
            this.modals.customers.errors.style.display = 'none'
            this.modals.customers.errors.textContent = ''
        }

        function refreshSectionsVisibility() {
            this.modals.customers.titleText.textContent = this.modals.customers.titleText.dataset.ncTextDefault
            this.modals.customers.searchInputContainer.classList.remove('hide')
            this.modals.customers.emptyList.classList.add('hide')
            this.modals.customers.list.classList.remove('hide')
            this.modals.customers.creationForm.classList.add('hide')
        }

        function resetCreateSubmitButton() {
            this.modals.customers.btnSubmit.dataset.ncType = 'create'
            this.modals.customers.btnSubmit.value = this.modals.customers.btnSubmit.dataset.ncCreate
            this.modals.customers.btnSubmit.classList.remove('disabled')
        }
    }

    setCustomersPopupCheckboxChangeListener() {
        if (!this.modals.customers.list) {
            return
        }

        this.modals.customers.list
            .addEventListener('change', handleCustomerCheckboxChange.bind(this))

        function handleCustomerCheckboxChange(e) {
            if (!e.target.classList.contains('north-checkbox__handler')) {
                return
            }

            resetOtherCustomers.call(this, e)
            determineSubmitBtnType.call(this, e)
        }

        function resetOtherCustomers(e) {
            this.modals.customers.list
                .querySelectorAll(`[name="applied_customer_id"]:not([value="${e.target.value}"]):checked`)
                .forEach((checkbox) => checkbox.checked = false)
        }

        function determineSubmitBtnType(e) {
            this.modals.customers.btnSubmit.dataset.ncType = e.target.checked
                ? 'select'
                : 'create'

            const btnText = e.target.checked
                ? this.modals.customers.btnSubmit.dataset.ncSelect
                : this.modals.customers.btnSubmit.dataset.ncCreate

            this.modals.customers.btnSubmit.value = btnText
        }
    }

    setCustomersPopupNameSearchListener() {
        const nameFilter = this.modals.customers.searchInput

        if (!nameFilter) {
            return
        }

        nameFilter.addEventListener('input', this.handleCustomersListFilter.bind(this))
    }

    setCustomersPopupSubmitListener() {
        this.modals.customers.btnSubmit.addEventListener('click', this.handleCustomersPopupSubmit.bind(this))
    }

    /** @version 0.1.25 */
    handleCustomersPopupSubmit(e) {
        e.preventDefault()

        if ('select' === e.target.dataset.ncType) {
            handleCustomerSelection.call(this)
        }

        if ('create' === e.target.dataset.ncType) {
            isCustomerCreationFormHidden.call(this)
                ? showCustomerCreationForm.call(this)
                : handleCustomerCreation.call(this)
        }

        async function handleCustomerSelection() {
            this.modals.customers.btnSubmit.classList.add('disabled')
            this.modals.customers.loader.style.display = 'block'

            const customerID = getActiveCustomerID.call(this)
            await this.createOrderDraft(customerID)
        }

        function isCustomerCreationFormHidden() {
            return this.modals.customers.creationForm.classList.contains('hide')
        }

        function showCustomerCreationForm() {
            this.modals.customers.titleText.textContent = this.modals.customers.titleText.dataset.ncTextCustomerCreate
            this.modals.customers.searchInputContainer.classList.add('hide')
            this.modals.customers.emptyList.classList.add('hide')
            this.modals.customers.list.classList.add('hide')

            if (this.modals.customers.searchInput.value) {
                this.modals.customers.creationForm.querySelector('#customer_email').value = this.modals.customers.searchInput.value
            }
            this.modals.customers.creationForm.classList.remove('hide')
        }

        async function handleCustomerCreation() {
            this.modals.customers.creationForm.formData = getCustomerFormdata.call(this)

            if (!isCreationFormValid.call(this)) {
                return
            }

            const customer = await this.createCustomer()
            await this.createOrderDraft(customer.new_customer_id)

            function getCustomerFormdata() {
                let formData = this.serializeForm(this.modals.customers.querySelector('form'))
                return filterCustomerCreationData(formData)

                function filterCustomerCreationData(formData) {
                    const filteredData = {}
                    const prefix = 'customer_'
                    for (let key in formData) {
                        if (!key.startsWith(prefix)) {
                            continue
                        }
                        const shortKey = key.slice(prefix.length)
                        filteredData[shortKey] = formData[key]
                    }
                    return filteredData
                }
            }

            function isCreationFormValid() {
                let formValid = true
                const formData = this.modals.customers.creationForm.formData

                for (const inputName in formData) {
                    const input = this.modals.customers.querySelector(`[name="customer_${inputName}"]`)
                    let inputValid = true

                    if (!inputName.includes('shipping_')) {
                        // main customer inputs
                        if (inputName.endsWith('name')) {
                            inputValid = this.validateCustomerNameInput(input)
                        }
                        if (inputName.endsWith('email')) {
                            inputValid = this.validateCustomerEmailInput(input)
                        }
                        if (inputName.endsWith('phone')) {
                            inputValid = this.validateCustomerPhoneInput(input)
                        }
                    }

                    formValid = formValid ? inputValid : formValid
                }

                return formValid
            }
        }

        function getActiveCustomerID() {
            const activeCustomer = this.modals.customers.list
                .querySelector('[type="checkbox"]:checked')

            if (!activeCustomer) {
                return
            }

            return activeCustomer.value
        }
    }

    handleCustomersListFilter(e) {
        const self = this.handleCustomersListFilter
        self.throttleLimit = 700 // ms
        self.lastRan = self.lastRan ?? Date.now()

        if (self.timeoutID) {
            clearTimeout(self.timeoutID)
        }

        self.timeoutID = setTimeout(
            () => {
                if (Date.now() - self.lastRan >= self.throttleLimit) {
                    throttledFilterByCustomerItemName.call(this, e)
                    self.lastRan = Date.now()
                }
            },
            self.throttleLimit - (Date.now() - self.lastRan)
        )

        function throttledFilterByCustomerItemName(e) {
            this.modals.customers.filterValue = e.target.value.toLowerCase().trim()

            if (!this.modals.customers.filterValue) {
                this.modals.customers.list
                    .querySelectorAll(`.list__item.hide`)
                    .forEach((item) => item.classList.remove('hide'))

                toggleEmptyResultMessage.call(this)
                return
            }

            checkItemNames.call(this)
            toggleEmptyResultMessage.call(this)
        }

        function checkItemNames() {
            this.modals.customers.list
                .querySelectorAll(`.list__item`)
                .forEach((customerItem) => {
                    let itemString = customerItem.querySelector('.name').textContent.trim().toLowerCase()

                    if (!itemString.includes(this.modals.customers.filterValue)) {
                        const email = customerItem.querySelector('.email')
                        if (email) {
                            itemString = email.textContent.trim().toLowerCase()
                        }
                    }

                    itemString.includes(this.modals.customers.filterValue)
                        ? customerItem.classList.remove('hide')
                        : customerItem.classList.add('hide')
                })
        }

        function toggleEmptyResultMessage() {
            const hasElements = this.modals.customers.list
                .querySelector(`.list__item:not(.hide)`)

            hasElements
                ? hideEmptyResultMessage.call(this)
                : showEmptyResultMessage.call(this)

            function hideEmptyResultMessage() {
                const emptyList = this.modals.customers.emptyList
                emptyList.querySelector('.search-query').textContent = ''
                emptyList.classList.add('hide')
            }

            function showEmptyResultMessage() {
                const emptyList = this.modals.customers.emptyList
                emptyList.querySelector('.search-query').textContent = this.modals.customers.filterValue
                emptyList.classList.remove('hide')
            }
        }
    }

    validateCustomerPhoneInput(input) {
        const countrySelect = input.parentNode.querySelector('.phone-select')
        const countryCode = countrySelect.value
        this.resetCustomerPhoneInput(input)

        if (input.value.length || input.hasAttribute('required')) {
            if (!input.value.length) {
                showPhoneError(input, 'required')
                return false
            }

            try {
                const number = this.phoneUtil.parseAndKeepRawInput(input.value, countryCode)
                if (this.phoneUtil.isValidNumberForRegion(number, countryCode) === false) {
                    const result = this.phoneUtil.isPossibleNumberWithReason(number)
                    showPhoneError(input, 'Invalid phone number')
                    return false
                }
            } catch (error) {
                showPhoneError(input, error.message)
                return false
            }
        }

        return true

        function showPhoneError(input, error) {
            const inputContainer = input.parentNode
            inputContainer.classList.add('ErrorTextFieldMain')
            inputContainer.nextElementSibling.style.display = 'flex'

            inputContainer.nextElementSibling
                .querySelector('[data-type="error-icon"]')
                .nextSibling.nodeValue = error
        }
    }

    resetCustomerPhoneInput(input) {
        const inputContainer = input.parentNode
        inputContainer.classList.remove('ErrorTextFieldMain')
        inputContainer.querySelector('.phone-label').classList.remove('ErrorTextFieldLabel')
        inputContainer.nextElementSibling.style.display = 'none'
        inputContainer.nextElementSibling.classList.remove('input-error')
    }

    validateCustomerNameInput(input) {
        this.resetCustomerNameInput(input)
        const regexIntlName = /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u

        if (input.value.length || input.hasAttribute('required')) {
            if (!input.value.length) {
                showNameError(input, 'required')
                return false
            }
            if (!regexIntlName.test(input.value)) {
                showNameError(input, 'invalid field')
                return false
            }
        }

        return true

        function showNameError(input, error) {
            input.classList.add('ErrorTextFieldMain')
            input.parentNode.querySelector('[data-type="error"]').style.display = 'flex'
            input.parentNode.querySelector('[data-type="error-icon"]').nextSibling.nodeValue = error
        }
    }

    resetCustomerNameInput(input) {
        input.classList.remove('ErrorTextFieldMain')
        input.parentNode.querySelector('[data-type="error"]').style.display = 'none'
        input.parentNode.querySelector('[data-type="error-icon"]').nextSibling.nodeValue = ''
    }

	validateCustomerEmailInput(emailInput) {
		this.resetCustomerInputEmail(emailInput)

		if (!emailInput.value.length && !emailInput.hasAttribute('required')) {
			return true
		}

		if (!emailInput.value.length) {
			showEmailError(emailInput, 'required')
			return false
		}

		const regexEmail = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
		if (!regexEmail.test(emailInput.value)) {
			showEmailError(emailInput, 'invalid email')
			return false
		}

        return true

        function showEmailError(input, error) {
            input.classList.add('ErrorTextFieldMain')
            input.parentNode.querySelector('[data-type="error"]').style.display = 'flex'
            input.parentNode.querySelector('[data-type="error-icon"]').nextSibling.nodeValue = error
        }
	}

    resetCustomerInputEmail(input) {
		input.classList.remove('ErrorTextFieldMain')
		input.parentNode.querySelector('[data-type="error"]').style.display = 'none'
        input.parentNode.querySelector('[data-type="error-icon"]').nextSibling.nodeValue = ''
	}

    /** @version 0.1.25 */
    async createCustomer() {
        disableForm.call(this)

        return fetch(`${northCommerceSettings.rest_url}/customer`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-WP-Nonce': northCommerceSettings.rest_nonce,
            },
            body: JSON.stringify({
                customer: this.modals.customers.creationForm.formData,
            })
        })
            .then((response) => response.json())
            .then((response) => {
                enableForm.call(this)

                if (
                    'rest_forbidden' === response.code
                    || ! response.success
                ) {
                    const errorText = response.message ?? response.data ?? 'internal error'
                    return showError.call(this, errorText)
                }

                return response
            })
            .catch((error) => console.error(error))
            .finally(() => enableForm.call(this))


        function enableForm() {
            this.modals.customers.btnSubmit.classList.remove('disabled')
            this.modals.customers.loader.style.display = 'none'
        }

        function disableForm() {
            this.modals.customers.btnSubmit.classList.add('disabled')
            this.modals.customers.loader.style.display = 'block'
            this.modals.customers.errors.style.display = 'none'
        }

        function showError(errorText) {
            this.modals.customers.errors.style.display = 'block'
            this.modals.customers.errors.textContent = errorText
        }
    }

    /** @since 0.1.25 */
    async createOrderDraft(customerID) {
        return fetch(`${northCommerceSettings.rest_url}/orders/draft`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-WP-Nonce': northCommerceSettings.rest_nonce,
            },
            body: JSON.stringify({ customerID })
        })
            .then((response) => response.json())
            .then((response) => {
                if (
                    'rest_forbidden' === response.code
                    || ! response.success
                ) {
                    const errorText = response.message ?? response.data ?? 'internal error'
                    return showError.call(this, errorText)
                }

                if (response.redirect) {
                    window.location = response.redirect
                }
            })
            .catch((error) => console.error(error))
    }

    // Other methods

    serializeForm(form) {
        const formData = new FormData(form)
        const pairs = {}
        for (const [ name, value ] of formData) {
            if (name.endsWith('[]')) {
                if (!pairs[ name ]) {
                    pairs[ name ] = []
                }
                return pairs[ name ].push(value)
            }

            pairs[ name ] = value
        }
        return pairs
    }

}