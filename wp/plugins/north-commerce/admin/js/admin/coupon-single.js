/**
 * Coupon Single
 *
 * @since   0.1.21
 * @version 0.1.24
 */
export class CouponSingle {

    constructor() {
        this.determineVariables()
        this.enableStickySidebar()
        this.enableDatePickers()
        this.setListeners()
    }

    determineVariables() {
        this.formEl = document.querySelector('#coupon-form')

        this.restRoute = `${ajax_object.rest_url}/coupon`

        this.actionButtons = this.formEl.querySelectorAll('#form-actions .btn.action')

        this.appliedCountriesContainer = this.formEl.querySelector('#coupon-countries')
        this.appliedCountriesListWrapper = this.appliedCountriesContainer.querySelector('.list-countries')

        this.appliedProductsContainer = this.formEl.querySelector('#coupon-products')
        this.appliedProductsListWrapper = this.appliedProductsContainer.querySelector('.list-products')

        this.appliedCustomersContainer = this.formEl.querySelector('#coupon-customers')
        this.appliedCustomersListWrapper = this.appliedCustomersContainer.querySelector('.list-customers')

        this.determinePopupVariables()
    }

    determinePopupVariables() {
        countriesVariables.call(this)
        productsVariables.call(this)
        customersVariables.call(this)

        function countriesVariables() {
            this.countriesModal = document.querySelector('#countries-modal')

            if (!this.countriesModal) {
                return
            }

            this.countriesModal.countriesList = this.countriesModal.querySelector('.popup-countries-list')
            this.countriesModal.emptyList = this.countriesModal.querySelector('.empty-list')
            this.countriesModal.btnSubmit = this.countriesModal.querySelector('[type="submit"]')
        }

        function productsVariables() {
            this.productsModal = document.querySelector('#products-modal')

            if (!this.productsModal) {
                return
            }

            this.productsModal.productsList = this.productsModal.querySelector('.popup-products-list')
            this.productsModal.emptyList = this.productsModal.querySelector('.empty-list')
            this.productsModal.btnSubmit = this.productsModal.querySelector('[type="submit"]')

            this.productsModal.checkbox = {
                products: {
                    name: 'applied_products[]',
                    get selector() {
                        return `[name="${this.name}"]`
                    }
                },
                variants: {
                    name: 'applied_variants[]',
                    get selector() {
                        return `[name="${this.name}"]`
                    }
                },
            }
        }

        function customersVariables() {
            this.customersModal = document.querySelector('#customers-modal')

            if (!this.customersModal) {
                return
            }

            this.customersModal.eligibilitiesSelect = this.customersModal.querySelector('select.customers-eligibilities')
            this.customersModal.customersList = this.customersModal.querySelector('.popup-customers-list')
            this.customersModal.emptyList = this.customersModal.querySelector('.empty-list')
            this.customersModal.btnSubmit = this.customersModal.querySelector('[type="submit"]')
        }
    }

    enableStickySidebar() {
        const sidebar = jQuery('#sidebar')

        if (!sidebar || !sidebar.theiaStickySidebar) {
            return
        }

        sidebar.theiaStickySidebar({
            additionalMarginTop: 50,
            additionalMarginBottom: 150
        })
    }

    setListeners() {
        this.setModeChangeListener()
        this.setCodeGenerateBtnClickListener()
        this.setDiscountTypeChangeListener()
        this.setRequirementChangeListener()
        this.setAppliedProductsTypeChangeListener()
        this.setAppliedCountriesTypeChangeListener()
        this.setAppliedCustomersTypeChangeListener()
        this.setListItemDeleteClickListener()
        this.setEndDateToggleListener()
        this.setCouponDeleteBtnClickListener()
        this.setFormSubmitListener()

        this.setPopupsListeners()
    }

    setModeChangeListener() {
        const modesContainer = document.querySelector('#coupon-mode')

        if (!modesContainer) { return }

        modesContainer.addEventListener('change', modeChanged)

        function modeChanged(e) {
            if ('coupon_mode' !== e.target.name) {
                return
            }

            e.currentTarget.querySelector('.mode__name').textContent = e.target.value
        }
    }

    setCodeGenerateBtnClickListener() {
        const generateBtn = document.querySelector('[data-action="generate-promocode"]')

        if (!generateBtn) {
            return
        }

        generateBtn.classList.remove('disabled')
        generateBtn.addEventListener('click', generateNewCode)

        function generateNewCode(e) {
            e.preventDefault()

            const inputCoupunName = document.querySelector('#coupon_name')

            if (!inputCoupunName) {
                return
            }

            const randomCharactersString = Math.random().toString(36).substring(2).toUpperCase()
            inputCoupunName.setAttribute('value', randomCharactersString)
        }
    }

    setDiscountTypeChangeListener() {
        const discountTypesContainer = document.querySelector('#coupon-discount-type')

        if (!discountTypesContainer) {
            return
        }

        discountTypesContainer.addEventListener('change', typeChanged)

        function typeChanged(e) {
            if ('coupon_discount_type_id' !== e.target.name) {
                return
            }

            e.currentTarget
                .querySelectorAll('.optional-container.active')
                .forEach((input) => input.classList.remove('active'))

            const optionalInputClass = `${e.target.id.slice(0, '-type'.length * -1)}-amount`
            const optionalInputSelector = `.optional-container.${optionalInputClass}`
            const optionalInputContainer = e.currentTarget.querySelector(optionalInputSelector)

            if (!optionalInputContainer) {
                return
            }

            optionalInputContainer.classList.add('active')
        }
    }

    setRequirementChangeListener() {
        const requirementsContainer = document.querySelector('#coupon-requirement')

        if (!requirementsContainer) {
            return
        }

        requirementsContainer.addEventListener('change', requirementChanged)

        function requirementChanged(e) {
            if ('coupon_requirement_id' !== e.target.name) {
                return
            }

            e.currentTarget
                .querySelectorAll('.optional-container.active')
                .forEach((input) => input.classList.remove('active'))

            const optionalInputSelector = `.optional-container.${e.target.id}-amount`
            const optionalInputContainer = e.currentTarget.querySelector(optionalInputSelector)

            if (!optionalInputContainer) {
                return
            }

            optionalInputContainer.classList.add('active')
        }
    }

    setAppliedProductsTypeChangeListener() {
        const appliedProductsContainer = document.querySelector('#coupon-products')

        if (!appliedProductsContainer) {
            return
        }

        const productsListWrapper = appliedProductsContainer.querySelector('.applied-products-list')

        if (!productsListWrapper) {
            return
        }

        appliedProductsContainer.addEventListener('change', productsRadioChanged)

        function productsRadioChanged(e) {
            if ('coupon_products' !== e.target.name) {
                return
            }

            'products_specific' === e.target.value
                ? productsListWrapper.classList.add('active')
                : productsListWrapper.classList.remove('active')
        }
    }

    setAppliedCountriesTypeChangeListener() {
        if (!this.appliedCountriesContainer) {
            return
        }

        const appliedCountriesList = this.appliedCountriesContainer.querySelector('.applied-countries-list')

        if (!appliedCountriesList) {
            return
        }

        this.appliedCountriesContainer.addEventListener('change', countriesTypeRadioChanged)

        function countriesTypeRadioChanged(e) {
            if ('coupon_countries' !== e.target.name) {
                return
            }

            'countries_specific' === e.target.value
                ? appliedCountriesList.classList.add('active')
                : appliedCountriesList.classList.remove('active')
        }
    }

    setAppliedCustomersTypeChangeListener() {
        if (!this.appliedCustomersContainer) {
            return
        }

        const appliedCustomersList = this.appliedCustomersContainer.querySelector('.applied-customers-list')

        if (!appliedCustomersList) {
            return
        }

        this.appliedCustomersContainer.addEventListener('change', customersTypeRadioChanged)

        function customersTypeRadioChanged(e) {
            if ('coupon_customers' !== e.target.name) {
                return
            }

            'customers_specific' === e.target.value
                ? appliedCustomersList.classList.add('active')
                : appliedCustomersList.classList.remove('active')
        }
    }

    setListItemDeleteClickListener() {
        this.appliedProductsListWrapper
            .addEventListener('click', removeProductItem)

        this.appliedCountriesListWrapper
            .addEventListener('click', removeCountryItem)

        this.appliedCustomersListWrapper
            .addEventListener('click', removeCustomerItem)


        function isDeleteAction(target) {
            return target.classList.contains('list__item-delete')
        }

        function removeProductItem(e) {
            if (!isDeleteAction(e.target)) {
                return
            }
            e.target.closest('.product__wrapper').remove()
        }

        function removeCountryItem(e) {
            if (!isDeleteAction(e.target)) {
                return
            }
            e.target.closest('.country__wrapper').remove()
        }

        function removeCustomerItem(e) {
            if (!isDeleteAction(e.target)) {
                return
            }
            e.target.closest('.item__wrapper').remove()
        }
    }

    setEndDateToggleListener() {
        const activeDatesContainer = document.querySelector('#coupon-dates')

        if (!activeDatesContainer) {
            return
        }

        const endDateWrapper = activeDatesContainer.querySelector('.optional-container.end-date')

        if (!endDateWrapper) {
            return
        }

        activeDatesContainer.addEventListener('change', handleEndDateToggle)

        function handleEndDateToggle(e) {
            if ('coupon_date_end_toggle' !== e.target.name) {
                return
            }

            e.target.checked
                ? endDateWrapper.classList.add('active')
                : endDateWrapper.classList.remove('active')
        }
    }

    setCouponDeleteBtnClickListener() {
        const actionDelete = this.formEl.querySelector('.action-delete')

        if (!actionDelete) {
            return
        }

        actionDelete.addEventListener('click', this.handleCouponDelete.bind(this))
    }

    setFormSubmitListener() {
        const actionSave = this.formEl.querySelector('.action-save')

        if (!actionSave) {
            return
        }

        actionSave.addEventListener('click', this.handleFormSubmit.bind(this))
    }

    handleCouponDelete(e) {
        const couponId = e.target.dataset.couponId
        const formNonce = this.formEl.querySelector('#form_nonce').value

        this.clearFormError()
        this.disableActionButtons()

        fetch(`${this.restRoute}/${couponId}`, {
            method: 'DELETE',
            headers: {
                'X-WP-Nonce': ajax_object.rest_nonce,
                'nc-form-nonce': formNonce,
            },
        })
            .then((response) => response.json())
            .then((response) => {

                if (
                    'rest_forbidden' === response.code
                    || !response.success
                ) {
                    const errortext = response.message ? response.message : response.data
                    return this.showFormError(errortext)
                }

                if (response.redirect) {
                    location.href = response.redirect
                }

            })
            .catch((error) => console.error(error))
            .finally(() => this.enableActionButtons())
    }

    handleFormSubmit(e) {
        e.preventDefault()

        if (!this.isFormValid()) {
            return
        }

        const saveAction = e.target.dataset.action

        if (!['create', 'update'].includes(saveAction)) {
            return console.error('Unknown form action.')
        }

        const method = {
            create: 'POST',
            update: 'PUT',
        }

        const { formData, formNonce } = this.getFormData()

        const restSuffix = 'update' === saveAction
            ? `/${formData['coupon_id']}`
            : ''

        this.clearFormError()
        this.disableActionButtons()

        return fetch(`${this.restRoute}${restSuffix}`, {
            method: method[saveAction],
            headers: {
                'Content-Type': 'application/json',
                'X-WP-Nonce': ajax_object.rest_nonce,
                'nc-action': saveAction,
                'nc-form-nonce': formNonce,
            },
            body: JSON.stringify(formData),
        })
            .then((response) => response.json())
            .then((response) => {

                if (
                    'rest_forbidden' === response.code
                    || !response.success
                ) {
                    const errortext = response.message ? response.message : response.data
                    return this.showFormError(errortext)
                }

                if (response.redirect) {
                    location.href = response.redirect
                }

            })
            .catch((error) => console.error(error))
            .finally(() => this.enableActionButtons())
    }

    isFormValid() {
        const couponName = this.formEl['coupon_name']

        if (!couponName.checkValidity()) {
            return couponName.reportValidity()
        }

        const requirementAmount = this.formEl.querySelector('#coupon-requirement .optional-container.active input')
        if ( requirementAmount ) {
            if ('' === requirementAmount.value) {
                requirementAmount.value = 0
            }
            if (!requirementAmount.checkValidity()) {
                return requirementAmount.reportValidity()
            }
        }

        return true
    }

    getFormData() {
        const formData = this.serializeForm(this.formEl)

        const formNonce = formData.form_nonce
        delete formData.form_nonce

        formData.coupon_countries_applied = this.getAppliedCountries()
        formData.coupon_product_variants_applied = this.getAppliedProductVariants()
        formData.coupon_customers_applied = this.getAppliedCustomerItems()

        return { formData, formNonce }
    }

    showFormError(error) {
        const errorsContainer = this.formEl.querySelector('#errors')

        if (!errorsContainer) {
            return
        }

        errorsContainer.insertAdjacentHTML('beforeend', error)
        errorsContainer.style.display = 'block'
    }

    clearFormError() {
        const errorsContainer = this.formEl.querySelector('#errors')

        if (!errorsContainer) {
            return
        }

        errorsContainer.textContent = ''
    }

    serializeForm(form) {
        const formData = new FormData(form)
        const pairs = {}
        for (const [ name, value ] of formData) {
            if (name.endsWith('[]')) {
                if (!pairs[ name ]) {
                    pairs[ name ] = []
                }
                pairs[ name ].push(value)
            } else {
                pairs[ name ] = value
            }
        }
        return pairs
    }

    disableActionButtons() {
        this.actionButtons.forEach((btn) => btn.classList.add('disabled'))
    }

    enableActionButtons() {
        this.actionButtons.forEach((btn) => btn.classList.remove('disabled'))
    }

    // Date methods

    enableDatePickers() {
        const activeDatesContainer = document.querySelector('#coupon-dates')

        if (!activeDatesContainer) {
            return
        }

        const startDate = jQuery(activeDatesContainer).find('#coupon_date_start')
        const startTime = jQuery(activeDatesContainer).find('#coupon_time_start')

        const timeZone = startDate.data('time-zone')
        const currentDay = moment().tz(timeZone)

        this.initializeDatePicker(startDate, currentDay)
        this.initializeTimeSelect(startTime, currentDay)

        const endDate = jQuery(activeDatesContainer).find('#coupon_date_end')
        const endTime = jQuery(activeDatesContainer).find('#coupon_time_end')

        this.initializeDatePicker(endDate, currentDay)
        this.initializeTimeSelect(endTime, currentDay)
    }

    initializeDatePicker(input, currentDay) {
        if (
            !input.length
            || !input.dateRangePicker
        ) {
            return
        }

        const dateFormat = 'MMMM DD, Y' // ex: January 01, 2024

        if (!input.val()) {
            input.val(currentDay.format(dateFormat))
        }

        input.dateRangePicker({
            singleDatePicker: true,
            timePicker: false,
            singleDate: true,
            singleMonth: true,
            container: input.parent('.date__wrapper'),
            startOfWeek: 'monday',
            format: dateFormat,
            startDate: currentDay.format(dateFormat),
            drops: 'up',
            opens: 'center',
        })

        input.on('focusout', function () {
            const inputValue = jQuery(this).val()
            const formattedDay = moment(inputValue, dateFormat)

            if (!formattedDay.isValid() || formattedDay < currentDay) {
                jQuery(this).val(currentDay.format(dateFormat));
            }
        })
    }

    initializeTimeSelect(input, currentDay) {
        if (!input.length) {
            return
        }

        const timeFormat = 'hh:mm a' // ex: 12:59 am

        if (!input.val()) {
            input.val(currentDay.format(timeFormat))
        }

        const timeSelect = jQuery(input).parent('.picker__item').find('select')

        timeSelect.on('select2:select', (e) => input.val(e.target.value))

        input.on('focusin', function () {
            input.addClass('active')
            timeSelect.select2('open')
        })

        input.on('blur', function () {
            const validTime = jQuery(this).val().match(/^(0?[1-9]|1[012])(:[0-5]\d) [APap][mM]$/)

            if (!validTime) {
                return input.prop('value', currentDay.format(timeFormat))
            }

            input.attr('value', jQuery(this).val())
        })
    }


    // Popup methods

    setPopupsListeners() {
        this.setPopupsOpenListener()

        this.setCountryPopupCheckboxChangeListener()
        this.setCountryPopupNameSearchListener()
        this.setCountryPopupSubmitListener()

        this.setProductPopupCheckboxChangeListener()
        this.setProductPopupNameSearchListener()
        this.setProductPopupSubmitListener()

        this.setCustomersPopupCheckboxChangeListener()
        this.setCustomersPopupEligibilitiesSelectChangeListener()
        this.setCustomersPopupNameSearchListener()
        this.setCustomersPopupSubmitListener()
    }

    setPopupsOpenListener() {
        this.appliedCountriesContainer.addEventListener('click', handlePopupsOpen.bind(this))
        this.appliedProductsContainer.addEventListener('click', handlePopupsOpen.bind(this))
        this.appliedCustomersContainer.addEventListener('click', handlePopupsOpen.bind(this))

        function handlePopupsOpen(e) {
            const countriesModalID = '#countries-modal'
            if (
                countriesModalID === e.target.dataset.ncCustomPopup
                || e.target.closest(`[data-nc-custom-popup="${countriesModalID}"`)
            ) {
                this.handleCountriesPopupOpen()
            }

            const productsModalID = '#products-modal'
            if (
                productsModalID === e.target.dataset.ncCustomPopup
                || e.target.closest(`[data-nc-custom-popup="${productsModalID}"`)
            ) {
                this.handleProductsPopupOpen()
            }

            const customersModalID = '#customers-modal'
            if (
                customersModalID === e.target.dataset.ncCustomPopup
                || e.target.closest(`[data-nc-custom-popup="${customersModalID}"`)
            ) {
                this.handleCustomersPopupOpen()
            }
        }
    }

    getTemplate(templateId) {
        const template = document.querySelector(`#${templateId}`).cloneNode(true)
        const newDiv = document.createElement('div')
        newDiv.innerHTML = template.innerHTML.trim()
        return newDiv.firstChild
    }

    closePopup() {
        const activePopup = document.querySelector('#coupons-tab > .nc-custom-popup--active')

        if (!activePopup) {
            return
        }

        activePopup.classList.remove('nc-custom-popup--active')
        activePopup.setAttribute('aria-hidden', 'true')
        document.body.style.marginRight = ''
        document.body.style.overflow = ''
    }

    // Countries Popup methods

    setCountryPopupCheckboxChangeListener() {
        if (!this.countriesModal.countriesList) {
            return
        }

        this.countriesModal.countriesList
            .addEventListener('change', handleCountryCheckboxChange.bind(this))

        function handleCountryCheckboxChange(e) {
            if ('applied_countries[]' !== e.target.name) {
                return
            }

            enabledSubmitButton.call(this)
        }

        function enabledSubmitButton() {
            this.countriesModal.btnSubmit.classList.remove('disabled')
        }
    }

    setCountryPopupNameSearchListener() {
        const nameFilter = this.countriesModal.querySelector('#country-filter-name')

        if (!nameFilter) {
            return
        }

        nameFilter.addEventListener('input', this.handleCountryListFilter.bind(this))
    }

    setCountryPopupSubmitListener() {
        this.countriesModal.btnSubmit.addEventListener('click', handleCountriesSubmit.bind(this))

        function handleCountriesSubmit(e) {
            e.preventDefault()

            const countryItemTmpl = this.getTemplate('nc-tmpl-country-item')

            if (!countryItemTmpl) {
                return
            }

            cleanAppliedCountriesList.call(this)
            updateAppliedCountriesList.call(this, countryItemTmpl)
            this.closePopup()
        }

        function cleanAppliedCountriesList() {
            this.appliedCountriesListWrapper
                .querySelectorAll('.country__wrapper')
                .forEach((country) => country.remove())
        }

        function updateAppliedCountriesList(countryItemTmpl) {
            const popupForm = this.countriesModal.querySelector('form')
            const formData = this.serializeForm(popupForm)
            const updatedCountries = formData['applied_countries[]']

            updatedCountries.forEach((countrySlug) => {
                const countryTemplate = countryItemTmpl.cloneNode(true)
                countryTemplate.dataset.countrySlug = countrySlug
                const countryLabel = countryTemplate.querySelector('.country__label')
                countryLabel.textContent = ajax_object.countriesList[countrySlug]

                this.appliedCountriesListWrapper.insertAdjacentElement('beforeend', countryTemplate)
            })
        }
    }

    handleCountriesPopupOpen() {
        const checkboxSelector = '[name="applied_countries[]"]'

        refreshCheckboxes.call(this)
        markSelectedCountries.call(this)
        resetSubmitButton.call(this)

        function refreshCheckboxes() {
            this.countriesModal.countriesList
                .querySelectorAll(`${checkboxSelector}:checked`)
                .forEach((checkbox) => checkbox.checked = false)
        }

        function markSelectedCountries() {
            this.getAppliedCountries()
                .forEach((countrySlug) => {
                    const countryCheckbox = this.countriesModal.countriesList
                        .querySelector(`[data-country-slug="${countrySlug}"] ${checkboxSelector}`)

                    countryCheckbox
                        ? countryCheckbox.checked = true
                        : null
                })
        }

        function resetSubmitButton() {
            this.countriesModal.btnSubmit.classList.add('disabled')
        }
    }

    getAppliedCountries() {
        const appliedCountries = []
        this.appliedCountriesListWrapper
            .querySelectorAll('[data-country-slug]')
            .forEach((country) => appliedCountries.push(country.dataset.countrySlug))

        return appliedCountries
    }

    handleCountryListFilter(e) {
        const countryItemSelector = '[data-level="country"]'

        const self = this.handleCountryListFilter
        self.throttleLimit = 700 // ms
        self.lastRan = self.lastRan ?? Date.now()

        if (self.timeoutID) {
            clearTimeout(self.timeoutID)
        }

        self.timeoutID = setTimeout(
            () => {
                if (Date.now() - self.lastRan >= self.throttleLimit) {
                    throttledFilterByCountryName.call(this, e)
                    self.lastRan = Date.now()
                }
            },
            self.throttleLimit - (Date.now() - self.lastRan)
        )

        function throttledFilterByCountryName(e) {
            const filterValue = e.target.value.toLowerCase()

            if (!filterValue) {
                this.countriesModal.countriesList
                    .querySelectorAll(`${countryItemSelector}.hide`)
                    .forEach((country) => country.classList.remove('hide'))

                toggleEmptyResultMessage.call(this)
                return
            }

            this.countriesModal.countriesList
                .querySelectorAll(`${countryItemSelector}`)
                .forEach((country) => {
                    const label = country.querySelector('.country__label').textContent.trim().toLowerCase()

                    label.includes(filterValue)
                        ? country.classList.remove('hide')
                        : country.classList.add('hide')
                })

            toggleEmptyResultMessage.call(this)

            function toggleEmptyResultMessage() {
                const hasElements = this.countriesModal.countriesList
                    .querySelector(`${countryItemSelector}:not(.hide)`)

                hasElements
                    ? hideEmptyResultMessage.call(this)
                    : showEmptyResultMessage.call(this)

                function showEmptyResultMessage() {
                    this.countriesModal.emptyList.querySelector('.search-query').textContent = filterValue
                    this.countriesModal.emptyList.classList.remove('hide')
                }

                function hideEmptyResultMessage() {
                    this.countriesModal.emptyList.querySelector('.search-query').textContent = ''
                    this.countriesModal.emptyList.classList.add('hide')
                }
            }
        }
    }

    // Products Popup methods

    setProductPopupCheckboxChangeListener() {
        if (!this.productsModal.productsList) {
            return
        }

        this.productsModal.productsList.addEventListener('change', handleProductCheckboxChange.bind(this))

        const checkbox = this.productsModal.checkbox

        function handleProductCheckboxChange(e) {
            const targetName = e.target.name

            if (
                checkbox.products.name !== targetName
                && checkbox.variants.name !== targetName
            ) {
                return
            }

            const productContainer = e.target.closest('[data-level="product"]')

            const productCheckbox = checkbox.products.name === targetName
                ? e.target
                : productContainer.querySelector(checkbox.products.selector)

            if (checkbox.products.name === targetName) {
                handleProductLevelChange()
            }

            if (checkbox.variants.name === targetName) {
                handleVariantLevelChange()
            }

            enabledSubmitButton.call(this)


            function handleProductLevelChange() {
                productCheckbox.removeAttribute('partially')

                if (isCheckEvent()) {
                    markAllVariantsAsChecked()
                    productContainer.querySelector('.product__expander').checked = true
                }

                if (isUncheckEvent()) {
                    markAllVariantsAsUnchecked()
                }
            }

            function handleVariantLevelChange() {
                if (isCheckEvent()) {
                    const hasUncheckedVariants = isProductHasUnchekedVariants()
                    productCheckbox.checked = true
                    productCheckbox.setAttribute('partially', hasUncheckedVariants)
                }

                if (isUncheckEvent()) {
                    const hasCheckedVariants = isProductHasCheckedVariants()
                    productCheckbox.checked = hasCheckedVariants
                    productCheckbox.setAttribute('partially', hasCheckedVariants)
                }
            }

            function isCheckEvent() {
                return e.target.checked
            }

            function isUncheckEvent() {
                return !isCheckEvent()
            }

            function markAllVariantsAsChecked() {
                productContainer
                    .querySelectorAll(`${checkbox.variants.selector}:not(:checked)`)
                    .forEach((el) => el.checked = true)
            }

            function markAllVariantsAsUnchecked() {
                productContainer
                    .querySelectorAll(`${checkbox.variants.selector}:checked`)
                    .forEach((el) => {
                        el.hasAttribute('checked') ? el.removeAttribute('checked') : null
                        el.checked = false
                    })
            }

            function isProductHasUnchekedVariants() {
                return !!productContainer.querySelector(`${checkbox.variants.selector}:not(:checked)`)
            }

            function isProductHasCheckedVariants() {
                return !!productContainer.querySelector(`${checkbox.variants.selector}:checked`)
            }

            function enabledSubmitButton() {
                this.productsModal.btnSubmit.classList.remove('disabled')
            }
        }
    }

    setProductPopupNameSearchListener() {
        const nameFilter = this.productsModal.querySelector('#product-variant-filter-name')

        if (!nameFilter) {
            return
        }

        nameFilter.addEventListener('input', this.handleProductListFilter.bind(this))
    }

    setProductPopupSubmitListener() {
        this.productsModal.btnSubmit.addEventListener('click', handleProductsSubmit.bind(this))

        function handleProductsSubmit(e) {
            e.preventDefault()

            const productItemTmpl = this.getTemplate('nc-tmpl-product-item')

            if (!productItemTmpl) {
                return
            }

            cleanAppliedProductsList.call(this)
            updateAppliedProductsList.call(this, productItemTmpl)
            this.closePopup()
        }

        function cleanAppliedProductsList() {
            this.appliedProductsListWrapper
                .querySelectorAll('.product__wrapper')
                .forEach((product) => product.remove())
        }

        function updateAppliedProductsList(productItemTmpl) {
            const selectedList = getSelectedProductsList.call(this)

            for ( let productID in selectedList ) {
                const refProduct = this.productsModal.productsList.querySelector(`[data-level="product"][data-id="${productID}"]`)

                if (!refProduct) {
                    continue
                }

                const productTemplate = productItemTmpl.cloneNode(true)

                productTemplate.dataset.id = productID
                productTemplate.dataset.selectedVariants = JSON.stringify(selectedList[productID])

                const img = productTemplate.querySelector('.product__img')
                const refImg = refProduct.querySelector('.product__img img')
                img.src = refImg.src
                img.alt = refImg.alt

                productTemplate.querySelector('.info__name').textContent = refProduct.querySelector('.product__name').textContent.trim()

                const quantity = productTemplate.querySelector('.product__quantity')
                const refQuantity = refProduct.querySelector('.product__quantity .quantity__value')
                refQuantity
                    ? quantity.querySelector('.quantity__value').textContent = refQuantity.textContent.trim()
                    : quantity.textContent = ''

                productTemplate.querySelector('.selected-variants').textContent = selectedList[productID].length
                productTemplate.querySelector('.total-product-variants').textContent = refProduct.querySelectorAll('[data-level="variant"]').length

                const variantNoun = productTemplate.querySelector('.variant_noun')
                variantNoun.textContent = 1 === selectedList[productID].length
                    ? variantNoun.dataset.single
                    : variantNoun.dataset.plural

                this.appliedProductsListWrapper.insertAdjacentElement('beforeend', productTemplate)
            }
        }

        function getSelectedProductsList() {
            const selectedProducts = {}

            const checkbox = this.productsModal.checkbox

            this.productsModal
                .querySelectorAll(`${checkbox.products.selector}:checked`)
                .forEach((product) => {
                    selectedProducts[product.value] = []

                    product
                        .closest('[data-level="product"]')
                        .querySelectorAll(`${checkbox.variants.selector}:checked`)
                        .forEach((variantCheckbox) => {
                            selectedProducts[product.value].push(variantCheckbox.value)
                        })
                })

            return selectedProducts
        }
    }

    handleProductsPopupOpen() {
        const checkbox = {
            products: {
                selector: '[name="applied_products[]"]'
            },
            variants: {
                selector: '[name="applied_variants[]"]'
            }
        }

        refreshCheckboxes.call(this)
        markSelectedProducts.call(this)
        resetSubmitButton.call(this)

        function refreshCheckboxes() {
            this.productsModal.productsList
                .querySelectorAll(`${checkbox.products.selector}:checked, ${checkbox.variants.selector}:checked`)
                .forEach((checkbox) => checkbox.checked = false)
        }

        function markSelectedProducts() {
            const productVariantsMap = this.getAppliedProductVariants()

            for ( let productID in productVariantsMap )  {
                const productCheckbox = this.productsModal.productsList
                    .querySelector(`[name="applied_products[]"][value="${productID}"]`)

                productCheckbox
                    ? productCheckbox.checked = true
                    : null

                if (!productVariantsMap[productID]) {
                    continue
                }

                const productContainer = productCheckbox.closest('[data-level="product"]')

                productVariantsMap[productID].forEach((variantID) => {
                    const variantCheckbox = productContainer
                        .querySelector(`[name="applied_variants[]"][value="${variantID}"]`)

                    variantCheckbox
                        ? variantCheckbox.checked = true
                        : null
                })
            }
        }

        function resetSubmitButton() {
            this.productsModal.btnSubmit.classList.add('disabled')
        }
    }

    getAppliedProductVariants() {
        const appliedProductVariants = {}

        this.appliedProductsListWrapper
            .querySelectorAll('.product__wrapper')
            .forEach((product) => {
                const selectedVariants = product.dataset.selectedVariants
                    ? JSON.parse(product.dataset.selectedVariants)
                    : []
                appliedProductVariants[product.dataset.id] = selectedVariants
            })

        return appliedProductVariants
    }

    handleProductListFilter(e) {
        const productItemSelector = '[data-level="product"]'
        const variantItemSelector = '[data-level="variant"]'

        const self = this.handleProductListFilter
        self.throttleLimit = 700 // ms
        self.lastRan = self.lastRan ?? Date.now()

        if (self.timeoutID) {
            clearTimeout(self.timeoutID)
        }

        self.timeoutID = setTimeout(
            () => {
                if (Date.now() - self.lastRan >= self.throttleLimit) {
                    throttledFilterByProductName.call(this, e)
                    self.lastRan = Date.now()
                }
            },
            self.throttleLimit - (Date.now() - self.lastRan)
        )

        function throttledFilterByProductName(e) {
            this.productsModal.filterValue = e.target.value.toLowerCase().trim()

            this.productsModal.productsList
                .querySelectorAll(`${productItemSelector}.filter-matches-variant`)
                .forEach((product) => product.classList.remove('filter-matches-variant'))

            if (!this.productsModal.filterValue) {
                this.productsModal.productsList
                    .querySelectorAll(`${productItemSelector}.hide, ${variantItemSelector}.hide`)
                    .forEach((item) => item.classList.remove('hide'))

                toggleEmptyResultMessage.call(this)
                return
            }

            checkProductNames.call(this)
            checkVariantNames.call(this)
            toggleEmptyResultMessage.call(this)
        }

        function checkProductNames() {
            this.productsModal.productsList
                .querySelectorAll(`${productItemSelector}`)
                .forEach((product) => {
                    const productName = product.querySelector('.product__name').textContent.trim().toLowerCase()

                    productName.includes(this.productsModal.filterValue)
                        ? product.classList.remove('hide')
                        : product.classList.add('hide')
                })
        }

        function checkVariantNames() {
            const ForEachBreak = {}

            try {
                recursiveCheck.call(this)
            } catch( e ) {
                recursiveCheck.call(this)
            }

            function recursiveCheck () {
                this.productsModal.productsList
                    .querySelectorAll(`${productItemSelector}.hide:not(.filter-matches-variant) ${variantItemSelector}`)
                    .forEach((variant) => {
                        const variantName = variant.querySelector('.variant__label').textContent.trim().toLowerCase()

                        if (variantName.includes(this.productsModal.filterValue)) {
                            const product = variant.closest(productItemSelector)
                            product.classList.remove('hide')
                            product.classList.add('filter-matches-variant')

                            throw ForEachBreak
                        }
                    })
            }
        }

        function toggleEmptyResultMessage() {
            const hasElements = this.productsModal.productsList
                .querySelector(`${productItemSelector}:not(.hide)`)

            hasElements
                ? hideEmptyResultMessage.call(this)
                : showEmptyResultMessage.call(this)

            function showEmptyResultMessage() {
                const emptyList = this.productsModal.emptyList
                emptyList.querySelector('.search-query').textContent = this.productsModal.filterValue
                emptyList.classList.remove('hide')
            }

            function hideEmptyResultMessage() {
                const emptyList = this.productsModal.emptyList
                emptyList.querySelector('.search-query').textContent = ''
                emptyList.classList.add('hide')
            }
        }
    }

    // Customers Popup methods

    setCustomersPopupCheckboxChangeListener() {
        if (!this.customersModal.customersList) {
            return
        }

        this.customersModal.customersList
            .addEventListener('change', handleCustomerCheckboxChange.bind(this))

        function handleCustomerCheckboxChange(e) {
            if (!e.target.classList.contains('north-checkbox__handler')) {
                return
            }

            enabledSubmitButton.call(this)
        }

        function enabledSubmitButton() {
            this.customersModal.btnSubmit.classList.remove('disabled')
        }
    }

    setCustomersPopupEligibilitiesSelectChangeListener() {
        if (!this.customersModal.eligibilitiesSelect) {
            return
        }

        const $eligibilitiesSelect = jQuery(this.customersModal.eligibilitiesSelect)
        $eligibilitiesSelect.on('select2:select', handleChangeEligibility.bind(this))

        function handleChangeEligibility(e) {
            const newEligibility = e.currentTarget.value

            filterCustomerItemsByEligibility.call(this, newEligibility)
            toggleSearchInputVisibility.call(this, newEligibility)
        }

        function filterCustomerItemsByEligibility(newEligibility) {
            this.customersModal.customersList
                .querySelectorAll(`:scope > :not(.hide):not([data-level="${newEligibility}"]):not(.loader-wrap)`)
                .forEach((unselectedItem) => unselectedItem.classList.add('hide'))

            this.customersModal.customersList
                .querySelectorAll(`:scope > .hide[data-level="${newEligibility}"]`)
                .forEach((selectedItem) => selectedItem.classList.remove('hide'))
        }

        function toggleSearchInputVisibility(newEligibility) {
            this.customersModal.searchInput = this.customersModal.searchInput ?? this.customersModal.querySelector('.search-input-wrapper')

            const searchVisible = 'new-customer' !== newEligibility
                && 'customer-emails' !== newEligibility

            searchVisible
                ? this.customersModal.searchInput.classList.remove('hide')
                : this.customersModal.searchInput.classList.add('hide')
        }
    }

    setCustomersPopupNameSearchListener() {
        const nameFilter = this.customersModal.querySelector('#customer-filter-name')

        if (!nameFilter) {
            return
        }

        nameFilter.addEventListener('input', this.handleCustomersListFilter.bind(this))
    }

    setCustomersPopupSubmitListener() {
        this.customersModal.btnSubmit.addEventListener('click', handleCustomersSubmit.bind(this))

        function handleCustomersSubmit(e) {
            e.preventDefault()

            cleanAppliedCustomersList.call(this)
            this.updateAppliedCustomersList.call(this)
            this.closePopup()
        }

        function cleanAppliedCustomersList() {
            this.appliedCustomersListWrapper
                .querySelectorAll('.item__wrapper')
                .forEach((customerItem) => customerItem.remove())
        }
    }

    handleCustomersListFilter(e) {
        const self = this.handleCustomersListFilter
        self.throttleLimit = 700 // ms
        self.lastRan = self.lastRan ?? Date.now()

        if (self.timeoutID) {
            clearTimeout(self.timeoutID)
        }

        self.timeoutID = setTimeout(
            () => {
                if (Date.now() - self.lastRan >= self.throttleLimit) {
                    throttledFilterByCustomerItemName.call(this, e)
                    self.lastRan = Date.now()
                }
            },
            self.throttleLimit - (Date.now() - self.lastRan)
        )

        function throttledFilterByCustomerItemName(e) {
            this.customersModal.filterValue = e.target.value.toLowerCase().trim()

            if (!this.customersModal.filterValue) {
                const eligibility = this.customersModal.eligibilitiesSelect.value
                this.customersModal.customersList
                    .querySelectorAll(`.list__item.hide[data-level="${eligibility}"]`)
                    .forEach((item) => item.classList.remove('hide'))

                toggleEmptyResultMessage.call(this)
                return
            }

            checkItemNames.call(this)
            toggleEmptyResultMessage.call(this)
        }

        function checkItemNames() {
            const eligibility = this.customersModal.eligibilitiesSelect.value

            this.customersModal.customersList
                .querySelectorAll(`[data-level="${eligibility}"]`)
                .forEach((customerItem) => {
                    let itemString = customerItem.querySelector('.name').textContent.trim().toLowerCase()

                    if (!itemString.includes(this.customersModal.filterValue)) {
                        const email = customerItem.querySelector('.email')
                        if (email) {
                            itemString = email.textContent.trim().toLowerCase()
                        }
                    }

                    itemString.includes(this.customersModal.filterValue)
                        ? customerItem.classList.remove('hide')
                        : customerItem.classList.add('hide')
                })
        }

        function toggleEmptyResultMessage() {
            const hasElements = this.customersModal.customersList
                .querySelector(`.list__item:not(.hide)`)

            hasElements
                ? hideEmptyResultMessage.call(this)
                : showEmptyResultMessage.call(this)

            function hideEmptyResultMessage() {
                const emptyList = this.customersModal.emptyList
                emptyList.querySelector('.search-query').textContent = ''
                emptyList.classList.add('hide')
            }

            function showEmptyResultMessage() {
                const emptyList = this.customersModal.emptyList
                emptyList.querySelector('.search-query').textContent = this.customersModal.filterValue
                emptyList.classList.remove('hide')
            }
        }
    }

    updateAppliedCustomersList() {
        const popupForm = this.customersModal.querySelector('form')
        const formData = this.serializeForm(popupForm)

        insertCustomerNewItem.call(this)
        insertCustomerIdItems.call(this)
        insertCustomerTagItems.call(this)
        insertWpUserItems.call(this)
        insertWpRoleItems.call(this)


        function insertCustomerNewItem() {
            const newCustomerCheckboxName = 'applied_customer_new[]'
            const updatedCustomerNew = formData[newCustomerCheckboxName] ?? []

            if (!updatedCustomerNew.length) {
                return
            }

            const newCustomerItemTmpl = this.getTemplate('nc-tmpl-customer-item-new')

            if (!newCustomerItemTmpl) {
                return
            }

            updatedCustomerNew.forEach(() => {
                const itemTemplate = newCustomerItemTmpl.cloneNode(true)
                this.appliedCustomersListWrapper.insertAdjacentElement('beforeend', itemTemplate)
            })
        }

        function insertCustomerIdItems() {
            const customerIdCheckboxName = 'applied_customer_ids[]'
            const updatedCustomerIDs = formData[customerIdCheckboxName] ?? []

            if (!updatedCustomerIDs.length) {
                return
            }

            const customerIdItemTmpl = this.getTemplate('nc-tmpl-customer-item-id')

            if (!customerIdItemTmpl) {
                return
            }

            updatedCustomerIDs.forEach((customerid) => {
                const refCheckbox = this.customersModal.customersList
                    .querySelector(`[name="${customerIdCheckboxName}"][value="${customerid}"]`)

                if (!refCheckbox) {
                    return
                }

                const refCustomer = refCheckbox.closest('.item__wrapper')

                const itemTemplate = customerIdItemTmpl.cloneNode(true)
                itemTemplate.dataset.customerId = customerid

                const nameSelector = '.name'
                const refName = refCustomer.querySelector(nameSelector).textContent.trim()
                itemTemplate.querySelector(nameSelector).textContent = refName

                const emailSelector = '.email'
                const refEmail = refCustomer.querySelector(emailSelector).textContent.trim()
                itemTemplate.querySelector(emailSelector).textContent = refEmail

                this.appliedCustomersListWrapper.insertAdjacentElement('beforeend', itemTemplate)
            })
        }

        function insertCustomerTagItems() {
            const customerTagCheckboxName = 'applied_customer_tags[]'
            const updatedCustomerTags = formData[customerTagCheckboxName] ?? []

            if (!updatedCustomerTags.length) {
                return
            }

            const customerTagItemTmpl = this.getTemplate('nc-tmpl-customer-item-tag')

            if (!customerTagItemTmpl) {
                return
            }

            updatedCustomerTags.forEach((customerTagID) => {
                const refCheckbox = this.customersModal.customersList
                    .querySelector(`[name="${customerTagCheckboxName}"][value="${customerTagID}"]`)

                if (!refCheckbox) {
                    return
                }

                const refCustomerTag = refCheckbox.closest('.item__wrapper')

                const itemTemplate = customerTagItemTmpl.cloneNode(true)
                itemTemplate.dataset.customerTagId = customerTagID

                const nameSelector = '.name'
                const refName = refCustomerTag.querySelector(nameSelector).textContent.trim()
                itemTemplate.querySelector(nameSelector).textContent = refName

                this.appliedCustomersListWrapper.insertAdjacentElement('beforeend', itemTemplate)
            })
        }

        function insertWpUserItems() {
            const customerWpUserCheckboxName = 'applied_customer_wp_users[]'
            const updatedWpUsers = formData[customerWpUserCheckboxName] ?? []

            if (!updatedWpUsers.length) {
                return
            }

            const wpRoleItemTmpl = this.getTemplate('nc-tmpl-customer-wp-user')

            if (!wpRoleItemTmpl) {
                return
            }

            updatedWpUsers.forEach((wpUserID) => {
                const refCheckbox = this.customersModal.customersList
                    .querySelector(`[name="${customerWpUserCheckboxName}"][value="${wpUserID}"]`)

                if (!refCheckbox) {
                    return
                }

                const refWpUser = refCheckbox.closest('.item__wrapper')

                const itemTemplate = wpRoleItemTmpl.cloneNode(true)
                itemTemplate.dataset.wpUserId = wpUserID

                const nameSelector = '.name'
                const refName = refWpUser.querySelector(nameSelector).textContent.trim()
                itemTemplate.querySelector(nameSelector).textContent = refName

                const emailSelector = '.email'
                const refEmail = refWpUser.querySelector(emailSelector).textContent.trim()
                itemTemplate.querySelector(emailSelector).textContent = refEmail

                this.appliedCustomersListWrapper.insertAdjacentElement('beforeend', itemTemplate)
            })
        }

        function insertWpRoleItems() {
            const customerWpRoleCheckboxName = 'applied_customer_wp_roles[]'
            const updatedWpRoles = formData[customerWpRoleCheckboxName] ?? []

            if (!updatedWpRoles.length) {
                return
            }

            const wpRoleItemTmpl = this.getTemplate('nc-tmpl-customer-wp-role')

            if (!wpRoleItemTmpl) {
                return
            }

            updatedWpRoles.forEach((roleSlug) => {
                const refCheckbox = this.customersModal.customersList
                    .querySelector(`[name="${customerWpRoleCheckboxName}"][value="${roleSlug}"]`)

                if (!refCheckbox) {
                    return
                }

                const refWpRole = refCheckbox.closest('.item__wrapper')

                const itemTemplate = wpRoleItemTmpl.cloneNode(true)
                itemTemplate.dataset.wpRole = roleSlug

                const nameSelector = '.name'
                const refName = refWpRole.querySelector(nameSelector).textContent.trim()
                itemTemplate.querySelector(nameSelector).textContent = refName

                this.appliedCustomersListWrapper.insertAdjacentElement('beforeend', itemTemplate)
            })
        }
    }

    handleCustomersPopupOpen() {
        const checkboxSelector = '[name="applied_customer_ids[]"]'

        refreshCheckboxes.call(this)
        markSelectedCustomers.call(this)
        resetSubmitButton.call(this)


        function refreshCheckboxes() {
            this.customersModal.customersList
                .querySelectorAll('[type="checkbox"]:checked')
                .forEach((checkbox) => checkbox.checked = false)
        }

        function markSelectedCustomers() {
            const appliedItems = this.getAppliedCustomerItems()

            for (let eligibility in appliedItems) {
                if ('ncCustomerNew' === eligibility && appliedItems[eligibility]) {
                    const checkboxSelector = '[name="applied_customer_new[]"]'
                    const checkbox = this.customersModal.customersList
                        .querySelector(`${checkboxSelector}[value="customer-new"]`)

                    if (checkbox) {
                        checkbox.checked = true
                    }
                }
                if ('ncCustomersIds' === eligibility) {
                    const checkboxSelector = '[name="applied_customer_ids[]"]'
                    appliedItems[eligibility].forEach((customerID) => {
                        const checkbox = this.customersModal.customersList
                            .querySelector(`${checkboxSelector}[value="${customerID}"]`)

                        if (checkbox) {
                            checkbox.checked = true
                        }
                    })
                }
                if ('ncCustomersTags' === eligibility) {
                    const checkboxSelector = '[name="applied_customer_tags[]"]'
                    appliedItems[eligibility].forEach((customerTag) => {
                        const checkbox = this.customersModal.customersList
                            .querySelector(`${checkboxSelector}[value="${customerTag}"]`)

                        if (checkbox) {
                            checkbox.checked = true
                        }
                    })
                }
                if ('wpRoles' === eligibility) {
                    const checkboxSelector = '[name="applied_customer_wp_roles[]"]'
                    appliedItems[eligibility].forEach((customerID) => {
                        const checkbox = this.customersModal.customersList
                            .querySelector(`${checkboxSelector}[value="${customerID}"]`)

                        if (checkbox) {
                            checkbox.checked = true
                        }
                    })
                }
            }
        }

        function resetSubmitButton() {
            this.countriesModal.btnSubmit.classList.add('disabled')
        }
    }

    getAppliedCustomerItems() {
        const appliedCustomers = {
            ncCustomerNew: false,
            ncCustomersIds: [],
            ncCustomersTags: [],
            wpUserIds: [],
            wpRoles: [],
        }

        this.appliedCustomersListWrapper
            .querySelectorAll('.item__wrapper')
            .forEach((item) => {
                const dataset = item.dataset
                if ('customerNew' in dataset) {
                    return appliedCustomers.ncCustomerNew = true
                }
                if (dataset.customerId) {
                    return appliedCustomers.ncCustomersIds.push(dataset.customerId)
                }
                if (dataset.customerTagId) {
                    return appliedCustomers.ncCustomersTags.push(dataset.customerTagId)
                }
                if (dataset.wpUserId) {
                    return appliedCustomers.wpUserIds.push(dataset.wpUserId)
                }
                if (dataset.wpRole) {
                    return appliedCustomers.wpRoles.push(dataset.wpRole)
                }
            })

        return appliedCustomers
    }

}