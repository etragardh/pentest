/**
 * @since   0.1.24
 * @version 0.1.24
 */
export class LocalPickup {

    constructor() {
        this.determineVariables()
        this.setListeners()
    }

    determineVariables() {
        const shippingProfileID = new URL(location).searchParams.get('local-pickup')
        this.restEndpoint = `${ajax_object.rest_url}/shipping-profile/${shippingProfileID}`
        this.localPickupContainer = document.querySelector('.local-pickup-profile')

        this.determinePickupContainerVariables()
    }

    determinePickupContainerVariables() {
        if (!this.localPickupContainer) {
            throw new Error('Local Pickup Form is absent')
        }

        this.localPickupContainer.profileDataJSON = this.localPickupContainer.querySelector('#shipping_profile_data').value
        this.localPickupContainer.zoneName = this.localPickupContainer.querySelector('#pickup-zone-name')
        this.localPickupContainer.zoneAddressSelect = this.localPickupContainer.querySelector('#pickup-zone-address')
        this.localPickupContainer.zoneInstructions = this.localPickupContainer.querySelector('#pickup-zone-instructions')
        this.localPickupContainer.errorContainer = this.localPickupContainer.querySelector('.admin-popup__notice .north-error')
        this.localPickupContainer.loader = this.localPickupContainer.querySelector('.shipping-profile-wait')
        this.localPickupContainer.submitBtn = this.localPickupContainer.querySelector('.btn--submit')
    }

    setListeners() {
        this.setPickupContainerListeners()
    }

    setPickupContainerListeners() {
        setZoneChangeListener.call(this)
        setSubmitListener.call(this)

        function setZoneChangeListener() {
            this.localPickupContainer.addEventListener('input', this.validateLocalPickupForm.bind(this))
        }

        function setSubmitListener() {
            this.localPickupContainer.submitBtn.addEventListener('click', this.handleLocalPickupSubmit.bind(this))
        }
    }

    // Main methods

    validateLocalPickupForm() {
        const isValid = this.localPickupContainer.zoneName.value
            && -1 !== this.localPickupContainer.zoneAddressSelect.selectedIndex

        isValid
            ? enableSubmitBtn.call(this)
            : disableSubmitBtn.call(this)

        function enableSubmitBtn() {
            this.localPickupContainer.submitBtn.removeAttribute('disabled')
        }

        function disableSubmitBtn() {
            this.localPickupContainer.submitBtn.disabled = true
        }
    }

    async handleLocalPickupSubmit(e) {
        e.preventDefault()
        disableLocalDeliveryForm.call(this)
        removeErrors.call(this)

        return fetch(this.restEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-WP-Nonce': ajax_object.rest_nonce,
                'NC-Profile': 'pickup',
            },
            body: this.getPickupZonesDataJSON(),
        })
            .then((response) => response.json())
            .then((response) => {
                if (
                    'rest_forbidden' === response.code
                    || !response.success
                ) {
                    const errorText = response.message ?? response.data ?? 'internal error'
                    return showError.call(this, errorText)
                }

                if (response.redirect) {
                    location.href = response.redirect
                }
            })
            .catch((error) => showError.call(this, error.toString()))
            .finally(() => enableLocalDeliveryForm.call(this))

            function disableLocalDeliveryForm() {
                this.localPickupContainer.submitBtn.disabled = true
                this.localPickupContainer.loader.style.display = 'block'
            }

            function enableLocalDeliveryForm() {
                this.localPickupContainer.submitBtn.removeAttribute('disabled')
                this.localPickupContainer.loader.style.display = 'none'
            }

        function showError(errortext) {
            this.localPickupContainer.errorContainer.textContent = errortext
            this.localPickupContainer.errorContainer.style.display = errortext ? 'block' : 'none'

            scrollTo({
                top: document.body.scrollHeight,
                left: 0,
                behavior: 'smooth'
            })
        }

        function removeErrors() {
            return showError.call(this, '')
        }
    }

    getPickupZonesDataJSON() {
        const pickupZonesData = {}

        this.localPickupContainer
            .querySelectorAll('.zone-item')
            .forEach((zoneItem) => {
                const zoneID = getZoneID.call(this)
                pickupZonesData[zoneID] = {
                    zoneData: {
                        id: zoneID,
                        name: this.localPickupContainer.zoneName.value.trim(),
                    },
                    pickupAddressID: getZoneAddressID.call(this),
                    zoneInstructions: getZoneInstructions.call(this),
                }
            })

        return JSON.stringify(pickupZonesData)

        function getZoneID() {
            let profile = this.localPickupContainer.profileDataJSON
            try {
                profile = JSON.parse(profile)
            } catch {
            }

            let zoneID
            if (profile.shipping_zones) {
                const firstZone = Object.keys(profile.shipping_zones)[0]
                if (firstZone) {
                    zoneID = profile.shipping_zones[firstZone].id
                }
            }

            return zoneID ? zoneID : `new-zone-${new Date().valueOf()}`
        }

        function getZoneAddressID() {
            const addressSelect = this.localPickupContainer.zoneAddressSelect
            const selectedOption = addressSelect.options[addressSelect.selectedIndex]

            return selectedOption.dataset.addressId
        }

        function getZoneInstructions() {
            return this.localPickupContainer.zoneInstructions.value.trim()
        }
    }

}
