/**
 * Action Scheduler
 * Handles event logs and their interactions.
 * 
 * @since 0.1.20
 */
export class EventLog {

    /**
     * EventLog Constructor.
     * Initializes the EventLog class and sets up the necessary event listeners.
     * 
     * @constructor
     */
    constructor() {
        this.setupEventListeners();
        this.setupTabListeners();
    }

    /**
     * Renders a JSON object as HTML.
     * Recursively iterates through each property of the JSON object, creating nested unordered lists.
     * 
     * @param {Object} json - The JSON object to be rendered as HTML.
     * @param {number} [depth=0] - The current depth of the recursive call. Used for indentation. Defaults to 0.
     * @param {boolean} [isRoot=true] - Indicates whether the current property is at the root level of the JSON object. Defaults to true.
     * @returns {string} The JSON object rendered as HTML.
     */
    renderJsonAsHtml(json, depth = 0, isRoot = true) {
        let html = isRoot ? "<ul class='expand-json-root'>" : "<ul style='margin-left: 20px; display: none'>";

        for (let key in json) {
            let value = json[key];
            let arrow = "<span class='expand-json-arrow expand-json-right'></span>";

            if (typeof value === 'object' && value !== null && Object.keys(value).length > 0) {
                html += "<li>" + arrow + "<span class='expand-json-key expand-json-collapsible'>" + key + "</span>" + this.renderJsonAsHtml(value, depth + 1, false) + "</li>";
            } else {
                html += "<li><span class='expand-json-key' style='margin-left: 10px'>" + key + ": </span><span class='expand-json-value'>" + value + "</span></li>";
            }
        }

        html += "</ul>";

        console.log(html);

        return html;
    }

    /**
     * Setups the necessary event listeners for the EventLog instance.
     * Includes event listeners for expanding and collapsing JSON properties, 
     * showing more details about an event, handling pagination, and closing the dialog.
     */
    setupEventListeners() {

        document.body.addEventListener('click', function(event) {
            if (event.target.matches('.expand-json-collapsible')) {
                if (event.target.previousElementSibling.classList.contains('expand-json-down')) {
                    event.target.previousElementSibling.classList.remove('expand-json-down');
                    event.target.previousElementSibling.classList.add('expand-json-right');
                } else {
                    event.target.previousElementSibling.classList.remove('expand-json-right');
                    event.target.previousElementSibling.classList.add('expand-json-down');
                }
                event.target.nextElementSibling.style.display = event.target.nextElementSibling.style.display === 'none' ? '' : 'none';
                event.preventDefault();
            }
        });

        document.body.addEventListener('click', function(event) {
            if (event.target.matches('.show_more')) {
                this.showMore(event);
                event.preventDefault();
            }
        }.bind(this));
        
        document.body.addEventListener('click', function(event) {
            if (event.target.matches('.page-numbers')) {
                this.handlePagination(event);
                event.preventDefault();
            }
        }.bind(this));

        window.addEventListener('click', function(event) {
            const dialog = document.querySelector("#eventLogDialog");
            if (event.target === dialog) {
                dialog.style.display = "none";
            }
        });
    }

    /**
     * Shows more details about an event log.
     * This is triggered when the "Show More" button is clicked. It fetches additional information
     * about the event from the dataset of the target element and displays it in a dialog.
     * 
     * @param {Event} event - The click event triggered by the "Show More" button.
     */
    showMore(event) {

        const args = JSON.parse(event.target.dataset.args);
        const logs = JSON.parse(event.target.dataset.logs);
        const hook = event.target.dataset.hook;
        const time = event.target.dataset.time;
        
        console.log(args);

        const argsTableRows = this.renderJsonAsHtml(args);

        let logsTableRows = "";
        for (let i = 0; i < logs.length; i++) {
            logsTableRows += '<tr><td>' + logs[i].message + '</td><td>' + logs[i].log_date_gmt + '</td></tr>';
        }

        const html =
            '<p>Scheduled Time: ' + time + '</p>' +
            '<h3>Payload Parameters</h3>' +
            '<table style="width: 100%">' + argsTableRows + '</table>' +
            '<h3>Results</h3>' +
            '<table style="width: 100%">' + logsTableRows + '</table>';

        const title = hook.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');

        const dialog = document.querySelector("#eventLogDialog");
        document.querySelector("#dialog-title").textContent = "Hook: " + title;
        document.querySelector("#dialog-body").innerHTML = html;
        dialog.style.display = "flex";

        event.preventDefault();
    }

    /**
     * Handles the pagination of event logs.
     * This is triggered when a page number is clicked. It fetches the logs for the selected page
     * using a POST request and updates the tab content with the received response.
     * 
     * @param {Event} event - The click event triggered by a page number.
     */
    handlePagination(event) {
        const page = event.target.dataset.page;
        const status = event.target.dataset.status;

        fetch(ajax_object.ajaxurl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({
                action: 'north_actions_pagination',
                nonce: ajax_object.rest_nonce,
                group_id: 2, // for testing, fix this on PHP side
                status,
                page,
                limit: 10
            })
        }).then(response => response.text())
            .then(response => {
                console.log(response);
                document.querySelector(`.tab[data-status="${status}"]`).innerHTML = response;
            });

        event.preventDefault();
    }
}