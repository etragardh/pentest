/**
 * @version 0.1.24
 */
(function ($) {
	'use strict'

    let isEditHappened = false
    let isOpenCancelUpdatePopup = false
    let isOpenManageShippingProfileDuplicateProducts = false

	const stateManager = {
		isShippingProfileProductsManagerOpened: false,
		isShippingZonesManagerOpened: false,
		isShippingRatesManagerOpened: false,
        isProfileDeleteFormOpened: false,
	}

    $(document).ready(function () {

        initializingValidationForCreatingCustomShippingProfile()

        const pluginWrapper = $('.north-commerce_page_north-commerce-settings')

        $('.popup-manage-shipping-profile-products .admin-popup__close, .popup-manage-shipping-profile-products .admin-popup-cancel').on('click', closeManageShippingProfileProductsPopup)

        $('.shipping-profile-products-duplicate-popup .admin-popup__close, .shipping-profile-products-duplicate-popup [data-fancybox-close]').on('click', function () {
            isOpenManageShippingProfileDuplicateProducts = false
            $.fancybox.close()
        })

        pluginWrapper.on('submit', '.popup-create-shipping-zone, .shipping-zone-add-rate-popup', () => {
            isEditHappened = true
        })
        pluginWrapper.on('click', '.delete-rate', () => {
            isEditHappened = true
        })

        $('.cancel-changes').on('click', function (e) {
            if (isOpenCancelUpdatePopup || !isEditHappened) {
                return
            }

            e.preventDefault()

            const form = $('.shipping-profile-cancel-changes-popup')
            isOpenCancelUpdatePopup = true

            $.fancybox.open({
                src: form,
                type: 'inline',
                opts: {
                    scrolling: 'auto',
                    modal: true,
                    infobar: false,
                    toolbar: false,
                    arrows: false,
                },
            })
        })

        $('.shipping-profile-cancel-changes-popup').on('submit', function (e) {
            e.preventDefault()
            window.location.href = $(this).find('input[name="redirect_url"]').val()
        })

        $('.shipping-profile-cancel-changes-popup .admin-popup-cancel').on('click', function (e) {
            e.preventDefault()
            $('.shipping-form').submit()
        })

        $('.shipping-profile-cancel-changes-popup .admin-popup__close').on('click', function () {
            isOpenCancelUpdatePopup = false
            $.fancybox.close()
        })

        $('.shipping-profile-delete-popup .admin-popup__close, .shipping-profile-delete-popup .admin-popup-cancel').on('click', function () {
            stateManager.isProfileDeleteFormOpened = false
            $.fancybox.close()
        })

        // Show edit and trash icon on clicking on the three dots
        $(document).on('click', '.north-actions__settings', function () {
            $(this).parent().addClass('active')
        })

        // hide the edit and trash icon when clicking outside of the edit and trash icon box
        $(document).on('click', function (e) {
            // If the target is not the container or a child of the container, then process
            // the click e for outside of the container.
            if ($(e.target).closest('.north-actions.active').length === 0) {
                $('.north-actions').removeClass('active')
            } else {
                $(e.target).closest('.north-actions.active').each(function () {
                    $(this).addClass('pre-active')
                })
                $('.north-actions').removeClass('active')
                $(e.target).closest('.north-actions.pre-active').each(function () {
                    $(this).addClass('active')
                    $(this).removeClass('pre-active')
                })
            }
        })

        // Show the services dropdown when clicking on the label
        $(document).on('click', '.multiple-items__header', function () {
            const dropdownContainer = $(this).closest('.multiple-items')
            dropdownContainer.addClass('active')
        })

        // hide the services dropdown when clicking outside of the services popup
        $(document).on('click', function (event) {
            // If the target is not the container or a child of the container, then process
            // the click event for outside of the container.
            if ($(event.target).closest('.multiple-items.active').length === 0) {
                $('.multiple-items').removeClass('active')
            } else {
                $(event.target).closest('.multiple-items.active').each(function () {
                    $(this).addClass('pre-active')
                })
                $('.multiple-items').removeClass('active')
                $(event.target).closest('.multiple-items.pre-active').each(function () {
                    $(this).addClass('active')
                    $(this).removeClass('pre-active')
                })
            }
        })

        $('.switch-condition-mode').on('click', function () {
            let status = ($(this).is(':checked'))
            if (status) {
                $('.rate-type-configuration.internal .conditions__body').removeClass('hide')
            } else {
                $('.rate-type-configuration.internal .conditions__body').addClass('hide')
            }
        })

        $('.rate-type-configuration.internal .conditions__action-add').on('click', function () {
            $('.rate-type-configuration.internal .conditions__add-form').addClass('active').removeClass('update')
        })

        $('[name="rate_has_fees"]').on('change', function () {
            if (!$(this).prop('checked')) {
                $('#rate_fee_flat').val('')
                $('#rate_fee_percent').val('')
            }
        })

    })

    document.addEventListener('DOMContentLoaded', () => {
        const shippingProfileContainer = document.querySelector('.shipment .shipping-profile')

        if (!shippingProfileContainer) {
            return
        }

        NorthCommerce = NorthCommerce ?? {}
        NorthCommerce.templates = NorthCommerce.templates ?? {}

        shippingProfileContainer.isLocalDelivery = shippingProfileContainer.closest('.shipment')
            ?.classList.contains('local-delivery-profile') ?? false

        setupRegionalProfileEvents()
		setupShippingZonesEvents()
		setupShippingRatesEvents()

		function openPopup(popupForm, stateManagerKey) {
			if (stateManagerKey && stateManager.hasOwnProperty(`${stateManagerKey}`)) {
				stateManager[`${stateManagerKey}`] = true
			}

			jQuery.fancybox.open({
				src: popupForm,
				type: 'inline',
				opts: {
					scrolling: 'auto',
					modal: true,
					infobar: false,
					toolbar: false,
					arrows: false,
				},
			})
		}

		function closePopup(stateManagerKey) {
			if (stateManager.hasOwnProperty(`${stateManagerKey}`)) {
				stateManager[`${stateManagerKey}`] = false
			}

			jQuery.fancybox.close()
		}

		function setupRegionalProfileEvents() {
            if (shippingProfileContainer.isLocalDelivery) {
                return
            }

			setupProductsManagerOpenEvent()
			setupProductsManagerUpdateEvent()
			setupShippingProfileSubmitEvent()
			setupProductSelectorChangeEvent()
			setupProductListRemoveItemEvent()
            setupProfileDeleteFormOpenEvent()
			setupShippingProfileDeleteEvent()


			function syncProductsManagerForm(popupForm) {
				if (!popupForm) {
					popupForm = document.querySelector('.popup-manage-shipping-profile-products')
				}

				popupForm.querySelectorAll('.products-selectors__product__expander:checked').forEach((input) => input.checked = false)

				const selectedProducts = document.querySelector('.shipment-product-list').dataset.selectedProducts

				if (selectedProducts) {
					const selectedProductsParsed = JSON.parse(selectedProducts)

					popupForm.querySelectorAll('[data-level="product"]').forEach((productContainer) => {
						const productCheckbox = productContainer.querySelector('[name="products[]"]');
						const productID = parseInt(productCheckbox.value)

						productCheckbox.checked = !!selectedProductsParsed[ productID ]

						if (!productCheckbox.checked) {
							productCheckbox.removeAttribute('checked')

							productContainer
								.querySelectorAll('[name="variants[]"]:checked')
								.forEach((variantInput) => {
									variantInput.removeAttribute('checked')
									variantInput.checked = false
								})
							return
						}

						productContainer
							.querySelectorAll('[name="variants[]"]')
							.forEach((variantInput) => {
								const variantID = parseInt(variantInput.value)
								if (selectedProductsParsed[ productID ].variants) {
									// variants data from frontend
									variantInput.checked = selectedProductsParsed[ productID ].variants.includes( variantID )
								}
								if (selectedProductsParsed[ productID ].product_variants) {
									// variants data from backend
									variantInput.checked = !!selectedProductsParsed[ productID ].product_variants[ variantID ]
								}
							})
					})
				}

				popupForm.querySelector('input[type="submit"]').disabled = selectedProducts.length === 0
			}

			function setupProductsManagerOpenEvent() {
                shippingProfileContainer.addEventListener('click', handleFormPopup)

				function handleFormPopup(e) {
					if (
						!(
							e.target.classList.contains('manage')
							|| null !== e.target.closest('.btn.manage')
						)
						|| stateManager.isShippingProfileProductsManagerOpened
					) {
						return
					}

					const popupForm = document.querySelector('.popup-manage-shipping-profile-products')

					determinePartiallyCheckedProducts(popupForm)
					openPopup(popupForm, 'isShippingProfileProductsManagerOpened')
				}

                function determinePartiallyCheckedProducts(popupForm) {
					popupForm
                        .querySelectorAll('.products-selectors__product [name="products[]"][partially="true"]')
                        .forEach((input) => {
                            input.setAttribute('partially', false)
                        })

					popupForm
                        .querySelectorAll('.products-selectors__product [name="products[]"]:checked')
                        .forEach((input) => {
                            const hasUncheckedVariants = input.closest('[data-level="product"]').querySelector('[name="variants[]"]:not(:checked)')
                            if (hasUncheckedVariants) {
                                input.setAttribute('partially', true)
                            }
                        })
				}
			}

			function setupProductsManagerUpdateEvent() {
				let productListItemTemplate
				{
					const template = shippingProfileContainer.querySelector('.products-list .product-item.template')
					if (template) {
						productListItemTemplate = template.cloneNode(true)
						productListItemTemplate.classList.remove('template')
						template.remove()
					}
				}

				const renderProductsList = (selectedProducts) => {
					const productsListContainer = shippingProfileContainer.querySelector('.shipment-product-list')

					const productsList = productsListContainer.querySelector('.products-list')
					productsList.querySelectorAll('.product-item').forEach((item) => item.remove())

					if (!Object.keys(selectedProducts).length) {
						productsList.classList.add('hide')
						productsListContainer.querySelector('.product-list--empty').classList.remove('hide')
						return
					}

					const products = productsListContainer.dataset.shippableProducts
						? JSON.parse( productsListContainer.dataset.shippableProducts )
						: []

					for (let productID in selectedProducts) {
						const template = productListItemTemplate.cloneNode(true)
						const product = products[ productID ]

						template.dataset.id = product.id
						template.querySelector('.product-item__title').textContent = product.name
						template.querySelector('.product-item__img__background').style.backgroundImage = `url(${product.product_images[0]})`
						template.querySelector('.selected-variants').textContent = selectedProducts[productID].variants.length

						let productVariantsCounter = 0
						if (product.product_variants) {
							productVariantsCounter = Object.keys(product.product_variants).length
							if (
								1 === productVariantsCounter
								&& 'solo' === product.product_variants[ Object.keys(product.product_variants)[0] ].product_variant_type.slug
							) {
								productVariantsCounter = 0
							}
						}
						template.querySelector('.total-product-variants').textContent = productVariantsCounter

						productsList.append(template)
					}

					productsList.classList.remove('hide')
					productsListContainer.querySelector('.product-list--empty').classList.add('hide')

				}

				const handleUpdatingProfileProducts = (e) => {
					e.preventDefault()

					isEditHappened = true
					const selectedProducts = {}

					e.target.querySelectorAll('input[name="products[]"]:checked').forEach((productCheckbox) => {
						const productConfiguration = {
							id: parseInt(productCheckbox.value),
							variants: []
						}

						productCheckbox
							.closest('[data-level="product"]')
							.querySelectorAll('[name="variants[]"]:checked').forEach((variant) => {
								productConfiguration.variants.push( parseInt(variant.value) )
							})

						selectedProducts[ productConfiguration.id ] = productConfiguration
					})

					const findUncheckedInputByName = (name) => e.target.querySelector(`[name="${name}[]"][type="checkbox"]:not(:checked)`)

					const hasUncheckedVariants = !!findUncheckedInputByName('variants')
					const hasUncheckedProducts = !!findUncheckedInputByName('products')
					const allVariantsIncluded = !hasUncheckedVariants && !hasUncheckedProducts ? '1' : '0'

					shippingProfileContainer.querySelector('input[name="all_variants_included"]').value = allVariantsIncluded
					shippingProfileContainer.querySelector('.shipment-product-list').dataset.selectedProducts = JSON.stringify(selectedProducts)

					renderProductsList(selectedProducts)

					closePopup('isShippingProfileProductsManagerOpened')
				}

				document
					.querySelector('.popup-manage-shipping-profile-products')
					.addEventListener('submit', handleUpdatingProfileProducts)
			}

			function setupShippingProfileSubmitEvent() {
                shippingProfileContainer
                    .querySelector('form.shipping-form')
                    .addEventListener('submit', handleShippingProfileSubmit)

				function handleShippingProfileSubmit(e) {
					e.preventDefault()
                    removeNotices()

					const form = e.target
					const formData = serializeForm(form)

					const data = {
						all_variants_included: formData.all_variants_included,
						zones: getZonesDataJSON(),
					}
					if ('0' === data.all_variants_included) {
						data.products = form.querySelector('.shipment-product-list').dataset.selectedProducts
					}
					if (formData.shipping_profile_name) {
						data.shipping_profile_name = formData.shipping_profile_name
					}

					const newProfile = form.classList.contains('shipping-form-new-page')

					let url = `${ajax_object.rest_url}/shipping-profile`
					url = newProfile ? url : `${url}/${formData.shipping_profile_id}`

					const requestType = newProfile ? 'POST' : 'PUT'
					const loader = form.querySelector('.shipping-profile-wait')
					const submitBtn = form.querySelector('input[type="submit"]')

                    let redirect
					$.ajax({
						type: requestType,
						url: url,
						data: data,
						beforeSend: (xhr) => {
							xhr.setRequestHeader('X-WP-Nonce', ajax_object.rest_nonce)
							xhr.setRequestHeader('NC-Profile', 'regional')
							loader.style.display = 'block'
							submitBtn.disabled = true
						},
						success: (response) => {
							submitBtn.disabled = false
							loader.style.display = 'none'

							if (response.success) {
                                redirect = response.redirect
                                // Bailout.
                                return
                            }

                            const noticeWrapper = shippingProfileContainer.querySelector('.shipping-form-new-page > .admin-popup__notice')
                            if (noticeWrapper) {
                                noticeWrapper.textContent = response.message
                            } else {
                                const noticeHTML = `<div class="admin-popup__notice"><div class="north-error" style="display: block;">${response.message}</div></div>`
                                shippingProfileContainer
                                    .querySelector('.shipping-profile__header')
                                    .insertAdjacentHTML('afterend', noticeHTML)
                            }

                            window.scrollTo({
                                top: 0,
                                left: 0,
                                behavior: 'smooth'
                            })
						},
                        complete: (jqXHR, textStatus) => {
                            if (redirect) {
                                window.location.href = redirect
                            }
                        }
					})
				}

                function removeNotices() {
                    shippingProfileContainer
                        .querySelectorAll('.shipping-form-new-page > .admin-popup__notice, .shipping-profile__header ~ .admin-popup__notice')
                        .forEach((notice) => notice.remove())
                }

                function serializeForm(form) {
                    const formData = new FormData(form)
                    const pairs = {}
                    for (const [name, value] of formData) {
                        pairs[name] = value
                    }
                    return pairs
                }

                function getZonesDataJSON() {
                    const zones = []

                    shippingProfileContainer
                        .querySelectorAll('.shipping-zone-list__item')
                        .forEach((zone) => {
                            const zoneOptions = JSON.parse(zone.dataset.options)
                            zoneOptions.rates = getZoneRatesData( zoneOptions.id )
                            zones.push(zoneOptions)
                        })

                    return JSON.stringify(zones)
                }

                function getZoneRatesData(zoneID) {
                    const zoneItemContainer = shippingProfileContainer.querySelector(`.zone-item-${zoneID}`)
                    const rates = {
                        internal: [],
                        easypost: [],
                    }

                    zoneItemContainer
                        .querySelectorAll('.internal .rate-item')
                        .forEach((rate) => {
                        if (rate.dataset.options) {
                            rates.internal.push(JSON.parse(rate.dataset.options));
                        } else {
                            console.warn('Empty rate.dataset.options (internal)')
                        }
                        });

                    zoneItemContainer
                        .querySelectorAll('.easypost .rate-item')
                        .forEach((rate) => {
                            if (rate.dataset.options) {
                                rates.easypost.push(JSON.parse(rate.dataset.options));
                            } else {
                                console.warn('Empty rate.dataset.options (Easy Post)')
                            }
                        });

                    return rates
                }

			}

			function setupProductSelectorChangeEvent() {

                document.addEventListener('change', handleCheckboxChange)

				function handleCheckboxChange(e) {
					if (!e.target.classList.contains('products-selectors__checkbox')) {
						return
					}

					const productContainer = e.target.closest('[data-level="product"]')
					const productCheckbox = 'products[]' === e.target.name ? e.target : productContainer.querySelector('[name="products[]"]')
					const variantCheckboxSelector = '[name="variants[]"]'
					const checkEvent = e.target.checked
					const unCheckEvent = !e.target.checked

					if (checkEvent) {
						handleProductAvailableInOtherProfiles(productContainer)
					}

					if ('products[]' === e.target.name) {
						productCheckbox.setAttribute('partially', 'false')

						if (checkEvent) {
							productContainer
								.querySelectorAll(`${variantCheckboxSelector}:not(:checked)`)
								.forEach((el) => el.checked = true)
						}

						if (unCheckEvent) {
							productContainer
								.querySelectorAll(`${variantCheckboxSelector}:checked`)
								.forEach((el) => el.checked = false)
						}
					}

					if ('variants[]' === e.target.name) {
						if (checkEvent) {
							const hasUncheckedVariants = !!productContainer.querySelector(`${variantCheckboxSelector}:not(:checked)`)
							productCheckbox.setAttribute('partially', hasUncheckedVariants ? 'true' : 'false')
							productCheckbox.checked = true
						}

						if (unCheckEvent) {
							const hasCheckedVariants = !!productContainer.querySelector(`${variantCheckboxSelector}:checked`)
							productCheckbox.setAttribute('partially', hasCheckedVariants ? 'true' : 'false')
							productCheckbox.checked = hasCheckedVariants
						}
					}

					handleValidationOfShippingProfileProductManagement()
				}

                function handleProductAvailableInOtherProfiles(container) { // revise
					if (isOpenManageShippingProfileDuplicateProducts) {
						return
					}

					const shippingProfiles = container.dataset.shippingProfiles
					const shippingProfilesArray = JSON.parse(shippingProfiles)

					if (!shippingProfilesArray.length) {
						return
					}

					const productId = container.dataset.id
					const itemType = container.dataset.level

					const form = document.querySelector('.shipping-profile-products-duplicate-popup')
					form.querySelector('input[name="product_id"]').value = productId
					form.querySelector('input[name="variant_id"]').value = variantID
					form.querySelector('input[name="item_type"]').value = itemType
					form.querySelector('input[name="shipping_profiles"]').value = shippingProfiles // **
					form.querySelector('.popup--center__title > span').html(`“${Object.keys(shippingProfiles).map((id) => shippingProfiles[id].title).join(', ')}”`)
					form.querySelector('.popup--center__info > span').html(`“${Object.keys(shippingProfiles).map((id) => shippingProfiles[id].title).join(', ')}”`)

					openPopup(form)
				}

			}

			function setupProductListRemoveItemEvent() {
                shippingProfileContainer.addEventListener('click', handleItemRemoving)

				function handleItemRemoving(e) {
					if (
						!e.target.classList.contains('product-item__actions__remove')
						&& null === e.target.closest('.product-item__actions__remove')
					) {
						return
					}

					const productsListContainer = e.target.closest('.shipment-product-list')
					const productContainer = e.target.closest('.product-item')
					const productId = parseInt(productContainer.dataset.id)
					const selectedProducts = productsListContainer.dataset.selectedProducts

					if (selectedProducts) {
						const selectedProductsParsed = JSON.parse(selectedProducts)
						if ( selectedProductsParsed[ productId ] ) {
							delete selectedProductsParsed[ productId ]
							productsListContainer.dataset.selectedProducts = JSON.stringify(selectedProductsParsed)
						}
					}

					productContainer.remove()
					isEditHappened = true

					document.querySelector('.shipping-form input[name="all_variants_included"]').value = '0'

					if (!productsListContainer.querySelector('.product-item:not(.template)')) {
						productsListContainer.querySelector('.products-list').classList.add('hide');
						productsListContainer.querySelector('.product-list--empty').classList.remove('hide')
					}

					syncProductsManagerForm()
				}
			}

			function setupProfileDeleteFormOpenEvent() {
                const deleteButton = shippingProfileContainer.querySelector('.delete_profile_popup')
                if (!deleteButton) {
                    return
                }

                deleteButton.addEventListener('click', handlePopup)
                function handlePopup() {
                    if (stateManager.isProfileDeleteFormOpened) {
                        return
                    }

                    const form = document.querySelector('.shipping-profile-delete-popup')
                    form.querySelector('.admin-popup__notice').textContent = ''

                    openPopup(form, 'isProfileDeleteFormOpened')
                }
            }

			function setupShippingProfileDeleteEvent() {
                const deletePopup = document.querySelector('.shipping-profile-delete-popup')

				if (!deletePopup) {
                    return
                }

                deletePopup.addEventListener('submit', handleProfileDeleting)

				function handleProfileDeleting(e) {
					e.preventDefault()

					const form = e.target
					const shipmentProfileID = form.querySelector('[name="shipping_profile_id"]').value
					const loader = form.querySelector('.loader')
					const submitBtn = form.querySelector('input[type="submit"]')

					$.ajax({
						type: 'DELETE',
						url: `${ajax_object.rest_url}/shipping-profile/${shipmentProfileID}`,
						data: {},
						beforeSend: function (xhr) {
							xhr.setRequestHeader('X-WP-Nonce', ajax_object.rest_nonce)
							loader.style.display = 'block'
							submitBtn.disabled = true
						},
						success: function (response) {
							submitBtn.disabled = false
                            loader.style.display = 'none'

							if (!response.success) {
								form.querySelector('.admin-popup__notice').innerHTML = `<div class="north-error">${response.message}</div>`
                                window.scrollTo({
                                    top: 0,
                                    left: 0,
                                    behavior: 'smooth'
                                })
                                return
							}

							window.location.href = response.redirect
						}
					});
				}
			}
		}

		function setupShippingZonesEvents() {
			const shippingZonesManager = document.querySelector('.popup-create-shipping-zone')

            if (!shippingZonesManager) {
                throw new Error('Shipping Zone manager is absent.')
            }

            determineShippingZonesManagerVariables()
            prepareZoneItemTemplate()
            setManagerValidation()
            setManagerOpenEvent()
            setManagerCloseEvent()
            setSearchFunctionality()
            setRegionsChangeListener()
            setSubmitListener()
            setZoneDeleteListener()

            function determineShippingZonesManagerVariables() {
                shippingZonesManager.zoneNameInput = shippingZonesManager.querySelector('[name="zone_name"]')
                shippingZonesManager.locationSearchInput = shippingZonesManager.querySelector('#zone_location_search')
                shippingZonesManager.regionsContainer = shippingZonesManager.querySelector('.regions-container')

                shippingZonesManager.selector = {
                    container: {
                        region: '[data-level="region"]',
                        country: '[data-level="country"]',
                        subunit: '[data-level="subunit"]',
                    },
                    label: {
                        get region() {
                            return `${shippingZonesManager.selector.container.region} .zone-selectors__region__label`
                        },
                        get country() {
                            return `${shippingZonesManager.selector.container.country} .sub-item__label`
                        },
                        get subunit() {
                            return `${shippingZonesManager.selector.container.subunit} .sub-sub-item__label`
                        },
                    },
                    checkbox: {
                        name: {
                            region: 'regions[]',
                            country: 'countries[]',
                            subunit: 'subunits[]',
                        },
                        get region() {
                            return `[name="${shippingZonesManager.selector.checkbox.name.region}"]`
                        },
                        get country() {
                            return `[name="${shippingZonesManager.selector.checkbox.name.country}"]`
                        },
                        get subunit() {
                            return `[name="${shippingZonesManager.selector.checkbox.name.subunit}"]`
                        },
                    },
                }
            }

            function prepareZoneItemTemplate() {
                const zoneItemTemplate = document.querySelector('.zone-item.template')

                if (!zoneItemTemplate) {
                    throw new Error('Zone Item template is absent')
                }

                NorthCommerce.templates.zone = zoneItemTemplate.cloneNode(true)
                NorthCommerce.templates.zone.classList.remove('template')
                zoneItemTemplate.remove()
            }

            function validateZonesManagerForm() {
                if (!shippingZonesManager.zoneNameInput) {
                    return
                }

                const zoneNameValid = !!shippingZonesManager.zoneNameInput.value.trim()
                const regionListValid = zoneNameValid && !!shippingZonesManager.querySelector(
                    `.regions-container ${shippingZonesManager.selector.checkbox.region}:checked`
                )

                shippingZonesManager.querySelector('[type="submit"]').disabled = !(regionListValid && zoneNameValid)
            }

            function updateCheckedSubunitsCounters(regionContainer) {
                regionContainer
                    .querySelectorAll('.selected-subunits-counter')
                    .forEach((subunitsCounterElement) => {
                        const checkedSubunits = subunitsCounterElement
                            .closest(shippingZonesManager.selector.container.country)
                            .querySelectorAll(`${shippingZonesManager.selector.checkbox.subunit}:checked`)

                        subunitsCounterElement.textContent = checkedSubunits.length
                    })
            }

            function setManagerValidation() {
                if (
                    !shippingZonesManager.zoneNameInput
                    || shippingProfileContainer.isLocalDelivery
                ) {
                    return
                }

                shippingZonesManager.zoneNameInput.addEventListener('keyup', validateZonesManagerForm)
            }

            function setManagerOpenEvent() {
                shippingProfileContainer.addEventListener('click', openPopupForCreating)
                shippingProfileContainer.addEventListener('click', openPopupForEditing)

                function openPopupForCreating(e) {
                    if (
                        !e.target.classList.contains('create_shipping_zone__handler')
                        && null === e.target.closest('.create_shipping_zone__handler')
                    ) {
                        return
                    }

                    openShippingZonesManagerPopup()
                }

                function openPopupForEditing(e) {
                    if (
                        !e.target.classList.contains('zone-item__header__actions__edit')
                        && null === e.target.closest('.zone-item__header__actions__edit')
                    ) {
                        return
                    }

                    const zoneID = e.target.closest('.shipping-zone-list__item').dataset.id
                    openShippingZonesManagerPopup(zoneID)
                }

                function openShippingZonesManagerPopup(zoneID) {
                    if (stateManager.isShippingZonesManagerOpened) {
                        return
                    }

                    resetCheckedRegions()

                    const formHeader = shippingZonesManager.querySelector('.integration-popup-name')
                    const zoneIdInput = shippingZonesManager.querySelector('[name="shipping_zone_id"]')

                    formHeader.textContent = formHeader.dataset.createTitle
                    shippingZonesManager.zoneNameInput.value = ''
                    zoneIdInput.value = ''
                    if (zoneID) {
                        formHeader.textContent = formHeader.dataset.editTitle
                        const zoneItemElement = document.querySelector(`.zone-item-${zoneID}`)
                        shippingZonesManager.zoneNameInput.value = zoneItemElement.querySelector('.zone-item__region').textContent.trim()
                        zoneIdInput.value = zoneID
                        syncRegions(zoneItemElement)
                    }

                    if (shippingProfileContainer.isLocalDelivery) {
                        return
                    }

                    determinePartiallyCheckedRegions()
                    openPopup(shippingZonesManager, 'isShippingZonesManagerOpened')
                }

                function resetCheckedRegions() {
                    shippingZonesManager
                        .querySelectorAll(
                            `${shippingZonesManager.selector.checkbox.region}:checked`
                            + `, ${shippingZonesManager.selector.checkbox.country}:checked`
                            + `, ${shippingZonesManager.selector.checkbox.subunit}:checked`
                        )
                        .forEach((el) => {
                            el.removeAttribute('partially')
                            el.removeAttribute('checked')
                            el.checked = false
                        })

                    shippingZonesManager
                        .querySelectorAll('.dropdown-checkbox:checked')
                        .forEach((el) => el.checked = false)
                }

                function syncRegions(zoneItemElement) {
                    if (shippingProfileContainer.isLocalDelivery) {
                        return
                    }

                    const zoneOptionsUnparsed = zoneItemElement.dataset.options
                    const zoneOptions = zoneOptionsUnparsed ? JSON.parse(zoneOptionsUnparsed) : []
                    const regions = zoneOptions.regions

                    Object.keys(regions).forEach((regionCode) => {
                        const regionCheckbox = shippingZonesManager.querySelector(`${shippingZonesManager.selector.checkbox.region}[value="${regionCode}"]`)
                        const regionContainer = regionCheckbox.closest(`${shippingZonesManager.selector.container.region}`)

                        regionCheckbox.checked = true

                        const countries = regions[regionCode]
                        Object.keys(countries).forEach((countryCode) => {
                            const countryCheckbox = regionContainer.querySelector(`${shippingZonesManager.selector.checkbox.country}[value="${countryCode}"]`)
                            countryCheckbox.checked = true

                            const hasSubunits = countries[countryCode].length
                            if (hasSubunits) {
                                const countryContainer = countryCheckbox.closest(shippingZonesManager.selector.container.country)
                                countries[countryCode].forEach((subunit) => {
                                    countryContainer
                                        .querySelector(`${shippingZonesManager.selector.checkbox.subunit}[value="${subunit}"]`)
                                        .checked = true
                                })
                            }
                        })

                        updateCheckedSubunitsCounters(regionContainer)
                    })
                }

                function determinePartiallyCheckedRegions() {
                    shippingZonesManager
                        .querySelectorAll(`${shippingZonesManager.selector.checkbox.region}:checked`)
                        .forEach((regionCheckbox) => {
                            const regionHasUncheckedChildItem = regionCheckbox
                                .closest(`${shippingZonesManager.selector.container.region}`)
                                .querySelector(`${shippingZonesManager.selector.checkbox.country}:not(:checked), ${shippingZonesManager.selector.checkbox.subunit}:not(:checked)`)

                            if (regionHasUncheckedChildItem) {
                                regionCheckbox.setAttribute('partially', 'true')
                            }
                        })

                    shippingZonesManager
                        .querySelectorAll(`${shippingZonesManager.selector.checkbox.country}:checked`)
                        .forEach((countryCheckbox) => {
                            const countryHasUncheckedStates = countryCheckbox
                                .closest(shippingZonesManager.selector.container.country)
                                .querySelector(`${shippingZonesManager.selector.checkbox.subunit}:not(:checked)`)

                            if (countryHasUncheckedStates) {
                                countryCheckbox.setAttribute('partially', 'true')
                            }
                        })
                }
            }

            function setManagerCloseEvent() {
                shippingZonesManager.addEventListener('click', handleCloseEvent)

                function handleCloseEvent({target}) {
                    if (
                        (!target.classList.contains('admin-popup-cancel') && null === target.closest('.admin-popup-cancel'))
                        && (!target.classList.contains('admin-popup__close') && null === target.closest('.admin-popup__close'))
                    ) {
                        return
                    }

                    if (shippingProfileContainer.isLocalDelivery) {
                        return
                    }

                    closePopup('isShippingZonesManagerOpened')
                    resetSearchInput()
                    resetRegionsList()
                }
            }

            function setSearchFunctionality() {
                if (!shippingZonesManager.locationSearchInput) {
                    return
                }

                trimSubunitLabels()
                shippingZonesManager.locationSearchInput.addEventListener('input', handleRegionsSearch)

                function trimSubunitLabels() {
                    shippingZonesManager.regionsContainer
                        .querySelectorAll(
                            `${shippingZonesManager.selector.label.country}`
                            + `, ${shippingZonesManager.selector.label.subunit}`
                        )
                        .forEach((label) => label.textContent = label.textContent.trim()) // search optimization
                }

                function handleRegionsSearch(e) {
                    const searchValue = e.target.value.toLowerCase()

                    resetRegionsList()

                    if (searchValue.length < 2) {
                        return
                    }

                    const unfolded = {
                        regions: [],
                        countries: [],
                    }

                    searchThroughSubunits()
                    searchThroughCountries()
                    hideFoldedRegions()

                    function searchThroughSubunits() {
                        let subunitName
                        let subunitContainer
                        let countryContainer

                        shippingZonesManager.regionsContainer
                            .querySelectorAll(`${shippingZonesManager.selector.label.subunit}`)
                            .forEach((subunitLabel) => {
                                subunitName = subunitLabel.textContent.toLowerCase()
                                subunitContainer = subunitLabel.closest(`${shippingZonesManager.selector.container.subunit}`)

                                if (!subunitName.includes(searchValue)) {
                                    hideElement(subunitContainer)
                                    return
                                }

                                revealElement(subunitContainer)
                                unfoldCountry()
                                unfoldRegion(subunitContainer)
                            })

                        function unfoldCountry() {
                            countryContainer = subunitContainer.closest(`${shippingZonesManager.selector.container.country}`)

                            if (unfolded.countries.includes(countryContainer.dataset.countryCode)) {
                                return
                            }

                            countryContainer
                                .querySelector(`#dropdown_country-${countryContainer.dataset.countryCode}`)
                                .checked = true

                            unfolded.countries.push(countryContainer.dataset.countryCode)
                        }
                    }

                    function searchThroughCountries() {
                        unfolded.regions = [] // reset

                        let countryContainer

                        shippingZonesManager.regionsContainer
                            .querySelectorAll(`${shippingZonesManager.selector.container.country}`)
                            .forEach((container) => {
                                countryContainer = container

                                if (hasRevealedSubunit()) {
                                    return
                                }

                                const countryName = countryContainer
                                    .querySelector(`${shippingZonesManager.selector.label.country}`)
                                    .textContent.toLowerCase()

                                if (!countryName.includes(searchValue)) {
                                    hideElement(countryContainer)
                                    return
                                }

                                revealElement(countryContainer)
                                unfoldRegion(countryContainer)
															  unfoldSubitems(countryContainer)
                            })

                        function hasRevealedSubunit() {
                            const isUnfolded = !!countryContainer.querySelector(`${shippingZonesManager.selector.container.subunit}:not(.hide)`)

                            const regionContainer = countryContainer.closest(`${shippingZonesManager.selector.container.region}`)
                            if (
                                isUnfolded
                                && !unfolded.regions.includes(regionContainer.dataset.regionCode)
                            ) {
                                unfolded.regions.push(regionContainer.dataset.regionCode)
                            }

                            return isUnfolded
                        }
                    }

                    function hideFoldedRegions() {
                        shippingZonesManager.regionsContainer
                            .querySelectorAll(`${shippingZonesManager.selector.container.region}`)
                            .forEach((regionContainer) => {
                                if (unfolded.regions.includes(regionContainer.dataset.regionCode)) {
                                    return
                                }

                                hideElement(regionContainer)
                            })
                    }

                    function unfoldRegion(target) {
                        const regionContainer = target.closest(`${shippingZonesManager.selector.container.region}`)

                        if (unfolded.regions.includes(regionContainer.dataset.regionCode)) {
                            return
                        }

                        regionContainer
                            .querySelector(`#dropdown_region-${regionContainer.dataset.regionCode}`)
                            .checked = true

                        unfolded.regions.push(regionContainer.dataset.regionCode)
                    }

										function unfoldSubitems(target) {
												if( $('.sub-sub-item', target).length > 0){
													  $('.sub-sub-item', target).removeClass('hide')
													  //$('.zone-selectors__states__expander', target).prop( "checked", true )
												}
                    }

                    function hideElement(target) {
                        target.classList.add('hide')
                    }

                    function revealElement(target) {
                        target.classList.remove('hide')
                    }
                }
            }

			function setRegionsChangeListener() {
                if (shippingProfileContainer.isLocalDelivery) {
                    return
                }

                shippingZonesManager.regionsContainer.addEventListener('change', handleRegionChangeEvent)

				function handleRegionChangeEvent(e) {
					if (
                        !e.target.classList.contains('zone-selectors__checkbox')
                        || 'easypost_services[]' === e.target.name
                    ) {
						return
					}

					const regionContainer = e.target.closest(`${shippingZonesManager.selector.container.region}`)
					const regionCheckbox = shippingZonesManager.selector.checkbox.name.region === e.target.name
                        ? e.target
                        : regionContainer.querySelector(shippingZonesManager.selector.checkbox.region)

					const checkEvent = e.target.checked
					const unCheckEvent = !e.target.checked

                    if (shippingZonesManager.selector.checkbox.name.region === e.target.name) {
                        regionCheckbox.removeAttribute('partially')

                        regionCheckbox
                            .querySelectorAll(`${shippingZonesManager.selector.checkbox.country}[partially]`)
                            .forEach((el) => el.removeAttribute('partially'))

                        if (checkEvent) {
                            checkRegionSubunits()
                            regionContainer.querySelector('.zone-selectors__region__expander').checked = true
                        }

                        if (unCheckEvent) {
                            uncheckRegionSubunits()
                        }

                        function checkRegionSubunits() {
                            regionContainer
                                .querySelectorAll(
                                    `${shippingZonesManager.selector.container.country}:not(.hide) ${shippingZonesManager.selector.checkbox.country}:not(:checked)`
                                    + `, ${shippingZonesManager.selector.container.subunit}:not(.hide) ${shippingZonesManager.selector.checkbox.subunit}:not(:checked)`
                                )
                                .forEach((el) => el.checked = true)
                        }

                        function uncheckRegionSubunits() {
                            regionContainer
                                .querySelectorAll(
                                    ` ${shippingZonesManager.selector.checkbox.country}:checked`
                                    + `, ${shippingZonesManager.selector.checkbox.subunit}:checked`
                                )
                                .forEach((el) => {
                                    el.hasAttribute('checked') ? el.removeAttribute('checked') : null
                                    el.checked = false
                                })
                        }
					}

					if (shippingZonesManager.selector.checkbox.name.country === e.target.name) {
						const countryContainer = e.target.closest(shippingZonesManager.selector.container.country)

						if (checkEvent) {
                            checkCountrySubunits()
							regionCheckbox.setAttribute('partially', isRegionHasUncheckedSubunits() ? 'true' : 'false')
							regionCheckbox.checked = true
						}

						if (unCheckEvent) {
							e.target.removeAttribute('partially')
                            uncheckCountrySubunits()
							const regionHasCheckedChildItems = isRegionHasCheckedSubunits()
							regionCheckbox.setAttribute('partially', regionHasCheckedChildItems ? 'true' : 'false')
							regionCheckbox.checked = regionHasCheckedChildItems
						}

                        function checkCountrySubunits() {
                            countryContainer
                                .querySelectorAll(`${shippingZonesManager.selector.container.subunit}:not(.hide) ${shippingZonesManager.selector.checkbox.subunit}:not(:checked)`)
                                .forEach((el) => el.checked = true)
                        }

                        function uncheckCountrySubunits() {
                            countryContainer
                                .querySelectorAll(`${shippingZonesManager.selector.checkbox.subunit}:checked`)
                                .forEach((el) => el.checked = false)
                        }

                        function isRegionHasUncheckedSubunits() {
                            return !!regionContainer.querySelector(
                                `${shippingZonesManager.selector.checkbox.country}:not(:checked)`
                                + `, ${shippingZonesManager.selector.checkbox.subunit}:not(:checked)`
                            )
                        }
					}

					if (shippingZonesManager.selector.checkbox.name.subunit === e.target.name) {
						const countryContainer = e.target.closest(shippingZonesManager.selector.container.country)
						const countryCheckbox = countryContainer.querySelector(shippingZonesManager.selector.checkbox.country)

						if (checkEvent) {
							countryCheckbox.checked = true
							countryCheckbox.setAttribute('partially', isCountryHasUncheckedSubunits() ? 'true' : 'false')
						}

						if (unCheckEvent) {
							countryCheckbox.checked = isCountryHasCheckedSubunits()
							countryCheckbox.setAttribute('partially', countryCheckbox.checked ? 'true' : 'false')
						}

                        const regionHasCheckedChildItems = isRegionHasCheckedSubunits()
                        regionCheckbox.setAttribute('partially', regionHasCheckedChildItems ? 'true' : 'false')
                        regionCheckbox.checked = regionHasCheckedChildItems

                        function isCountryHasUncheckedSubunits() {
                            return !!countryContainer.querySelector(
                                `${shippingZonesManager.selector.checkbox.subunit}:not(:checked)`
                            )
                        }

                        function isCountryHasCheckedSubunits() {
                            return !!countryContainer.querySelector(
                                `${shippingZonesManager.selector.checkbox.subunit}:checked`
                            )
                        }
					}

					updateCheckedSubunitsCounters(regionContainer)
					validateZonesManagerForm()

                    function isRegionHasCheckedSubunits() {
                        return !!regionContainer.querySelector(
                            `${shippingZonesManager.selector.checkbox.country}:checked`
                            + `, ${shippingZonesManager.selector.checkbox.subunit}:checked`
                        )
                    }
				}
			}

            function setSubmitListener() {
                if (shippingProfileContainer.isLocalDelivery) {
                    return
                }

                shippingZonesManager.addEventListener('submit', handleSubmitEvent)

                function handleSubmitEvent(e) {
                    e.preventDefault()
                    disableSubmitBtn()

                    const zoneID = e.target.querySelector('[name="shipping_zone_id"]').value
                    const newZoneItem = fllZoneItemTemplateWithData()

                    zoneID
                        ? updateZoneItem(zoneID)
                        : addZoneItem()

                    hideEmptyListNotice()
                    dispatchZonesRatesRerenderEvent()
                    updateUncoveredCountries()
                    closePopup('isShippingZonesManagerOpened')
                    resetSearchInput()
                    resetRegionsList()

                    function disableSubmitBtn() {
                        e.target.querySelector('[type="submit"]').disabled = true
                    }

                    function updateZoneItem(zoneID) {
                        const oldZoneItem = shippingProfileContainer.querySelector(`.shipping-zone-list .zone-item-${zoneID}`)

                        if (!oldZoneItem) {
                            return
                        }

                        let internalRatesJSON = ''
                        let easypostRatesJSON = ''

                        oldZoneItem
                            .querySelectorAll('.rate-item:not(.template)')
                            .forEach((rateItem) => {
                                const rateOptions = JSON.parse(rateItem.dataset.options)
                                if ('internal' === rateOptions.calculation) {
                                    internalRatesJSON = internalRatesJSON
                                        ? `${internalRatesJSON},${rateItem.dataset.options}`
                                        : rateItem.dataset.options
                                }
                                if ('easypost' === rateOptions.calculation) {
                                    easypostRatesJSON = easypostRatesJSON
                                        ? `${easypostRatesJSON},${rateItem.dataset.options}`
                                        : rateItem.dataset.options
                                }
                            })

                        oldZoneItem.replaceWith(newZoneItem)

                        shippingProfileContainer
                            .querySelector(`.zone-item-${zoneID} .rates-table.internal`)
                            .dataset.originalRates = `[${internalRatesJSON}]`

                        shippingProfileContainer
                            .querySelector(`.zone-item-${zoneID} .rates-table.easypost`)
                            .dataset.originalRates = `[${easypostRatesJSON}]`
                    }

                    function addZoneItem() {
                        shippingProfileContainer
                            .querySelector('.shipping-zone-list')
                            .insertAdjacentElement('beforeend', newZoneItem)
                    }

                    function hideEmptyListNotice() {
                        document.querySelector('.shipping-zone-list__empty').classList.add('hide')
                    }

                    function dispatchZonesRatesRerenderEvent() {
                        const rerenderRates = new CustomEvent('rerender-zones-rates-table', {
                            detail: { zoneID }
                        })
                        shippingProfileContainer.dispatchEvent(rerenderRates)
                    }
                }

                function fllZoneItemTemplateWithData() {
                    const zoneName = shippingZonesManager.querySelector('[name="zone_name"]').value.trim()
                    const zoneIdInput = shippingZonesManager.querySelector('[name="shipping_zone_id"]')

                    const zoneOptions = {
                        id: zoneIdInput.value ? zoneIdInput.value : `new-zone-${(new Date().valueOf())}`,
                        name: zoneName,
                        regions: getZoneRegionsAndSubunitsList(),
                    }

                    const zoneTemplate = NorthCommerce.templates.zone.cloneNode(true)

                    zoneTemplate.dataset.id = zoneOptions.id
                    zoneTemplate.dataset.options = JSON.stringify(zoneOptions)
                    zoneTemplate.classList.add(`zone-item-${zoneOptions.id}`)
                    zoneTemplate.querySelector('.zone-item__region').textContent = zoneOptions.name
                    zoneTemplate.querySelector('.zone-item__countries').textContent = getZoneSelectedCountriesList()

                    zoneTemplate.querySelector('.rates-table.internal').classList.add('hide')
                    zoneTemplate.querySelector('.rates-table.easypost').classList.add('hide')
                    zoneTemplate.querySelector('.zone-item__notice').classList.remove('hide')

                    return zoneTemplate
                }

                function getZoneRegionsAndSubunitsList() {
                    const regions = {}
                    const validCountriesList = ajax_object.countriesList

                    shippingZonesManager
                        .querySelectorAll(`${shippingZonesManager.selector.checkbox.region}:checked`)
                        .forEach((region) => {
                            const countries = {}

                            region
                                .closest(`${shippingZonesManager.selector.container.region}`)
                                .querySelectorAll(`${shippingZonesManager.selector.checkbox.country}:checked`)
                                .forEach((country) => {
                                    if (validCountriesList[country.value]) {
                                        const countrySubunits = []

                                        country
                                            .closest(shippingZonesManager.selector.container.country)
                                            .querySelectorAll(`${shippingZonesManager.selector.checkbox.subunit}:checked`)
                                            .forEach((subunit) => countrySubunits.push(subunit.value))

                                        countries[ country.value ] = countrySubunits
                                    }
                                })

                            regions[ region.value ] = countries
                        })

                    return regions
                }

                function getZoneSelectedCountriesList() {
                    const countries = []
                    const validCountriesList = ajax_object.countriesList

                    shippingZonesManager
                        .querySelectorAll(`${shippingZonesManager.selector.checkbox.country}:checked`)
                        .forEach((country) => {
                            if (validCountriesList[country.value]) {
                                countries.push(validCountriesList[country.value])
                            }
                        })

                    return countries.join(', ')
                }
            }

            function setZoneDeleteListener() {
                shippingProfileContainer.addEventListener('click', handleDeleteEvent)

                function handleDeleteEvent(e) {
                    if (
                        !e.target.classList.contains('zone-item__header__actions__delete')
                        && null === e.target.closest('.zone-item__header__actions__delete')
                    ) {
                        return
                    }

                    removeZoneItem()
                    maybeRevealEmptyListNotice()
                    updateUncoveredCountries()

                    function removeZoneItem() {
                        e.target.closest('.shipping-zone-list__item').remove()
                    }

                    function maybeRevealEmptyListNotice() {
                        const hasItems = shippingProfileContainer.querySelector('.shipping-zones .shipping-zone-list__item')

                        if (hasItems) {
                            return
                        }

                        shippingProfileContainer
                            .querySelector('.shipping-zones .shipping-zone-list__empty')
                            .classList.remove('hide')
                    }
                }
            }

            function updateUncoveredCountries() {
                if (shippingProfileContainer.isLocalDelivery) {
                    return
                }

                const uncoveredCountriesUnparsed = shippingProfileContainer.querySelector('.not-covered__countries').dataset.list
                const uncoveredCountries = JSON.parse(uncoveredCountriesUnparsed)
                const coveredCountries = getCoveredCountries()

                const obsoleteCountriesArray = []
                for (const countryCode in uncoveredCountries) {
                    obsoleteCountriesArray.push( uncoveredCountries[countryCode] )
                }

                const sortedCountriesArray = obsoleteCountriesArray.filter((country) => !coveredCountries.includes(country)).sort()

                const notCoveredContainer = shippingProfileContainer.querySelector('.profile-card .not-covered')
                notCoveredContainer.querySelector('.not-covered__info__label__number').textContent = sortedCountriesArray.length

                shippingProfileContainer.querySelector('.not-covered__countries').textContent = sortedCountriesArray.join(', ')

                function getCoveredCountries() {
                    const allCountriesList = ajax_object.countriesList
                    const zonesCountries = []
                    shippingProfileContainer.querySelectorAll('.shipping-zone-list__item').forEach((item) => {
                        const optionsUnparsed = item.dataset.options
                        const regions = JSON.parse(optionsUnparsed).regions
                        zonesCountries.push( ...getCountryCodesFromRegionsList(regions) )
                    })

                    const coveredCountriesList = [ ...(new Set(zonesCountries)) ]
                    return coveredCountriesList.map((countryCode) => allCountriesList[countryCode])
                }
            }

            function resetSearchInput() {
                shippingZonesManager.locationSearchInput.value = ''
            }

            function resetRegionsList() {
                shippingZonesManager.regionsContainer
                    .querySelectorAll(
                        `${shippingZonesManager.selector.container.region}.hide`
                        + `, ${shippingZonesManager.selector.container.country}.hide`
                        + `, ${shippingZonesManager.selector.container.subunit}.hide`
                    )
                    .forEach((hiddenElement) => hiddenElement.classList.remove('hide'))
            }
		}

		function setupShippingRatesEvents() {
			const shippingRatesManagerForm = document.querySelector('.shipping-zone-add-rate-popup')

            if (!shippingRatesManagerForm) {
                throw new Error('Rate Manager is absent')
            }

            shippingRatesManagerForm.configuration = {
                internal: shippingRatesManagerForm.querySelector('.rate-type-configuration.internal'),
                easypost: shippingRatesManagerForm.querySelector('.rate-type-configuration.easypost'),
            }

            prepareTemplates()
            setRerenderZonesRatesListener()
            renderZonesRatesTable()
            setRateItemEditEvent()
            setRateIteDeletemEvent()
            setRateManagerEvents()

            function prepareTemplates() {
                prepareRateItemTemplate()
                prepareRateItemTemplate('easypost')
                prepareEasypostServiceItemTemplate()

                function prepareRateItemTemplate(rateCalculation = 'internal') {
                    if (!NorthCommerce?.templates?.zone) {
                        throw new Error('Zone Item template is absent')
                    }
                    if (!NorthCommerce.templates.rate) {
                        NorthCommerce.templates.rate = {}
                    }

                    const zoneItem = NorthCommerce.templates.zone.cloneNode(true)
                    const templateSelector = `.rates-table.${rateCalculation} .rate-item.template`
                    const rateTemplate = zoneItem.querySelector(templateSelector)

                    if (!rateTemplate) {
                        throw new Error('Rate Item template is absent')
                    }

                    NorthCommerce.templates.rate[rateCalculation] = rateTemplate.cloneNode(true)
                    NorthCommerce.templates.rate[rateCalculation].classList.remove('template')

                    removeTemplate(shippingProfileContainer)
                    removeTemplate(NorthCommerce.templates.zone)

                    function removeTemplate(container) {
                        container
                            .querySelectorAll(templateSelector)
                            .forEach((template) => template.remove())
                    }
                }

                function prepareEasypostServiceItemTemplate() {
                    if (shippingProfileContainer.isLocalDelivery) {
                        return
                    }

                    const template = shippingRatesManagerForm.querySelector('.easypost .service-item.template')

                    if (!template) {
                        return
                        throw new Error('Easypost Service Item template is absent') // TODO: add Easypost integration check
                    }

                    NorthCommerce.templates.easypostServiceItem = template.cloneNode(true)
                    NorthCommerce.templates.easypostServiceItem.classList.remove('template')
                    template.remove()
                }
            }

            function updateCarriersServices(carrierID) {
                const profileDataUnparsed = shippingProfileContainer.querySelector('#shipping_profile_data').value
                const profileData = JSON.parse(profileDataUnparsed)

                const servicesList = shippingRatesManagerForm.querySelector('.easypost .services__list.services')
                const loader = shippingRatesManagerForm.querySelector('.loader')

                $.ajax({
                    type: 'GET',
                    url: `${ajax_object.rest_url}/easypost/carrier/${carrierID}/services`,
                    data: {
                        addressID: profileData.shipping_address_id,
                        countryCodes: getZoneCountryCodes()
                    },
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('X-WP-Nonce', ajax_object.rest_nonce)
                        loader.style.display = 'block'
                        servicesList.querySelectorAll('.service-item').forEach((serviceItem) => serviceItem.remove())
                    },
                    success: function (response) {
                        loader.style.display = 'none'

                        const adminNotice = shippingRatesManagerForm.querySelector('.admin-popup__notice')

                        adminNotice.innerHTML = ''
                        if (!response.success) {
                            adminNotice.innerHTML = `<div class="north-error">${response.message}</div>`
                            window.scrollTo({
                                top: 0,
                                left: 0,
                                behavior: 'smooth'
                            })
                            return
                        }

                        const rateID = shippingRatesManagerForm.querySelector('[name="rate_id"]').value
                        let rateOptions
                        if (rateID) {
                            const rateOptionsUnparsed = shippingProfileContainer.querySelector(`.rate-item-id-${rateID}`).dataset.options
                            rateOptions = JSON.parse(rateOptionsUnparsed)
                        }
                        const rateOptionsServices = rateOptions && rateOptions.services ? rateOptions.services : []

                        // Remove items even if the user changed the carrier before the API response
                        servicesList.querySelectorAll('.service-item').forEach((serviceItem) => serviceItem.remove())

                        const carrierServices = convertToArray(response.data)
                        carrierServices.forEach((carrierService) => {
                            const serviceTemplate = NorthCommerce.templates.easypostServiceItem.cloneNode(true)
                            const serviceID = carrierService.toLowerCase().replace(/\W/g, '_')
                            const serviceIdAttr = `easypost_service_${serviceID}`
                            serviceTemplate.dataset.service = carrierService

                            const checkbox = serviceTemplate.querySelector('[name="easypost_services[]"]')
                            checkbox.value = carrierService
                            checkbox.checked = rateOptionsServices.includes(carrierService)
                            checkbox.disabled = false
                            checkbox.id = serviceIdAttr

                            serviceTemplate.querySelector('label.north-checkbox').setAttribute('for', serviceIdAttr)
                            serviceTemplate.querySelector('.service-item__label').textContent = carrierService
                            serviceTemplate.querySelector('.service-item__label').setAttribute('for', serviceIdAttr)

                            servicesList.append(serviceTemplate)
                        })

                        shippingRatesManagerForm
                            .querySelector('[name="easypost_services[]"]')
                            .dispatchEvent( new Event('change', { 'bubbles': true }) )
                    }
                })

                function getZoneCountryCodes() {
                    const zoneID = shippingRatesManagerForm.querySelector('[name="zone_id"]').value
                    const zoneOptionsUnparsed = shippingProfileContainer.querySelector(`.zone-item-${zoneID}`).dataset.options
                    const zoneOptions = JSON.parse(zoneOptionsUnparsed)
                    return getCountryCodesFromRegionsList(zoneOptions.regions)
                }

                function convertToArray(data) {
                    if (Array.isArray(data)) {
                        return data
                    }

                    if ('object' === typeof data) {
                        return Object.values(data)
                    }

                    throw new Error('Unknown data type')
                }
            }

            function popupRateManager(rateOptions) {
                configureRateManager(rateOptions)
                openPopup(shippingRatesManagerForm, 'isShippingRatesManagerOpened')

                function configureRateManager(rateOptions) {
                    configureEasypostCarriers()

                    shippingRatesManagerForm
                        .querySelector('.rate-type-configuration.internal .conditions__add-form')
                        .classList.remove('active')

                    jQuery(shippingRatesManagerForm).find('.rate-type-configuration.internal .conditions__type').select2({
                        dropdownParent: $('.rate-type-configuration.internal .conditions__type').parent()
                    })
                    jQuery(shippingRatesManagerForm).find('[name="user_roles"]').select2({
                        dropdownParent: jQuery(shippingRatesManagerForm),
                        multiple: true,
                        dropdownCssClass: 'popup-field-new',
                        placeholder: 'Choose role'
                    })

                    const userRolesSelect = shippingRatesManagerForm.querySelector('[name="user_roles"]')
                    userRolesSelect.value = ''
                    userRolesSelect.parentElement.querySelector('.select2-selection__rendered').textContent = ''
                }

                function configureEasypostCarriers() {
                    const easypostConfiguration = shippingRatesManagerForm.configuration.easypost

                    if (
                        shippingProfileContainer.isLocalDelivery
                        || !easypostConfiguration
                    ) {
                        return
                    }

                    const easypostFields = easypostConfiguration.querySelector('.easypost__fields')

                    if (!easypostFields) {
                        return
                    }

                    const profileDataUnparsed = shippingProfileContainer.querySelector('#shipping_profile_data').value
                    let profileData = []
                    try {
                        profileData = JSON.parse(profileDataUnparsed)
                    } catch(e) {
                    }

                    if (!profileData.shipping_address_id) {
                        easypostFields.classList.add('hide')
                        return
                    }

                    const zoneID = shippingRatesManagerForm.querySelector('[name="zone_id"]').value
                    getShippingZoneCarriers(zoneID, (rateOptions) => setupEasypostCarriers(rateOptions))
                    easypostFields.classList.remove('hide')
                }

                function setupEasypostCarriers(rateOptions) {
                    let carrierID = null

                    if (rateOptions && 'easypost' === rateOptions.calculation) {
                        carrierID = rateOptions.carrierID
                        updateCarriersServices(carrierID)
                    }

                    jQuery(shippingRatesManagerForm)
                        .find('.easypost-carriers-accounts')
                        .val(carrierID)
                        .trigger('change.select2')
                }
            }

            function setRerenderZonesRatesListener() {
                shippingProfileContainer.addEventListener('rerender-zones-rates-table', (e) => {
                    renderZonesRatesTable(e.detail.zoneID)
                } )
            }

            function renderZonesRatesTable(zoneID) {
                const getRateItem = (ratesTable, rateItemID) => ratesTable.querySelector(`.rate-item[data-id="${rateItemID}"]`)

                const zoneIdSelector = zoneID ? `.zone-item[data-id="${zoneID}"]` : ''

                shippingProfileContainer
                    .querySelectorAll(`.shipping-zones ${zoneIdSelector} .rates-table`) // both internal and easypost
                    .forEach((ratesTable) => {
                        if (!ratesTable.dataset.originalRates) {
                            return
                        }

                        const originalRatesUnparsed = ratesTable.dataset.originalRates
                        const originalRates = JSON.parse(originalRatesUnparsed)

                        originalRates.forEach((rateOptions) => {
                            const zoneID = ratesTable.closest('.shipping-zone-list__item').dataset.id
                            const filledTemplate = fillRateItemTemplate(rateOptions, zoneID)
                            const renderedRateItem = getRateItem(ratesTable, rateOptions.id)

                            renderedRateItem
                                ? renderedRateItem.replaceWith(filledTemplate)
                                : ratesTable.querySelector('.rates-table__body').append(filledTemplate)

                            const appendedItem = getRateItem(ratesTable, rateOptions.id)
                            appendedItem.dataset.options = JSON.stringify(rateOptions)
                        })
                    })
            }

            function fillRateItemTemplate(rateOptions, zoneID) {
                if ('internal' === rateOptions.calculation) {
                    return fillInternalCalculationRateTemplate(rateOptions, zoneID)
                }

                if ('easypost' === rateOptions.calculation) {
                    return fillEasypostCalculationRateTemplate(rateOptions, zoneID)
                }

                function fillInternalCalculationRateTemplate(rateOptions, zoneID) {
                    const ratesTable = document.querySelector(`.zone-item-${zoneID} .rates-table.internal`)
                    ratesTable.classList.remove('hide')

                    const rateItemTemplate = NorthCommerce.templates.rate.internal.cloneNode(true)
                    const {
                        currencySymbol,
                        priceDecimals,
                        weightUnit
                    } = northCommerceSettings

                    rateItemTemplate.dataset.id = rateOptions.id
                    rateItemTemplate.classList.add(`rate-item-id-${rateOptions.id}`)
                    rateItemTemplate.querySelector('.rate-name').textContent = rateOptions.name

                    // Rate Price
                    const ratePriceEl = rateItemTemplate.querySelector('.rate-price')
                    if ( ! parseFloat( rateOptions.price ) || isNaN( parseFloat( rateOptions.price ) )) {
                        ratePriceEl.textContent = 'Free'
                    } else {
                        ratePriceEl.textContent = `${currencySymbol} ${parseFloat(rateOptions.price).toFixed(priceDecimals)}`
                    }

                    // Rate Conditions
                    if (rateOptions.hasConditions && rateOptions.conditions.length) {
                        const conditionsLabel = 'all' === rateOptions.conditionsOperator ? 'All of:' : 'Any:'
                        let conditionsHTML = `<div class="condition">${conditionsLabel}</div>`

                        rateOptions.conditions.forEach((conditionOptionsJSON) => {
                            const conditionOptions = JSON.parse(conditionOptionsJSON)
                            const min = parseFloat(conditionOptions.data.min)
                            const max = parseFloat(conditionOptions.data.max)
                            switch (conditionOptions.type) {
                                case 'weight': {
                                    const minValue = isFloatHasDecimals(min) ? min.toFixed(3) : min
                                    const maxValue = isFloatHasDecimals(max) ? max.toFixed(3) : max
                                    const minFormatted = `${minValue}${weightUnit}`
                                    const maxFormatted = `${maxValue}${weightUnit}`
                                    if (min && max) {
                                        conditionsHTML += `<div>${minFormatted} - ${maxFormatted}</div>`
                                    } else if (min) {
                                        conditionsHTML += `<div>${minFormatted} and up</div>`
                                    } else if (max) {
                                        conditionsHTML += `<div>Up to ${maxFormatted}</div>`
                                    }
                                    break
                                }
                                case 'price': {
                                    const minFormatted = `${currencySymbol}${min.toFixed(priceDecimals)}`
                                    const maxFormatted = `${currencySymbol}${max.toFixed(priceDecimals)}`
                                    if (min && max) {
                                        conditionsHTML += `<div>${minFormatted} - ${maxFormatted}</div>`
                                    } else if (min) {
                                        conditionsHTML += `<div>${minFormatted} and up</div>`
                                    } else if (max) {
                                        conditionsHTML += `<div>Up to ${maxFormatted}</div>`
                                    }
                                    break
                                }
                                case 'user-role': {
                                    conditionsHTML += `<div><span class="rate-roles">User Roles: </span>${conditionOptions.data.userRoles.join(', ')}</div>`
                                    break
                                }
                            }
                        })

                        rateItemTemplate.querySelector('.rate-condition').innerHTML = conditionsHTML
                    }

                    if (rateOptions.hasFees) {
                        rateItemTemplate.querySelector('.rate-has-fees').textContent = formatFees(rateOptions)
                    }

                    document.querySelector(`.zone-item-${zoneID} .rates-table.internal`).classList.remove('hide')
                    document.querySelector(`.zone-item-${zoneID} .zone-item__notice`).classList.add('hide')

                    return rateItemTemplate
                }

                function fillEasypostCalculationRateTemplate(rateOptions, zoneID) {
                    const easypostTable = shippingProfileContainer.querySelector(`.zone-item-${zoneID} .rates-table.easypost`)
                    easypostTable.classList.remove('hide')

                    const rateItemTemplate = NorthCommerce.templates.rate.easypost.cloneNode(true)
                    rateItemTemplate.dataset.id = rateOptions.id
                    rateItemTemplate.classList.add(`rate-item-id-${rateOptions.id}`)
                    rateItemTemplate.querySelector('.carrier-name').textContent = rateOptions.carrierLabel

                    if (rateOptions.services.length) {
                        rateItemTemplate.querySelector('.one-item').remove()
                        rateItemTemplate.querySelector('.multiple-items .multiple-items__header__label').textContent = `${rateOptions.services.length} services`
                        const itemsContainer = rateItemTemplate.querySelector('.multiple-items__body')
                        itemsContainer.innerHTML = ''
                        rateOptions.services.forEach((service) => itemsContainer.insertAdjacentHTML('beforeend', `<div>${service}</div>`))
                    } else {
                        rateItemTemplate.querySelector('.one-item').textContent = rateOptions.services[0]
                        rateItemTemplate.querySelector('.multiple-items').remove()
                    }

                    if (rateOptions.hasFees) {
                        rateItemTemplate.querySelector('.rate-has-fees').textContent = formatFees(rateOptions)
                    }

                    shippingProfileContainer.querySelector(`.zone-item-${zoneID} .zone-item__notice`).classList.add('hide')

                    return rateItemTemplate
                }

                function formatFees(rateOptions) {
                    const currencyCode = northCommerceSettings.currencyCode

                    if (
                        parseFloat(rateOptions.feePercent) !== 0
                        && !isNaN(parseFloat(rateOptions.feePercent))
                        && parseFloat(rateOptions.feeFlat) !== 0
                        && !isNaN(parseFloat(rateOptions.feeFlat))
                    ) {
                        return `${rateOptions.feePercent}% + ${currencyCode}${rateOptions.feeFlat}`
                    }

                    if (
                        parseFloat(rateOptions.feePercent) !== 0
                        && !isNaN(parseFloat(rateOptions.feePercent))
                    ) {
                        return `${rateOptions.feePercent}%`
                    }

                    if (
                        parseFloat(rateOptions.feeFlat) !== 0
                        && !isNaN(parseFloat(rateOptions.feeFlat))
                    ) {
                        return `${currencyCode}${rateOptions.feeFlat}`
                    }

                    throw new Error('Fees format error.')
                }
            }

            function setRateItemEditEvent() {
                shippingProfileContainer.addEventListener('click', handeEditTrigger)

                function handeEditTrigger(e) {
                    if (
                        !e.target.classList.contains('edit-rate-item')
                        && null === e.target.closest('.edit-rate-item')
                    ) {
                        return
                    }

                    popupManagerForEdit(e)
                }

                function popupManagerForEdit(e) {
                    if (stateManager.isShippingRatesManagerOpened) {
                        return
                    }

                    const form = shippingRatesManagerForm
                    const rateOptionsJSON = e.target.closest('.rate-item').dataset.options
                    const rateOptions = JSON.parse(rateOptionsJSON)
                    const zoneContainer = e.target.closest('.shipping-zone-list__item')

                    form.dataset.selectedCarriers = getSelectedCarriersJSON()
                    form.dataset.options = rateOptionsJSON

                    form.querySelectorAll('.conditions__items tbody tr:not(.template)').forEach((tr) => tr.remove())

                    form.querySelector('.integration-popup-name').textContent = 'Edit rate'
                    form.querySelector('[name="zone_id"]').value = zoneContainer.dataset.id
                    form.querySelector('[name="rate_id"]').value = rateOptions.id
                    form.querySelector(`[name="rate_calculation"][value="${rateOptions.calculation}"]`).checked = true
                    form.querySelector('[name="rate_has_fees"]').checked = rateOptions.hasFees
                    form.querySelector('[name="rate_fee_flat"]').value = rateOptions.feeFlat
                    form.querySelector('[name="rate_fee_percent"]').value = rateOptions.feePercent

                    if ('internal' === rateOptions.calculation) {
                        internalCalculationEditConfiguration(rateOptions)
                        shippingProfileContainer.dispatchEvent( new Event('determine-rate-conditions-logic-visibility') )
                    }

                    if ('easypost' === rateOptions.calculation) {
                        easypostCalculationEditConfiguration(rateOptions)
                    }

                    form.querySelector('input[type="submit"]').disabled = false
                    popupRateManager(rateOptions)

                    function getSelectedCarriersJSON() {
                        const selectedCarriers = []
                        zoneContainer
                            .querySelectorAll('.rates-table.easypost .rate-item:not(.template)')
                            .forEach((item) => {
                                const optionsJSON = item.dataset.options
                                const options = JSON.parse(optionsJSON)

                                if (
                                    rateOptions.carrierID
                                    && rateOptions.carrierID !== options.carrierID
                                ) {
                                    selectedCarriers.push(options.carrierID)
                                }
                            })

                        return JSON.stringify(selectedCarriers)
                    }
                }

                function internalCalculationEditConfiguration(rateOptions) {
                    hideEasypostConfiguration()

                    const internalConfiguration = shippingRatesManagerForm.configuration.internal
                    internalConfiguration.classList.remove('hide')

                    internalConfiguration.querySelector('[name="rate_name"]').value = rateOptions.name

                    internalConfiguration.querySelector('[name="rate_price"]').value = rateOptions.price
                    const priceIcon = internalConfiguration.querySelector('.price-input .free-icon')
                    if (parseFloat(rateOptions.price) === 0) {
                        priceIcon.classList.remove('hide')
                    } else {
                        priceIcon.classList.add('hide')
                    }

                    internalConfiguration.querySelector('[name="rate_has_conditions"]').checked = rateOptions.hasConditions
                    const conditionTable = shippingRatesManagerForm.querySelector('.rate-type-configuration.internal .conditions__body')
                    if (rateOptions.hasConditions) {
                        conditionTable.classList.remove('hide')
                    } else {
                        conditionTable.classList.add('hide')
                    }

                    const conditionsOperator = internalConfiguration.querySelector(`[name="rate_conditions_operator"][value="${rateOptions.conditionsOperator}"]`)
                    if (conditionsOperator) {
                        conditionsOperator.checked = true
                    }

                    const conditionsItems = internalConfiguration.querySelector('.conditions__items')
                    if (rateOptions.conditions.length) {
                        rateOptions.conditions.forEach((conditionOptions) => {
                            const addRateConditionItemEvent = new CustomEvent('add-rate-condition-item', {
                                detail: { conditionOptions }
                            })
                            shippingProfileContainer.dispatchEvent(addRateConditionItemEvent)
                        })
                        conditionsItems.classList.remove('hide')
                    } else {
                        conditionsItems.classList.add('hide')
                    }

                    function hideEasypostConfiguration() {
                        const easypostConfiguration = shippingRatesManagerForm.configuration.easypost

                        if (!easypostConfiguration) {
                            return
                        }

                        easypostConfiguration.classList.add('hide')
                        const easypostFutureServices = easypostConfiguration.querySelector('[name="future_services"]')
                        if (easypostFutureServices) {
                            easypostFutureServices.checked = false
                        }
                    }
                }

                function easypostCalculationEditConfiguration(rateOptions) {
                    shippingRatesManagerForm.configuration.easypost.classList.remove('hide')
                    shippingRatesManagerForm.configuration.internal.classList.add('hide')

                    const form = shippingRatesManagerForm
                    form.querySelector('.rate-type-configuration.internal .conditions__body').classList.add('hide')
                    form.querySelector('.price-input .free-icon').classList.remove('hide')
                    form.querySelector('[name="rate_name"]').value = ''
                    form.querySelector('[name="rate_price"]').value = ''
                    form.querySelector('[name="rate_has_conditions"]').checked = false
                    form.querySelector('[name="future_services"]').checked = rateOptions.includeFutureServices
                }
            }

            function setRateIteDeletemEvent () {
                shippingProfileContainer.addEventListener('click', handeDeleteTrigger)

                function handeDeleteTrigger({target}) {
                    if (
                        !target.classList.contains('delete-rate')
                        && null === target.closest('.delete-rate')
                    ) {
                        return
                    }

                    const zoneItemContainer = target.closest('.shipping-zone-list__item')

                    target.closest('.rate-item').remove()
                    const internalRatesContainer = zoneItemContainer.querySelector('.rates-table.internal')
                    const easypostRatesContainer = zoneItemContainer.querySelector('.rates-table.easypost')

                    const hasNoInternalRates = internalRatesContainer.querySelectorAll('.rate-item').length === 0
                    const hasNoEasypostRates = easypostRatesContainer.querySelectorAll('.rate-item').length === 0
                    if (hasNoInternalRates) {
                        internalRatesContainer.classList.add('hide')
                    }
                    if (hasNoEasypostRates) {
                        easypostRatesContainer.classList.add('hide')
                    }
                    if (hasNoEasypostRates && hasNoInternalRates) {
                        zoneItemContainer.querySelector('.zone-item__notice').classList.remove('hide')
                    }
                }
            }

            function setRateManagerEvents() {
                const {
                    addressDropdownItemTemplate,
                    addressDropdownShippingAddressItemTemplate
                } = getAddressDropdownTemplates()

                setRateManagerValidation()
                setupRatesManagerOpenEvent()
                setupRatesManagerCloseEvent()
                setupRateCalculatorChangeEvent()
                setupEasypostCarrierChangeEvent()
                setupConditionsEvents()
                setupRatesManagerSubmitEvent()


                function getAddressDropdownTemplates() {
                    if (NorthCommerce?.templates?.shippingAddresses) {
                        return NorthCommerce.templates.shippingAddresses
                    }

                    const parentTemplate = document.querySelector('.store-address-section .address-dropdown.template')

                    if (!parentTemplate) {
                        return {
                            addressDropdownItemTemplate: null,
                            addressDropdownShippingAddressItemTemplate: null
                        }
                    }

                    const childTemplate = parentTemplate.querySelector('.shipping-address.template')
                    const addressDropdownShippingAddressItemTemplate = childTemplate.cloneNode(true)
                    addressDropdownShippingAddressItemTemplate.classList.remove('template')
                    childTemplate.remove()

                    const addressDropdownItemTemplate = parentTemplate.cloneNode(true)
                    addressDropdownItemTemplate.classList.remove('template')
                    parentTemplate.remove()

                    return NorthCommerce.templates.shippingAddresses = {
                        addressDropdownItemTemplate,
                        addressDropdownShippingAddressItemTemplate
                    }
                }

                function setRateManagerValidation() {
                    shippingRatesManagerForm
                        .querySelector('[name="rate_name"]')
                        .addEventListener('keyup', (e) => {
                            validateRatesManagerForm()
                        })

                    shippingRatesManagerForm.addEventListener('change', ({target}) => {
                        if ('easypost_services[]' !== target.name) {
                            return
                        }

                        validateRatesManagerForm('easypost')
                    })

                    shippingRatesManagerForm.addEventListener('keyup', ({target}) => {
                        if ('rate_price' !== target.name) {
                            return
                        }

                        const icon = target.closest('.price-input').querySelector('.free-icon')

                        if (!target.value || 0 === parseFloat(target.value)) {
                            icon.classList.remove('hide')
                            return
                        }

                        icon.classList.add('hide')
                    })
                }

                function validateRatesManagerForm(rateCalculation = 'internal') {
                    const noticeElement = shippingRatesManagerForm.querySelector('.admin-popup__notice')
                    noticeElement.innerHTML = ''

                    const submitBtn = shippingRatesManagerForm.querySelector('[type="submit"]')

                    if ('internal' === rateCalculation) {
                        const rateNameValid = !!shippingRatesManagerForm.querySelector('[name="rate_name"]').value.trim()
                        submitBtn.disabled = !rateNameValid
                    }

                    if ('easypost' === rateCalculation) {
                        const easypostCheckbox = shippingRatesManagerForm.querySelector('[name="rate_calculation"][value="easypost"]')
                        if (parseInt(easypostCheckbox.dataset.testMode)) {
                            const noticeText = 'You need to toggle live mode of <a href="?page=north-commerce-integration" target="_blank">Easypost integration</a> to get a list of all the available carriers'
                            noticeElement.innerHTML += `<div class="north-error">${noticeText}</div>`
                        }

                        const profileDataUnparsed = shippingProfileContainer.querySelector('#shipping_profile_data').value
                        let profileData = []
                        try {
                            profileData = JSON.parse(profileDataUnparsed)
                        } catch(e) {
                        }

                        if (!profileData.shipping_address_id) {
                            const noticeText = 'Current profile has no shipping address. Create it first.'
                            noticeElement.innerHTML += `<div class="north-error">${noticeText}</div>`
                        }

                        let carrierIdValid = false
                        let carrierServicesValid = false

                        const easypostFields = shippingRatesManagerForm.querySelector('.easypost__fields')
                        if (easypostFields) {
                            carrierIdValid = !!shippingRatesManagerForm.querySelector('[name="easypost_carriers"]').value.trim()
                            carrierServicesValid = carrierIdValid && !!shippingRatesManagerForm.querySelector('[name="easypost_services[]"]:checked')
                        }

                        submitBtn.disabled = !( carrierIdValid && carrierServicesValid )
                    }
                }

                function setupRatesManagerOpenEvent() {
                    shippingProfileContainer.addEventListener('click', handleOpenRatesManager)

                    function handleOpenRatesManager (e) {
                        const addRateBtnClass = 'zone-item__add-rate'
                        if (
                            !e.target.classList.contains(addRateBtnClass)
                            && null === e.target.closest(`.${addRateBtnClass}`)
                        ) {
                            return
                        }

                        if (stateManager.isShippingRatesManagerOpened) {
                            return
                        }

                        resetRatesManager()

                        const zoneItemContainer = e.target.closest('.shipping-zone-list__item')

                        const selectedCarriers = []
                        zoneItemContainer
                            .querySelectorAll('.rates-table.easypost .rate-item:not(.template)')
                            .forEach((item) => selectedCarriers.push(item.dataset.options.carrierID))

                        shippingRatesManagerForm.dataset.selectedCarriers = JSON.stringify(selectedCarriers)
                        shippingRatesManagerForm.querySelector('[name="zone_id"]').value = zoneItemContainer.dataset.id

                        shippingProfileContainer.dispatchEvent( new Event('determine-rate-conditions-logic-visibility') )
                        popupRateManager()
                    }

                    function resetRatesManager() {
                        shippingRatesManagerForm.configuration.internal.classList.remove('hide')
                        shippingRatesManagerForm.configuration.easypost?.classList.add('hide')

                        const form = shippingRatesManagerForm
                        form.dataset.options = ''

                        const unresettedInputsNames = [ 'rate_id', 'rate_name', 'rate_price', 'rate_fee_flat', 'rate_fee_percent' ]
                        unresettedInputsNames.forEach((inputName) => {
                            form.querySelector(`[name="${inputName}"]`).value = ''
                        })

                        form.querySelector('.integration-popup-name').textContent = 'Add rate'
                        form.querySelector('[name="rate_calculation"][value="internal"]').checked = true
                        form.querySelector('.free-icon.hide')?.classList.remove('hide')
                        form.querySelector('[name="rate_has_conditions"]').checked = false
                        form.querySelector('[name="rate_conditions_operator"][value="any"]').checked = true
                        form.querySelectorAll('.rate-type-configuration.internal .conditions__items tbody tr').forEach((tr) => tr.remove())
                        form.querySelector('.rate-type-configuration.internal .conditions__body').classList.add('hide')
                        form.querySelector('.rate-type-configuration.internal .conditions__items').classList.add('hide')
                        form.querySelector('[name="rate_has_fees"]').checked = false
                    }
                }

                function setupRatesManagerCloseEvent() {
                    shippingRatesManagerForm.querySelector('.admin-popup__close').addEventListener('click', handleCloseTrigger)
                    shippingRatesManagerForm.querySelector('.admin-popup-cancel').addEventListener('click', handleCloseTrigger)

                    function handleCloseTrigger(e) {
                        closePopup('isShippingRatesManagerOpened')
                    }
                }

                function setupRateCalculatorChangeEvent () {
                    shippingRatesManagerForm.addEventListener('change', handleChange)

                    function handleChange({target}) {
                        if ('rate_calculation' !== target.name) {
                            return
                        }

                        target.closest('.rates-types')
                            .querySelectorAll('[checked]')
                            .forEach((input) => input.removeAttribute('checked'))

                        const internalConfiguration = shippingRatesManagerForm.configuration.internal
                        internalConfiguration.classList.remove('hide')
                        if ('easypost' === target.value) {
                            internalConfiguration.classList.add('hide')
                            validateRatesManagerForm('easypost')
                        }

                        const easypostConfiguration = shippingRatesManagerForm.configuration.easypost
                        if (easypostConfiguration) {
                            easypostConfiguration.classList.remove('hide')
                            if ('internal' === target.value) {
                                easypostConfiguration.classList.add('hide')
                                validateRatesManagerForm()
                            }
                        }
                    }
                }

                function setupEasypostCarrierChangeEvent() {
                    jQuery(shippingRatesManagerForm).on('change select2:change', '[name="easypost_carriers"]', handleChangeTrigger)

                    function handleChangeTrigger(e) {
                        validateRatesManagerForm('easypost')

                        const carrierID = e.target.value
                        if (!carrierID) {
                            return
                        }

                        updateCarriersServices(carrierID)
                    }
                }

                function setupConditionsEvents() {
                    const rateConditionItemTemplate = getRateConditionItemTemplate()

                    setupAddRateConditionItemEvent()
                    setupDetermineConditionsVisibilityEvent()
                    setupChangeConditionBasedValueEvent()
                    setupConditionItemEditEvent()
                    setupConditionItemDeleteEvent()
                    setupConditionValidation()
                    setupConditionEditDiscardEvent()
                    setupConditionSubmitEvent()

                    function getRateConditionItemTemplate() {
                        const rateConditionTemplate = shippingRatesManagerForm.querySelector('.rate-type-configuration.internal .conditions__items tr.template')
                        if (!rateConditionTemplate) {
                            return
                        }

                        const rateConditionItemTemplate = rateConditionTemplate.cloneNode(true)
                        rateConditionItemTemplate.classList.remove('template')
                        rateConditionTemplate.remove()

                        return rateConditionItemTemplate
                    }

                    function setupAddRateConditionItemEvent() {
                        shippingProfileContainer.addEventListener('add-rate-condition-item', (e) => {
                            const conditionOptions = JSON.parse(e.detail.conditionOptions)
                            addRateConditionItem(conditionOptions)
                        } )
                    }

                    function addRateConditionItem(conditionOptions) {
                        const internalConfiguration = shippingRatesManagerForm.configuration.internal
                        internalConfiguration.querySelector('.conditions__body').classList.remove('hide')
                        internalConfiguration.querySelector('.conditions__items').classList.remove('hide')
                        internalConfiguration.querySelector('.conditions__add-form').classList.remove('active')

                        const filledConditionItemTemplate = fillRateConditionTemplate(conditionOptions)
                        internalConfiguration.querySelector('.conditions__items tbody').append(filledConditionItemTemplate)
                        determineRateConditionsLogicVisibiity()
                    }

                    function fillRateConditionTemplate(conditionOptions) {
                        const conditionItemTemplate = rateConditionItemTemplate.cloneNode(true)
                        const conditionType = conditionOptions.type
                        const { weightUnit } = northCommerceSettings

                        conditionItemTemplate.dataset.type = conditionType
                        conditionItemTemplate.dataset.options = JSON.stringify(conditionOptions)
                        conditionItemTemplate.dataset.id = conditionOptions.id
                        conditionItemTemplate.classList.add(`rate-condition-id-${conditionOptions.id}`)
                        conditionItemTemplate.querySelector('.item_type').textContent = conditionType

                        conditionItemTemplate
                            .querySelectorAll(`td[data-type]:not([data-type="${conditionType}"])`)
                            .forEach((td) => td.remove())

                        if (
                            'weight' === conditionType
                            || 'price' === conditionType
                        ) {
                            const hasMin = !isNaN(parseFloat(conditionOptions.data.min)) && parseFloat(conditionOptions.data.min) > 0
                            const hasMax = !isNaN(parseFloat(conditionOptions.data.max)) && parseFloat(conditionOptions.data.max) > 0
                            let valueType
                            switch (true) {
                                case hasMin && hasMax:
                                    valueType = 'min-max'
                                    break;
                                case hasMin:
                                    valueType = 'min'
                                    break;
                                case hasMax:
                                    valueType = 'max'
                                    break;
                            }

                            const td = conditionItemTemplate.querySelector(`td[data-type="${conditionType}"]`)
                            td.querySelectorAll(`span[data-value-type]:not([data-value-type="${valueType}"])`)
                                .forEach((span) => span.remove())

                            const minValueEl = td.querySelector(`[data-value-type="${valueType}"] .min_value`)
                            if (minValueEl) {
                                if ('weight' === conditionType) {
                                    const min = conditionOptions.data.min
                                    minValueEl.textContent = isFloatHasDecimals(min) ? min.toFixed(3) : min
                                }

                                if ('price' === conditionType) {
                                    minValueEl.textContent = conditionOptions.data.min
                                }
                            }

                            const maxValueEl = td.querySelector(`span[data-value-type="${valueType}"] .max_value`)
                            if (maxValueEl) {
                                if ('weight' === conditionType) {
                                    const max = conditionOptions.data.max
                                    maxValueEl.textContent = isFloatHasDecimals(max) ? max.toFixed(3) : max
                                }

                                if ('price' === conditionType) {
                                    maxValueEl.textContent = conditionOptions.data.max
                                }
                            }
                        }

                        if ('user-role' === conditionType) {
                            const rolesString = conditionOptions.data.userRoles.join(', ')
                            conditionItemTemplate.querySelector(`td[data-type="${conditionType}"] .user_roles_value`).textContent = rolesString
                        }

                        return conditionItemTemplate
                    }

                    function setupDetermineConditionsVisibilityEvent() {
                        shippingProfileContainer.addEventListener('determine-rate-conditions-logic-visibility', determineRateConditionsLogicVisibiity)
                    }

                    function determineRateConditionsLogicVisibiity() {
                        const conditionsLogic = shippingRatesManagerForm.querySelector('.rate-type-configuration.internal .conditions__logic')

                        const checkboxSelector = '[name="rate_conditions_operator"]'
                        if (!conditionsLogic.querySelector(`${checkboxSelector}:checked`)) {
                            conditionsLogic.querySelector(`${checkboxSelector}`).checked = true
                        }

                        if (shippingRatesManagerForm.querySelector('.rate-type-configuration.internal .conditions__items tbody tr')) {
                            conditionsLogic.classList.remove('hide')
                        } else {
                            conditionsLogic.classList.add('hide')
                        }
                    }

                    function setupChangeConditionBasedValueEvent() {
                        jQuery(shippingRatesManagerForm).on('change select2:change', '.internal-rate__conditions .conditions__type', handleChange)

                        function handleChange(e) {
                            const conditionsContainer = e.target.closest('.rate-type-configuration.internal .conditions__add-form')
                            conditionsContainer.querySelectorAll('.internal-rate__prompt.active').forEach((promptItem) => promptItem.classList.remove('active'))
                            conditionsContainer.querySelector(`.internal-rate__prompt[data-prompt-type="${e.target.value}"]`).classList.add('active')

                            if ('user-role' === e.target.value) {
                                fixUserRoleSelectStyles()
                            }
                        }
                    }

                    function fixUserRoleSelectStyles() {
                        const rolesSelect = shippingRatesManagerForm.querySelector('[name="user_roles"]')
                        const selectWrapper = rolesSelect.closest('.internal-rate__prompt')
                        const chosedRolesWrapper = selectWrapper.querySelector('.select2-selection__rendered')

                        selectWrapper
                            .querySelector('.popup-field-new .select2.select2-container')
                            .style.paddingBottom = `${chosedRolesWrapper.offsetHeight}px`
                    }

                    function setupConditionItemEditEvent () {
                        shippingRatesManagerForm.addEventListener('click', showEditingCapabilities)

                        function showEditingCapabilities(e) {
                            if (
                                !e.target.classList.contains('rate-condition-edit')
                                && null === e.target.closest('.rate-condition-edit')
                            ) {
                                return
                            }

                            const conditionOptionsJSON = e.target.closest('tr').dataset.options
                            const conditionOptions = JSON.parse(conditionOptionsJSON)
                            const conditionID = conditionOptions.id
                            const promptContainer = shippingRatesManagerForm.querySelector(`[data-prompt-type="${conditionOptions.type}"]`)

                            if ('weight' === conditionOptions.type || 'price' === conditionOptions.type) {
                                promptContainer.querySelector(`[name="minimum_${conditionOptions.type}"]`).value = conditionOptions.data.min
                                promptContainer.querySelector(`[name="maximum_${conditionOptions.type}"]`).value = conditionOptions.data.max
                            }

                            if ('user-role' === conditionOptions.type) {
                                promptContainer.querySelector('[name="user_roles"]').value = conditionOptions.data.userRoles
                            }

                            promptContainer.closest('.internal-rate-prompt-wrapper').querySelector('[data-condition-id]').value = conditionID
                            promptContainer.querySelector('.create-condition-submit').disabled = false

                            const internalConfiguration = shippingRatesManagerForm.configuration.internal
                            internalConfiguration.querySelector('.conditions__add-form').classList.add('active')
                            internalConfiguration.querySelector('.conditions__add-form').classList.add('update')
                            internalConfiguration.querySelector('.conditions__type').value = conditionOptions.type

                            e.target.closest('.north-actions').classList.remove('active')
                        }
                    }

                    function setupConditionItemDeleteEvent() {
                        shippingRatesManagerForm.addEventListener('click', handleDeleteTrigger)

                        function handleDeleteTrigger(e) {
                            if (
                                !e.target.classList.contains('rate-condition-delete')
                                && null === e.target.closest('.rate-condition-delete')
                            ) {
                                return
                            }

                            e.target.closest('tr').remove()

                            const internalConfiguration = shippingRatesManagerForm.configuration.internal
                            if (!internalConfiguration.querySelectorAll('.conditions__items tbody tr')) {
                                internalConfiguration.querySelector('.conditions__items').classList.add('hide')
                            }
                        }
                    }

                    function setupConditionValidation() {
                        shippingRatesManagerForm.addEventListener('keyup', handleValidationTrigger)
                        jQuery(shippingRatesManagerForm)
                            .find('[name="user_roles"]')
                            .on('select2:closing', handleValidationTrigger)

                        function handleValidationTrigger(e) {
                            if ('minimum_weight' === e.target.name || 'maximum_weight' === e.target.name) {
                                validateWeightInput(e)
                            }

                            if ('minimum_price' === e.target.name || 'maximum_price' === e.target.name) {
                                validatePriceInput(e)
                            }

                            if ('user_roles' === e.target.name) {
                                validateRoleSelect(e)
                                fixUserRoleSelectStyles()
                            }
                        }

                        function validatePriceInput(e) {
                            const promtContainer = e.target.closest('.internal-rate__prompt')
                            const min = promtContainer.querySelector('[name="minimum_price"]').value
                            const max = promtContainer.querySelector('[name="maximum_price"]').value
                            validateInputs({min, max, promtContainer})
                        }

                        function validateWeightInput(e) {
                            const promtContainer = e.target.closest('.internal-rate__prompt')
                            const min = promtContainer.querySelector('[name="minimum_weight"]').value
                            const max = promtContainer.querySelector('[name="maximum_weight"]').value
                            validateInputs({min, max, promtContainer})
                        }

                        function validateRoleSelect(e) {
                            const promtContainer = e.target.closest('.internal-rate__prompt')
                            const max = jQuery(e.target).select2('data').length + 1
                            validateInputs({min: 1, max, promtContainer})
                        }

                        function validateInputs({min, max, promtContainer}) {
                            const submitButton = promtContainer.querySelector('.create-condition-submit')
                            const minFloat = isNaN( parseFloat(min) ) ? 0 : parseFloat(min)
                            const maxFloat = isNaN( parseFloat(max) ) ? 0 : parseFloat(max)

                            if (
                                (!minFloat && !maxFloat)
                                || (minFloat && maxFloat && minFloat >= maxFloat)
                            ) {
                                return submitButton.disabled = true
                            }

                            submitButton.disabled = false
                        }
                    }

                    function setupConditionEditDiscardEvent() {
                        shippingRatesManagerForm.addEventListener('click', handleDisacrdTrigger)

                        function handleDisacrdTrigger(e) {
                            if (
                                !e.target.classList.contains('cancel-condition-update')
                                && null === e.target.closest('.cancel-condition-update')
                            ) {
                                return
                            }

                            const conditionsForm = shippingRatesManagerForm.querySelector('.rate-type-configuration.internal .conditions__add-form')
                            conditionsForm.classList.remove('active')
                            conditionsForm.classList.remove('update')

                            conditionsForm.querySelector('.internal-rate__prompt.active').classList.remove('active')
                            conditionsForm.querySelector('[data-condition-id]').value = ''
                            conditionsForm.querySelector('.conditions__type').value = 'weight'
                            conditionsForm.querySelector('[name="minimum_weight"]').value = ''
                            conditionsForm.querySelector('[name="maximum_weight"]').value = ''
                            conditionsForm.querySelector('[name="minimum_price"]').value = ''
                            conditionsForm.querySelector('[name="maximum_price"]').value = ''
                            conditionsForm.querySelector('[name="user_roles"]').value = ''
                        }
                    }

                    function setupConditionSubmitEvent() {
                        shippingRatesManagerForm.addEventListener('click', handleSubmit)

                        function handleSubmit(e) {
                            if (
                                !e.target.classList.contains('create-condition-submit')
                                && null === e.target.closest('.create-condition-submit')
                            ) {
                                return
                            }

                            const promptContainer = e.target.closest('.internal-rate__prompt')
                            const promptType = promptContainer.dataset.promptType
                            const conditionID = promptContainer.closest('.internal-rate-prompt-wrapper').querySelector('[data-condition-id]')

                            const conditionOptions = {
                                type: promptType,
                                id: conditionID.value ? conditionID.value : `new-condition-${new Date().valueOf()}`,
                                data: {}
                            }

                            if ('user-role' === promptType) {
                                const userRolesInput = promptContainer.querySelector('[name="user_roles"]')
                                conditionOptions.data.userRoles = jQuery(userRolesInput).val()
                                jQuery(userRolesInput).val('')
                            }

                            if ('price' === promptType || 'weight' === promptType) {
                                const minimum = promptContainer.querySelector(`[name="minimum_${promptType}"]`)
                                const maximum = promptContainer.querySelector(`[name="maximum_${promptType}"]`)

                                conditionOptions.data.min = minimum.value
                                conditionOptions.data.max = maximum.value

                                minimum.value = ''
                                maximum.value = ''
                            }

                            if (conditionID.value) {
                                updateRateConditionItem(conditionOptions)
                                conditionID.value = ''
                            } else {
                                addRateConditionItem(conditionOptions)
                            }
                        }

                        function updateRateConditionItem(conditionOptions) {
                            const internalConfiguration = shippingRatesManagerForm.configuration.internal
                            const conditionItemsList = internalConfiguration.querySelector('.conditions__items')
                            const exitedConditionItem = conditionItemsList.querySelector(`.rate-condition-id-${conditionOptions.id}`)
                            const filledConditionTemplate = fillRateConditionTemplate(conditionOptions)

                            if (exitedConditionItem) {
                                exitedConditionItem.replaceWith(filledConditionTemplate)
                            } else {
                                conditionItemsList.append(filledConditionTemplate)
                            }

                            internalConfiguration.querySelector('.conditions__add-form').classList.remove('active')
                        }
                    }
                }

                function setupRatesManagerSubmitEvent() {
                    shippingRatesManagerForm.addEventListener('submit', handleSubmit)

                    function handleSubmit(e) {
                        e.preventDefault()

                        const submitButton = shippingRatesManagerForm.querySelector('[type="submit"]')
                        submitButton.disabled = true

                        const zoneID = shippingRatesManagerForm.querySelector('[name="zone_id"]').value
                        const rateCalculation = shippingRatesManagerForm.querySelector('[name="rate_calculation"]:checked').value
                        const rateIdInput = shippingRatesManagerForm.querySelector('[name="rate_id"]')

                        if (shippingRatesManagerForm.dataset.options) {
                            const storedOptions = JSON.parse( shippingRatesManagerForm.dataset.options )
                            if (storedOptions.calculation !== rateCalculation && rateIdInput.value) {
                                const oldRate = shippingProfileContainer.querySelector(`.zone-item-${zoneID} .rate-item-id-${rateIdInput.value}`)
                                if (oldRate) {
                                    oldRate.remove()
                                    rateIdInput.value = ''
                                }
                            }
                        }

                        const rateID = rateIdInput.value ? rateIdInput.value : `new-rate-${new Date().valueOf()}`

                        const rateOptions = {
                            id: rateID,
                            calculation: rateCalculation,
                            hasFees: shippingRatesManagerForm.querySelector('[name="rate_has_fees"]').checked,
                            feeFlat: shippingRatesManagerForm.querySelector('[name="rate_fee_flat"]').value,
                            feePercent: shippingRatesManagerForm.querySelector('[name="rate_fee_percent"]').value,
                        }

                        if ('internal' === rateOptions.calculation) {
                            rateOptions.name = shippingRatesManagerForm.querySelector('[name="rate_name"]').value
                            rateOptions.price = shippingRatesManagerForm.querySelector('[name="rate_price"]').value
                            rateOptions.hasConditions = shippingRatesManagerForm.querySelector('[name="rate_has_conditions"]').checked

                            const conditionsOperatorChecked = shippingRatesManagerForm.querySelector('[name="rate_conditions_operator"]:checked')
                            if (conditionsOperatorChecked) {
                                rateOptions.conditionsOperator = conditionsOperatorChecked.value
                            }

                            rateOptions.conditions = []
                            shippingRatesManagerForm
                                .querySelectorAll('.rate-type-configuration.internal .conditions__items tbody tr:not(.template)')
                                .forEach((item) => rateOptions.conditions.push( item.dataset.options ))

                            const template = fillRateItemTemplate(rateOptions, zoneID)

                            let isNew = true
                            jQuery(`.zone-item-${zoneID} .internal .rate-item`).each(function () {
                                if (jQuery(this).data('options').id === rateID) {
                                    isNew = false
                                    jQuery(this).replaceWith(template)
                                }
                            })
                            if (isNew) {
                                jQuery(`.zone-item-${zoneID} .internal .rates-table__body`).append(template)
                            }
                        }

                        if ('easypost' === rateOptions.calculation) {
                            const carrierSelect = shippingRatesManagerForm.querySelector('.easypost-carriers-accounts')

                            rateOptions.carrierID = carrierSelect.value
                            rateOptions.carrierLabel = carrierSelect.querySelector('option:checked').textContent.trim()
                            rateOptions.includeFutureServices = shippingRatesManagerForm.querySelector('[name="future_services"]').checked

                            rateOptions.services = []
                            shippingRatesManagerForm
                                .querySelectorAll('[name="easypost_services[]"]:checked')
                                .forEach((servie) => rateOptions.services.push( servie.value ))

                            const template = fillRateItemTemplate(rateOptions, zoneID)

                            let isNew = true
                            jQuery(`.zone-item-${zoneID} .easypost .rate-item`).each(function () {
                                if (jQuery(this).data('options').id === rateID) {
                                    isNew = false
                                    jQuery(this).replaceWith(template)
                                }
                            })
                            if (isNew) {
                                jQuery(`.zone-item-${zoneID} .easypost .rates-table__body`).append(template)
                            }
                        }

                        closePopup('isShippingRatesManagerOpened')

                        const appendedItem = shippingProfileContainer.querySelector(`.zone-item-${zoneID} .rate-item-id-${rateOptions.id}`)
                        appendedItem.dataset.options = JSON.stringify(rateOptions)

                        maybeHideEmptyRateTables()
                    }

                    function maybeHideEmptyRateTables() {
                        shippingProfileContainer
                            .querySelectorAll('.rates-table .rates-table__body')
                            .forEach((table) => {
                                if (!table.querySelector('.rate-item')) {
                                    table.closest('.rates-table').classList.add('hide')
                                }
                            })
                    }
                }
            }
		}

        function isFloatHasDecimals(n) {
            return Number(n) === n && n % 1 !== 0
        }
    })

    function handleValidationOfShippingProfileProductManagement() {
        const form = $('.popup-manage-shipping-profile-products')
        const selectedProductsCount = form.find('input[name="products[]"]:checked').length
        const selectedProductsVariationCount = form.find('input[name="variants[]"]:checked').length
        const isFromButtonDisabled = selectedProductsCount === 0 && selectedProductsVariationCount === 0

        form.find('input[type="submit"]').prop('disabled', isFromButtonDisabled)
    }

    jQuery('.popup-manage-shipping-profile-products .product_name_search').on('change keyup', handleFilteringProductsPerUserSearch)
    function handleFilteringProductsPerUserSearch(e) {
        const searchValue = $(this).val()
        const products = $(this).closest('.popup-manage-shipping-profile-products').find('.products-selectors').data('products')
        let notFound = true

        products.forEach((product) => {
            const showProduct = product.title.toLowerCase().indexOf(searchValue.toLowerCase()) > -1
            const productElement = $(`.products-selectors__product.product-${product.id}`)

            if (showProduct) {
                notFound = false
                productElement.find('.products-selectors__product__expander').prop('checked', true)
                productElement.removeClass('hide')
            } else {
                productElement.find('.products-selectors__product__expander').prop('checked', false)
                productElement.addClass('hide')
            }
        })

        if (notFound) {
            $('.products-selectors-not-found .products-selectors-not-found__search').html(searchValue)
            $('.products-selectors-not-found').removeClass('hide')
        } else {
            $('.products-selectors-not-found').addClass('hide')
        }

        $('.products-selectors__product__expander ').prop('checked', false)
    }

    function closeManageShippingProfileProductsPopup() {
		stateManager.isShippingProfileProductsManagerOpened = false
        $('.popup-manage-shipping-profile-products').trigger('reset')
        $.fancybox.close()
    }

    jQuery(document).ready(() => $('.shipping-profile-products-duplicate-popup').on('submit', handleRemovingProductFromOtherShippingZones))
    function handleRemovingProductFromOtherShippingZones(event) {
        event.preventDefault();

        const form = $(this)
        const productId = form.find('input[name="product_id"]').val()
        // const variantIndex = form.find('input[name="variant_index"]').val(); // *
        const variantID = form.find('input[name="variant_id"]').val() // *
        const item_type = form.find('input[name="item_type"]').val()
        const shipping_profiles = JSON.parse( form.find('input[name="shipping_profiles"]').val() )
        const shipping_profiles_ids = Object.keys(shipping_profiles)
        const adminNotice = form.find('.admin-popup__notice')
        const loader = jQuery('.shipping-profile-products-duplicate-popup .loader')
        adminNotice.html('')

        $.ajax({
            type: 'DELETE',
            url: `${ajax_object.rest_url}/shipping-profiles-remove-product`,
            data: {
                'product_id': productId,
                'shipping_profiles_ids': shipping_profiles_ids,
                // 'variation_index': variantIndex !== '' ? variantIndex : -1,
                'variant_id': variantID, // *
                'item_type': item_type,
            },
            beforeSend: function (xhr) {
                xhr.setRequestHeader('X-WP-Nonce', ajax_object.rest_nonce)
                loader.css('display', 'block')
            },
            success: function (response) {
				loader.css('display', 'none')

                if (!response.success) {
					adminNotice.html('<div class="north-error">' + response.message + '</div>')
					return
				}

				const manageShippingProfileProductsPopup = $('.popup-manage-shipping-profile-products')
				const productItemContainer = manageShippingProfileProductsPopup.find(`.products-selectors__product.product-${productId}`)

				if (item_type === 'product') {
					productItemContainer.data('shipping-profiles', {})
					productItemContainer.find('.products-selectors__product__info').html('')
					productItemContainer.find('.sub-items .sub-item__info').html('')
				} else if (item_type === 'variant') {
					const variationContainer = productItemContainer.find(`.sub-item.product-${productId}-variation-${variantIndex}`)
					variationContainer.find('.sub-item__info').html('')
					variationContainer.data('shipping-profiles', {})

					const productShippingProfiles = {};
					productItemContainer.find('.sub-item').each(function () {
						const variationShippingProfiles = $(this).data('shipping-profiles');
						Object.keys(variationShippingProfiles).forEach((shippingProfileId) => {
							if (productShippingProfiles[shippingProfileId] === undefined) {
								productShippingProfiles[shippingProfileId] = variationShippingProfiles[shippingProfileId];
							}
						})
					})

					productItemContainer.data('shipping-profiles', productShippingProfiles);
					if (Object.keys(productShippingProfiles).length) {
						const shippingProfilesHTML = Object.keys(productShippingProfiles).map((shippingProfileId) => {
                            return `<span data-id="${shippingProfileId}">${productShippingProfiles[shippingProfileId].title}</span>`
                        }).join(', ')

						productItemContainer.find('.products-selectors__product__info .shipping-profiles').html(shippingProfilesHTML)
					} else {
						productItemContainer.find('.products-selectors__product__info').html('')
					}
				}

				form.find('.admin-popup__close').click()
            }
        })
    }

    function initializingValidationForCreatingCustomShippingProfile() {
        const shippingProfileNameInput = $('.shipping-form').find('input[name="shipping_profile_name"]')
        if (!shippingProfileNameInput.length) {
            return
        }

        const submitButtons = $('.shipping-form').find('.shipping-form__submit-button')
        submitButtons.prop('disabled', true)

        shippingProfileNameInput.on('change keyup', function () {
            const shippingProfileName = $(this).val()
            $('.shipping-profile-name').html(shippingProfileName)
            submitButtons.prop('disabled', !shippingProfileName)
        })
    }

    function getShippingZoneCarriers(zoneID, done = () => {}) {
        const zoneOptions = $(`.zone-item-${zoneID}`).data('options')

        const $shippingRatesManagerForm = $('.shipping-zone-add-rate-popup')

        const profileDataUnparsed = document.querySelector('#shipping_profile_data').value
        const profileData = JSON.parse(profileDataUnparsed)

        const zoneLocations = zoneOptions.regions
        const countryCodes = getCountryCodesFromRegionsList(zoneLocations)

        $('.easypost .services__list.services').find('.service-item').remove()

        const easypostCarrierAccountsSelect = $shippingRatesManagerForm.find('.rate-type-configuration.easypost .easypost-carriers-accounts')
        easypostCarrierAccountsSelect.empty()
        easypostCarrierAccountsSelect.select2({
            dropdownParent: $(document).find('.fancybox-stage'),
            width: '90%',
            dropdownCssClass: 'admin-popup-field-new__select2-dropdown',
            selectionCssClass: 'selectionCssClass',
            placeholder: 'Loading carriers',
            disabled: true,
        })

        const loader = $shippingRatesManagerForm.find('.loader')

        $.ajax({
            type: 'GET',
            url: `${ajax_object.rest_url}/easypost/carriers`,
            data: {
                addressID: profileData.shipping_address_id,
                countryCodes: countryCodes
            },
            beforeSend(xhr) {
                xhr.setRequestHeader('X-WP-Nonce', ajax_object.rest_nonce)
				loader.css('display', 'block')
            },
            success(response) {
                loader.css('display', 'none')

                if (!response.success) {
                    const adminNotice = $('.popup-create-shipping-zone .admin-popup__notice')
					adminNotice.html(`<div class="north-error">${response.message}</div>`)
				}

                const disabledCarriers = $shippingRatesManagerForm[0].dataset.selectedCarriers ?? '[]'
                const disabledCarriersArr = JSON.parse(disabledCarriers)
				const carriers = response.data ? response.data : []
				carriers.forEach((carrier) => {
					const disabled = disabledCarriersArr.find((carrierID) => carrierID === carrier.id) !== undefined
					const option = `<option value="${carrier.id}"${disabled ? ' disabled': ''}>${carrier.label}</option>`
					easypostCarrierAccountsSelect.append(option)
				})

				easypostCarrierAccountsSelect.select2({
					dropdownParent: $(document).find('.fancybox-stage'),
					width: '90%',
					dropdownCssClass: 'admin-popup-field-new__select2-dropdown',
					selectionCssClass: 'selectionCssClass',
					placeholder: 'Choose carrier',
                    disabled: false,
				})

                const rateCalculation = $shippingRatesManagerForm.find('[name="rate_calculation"]:checked').val()
				if ('easypost' === rateCalculation) {
					easypostCarrierAccountsSelect.val(null).trigger('change')
				}

				done()
            }
        })
    }

    function getCountryCodesFromRegionsList(regions) {
        const countryCodes = []
        for ( const regionCode in regions ) {
            countryCodes.push( ...Object.keys(regions[regionCode]) )
        }

        return countryCodes
    }
})(jQuery)
