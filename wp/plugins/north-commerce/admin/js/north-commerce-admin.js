'use strict';

;(() => {
	importDependencies()

	function importDependencies() {

		const ordersTab = document.querySelector('#orders-tab')
		if (ordersTab) {
			importCustomPopup()

			const isOrdersListPage = ordersTab.querySelector('.orders > .board')
			if (isOrdersListPage) {
				import('./admin/orders-list.js')
					.then((imported) => new imported.OrdersList())
			}

			const isOrderDraftPage = document.querySelector('#orders-tab > [data-nc-order-status="draft"]')
			if (isOrderDraftPage) {
				import('./admin/order-draft.js')
					.then((imported) => new imported.OrderDraft())
			}
		}

		const couponsTab = document.querySelector('#coupons-tab')
		if (couponsTab) {
			const isCouponListPage = couponsTab.querySelector('.coupons.list')
			if (isCouponListPage) {
				import('./admin/coupons-list.js')
					.then((imported) => new imported.CouponsList())
			}

			const isCouponSinglePage = couponsTab.querySelector(':scope > .coupon.single')
			if (isCouponSinglePage) {
				import('./admin/coupon-single.js')
					.then((imported) => new imported.CouponSingle())

				importCustomPopup()
			}
		}

		const settingsGeneralTab = document.querySelector('#wpmdb-main > .settings-tab.settings-general')
		if (settingsGeneralTab) {
			import('./admin/settings-general.js')
				.then((imported) => new imported.SettingsGeneral())
		}

		const localDeliveryTab = document.querySelector('.local-delivery-profile')
		if (localDeliveryTab) {
			import('./admin/settings-local-delivery.js')
				.then((imported) => new imported.LocalDelivery())

			import('./custom-popup.js')
				.then((imported) => new imported.CustomPopup())
		}

		const localPickupTab = document.querySelector('.local-pickup-profile')
		if (localPickupTab) {
			import('./admin/settings-local-pickup.js')
				.then((imported) => new imported.LocalPickup())
		}

		const settingsNotificationsTab = document.querySelector('.settings-tab .notification-section')
			|| document.querySelector('.north-settings .notification-form')
		if (settingsNotificationsTab) {
			import('./admin/settings-notifications.js')
				.then((imported) => new imported.SettingsNotifications())
		}

		const isEventLogSettingsTab = document.querySelector('.settings-tab .event-log-section')
		if (isEventLogSettingsTab) {
			import('./admin/event-log.js')
				.then((imported) => new imported.EventLog())
		}

		const isWebhooksSettingsTab = document.querySelector('.settings-tab .webhook-container')
		if (isWebhooksSettingsTab) {
			import('./admin/webhooks.js')
				.then((imported) => new imported.Webhooks())
		}

		function importCustomPopup() {
			import('./custom-popup.js')
				.then((imported) => new imported.CustomPopup())
		}
	}
})()

;(function($) {
	NorthCommerce.Notifications = {
		container: document.querySelector('.nc-notifications'),
		add(type, message, timeout = 5000) {
			if (!NorthCommerce.Notifications.container) {
				console.warn('div.nc-notifications does not exists')
				return
			}

			const notification = {
				type, message, timeout, $el: null,
				show() {
					this.$el               = document.createElement('div')
					this.$el.style.display = 'block'
					this.$el.innerHTML     = message
					this.$el.classList.add(`north-${this.type}`)
					NorthCommerce.Notifications.container.appendChild(this.$el)
					this.timeout && setTimeout(() => {this.$el.remove()}, this.timeout)
				},
			}

			notification.show()
		},
	}

	const localIds = window.NorthCommerce.LocalIds;
    const variantManager = window.NorthCommerce.VariantManager;
    const optionManager = window.NorthCommerce.OptionManager;

    $(function () {
        function setCookie(cname, cvalue, exdays) {
			const DAY_IN_MILLISECONDS = 24 * 60 * 60 * 1000
            const d = new Date();
            d.setTime( d.getTime() + (exdays * DAY_IN_MILLISECONDS) );
            const expires = "expires=" + d.toUTCString();
            document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
        }

        function getCookie(cname) {
            let name = cname + "=";
            let ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) === 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return null;
        }

        function checkCookie() {
            let user = getCookie("username");
            if (user !== "") {
                alert("Welcome again " + user);
            } else {
                user = prompt("Please enter your name:", "");
                if (user !== "" && user != null) {
                    setCookie("username", user, 365);
                }
            }
        }

        $('.nc-admin-notice').each(function () {
            if ($(this).hasClass('nc-admin-notice-is-dismissible')) {
                $(this)
					.find('.nc-admin-notice__content')
					.append(`<button type="button" class="nc-admin-notice-dismiss"><span class="screen-reader-text">Dismiss this notice.</span></button>`)

				if ($(this).attr('data-type') && $(this).attr('data-id')) {
					const noticeCookieValue = getCookie($(this).data('type'));
					const noticeId = $(this).attr('data-id');
					if (noticeCookieValue !== null && noticeCookieValue === noticeId) {
						$(this).remove()
					}
				}

                $(this).addClass('nc-admin-notice-loaded')
            }
        })

        $('.nc-admin-notice-dismiss').on('click', function () {
            const noticeElement = $(this).closest('.nc-admin-notice');
            const noticeId = noticeElement.attr('data-id');
            const noticeType = noticeElement.attr('data-type');
            if (noticeType && noticeId) {
                setCookie(noticeType, noticeId)
            }
            noticeElement.remove()
        })
    })

	$(function() {

		$('.admin-popup__close, [data-fancybox-close]').on('click', function () {
			$.fancybox.close()
		})

		$('body').on('click', '.search-container .product', function () {
			let input = $(this).parent().parent().find('input');
			input.val($(this).data('title'));
		});

		$('.nc-smooth-scroll-nav').click(function (e) {
			e.preventDefault();

			const target = $(this).attr('href'); // Get the href attribute of the clicked link
			const element = $(target); // Select the target element using the href value

			if (element.length) {
				$('html, body').animate({
					scrollTop: element.offset().top - 35
				}, 500);
			}
		})

		/* ORDERS FUNCTIONS  */
		let updateOrdersSelect = () => {
			let count = $('.order.bump-selected').length;
			let allOrders = $('.order').length;
			let checkbox = $('.orders__board #all');

			checkbox.prop('checked', count === allOrders && allOrders !== 0? true : false);

			if (count > 0 && count < allOrders) {
				$('.result__labels').addClass('bump-active');
				$('.bump__count-selecting p').html('<span>' + count + '</span> selected');
			} else if (count === allOrders && allOrders !== 0) {
				$('.result__labels').addClass('bump-active');
				$('.bump__count-selecting p').html('All selected');
			} else {
				$('.result__labels').removeClass('bump-active');
			}
		};

		$('.orders__board #all').on('change', function() {
			let isActive = $(this).is(':checked');
			if (isActive) {
				$('.order').each(function() {
					if (!$(this).hasClass('bump-selected')) {
						$(this).addClass('bump-selected');
					}
					$(this).find('input[type="checkbox"]').prop('checked', true);
				});
			} else {
				$('.order').each(function() {
					$(this).removeClass('bump-selected');
					$(this).find('input[type="checkbox"]').prop('checked', false)
				});
			}
			updateOrdersSelect();
		});

		$(document).on('click', '.order input[type="checkbox"]', function() {
			let isActive = $(this).is(':checked');
			if (isActive) {
				$(this).parents('.order').addClass('bump-selected');
			} else {
				$(this).parents('.order').removeClass('bump-selected');
			}
			updateOrdersSelect();
		});

		$('.orders .action__fulfilled').on('click', function() {
			let orders = [];
			$('.order.bump-selected').each(function() {
				orders.push($(this).data('order-id'));
			});

			$.ajax({
				type: 'POST',
				url: ajax_object.ajaxurl,
				data: {
					action: 'update_orders_status',
					orders: orders
				},
				beforeSend: function() {
					$('.board__overlay').css('display', 'block');
				},
				success: function () {
					let status = $('.status__filter-order.active').attr('data-status-filter');
					let paged = $('.result__orders').attr('data-current-page');
					let filter = $('.board__form-orders').serialize();
					updateOrderBoard(filter, status, paged);
				}
			});
		});

		$('.board__form-orders').on('submit', function(e) {
			e.preventDefault();
			let status = $('.status__filter-order.active').attr('data-status-filter');
			let filter = $(this).serialize();
			updateOrderBoard(filter, status);
		});

		$('#order-data-sort, #order-customer-sort').on('change', function(e) {
			e.preventDefault();
			let status = $('.status__filter-order.active').attr('data-status-filter');
			let filter = $(this).serialize();
			updateOrderBoard(filter, status);
		});

		/**
		 * Toggle Filters
		 */
		$('.filters__toggle').click(function(e) {
			e.preventDefault();
			$(this).toggleClass('active');
			if ($(this).hasClass('active')) {
				$(this).find('span').html('Hide filters');
				$('.filters__body').show();
			} else {
				$(this).find('span').html('Show filters');
				$('.filters__body').hide();
			}
		});

		/**
		 * Init filter selects
		 */
		$('#customer').select2();
		$('#sort').select2();


		/**
		 * Filter orders by status
		 */
		$('.status__filter-order').on('click', function(e) {
			e.preventDefault();
			if ($(this).hasClass('active')) {
				return
			}

			$('.status__filter-order').removeClass('active');
			$(this).addClass('active');

			let status = $(this).attr('data-status-filter');
			let filter = $('.board__form-orders').serialize();
			let perPage = parseInt( $('.result__orders').attr('data-per-page') );
			updateOrderBoard(filter, status, 1, perPage);
		});

		/**
		 * Prev page orders
		 */
		$('.btn-prev.order-prev').on('click', function() {
			let ordersBoard = $('.result__orders');
			let currentPage = parseInt(ordersBoard.attr('data-current-page'));
			let maxPage = parseInt(ordersBoard.attr('data-max-page'));
			let perPage = parseInt(ordersBoard.attr('data-per-page'));

			if (maxPage !== 0 && currentPage - 1 > 0) {
				let filter = $('.board__form-orders').serialize();
				let status = $('.status__filter-order.active').attr('data-status-filter');
				let page = currentPage - 1;
				updateOrderBoard(filter, status, page, perPage);
			}
		});

		/**
		 * Next page orders
		 */
		$('.btn-next.order-next').on('click', function() {
			let ordersBoard = $('.result__orders');
			let currentPage = parseInt(ordersBoard.attr('data-current-page'));
			let maxPage = parseInt(ordersBoard.attr('data-max-page'));
			let perPage = parseInt(ordersBoard.attr('data-per-page'));

			if (maxPage !== 0 && currentPage + 1 <= maxPage) {
				let filter = $('.board__form-orders').serialize();
				let status = $('.status__filter-order.active').attr('data-status-filter');
				let page = currentPage + 1;
				updateOrderBoard(filter, status, page, perPage);
			}
		});

		function updateOrderBoard(filter, status = 'any', page = 1, perpage = 10) {
			$.ajax({
				type: 'POST',
				url: ajax_object.ajaxurl,
				data: {
					'action': 'get_orders',
					'page': page,
					'posts_per_page': perpage,
					'status': status,
					'filter': filter,
				},

				beforeSend: function() {
					$('.board__overlay').css('display', 'block');
				},
				success: function (data) {
					let response = JSON.parse(data);
					let ordersBoard = $('.result__orders');

					$('.action__result > span').html(response['pagination']);
					$('.status__filter-order[data-status-filter=""] > span').html('(' + response['counters']['total'] + ')');
					$('.status__filter-order[data-status-filter="partially-fulfilled"] > span').html('(' + response['counters']['partially-fulfilled'] + ')');
					$('.status__filter-order[data-status-filter="fulfilled"] > span').html('(' + response['counters']['fulfilled'] + ')');
					$('.status__filter-order[data-status-filter="scheduled"] > span').html('(' + response['counters']['scheduled'] + ')');
					$('.status__filter-order[data-status-filter="on_hold"] > span').html('(' + response['counters']['on-hold'] + ')');
					$('.status__filter-order[data-status-filter="unfulfilled"] > span').html('(' + response['counters']['unfulfilled'] + ')');

					ordersBoard.attr('data-current-page', response['current_page']);
					ordersBoard.attr('data-max-page', response['max_page']);
					ordersBoard.html(response['orders']);
					updateOrdersSelect();

					$('.board__overlay').css('display', 'none');
				}
			});
		}

		/**
		 * CUSTOMER FUNCTIONS
		 */
		const singleCustomerContainer = document.querySelector('.single-customer')
		if (singleCustomerContainer) {

			$('.card__action .btn-edit').on('click', function() {
				let data = $(this).data('form-type');
				let form  = $('.admin-popup[data-form-type="' + data + '"]');

				if (form !== undefined && data !== undefined) {
					$.fancybox.open({
						src : form,
						type : 'inline',
						opts : {
							modal: true,
							infobar: false,
							toolbar: false,
							arrows: false,
						},
					});
				}
			});


			$('.customer-popup-close, .order-popup-cancel').on('click', function () {
				$.fancybox.close()
			});

		}

		/**
		 * ORDER FUNCTIONS
		 */
		const singleOrderContainer = document.querySelector('.single-order')
		if (singleOrderContainer) {

			setupOrderStatusSelectorToggleEvent()
			setupOrderStatusChangeEvent()

			$('.show-hidden').on('click', function() {
				$(this).toggleClass('active');
				$(this).parent().siblings('.card__hidden').toggleClass('active');
			});


			$('.btn-edit, .btn-refund').on('click', function() {
				let data = $(this).data('form-type');
				let form  = $('.admin-popup[data-form-type="' + data + '"]');

				if (form !== undefined && data !== undefined) {
					$.fancybox.open({
						src : form,
						type : 'inline',
						opts : {
							modal: true,
							infobar: false,
							toolbar: false,
							arrows: false,
						},
					});
				}
			});


			document.querySelectorAll('form[data-form-type="refunding"]').forEach(el => {
				el.addEventListener('submit', event => {
					event.preventDefault()

					const order_id       = document.querySelector('.single-order').dataset.orderId
					const $form          = event.target
					const $button_submit = $form.querySelector('[type=submit]')

					const submit_button_initial_text = $button_submit.value
					$button_submit.value             = $button_submit.dataset.textProcessing

					$.ajax({
						type:       'POST',
						url:        ajax_object.ajaxurl,
						data:       {
							'action':   'refund_order',
							'order_id': order_id,
						},
						beforeSend: function () {
							$button_submit.setAttribute('disabled', 'disabled')
						},
						complete:   function (response) {

							$button_submit.removeAttribute('disabled')
							$button_submit.value = submit_button_initial_text

							setTimeout(() => {
								$.fancybox.close();
								NorthCommerce.Notifications.add(
									response.responseJSON.success ? 'success' : 'error',
									response.responseJSON.data.message,
								)
							}, 300)
						},
					})
				})
			})

			$('.order-popup-close, .order-popup-cancel').on('click', function () {
				$.fancybox.close()
			});

			const prepareOrderForm = ($form) => {
				$form.find('.loader').css('display', 'block');
				$form.find('.order-popup-cancel').css('pointer-events', 'none');
				$form.find('.admin-popup-submit').css('pointer-events', 'none');
				$form.find('.admin-popup__close order-popup-close').css('pointer-events', 'none');
				$form.find('input').prop('readonly', true);
			}

			const resetOrderForm = ($form) => {
				$form.find('.loader').css('display', 'none');
				$form.find('.order-popup-cancel').css('pointer-events', 'auto');
				$form.find('.admin-popup-submit').css('pointer-events', 'auto');
				$form.find('.admin-popup__close order-popup-close').css('pointer-events', 'auto');
				$form.find('input').prop('readonly', false);
			}

			$(document).on('submit', '.admin-popup[data-form-type="customer"]', function (e) {
				e.preventDefault()

				const form = $(this)

				const data = {
					customer_name: form.find('input[name="customer_name"]').val(),
					customer_surname: form.find('input[name="customer_surname"]').val(),
					order_id: $('.single-order').data('order-id')
				}

				$.ajax({
					type: 'POST',
					url: ajax_object.ajaxurl,
					data: {
						action: 'update_customer_name',
						customer: data,
					},
					beforeSend: function() {
						prepareOrderForm(form);
					},
					success: function () {
						$('.card__text-customer-name').html(`${data.customer_name} ${data.customer_surname}`);
						resetOrderForm(form);
						$.fancybox.close()
					}
				})
			})

			$(document).on('submit', '.admin-popup[data-form-type="contact"]', function (e) {
				e.preventDefault();
				let form = $(this);
				let data = {
					contact_email: form.find('input[name="contact_email"]').val(),
					contact_phone: form.find('input[name="contact_phone"]').val(),
					order_id: $('.single-order').data('order-id')
				}

				$.ajax({
					type: 'POST',
					url: ajax_object.ajaxurl,
					data: {
						action: 'update_customer_information',
						customer: data,
					},
					beforeSend: function() {
						prepareOrderForm(form);
					},
					success: function () {
						$('.card__text-customer-email').html(data.contact_email);
						$('.card__text-customer-phone').html(data.contact_phone);

						resetOrderForm(form);
						$.fancybox.close()
					}
				});
			});

			function setupOrderStatusSelectorToggleEvent() {
				const selectorClasses = '.order__status.order__selector'
				const selectorContainer = singleOrderContainer.querySelector(selectorClasses)
				if (!selectorContainer) { return }

				const handleSelectorToggle = (e) => {
					if (
						e.target === selectorContainer
						|| e.target.closest(selectorClasses)
					) {
						selectorContainer.classList.toggle('active')
					} else if (selectorContainer.classList.contains('active')) {
						selectorContainer.classList.remove('active')
					}
				}

				singleOrderContainer.addEventListener('click', handleSelectorToggle)
			}

			function setupOrderStatusChangeEvent() {
				const handleStatusChange = (e) => {
					if ('order_status' !== e.target.name && 'radio-select__item radio' !== e.target.type) {
						return
					}

					const orderStatusNonce = document.querySelector('[data-order-status-nonce]').getAttribute('data-order-status-nonce');
					const newStatusID = e.target.value
					const order_id = singleOrderContainer.dataset.orderId

					fetch(`${location.origin}/wp-json/nc-data/v1/orders/${order_id}`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'Accept': 'application/json',
							'X-WP-Nonce': orderStatusNonce
						},
						body: JSON.stringify({
							order_status_id: newStatusID
						})
					})
						.then((response) => response.json())
						.then((data) => {
							if ('ok' !== data.code) {
								let error = ''
								if (data.data.status && 200 !== data.data.status) {
									error += `Error ${data.data.status}: `
								}
								if (data.message && 'ok' !== data.message) {
									error += `${data.message}`
								}
								if (error) {
									console.error(error)
								}
							}
							if ('ok' === data.code) {
								const selectorContainer = singleOrderContainer.querySelector('.order__status.order__selector')

								const newStatusSlug = e.target.id.substring( e.target.id.lastIndexOf('_') + 1)
								selectorContainer.classList.value = `order__status order__selector order__status-${newStatusSlug}`

								const statusName = selectorContainer.querySelector('.current_status')
								statusName.textContent = e.target.parentElement.textContent

								document.querySelector('.order-status .status__mark').classList.value = `status__mark status-${newStatusSlug}`
								document.querySelector('.order-status .status__name').textContent = e.target.parentElement.textContent
							}
						})
						.catch((error) => console.error(error))

				}

				singleOrderContainer.addEventListener('change', handleStatusChange)
			}
		}


		/**
		 * PRODUCT FUNCTIONS
		 */

		let updateProductSelect = () => {
			let count = $('.product.bump-selected:not(.single-product)').length;
			let allProduct = $('.product').length;
			let checkbox = $('#all-product');

			checkbox.prop('checked', count === allProduct && allProduct !== 0 ? true : false);

			if (count > 0 && count < allProduct) {
				$('.result__labels').addClass('bump-active');
				$('.bump__count-selecting p').html('<span>' + count + '</span> selected');
			} else if (count === allProduct && allProduct !== 0) {
				$('.result__labels').addClass('bump-active');
				$('.bump__count-selecting p').html('All selected');
			} else {
				$('.result__labels').removeClass('bump-active');
			}
		};

		$('#all-product').on('change', function() {
			let isActive = $(this).is(':checked');
			if (isActive) {
				$('.product').each(function() {
					if (!$(this).hasClass('bump-selected')) {
						$(this).addClass('bump-selected');
					}
					$(this).find('input[type="checkbox"]').prop('checked', true);
				});
			} else {
				$('.product').each(function() {
					$(this).removeClass('bump-selected');
					$(this).find('input[type="checkbox"]').prop('checked', false)
				});
			}
			updateProductSelect();
		});

		$(document).on('click','.product input[type="checkbox"]', function() {
			let isActive = $(this).is(':checked');
			if (isActive) {
				$(this).parents('.product').addClass('bump-selected');
			} else {
				$(this).parents('.product').removeClass('bump-selected');
			}
			updateProductSelect();
		});

		let bumpActionStart = (data) => {
			$.ajax({
				type: 'POST',
				url: ajax_object.ajaxurl,
				data: data,
				beforeSend: function() {
					$('.board__overlay').css('display', 'block');
				},
				success: function (f) {
					let status = $('.status__filter-product.active').attr('data-status-filter');
					let paged =  parseInt($('.result__products').attr('data-current-page'));
					let filter = $('.board__form-products').serialize();
					updateProductBoard(filter, status, paged);
				}
			});
		}


		$('.products .action__trash').on('click', function() {
			let products = [];
			$('.product.bump-selected').each(function() {
				products.push($(this).data('product-id'));
			});
			let data = {
				'action': 'delete_products',
				'products': products
			}
			bumpActionStart(data);
		});

		$('.products .action__archive').on('click', function() {
			let products = [];
			$('.product.bump-selected').each(function() {
				products.push($(this).data('product-id'));
			});

			let data = {
				'action': 'update_products_statuses',
				'products': products,
				'product_status': 'archived'
			}
			bumpActionStart(data);
		});

		$('.products .action__publish').on('click', function() {
			let products = [];
			$('.product.bump-selected').each(function() {
				products.push($(this).data('product-id'));
			});

			let data = {'action' : 'update_products_statuses', 'products' : products , 'product_status' : 'published'}
			bumpActionStart(data);
		});

		$('.board__form-products').on('submit', function(e) {
			e.preventDefault();
			let status = $('.status__filter-product.active').attr('data-status-filter');
			let paged = 1;
			let filter = $(this).serialize();
			updateProductBoard(filter, status, paged);
		});

		$('#product-data-sort, #product-price-sort, #product-inventory-sort, #product-type-sort').on('change', function(e) {
			e.preventDefault();
			let status = $('.status__filter-product.active').attr('data-status-filter');
			let paged = 1;
			let filter = $('.board__form-products').serialize();
			updateProductBoard(filter, status, paged);
		});


		/**
		 * Prev page products
		 */
		$('.btn-prev.product-prev').on('click', function() {
			let ordersBoard = $('.result__products');
			let currentPage = parseInt(ordersBoard.attr('data-current-page'));
			let maxPage = parseInt(ordersBoard.attr('data-max-page'));

			if (maxPage !== 0 && currentPage - 1 > 0) {
				let status = $('.status__filter-product.active').attr('data-status-filter');
				let paged = currentPage - 1;
				let filter = $('.board__form-products').serialize();
				updateProductBoard(filter, status, paged);
			}
		});

		/**
		 * Next page products
		 */
		$('.btn-next.product-next').on('click', function() {
			let ordersBoard = $('.result__products');
			let currentPage = parseInt(ordersBoard.attr('data-current-page'));
			let maxPage = parseInt(ordersBoard.attr('data-max-page'));

			if (maxPage !== 0 && currentPage + 1 <= maxPage) {
				let status = $('.status__filter-product.active').attr('data-status-filter');
				let paged = currentPage + 1;
				let filter = $('.board__form-products').serialize();
				updateProductBoard(filter, status, paged);
			}
		});

		/**
		 * Remove product
		 */
		$(document).on('click', '.product-remove', function() {
			let product_id = $(this).data('product-id');
			$.ajax({
				type: 'POST',
				url: ajax_object.ajaxurl,
				data: {
					'action': 'delete_product',
					'delete_id': product_id
				},
				beforeSend: function() {
					$('.board__overlay').css('display', 'block');
				},
				success: function () {
					let status = $('.status__filter-product.active').attr('data-status-filter');
					let paged =  parseInt($('.result__products').attr('data-current-page'));
					let filter = $('.board__form-products').serialize();
					updateProductBoard(filter, status, paged);
				}
			});
		});

		$(document).on('click', '.product-duplicate', function(e) {
			const singleProductPage = e.target.closest('.single-product')
			const loader = singleProductPage ? $('.single-product .product-wait') : $('.board__overlay');
			$.ajax({
				type: 'POST',
				url: ajax_object.ajaxurl,
				data: {
					'action': 'duplicate_product',
					'product_id': $(this).data('product-id')
				},
				beforeSend: function() {
					loader.css('display', 'block');
				},
				success: function (data) {
					if (data !== undefined) {
						let response = JSON.parse(data);
						if (false === response['status']) {
							alert('Error on duplicate product!');
							loader.css('display', 'none');
						} else {
							let link = response['redirect'] !== undefined ? response['redirect'] : location.href;
							window.location = link;
						}
					}
				}
			});
		});

		/**
		 * Archived product
		 */
		$('.single-product .action-archive').on('click', function(e) {
			if (e.target.classList.contains('disabled')) {
				return
			}

			let product_id = $(this).data('product-id');
			$.ajax({
				type: 'POST',
				url: ajax_object.ajaxurl,
				data: {
					'action': 'update_product_status',
					'product_id': product_id,
					'product_status' : 'archived'
				},
				beforeSend: function() {
					$('.single-product .product-wait').css('display', 'block');
				},
				success: function () {
					location.reload();
				}
			});
		});

		/**
		 * Remove product on single page
		 */
		$('.single-product .action-delete').on('click', function(e) {
			if (e.target.classList.contains('disabled')) {
				return
			}

			let product_id = $(this).data('product-id');
			$.ajax({
				type: 'POST',
				url: ajax_object.ajaxurl,
				data: {
					'action': 'delete_product',
					'delete_id': product_id,
					'reload' : true
				},
				beforeSend: function() {
					$('.single-product .product-wait').css('display', 'block');
				},
				success: function (data) {
					let link = data === true ? location.href : data;
					window.location = link;
				}
			})
		})

		/**
		 * Change product type
		 */
		$('.single-product input[type=radio][name="product_type"]').on('change', function() {
			let nextType = $(this).data('product-type');
			let nextLabel = $(this).data('product-type-label');
			$('.product__content').attr('data-product-type', nextType);
			$('.form__product-type > p > span').html(nextLabel);
		});

		/**
		 * Update product permalink
		 */
		const permalinkForm = document.querySelector('.single-product .product__permalink')
		if (permalinkForm) {
			const permalinkFormSubmit = permalinkForm.querySelector('.product__permalink__save')
			permalinkForm.querySelector('#permalink_slug').addEventListener('input', (e) => {
				if (!permalinkFormSubmit.classList.contains('awaiting')) {
					permalinkFormSubmit.disabled = false
				}
			})

			permalinkForm.addEventListener('submit', updateProductPermalink)
			function updateProductPermalink(e) {
				e.preventDefault();

				const previewButton = document.querySelector('.header__nav .btn-preview')
				const permalinkBase = e.target.closest('form').querySelector('.permalink__base')

				$.ajax({
					type: 'POST',
					url: ajax_object.ajaxurl,
					data: {
						'action': 'update_product_permalink',
						'data': jQuery(permalinkForm).serialize(),
					},
					beforeSend: function() {
						permalinkFormSubmit.disabled = true
						permalinkFormSubmit.classList.add('awaiting')
						previewButton.classList.add('disabled')
						permalinkBase.classList.add('disabled')
					},
					success: function (response) {
						if (response.data && response.data.success) {
							previewButton.href = response.data.new_permalink
							permalinkBase.href = response.data.new_permalink
						}

						permalinkFormSubmit.disabled = true
						permalinkFormSubmit.classList.remove('awaiting')
						previewButton.classList.remove('disabled')
						permalinkBase.classList.remove('disabled')
					}
				});
			}
		}

		const addImages = function (data) {
			const template = $('.single-product .image-product.template');

			data.forEach((image) => {
				let item = template.clone();
				item.removeClass('template');
				item.addClass('active');
				item.find('.image-id').val(image['id']);
				item.find('.image-url').val(image['url']);
				item.find('.image-rotate').val(0);
				item.find('img').attr('src', image['url']);
				item.insertBefore($('.single-product .image-product.template'));
			});

			updateImagesContainerStatus();
		}

		let updateImagesContainerStatus = () => {
			if ($('.single-product .image-product.active').length > 0) {
				$('.single-product .media__images').addClass('images-contains');
			} else {
				$('.single-product .media__images').removeClass('images-contains');
			}
		};

		let imagesDataToJson = () => {
			var data = [];
			$('.image-product.active').each((index, item) => {
				data.push({
					'id': $(item).find('.image-id').val(),
					'url': $(item).find('.image-url').val(),
					'rotate': $(item).find('.image-rotate').val(),
				});
			});
			return data;
		};

		/**
		 * Upload product images
		 */
		$('.single-product .load-media').on('click', function() {
			let wpmedia = wp.media({
				multiple: true  // allow multiple files to be selected
			})
			.on('select', function() {
				addImages(wpmedia.state().get('selection').toJSON());
			})
			.open();
		});

		/**
		 * Rotate image
		 */
		$(document).on('click', '.single-product .image__rotate',  function() {
			let imageContainer = $(this).parents('.image-product');
			let inputRotate = imageContainer.find('.image-rotate');
			let image = imageContainer.find('img');

			let rotateAngle = parseInt(inputRotate.val()) + 90;
			rotateAngle = rotateAngle < 360 ? rotateAngle : 0;

			inputRotate.val(rotateAngle);
			image.css('transform', 'rotate(' + rotateAngle + 'deg)');
		});

		/**
		 * Remove image
		 */
		$(document).on('click', '.single-product .image__remove',  function() {
			$(this).parents('.image-product').remove();
			updateImagesContainerStatus();
		});

		/**
		 * Sort image
		 */

		$('.single-product .images__items').sortable({
			items: '.image.image-product.active',
			scroll: false,
			distance: 5,
			placeholder: 'next-position',
			tolerance: 'pointer',
			cursor: "grabbing",
			start: function(event, ui) {
				$(".single-product .images__items").addClass('sorting');
				ui.item.css({
					position: 'relative',
				});
			},
			sort: function(event, ui) {
				ui.item.css({
					left: 'auto',
					top: 'auto',
				})
			},
			stop: function(event, ui) {
				$(".single-product .images__items").removeClass('sorting');
			}
		}).disableSelection();


		const singleProductContainer = document.querySelector('.single-product')
		if (singleProductContainer) {

			const productAdminData = {
				id: null
			}

			const productID = document.querySelector('[name="product_id"]')
			if (productID && productID.value) {
				productAdminData.id = +productID.value
				NorthCommerce.Cart.getVariantOptionsMap(productAdminData.id, true)
			}

			jQuery('.sidebar').theiaStickySidebar({
				additionalMarginTop: 50,
				additionalMarginBottom: 150
			});

			/**
			 * Select publishing type
			 */
			$('input[type="radio"][name="product_status"]').on('change', function() {
				if ($(this).val() === 'schedule') {
					document.querySelector('#publishing_date_picker').classList.add('active')
				} else {
					document.querySelector('#publishing_date_picker').classList.remove('active')
				}
			});

			/**
			 * Publishing functions
			 */
			const singleProductDate = jQuery('.single-product #publishing_date');
			const singleProductTime = jQuery('.single-product #publishing_time');

			const timeZone = singleProductDate.data('time-zone')
			const currentDay = moment().tz(timeZone)

			const dateFormat = 'MMMM DD, Y' // ex: January 01, 2024

			if (singleProductDate.val() === '') {
				singleProductDate.val(currentDay.format(dateFormat));
			}

			if (singleProductTime.val() === '') {
				singleProductTime.prop('value', currentDay.format('hh:mm a'));
			}

			singleProductDate.on('focusout', function() {
				let value = $(this).val();
				let scheduleDay = moment(value, dateFormat);

				if (!scheduleDay.isValid() || scheduleDay < currentDay) {
					$(this).val(currentDay.format(dateFormat));
				}
			});

			$('.publishing-time-select').on('select2:select', function(e) {
				singleProductTime.val($(this).val());
			});

			singleProductTime.on('focusin', function() {
				singleProductTime.addClass('active');
				$('.publishing-time-select').select2('open');
			});

			singleProductTime.on('blur', function() {
				var validTime = $(this).val().match(/^(0?[1-9]|1[012])(:[0-5]\d) [APap][mM]$/);
				if (!validTime) {
					singleProductTime.prop('value', currentDay.format('hh:mm a'));
				} else {
					singleProductTime.attr('value', $(this).val());
				}
			});

			$(document).on('click', function(e) {
				if (!$(e.target).closest('.scheduled__item-time').length) {
					if ($('#publishing_time.active').length) {
						singleProductTime.removeClass('active');
						$('.publishing-time-select').select2('close');
					}
				}
			});

			setMarginAndProfitRecalculations()

            /**
             * @since   0.1.2
             * @version 0.1.24
             */
            function setMarginAndProfitRecalculations() {
                const productPriceInput = '.currency-wrapper input[name="product_price"]'
                const productCostInput = '.currency-wrapper input[name="product-cost"]'
                $(productPriceInput + ', ' + productCostInput).on('blur', handleRecalculation)

                function handleRecalculation() {
                    const pricingTab = document.querySelector('#product-pricing')
                    const priceValue = pricingTab.querySelector(productPriceInput).value
                    const costValue = pricingTab.querySelector(productCostInput).value
                    const marginEl = pricingTab.querySelector('.cost-calculations .margin-value')
                    const profitEl = pricingTab.querySelector('.cost-calculations .profit-value')
                    const { priceDecimals } = northCommerceSettings

                    if (!priceValue || !costValue || priceValue <= 0 || costValue <= 0) {
                        marginEl.textContent = '-'
                        profitEl.textContent = '-'
                        return
                    }

                    const marginRecalculated = (priceValue - costValue) / priceValue * 100
                    marginEl.textContent = marginRecalculated.toFixed(2) + '%'

                    const currencySymbol = pricingTab.querySelector('.currency-wrapper .currency-symbol').textContent
                    profitEl.textContent = currencySymbol + ( priceValue - costValue ).toFixed(priceDecimals)
                }
            }

			/**
			 * Product Variants
			 */

			// Variant Templates
			let template = null

			let optionValueTemplate = $('.option__values .option-value.template').clone().removeClass('template');
			$('.option__values .option-value.template').remove();

			let optionTemplate = $('.optional__body .option.template').clone().removeClass('template');
			$('.optional__body .option.template').remove();

			const updatePromptList = (type, text, parent) => {
				let liked = 0;
				parent.find('.prompt[data-prompt-type="' + type + '"] .prompt__item').each(function() {
					let promptText = $(this).children('.prompt-name').val().toLowerCase();
					let inputText = text.toLowerCase();
					if (promptText.indexOf(inputText) != -1) {
						$(this).css('display','flex');
						liked += 1;
					} else {
						$(this).css('display','none');
					}
				});

				parent.find('.option-prompt').css('visibility', liked <= 0 ? 'hidden' : 'visible' );
			};

			const addVariantOptionValue = (container, value) => {
				value = value.replaceAll('"', "'")

				const existedOptionInput = container.querySelector(`.option-value .value-name[value="${value}"]`)
				if (existedOptionInput) {
					const existedOption = existedOptionInput.parentElement
					if (existedOption.classList.contains('remove')) {
						existedOption.classList.remove('remove')
					}
					return
				}

				const item = optionValueTemplate[0].cloneNode(true)
				item.dataset.id = localIds.newId();
				item.classList.add('editing')
				item.querySelector('.value-name').value = value
				item.querySelector('.option_name').textContent = value
				container.insertBefore(item, container.querySelector('.option-input'))
			}

			// Add new variant option
			jQuery('.single-product .variant__add').on('click', function () {
				let item = optionTemplate.clone()
				item.addClass('active')
				item.find('.option-select-type').select2()
				item.attr('data-id', localIds.newId());
				$('.options__list').append(item);

				makeOptionValuesSortable(item)
			});

			// Update variant option
			$(document).on('click', '.single-product .option__field-save', function (e) {
				const item = $(this).parents('.single-product .option')
				if (!item.find('.option-name').val().length) {
					const optionType = item.find('.option-select-type option:selected').text().trim()
					item.find('.option-name').val(optionType)
				}
				item.find('.option-value.remove').remove()
				item.find('.option-value.active').remove()
				item.find('.option-value.editing').removeClass('editing').addClass('active')
				item.removeClass('active')
                variantManager.refreshVariants()

				makeOptionValuesNonSortable(item)
				makeOptionsListSortable()
			})

			// Cancel editing option
			$(document).on('click', '.single-product .option__field-cancel', function() {
				let item = $(this).parents('.single-product .option');
				if (item.find('.option-name').val().length == 0) {
					item.find('.option-name').val(item.find('.option-select-type').val());
				}
				item.find('.option-value.editing').remove();
				item.removeClass('active');

				makeOptionValuesNonSortable(item)
				makeOptionsListSortable()
			});

			// Edit variant option
			$(document).on('click', '.single-product .option .action-edit', function() {
				let parent = $(this).parents('.single-product .option');
				parent.addClass('active');
				parent.find('.option-value.active').each(function() {
					$(this).clone()
						.insertBefore(parent.find('.option-input'))
						.removeClass('active')
						.addClass('editing');
				});

				makeOptionValuesSortable(parent);
				makeOptionsListNonSortable()
			});

			// Remove variant option
			setupOptionDeleteEvent()
			function setupOptionDeleteEvent() {
				singleProductContainer.addEventListener('click', handleOptiondelete)

				function handleOptiondelete(e) {
					if (
						null === e.target.closest('.option .option__actions')
						|| !( e.target.classList.contains('action-remove') || null !== e.target.closest('.action-remove') )
					) {
						return
					}

					e.target.closest('.single-product .option').remove()
                    variantManager.refreshVariants()
				}
			}

			// Focus option values input
			$(document).on('click', '.single-product .option__values', function() {
				$(this).find('.option-input').focus();
			});

			// INIT
			$('.single-product .option:not(.template) .option-select-type').select2({});

			// Update option type
			$(document).on('select2:select', '.single-product .option-select-type', function() {
				let item = $(this).parents('.option');
				item.attr('data-option-type', $(this).val());
				item.find('.prompt').removeClass('active');
				item.find('.prompt[data-prompt-type="' + $(this).val() + '"]').addClass('active');
			});

			// Update prompt list
			$(document).on('focus keyup', '.single-product .option__values', function() {
				let parent = $(this).parents('.option')
				let text = $(this).find('.option-input').val()
				let type = parent.attr('data-option-type')
				updatePromptList(type, text, parent)
			})

			$(document).on('click', '.prompt__item a:not(.product-option-select-image)', function(e) {
				const name = e.target.closest('.prompt__item').querySelector('.prompt-name').value
				let color = $(this).siblings('.prompt-color').val();
				const valuesContainer = e.target.closest('.option__values')
				let input = valuesContainer.querySelector('.option-input');
				const inputName = valuesContainer.querySelector(`.editing input.value-name[value="${name}"]`)

 				if (!inputName) {
					let item = optionValueTemplate.clone();
					item.addClass('editing')
                    item.attr('data-id', localIds.newId());
					item.find('.value-name').val(name)
					item.find('.value-color').val(color)
					item.find('.value-color + span').css('background', color)
					item.find('.option_name').html(name)
					valuesContainer.insertBefore(item.get(0), valuesContainer.querySelector('.option-input'));
				} else if (inputName.parentElement.classList.contains('remove')) {
					inputName.parentElement.classList.remove('remove')
                    if (inputName.querySelector('.option_name')) {
					    inputName.querySelector('.option_name').textContent = name
                    }
					const colorContainer = inputName.parentElement.querySelector('.color');
                    if (colorContainer) {
					    colorContainer.querySelector('.value-color').value = color;
					    colorContainer.querySelector('span').style.background = color;
                    }
				}

				input.value = ''
				input.blur()
				$('.option-prompt').css('visibility', 'hidden');
			})

			//insert option url from media
			$(document).on('click', '.prompt__item a.product-option-select-image', function(e) {
				e.preventDefault();

				selectImageUrlFromMedia().then(url => {
					const valuesContainer = e.target.closest('.option__values');

					let item = optionValueTemplate.clone();
					item.addClass('editing');
					item.attr('data-id', localIds.newId());
					item.find('.value-name').val(url);
					item.find('.option_name').html(url);
					valuesContainer.insertBefore(item.get(0), valuesContainer.querySelector('.option-input'));
				}).catch();
			});

			//select image from media
			const selectImageUrlFromMedia = function() {
				return new Promise(function(resolve, reject) {
					const media = wp.media({
						multiple: false  // allow multiple files to be selected
					})

					media.on('select', () => {
						resolve(media.state().get('selection').toJSON()[0].url);
					})

					media.on('close', () => {
						if(!media.state().get('selection').toJSON().length) {
							reject();
						}
					})

					media.open();
				});
			}

			// Add new Option Value
			singleProductContainer.addEventListener('keydown', (e) => {
				if (
					!e.target.classList.contains('option-input')
					|| ( e.key !== 'Enter' && e.key !== 'Tab' )
					|| !e.target.value
				) {
					return
				}

				const container = e.target.closest('.option__values')
				addVariantOptionValue(container, e.target.value)
				e.target.value = ''

				setTimeout(() => {e.target.focus()}, 150)
			})

			singleProductContainer.addEventListener('keyup', (e) => {
				if (!e.target.classList.contains('option-input')) {
					return
				}

				let value = e.target.value.slice(-2)
				if (value === ', ' && e.target.value.length > 2) {
					const container = e.target.closest('.option__values')
					value = e.target.value.substring(0, value.length - 2)
					addVariantOptionValue(container, value)
					e.target.value = ''
					e.target.focus()
				}
			});

			$(document).on('click', function (e) {
				if (
					!$(e.target).closest('.option-input').length
					&& !$(e.target).closest('.option__values').length
					&& $('.option-prompt').length > 0
				) {
					jQuery('.option-prompt').css('visibility', 'hidden');
				}
			});

			$(document).on('keydown', '.single-product .option-name', function (e) {
				if (e.key == 'Enter' || e.key == 'Tab') {
					e.preventDefault();
					$(this).parents('.option__data').find('.option-input').focus();
				}
			});

			$(document).on('keydown', '.variant input', function (e) {
				if (e.key == 'Enter' || e.key == 'Tab') {
					e.preventDefault();
					$(this).blur();
				}
			});

			$(document).on('change', '.option-value .value-color', function () {
				let value = $(this).val()
				$(this).next().css('background', value)
			});

			// Remove option value
			singleProductContainer.addEventListener('click', (e) => {
				if (
					!(
						e.target.classList.contains('remove')
						&& e.target.parentElement.classList.contains('option-value')
					)
				) {
					return
				}

				const optionValueContainer = e.target.parentElement
				optionValueContainer.classList.add('remove')
				optionValueContainer.querySelector('.additional-price-type').value = 'flat';
				optionValueContainer.querySelector('.additional-price-value').value = 0;
				optionValueContainer.querySelector('.weight').setAttribute('value', 0)
			})

			// Add image to product variant
			$(document).on('click', '.load-media-variant', function() {
				let parent = $(this).parents('.variant__image');
				let wpmedia = wp.media({
					multiple: false
				})
				.on('select', function() {
					let selection = wpmedia.state().get('selection').first().toJSON();
					if (selection !== undefined) {
						parent.addClass('active');
						parent.find('img').attr('src', selection['url']);
					}
				})
				.open();
			});


			// Remove product img
			$(document).on('click', '.variant-image__remove', function() {
				let imageContainer = $(this).parents('.variant__image');
				let image = imageContainer.find('img');
				image.attr('src', '');
				imageContainer.removeClass('active');
			});

			function makeOptionValuesSortable(option_node) {
				option_node.find('.option__values').sortable({
					items:       '> .editing',
					axis:        'x',
					containment: 'parent',
					distance:    5,
					cursor:      'grabbing'
				})
			}

			function makeOptionValuesNonSortable(option_node) {
				option_node.find('.option__values').sortable('destroy')
			}

			//Reorder product variants
			function makeOptionsListSortable() {
				$('.single-product .options__list').sortable({
					containment: 'parent',
					axis: 'y',
					distance: 5,
					cursor: 'grabbing',
					tolerance: 'pointer',
					stop: function() {
						variantManager.refreshVariants();
					}
				})
			}

			makeOptionsListSortable();

			//Disable Reorder product variants
			function makeOptionsListNonSortable() {
				$('.single-product .options__list').sortable('destroy')
			}


			$('.single-product #publishing_date').dateRangePicker({
				singleDate : true,
				singleMonth : true,
				container: $('.date__wrapper'),
				startOfWeek: 'monday',
				format : dateFormat,
				time: {
					enabled: false
				},
				startDate : currentDay.format(dateFormat),
			});

			// Save product
			jQuery('.single-product #product-form').on('submit', async function (e) {
				e.preventDefault()

				disableFormActions()

				tinyMCE.triggerSave();
				let formData = $(this).serializeArray();

				let getFormDataKeyByValue = (value) => {
					return Object.keys(formData).find((key) => formData[key]['name'] === value);
				}

				formData.splice( getFormDataKeyByValue('variant-price-modifier'), 1);
				formData.splice( getFormDataKeyByValue('variant-addiional-price'), 1);
				formData.splice( getFormDataKeyByValue('variant-weight'), 1);

				formData.push({
					name: 'custom_info',
					value: {
						content_type: formData[ getFormDataKeyByValue('product_custom_type') ].value,
						country_origin: formData[ getFormDataKeyByValue('product_custom_region') ].value,
						hs_code: formData[ getFormDataKeyByValue('product_custom_hs_code') ].value,
					}
				});
				formData.splice( getFormDataKeyByValue('product_custom_type'), 1);
				formData.splice( getFormDataKeyByValue('product_custom_region'), 1);
				formData.splice( getFormDataKeyByValue('product_custom_hs_code'), 1);

				formData.push({
					name: 'product_img',
					value: imagesDataToJson()
				});

				formData.push({
					name: 'options',
					value: optionManager.currentOptions()
				})

				formData.push({
					name: 'variants',
					value: variantManager.currentVariants()
				})

				formData.push({
					name: 'product_categories',
					value: getProductCategories()
				})

				formData.push({
					name: 'product_tags',
					value: getProductTags()
				});

				let action = $(this).find('input[type="submit"]').data('product-form-type');
				const data = {
					'action': action === 'update' ? 'update_product' : 'create_product',
					'data': formData.reduce(function (m,o) { m[o.name] = o.value; return m;}, {}),
				}

				$.ajax({
					type: 'POST',
					url: ajax_object.ajaxurl,
					data: data,
					beforeSend: () => {
						$('.form__product-errors').css('display', 'none');
					},
					success: (data) => {
						const response = JSON.parse(data)

						if (false === response.status) {
							if (response.errors) {
								let errorText = ''
								response.errors.forEach((error) => {
									errorText += '<div class="north-error">' + error + '</div>'
								})
								showError(errorText)
							}
							return
						}

						if (response.redirect) {
							window.location = response.redirect
						}
					},
					error: (data) => {
						if (data.responseText) {
							showError(data.responseText)
						}
					},
					complete: () => {
						enableFormActions()
					}
				})

				function disableFormActions () {
					getActionButtons().forEach((btn) => {
						btn.disabled = true
						btn.classList.add('disabled')
					})

					document.querySelectorAll('.single-product .product-wait')
						.forEach((waitEl) => waitEl.style.display = 'block')
				}

				function enableFormActions () {
					getActionButtons().forEach((btn) => {
						btn.disabled = false
						btn.classList.remove('disabled')
					})

					document.querySelectorAll('.single-product .product-wait')
						.forEach((waitEl) => waitEl.style.display = 'none')
				}

				function getActionButtons() {
					return document.querySelectorAll('#product-form .product__action .btn.action')
				}

				function showError(errorText) {
					$('.form__product-errors').html(errorText)
					$('.form__product-errors').css('display', 'block')
					$('.north-error').css('display', 'block')
				}
			})

			/**
			 * Change product option
			 */
			document.querySelectorAll('.single-product input[type=checkbox]').forEach((checkbox) => {
				checkbox.addEventListener('change', (e) => {
					const optionalHeader = e.target.closest('.optional__header')
					if (optionalHeader) {
						e.target.checked
							? optionalHeader.classList.add('active')
							: optionalHeader.classList.remove('active')
					}

					if ('is_physical' === e.target.name) {
						const productCustomInfo = document.querySelector('#product-custom-info')

						if (e.target.checked) {
							productCustomInfo.classList.add('product-is-physical')
						} else {
							productCustomInfo.classList.remove('product-is-physical')
							const hasCustomInfo = productCustomInfo.querySelector('[name="has_custom_info"]')
							hasCustomInfo.checked = false
							hasCustomInfo.dispatchEvent( new Event('change') )
						}
					}
				})
			})

			/**
			 * Settings for variant option
			 */
			const variantSettings = document.querySelector('#product-variants .variant__settings')
			const $variantSettings = jQuery(variantSettings)

			function closeSettingsOfVariant() {
				jQuery('#product-variants .option-value.settings').removeClass('settings')
				variantSettings.classList.remove('opened')
			}

			$variantSettings.find('.close-icon').on('click', closeSettingsOfVariant);
			$(document).keyup(function(e) {
				if (!variantSettings.classList.contains('opened') || 27 !== e.keyCode || 'Escape' !== e.key) {
					return
				}

				closeSettingsOfVariant()
			})
			jQuery(document).on('mousedown', function(e) {
				if (!variantSettings.classList.contains('opened')) {
					return
				}

				const optionInEdit = jQuery('#product-variants .option-value.settings')
				if (
					!$variantSettings.is(e.target) && $variantSettings.has(e.target).length === 0
					&& !optionInEdit.is(e.target) && optionInEdit.has(e.target).length === 0
				) {
					closeSettingsOfVariant()
				}
			})

			// Show settings modal window
			jQuery(document).on('click', '.option-value.editing', function(e) {
				const target = jQuery(e.currentTarget);

				if (target.hasClass('settings')) {
					closeSettingsOfVariant()
					return
				}

				jQuery('#product-variants .option-value').not(e.currentTarget).removeClass('settings');
				target.addClass('settings');

				const option = {
					offset: target.offset(),
					height: target.outerHeight(),
					width: target.outerWidth(),
				}

				const wrapper = {
					offset: target.closest('#product-variants').offset(),
				}

				variantSettings.style.top = option.offset.top - wrapper.offset.top + option.height + 'px';
				variantSettings.style.left = option.offset.left - wrapper.offset.left + option.width / 2 + 'px';

				const savedSettings = {
					type: e.currentTarget.querySelector('.settings.additional-price-type').value,
					price: e.currentTarget.querySelector('.settings.additional-price-value').value,
					weight: e.currentTarget.querySelector('.settings.weight').value,
				}

				variantSettings.dataset.type = savedSettings.type
				variantSettings.querySelector('input[name="variant-price-modifier"][value="' + savedSettings.type + '"]').checked = true
				variantSettings.querySelector('#variant-addiional-price').value = savedSettings.price
				variantSettings.querySelector('#variant-weight').value = savedSettings.weight
				variantSettings.classList.add('opened')
			})

			variantSettings.addEventListener('change', function(e) {
				if ('variant-price-modifier' !== e.target.name) {
					return
				}

				const optionEditing = document.querySelector('#product-variants .option-value.settings')
				optionEditing.querySelector('.settings.additional-price-type').value = e.target.value
				variantSettings.dataset.type = e.target.value
			})

			function saveVariantSettings() {
				const optionInEdit = document.querySelector('#product-variants .option-value.settings')

				if (!optionInEdit) {
					return
				}

				const savedSettings = {
					type: optionInEdit.querySelector('.settings.additional-price-type'),
					price: optionInEdit.querySelector('.settings.additional-price-value'),
					weight: optionInEdit.querySelector('.settings.weight'),
				}

				const editedSettings = {
					type: variantSettings.querySelector('input[name="variant-price-modifier"]:checked'),
					price: variantSettings.querySelector('#variant-addiional-price'),
					weight: variantSettings.querySelector('#variant-weight'),
				}

				savedSettings.type.value = editedSettings.type.value
				savedSettings.price.value = editedSettings.price.value
				savedSettings.weight.value = editedSettings.weight.value
			}

			variantSettings.querySelector('.admin-popup__actions .save').addEventListener('click', (e) => {
				e.stopPropagation()
				e.preventDefault()

				saveVariantSettings()
				closeSettingsOfVariant()
			})
			// ↑ settings for variant option

			/**
			 * Product categories
			 */
			const sidebarCategories = document.querySelector('#sidebar .settings-card.categories');
			const productCategoriesPromt = sidebarCategories.querySelector('.promt-categories');
			const savedCategoriesList = productCategoriesPromt.querySelectorAll('.promt__item.category')
			const productCategoriesList = sidebarCategories.querySelector('.categories.active');
			const productCategoryTemplate = sidebarCategories.querySelector('.category_token.template');
			const btnAddNewCat = sidebarCategories.querySelector('.button.add-new');

			let showProductCategoriesPromt = () => {
				if (savedCategoriesList.length) {
					productCategoriesPromt.classList.add('opened')
				}
			}

			let hideProductCategoriesPromt = () => {
				productCategoriesPromt.querySelectorAll('.category.suggestion').forEach((cat) => {
					cat.classList.remove('suggestion')
				})
				productCategoriesPromt.classList.remove('opened')
			}

			let hideAddNewCategoryBtn = () => btnAddNewCat.classList.remove('opened')
			let showAddNewCategoryBtn = () => btnAddNewCat.classList.add('opened')

			document.addEventListener('mousedown', (e) => {
				if (!productCategoriesPromt.classList.contains('opened')) {
					return
				}

				if (!e.target.closest('.categories__input-wrapper')) {
					hideProductCategoriesPromt()
				}
			})

			sidebarCategories.addEventListener('click', (e) => {
				if (e.target.classList.contains('btn-close')) {
					e.target.closest('.category_token').remove()
				}

				if (e.target.matches('.button.add-new.opened')) {
					saveProductCategoryToken({
						dataset: {
							category: sidebarCategories.querySelector('#product_category').value
						}
					})

					hideAddNewCategoryBtn()
				}
			})

			sidebarCategories.addEventListener('input', (e) => {
				const inputLength = e.target.value.length
				let promtVisible = false

				if (inputLength < 2) {
					hideProductCategoriesPromt()
					hideAddNewCategoryBtn()
					return
				}

				savedCategoriesList.forEach((cat) => {
					let keepCatHidden = true
					if (e.target.value.toLowerCase() === cat.dataset.category.slice(0, inputLength)) {
						let newCategory = true
						productCategoriesList.querySelectorAll('.category_token').forEach((activeCat) => {
							if (activeCat.dataset.category === cat.dataset.category) {
								newCategory = false
								return
							}
						})
						if (newCategory) {
							cat.classList.add('suggestion')
							keepCatHidden = false
							promtVisible = true
						}
					}

					if (keepCatHidden) {
						cat.classList.remove('suggestion')
					}
				})

				if (promtVisible) {
					showProductCategoriesPromt()
					hideAddNewCategoryBtn()
				} else {
					hideProductCategoriesPromt()
					showAddNewCategoryBtn()
				}
			})

			productCategoriesPromt.addEventListener('click', (e) => {
				if (!e.target.dataset.category) {
					return
				}

				saveProductCategoryToken(e.target)
			})

			productCategoriesPromt.addEventListener('mouseover', (e) => {
				const hoveredCat = e.currentTarget.querySelector('.promt__item.hover')
				if (!hoveredCat) { return }
				hoveredCat.classList.remove('hover')
			})

			sidebarCategories.addEventListener('keydown', (e) => {
				if (
					(40 === e.keyCode || 'ArrowDown' === e.key)
					|| (38 === e.keyCode || 'ArrowUp' === e.key)
				) {
					return switchingBetweenPromtCategories(e)
				}

				if (
					(13 === e.keyCode || 'Enter' === e.key)
					|| (9 === e.keyCode || 'Tab' === e.key)
				) {
					e.preventDefault()
					const hoveredCat = e.currentTarget.querySelector('.promt__item.hover')
					if (hoveredCat) {
						return saveProductCategoryToken(hoveredCat)
					}

					saveProductCategoryToken({
						dataset: {
							category: e.target.value
						}
					})

					hideAddNewCategoryBtn()
					return
				}
			})

			function switchingBetweenPromtCategories(e) {
				let arrowUp, arrowDown
				if (
					'product_category' !== e.target.id
					|| !productCategoriesPromt.classList.contains('opened')
					|| !( (arrowDown = (40 === e.keyCode || 'ArrowDown' === e.key)) || (arrowUp = (38 === e.keyCode || 'ArrowUp' === e.key)) )
				) {
					// Bailout
					return
				}

				e.preventDefault()

				const hoveredCat = productCategoriesPromt.querySelector('.promt__item.hover')
				if (!hoveredCat) {
					const cat = arrowDown ? getFirstPromtCategory() : getLastPromtCategory();
					return cat.classList.add('hover')
				}

				hoveredCat.classList.remove('hover')

				const siblingCat = arrowDown
					? getNextPromtCategory(hoveredCat)
					: getPrevPromtCategory(hoveredCat)

				siblingCat.classList.add('hover')
			}

			function getFirstPromtCategory() {
				return productCategoriesPromt.querySelector('.promt__item.suggestion')
			}
			function getLastPromtCategory() {
				const suggestionCats = productCategoriesPromt.querySelectorAll('.promt__item.suggestion')
				return suggestionCats[suggestionCats.length - 1]
			}

			function getNextPromtCategory(el) {
				let nextSuggestedCat = el.nextElementSibling;

				if (!nextSuggestedCat) {
					nextSuggestedCat = getFirstPromtCategory()
				}

				while (nextSuggestedCat) {
					if (nextSuggestedCat.classList.contains('suggestion')) {
						return nextSuggestedCat;
					}
					nextSuggestedCat = nextSuggestedCat.nextElementSibling
				}

				return getFirstPromtCategory()
			}
			function getPrevPromtCategory(el) {
				let prevSuggestedCat = el.previousElementSibling;

				if (!prevSuggestedCat) {
					prevSuggestedCat = getLastPromtCategory()
				}

				while (prevSuggestedCat) {
					if (prevSuggestedCat.classList.contains('suggestion')) {
						return prevSuggestedCat;
					}
					prevSuggestedCat = prevSuggestedCat.previousElementSibling
				}

				return getLastPromtCategory()
			}

			function saveProductCategoryToken(el) {
				if (!el.dataset.category || el.dataset.category.length < 2) {
					return
				}

				const elCategory = el.dataset.category.trim().replaceAll('&', '&amp;')
					.replaceAll('<', '&lt;').replaceAll('>', '&gt;')
					.replaceAll('"', '&quot;').replaceAll("'", '&#039;');
				const catAlreadySaved = productCategoriesList.querySelector(`.category_token[data-category="${elCategory}"]`);
				if (catAlreadySaved) { return }

				const newToken = productCategoryTemplate.cloneNode(true);
				newToken.classList.remove('template')
				newToken.dataset.category = elCategory
				newToken.querySelector('.category_name').innerHTML = el.textContent ? el.textContent : elCategory
				productCategoriesList.appendChild(newToken)
				hideProductCategoriesPromt()
				sidebarCategories.querySelector('#product_category').value = ''
			}

			function getProductCategories() {
				const catTokens = []
				sidebarCategories
					.querySelectorAll('.category_token:not(.template)')
					.forEach((catToken) => catTokens.push(catToken.dataset.category))

				return catTokens.length ? catTokens : ''
			}
			// ↑ product categories

			/**
			 * Product tags
			 */
			const sidebarTags = document.querySelector('#sidebar .settings-card.tags');
			const productTagsPromt = sidebarTags.querySelector('.promt-tags');
			const savedTagsList = productTagsPromt.querySelectorAll('.promt__item.tag')
			const productTagsList = sidebarTags.querySelector('.tags.active');
			const productTagTemplate = sidebarTags.querySelector('.tag_token.template');
			const btnAddNewTag = sidebarTags.querySelector('.button.add-new');

			let showProductTagsPromt = () => {
				if (savedTagsList.length) {
					productTagsPromt.classList.add('opened')
				}
			}

			let hideProductTagsPromt = () => {
				productTagsPromt.querySelectorAll('.tag.suggestion').forEach((tag) => {
					tag.classList.remove('suggestion')
				})
				productTagsPromt.classList.remove('opened')
			}

			let hideAddNewTagBtn = () => btnAddNewTag.classList.remove('opened')
			let showAddNewTagBtn = () => btnAddNewTag.classList.add('opened')

			document.addEventListener('mousedown', (e) => {
				if (!productTagsPromt.classList.contains('opened')) {
					return
				}

				if (!e.target.closest('.tags__input-wrapper')) {
					hideProductTagsPromt()
				}
			})

			sidebarTags.addEventListener('click', (e) => {
				if (e.target.classList.contains('btn-close')) {
					e.target.closest('.tag_token').remove()
				}

				if (e.target.matches('.button.add-new.opened')) {
					saveProductTagToken({
						dataset: {
							tag: sidebarTags.querySelector('#product_tag').value
						}
					})

					hideAddNewTagBtn()
				}
			})

			sidebarTags.addEventListener('input', (e) => {
				const inputLength = e.target.value.length
				let promtVisible = false

				if (inputLength < 2) {
					hideProductTagsPromt()
					hideAddNewTagBtn()
					return
				}

				savedTagsList.forEach((tag) => {
					let keepTagHidden = true
					if (e.target.value.toLowerCase() === tag.dataset.tag.slice(0, inputLength)) {
						let newTag = true
						productTagsList.querySelectorAll('.tag_token').forEach((activeTag) => {
							if (activeTag.dataset.tag === tag.dataset.tag) {
								newTag = false
								return
							}
						})
						if (newTag) {
							tag.classList.add('suggestion')
							keepTagHidden = false
							promtVisible = true
						}
					}

					if (keepTagHidden) {
						tag.classList.remove('suggestion')
					}
				})

				if (promtVisible) {
					showProductTagsPromt()
					hideAddNewTagBtn()
				} else {
					hideProductTagsPromt()
					showAddNewTagBtn()
				}
			})

			productTagsPromt.addEventListener('click', (e) => {
				if (!e.target.dataset.tag) {
					return
				}

				saveProductTagToken(e.target)
			})

			productTagsPromt.addEventListener('mouseover', (e) => {
				const hoveredTag = e.currentTarget.querySelector('.promt__item.hover')
				if (!hoveredTag) { return }
				hoveredTag.classList.remove('hover')
			})

			sidebarTags.addEventListener('keydown', (e) => {
				if (
					(40 === e.keyCode || 'ArrowDown' === e.key)
					|| (38 === e.keyCode || 'ArrowUp' === e.key)
				) {
					return switchingBetweenPromtTags(e)
				}

				if (
					(13 === e.keyCode || 'Enter' === e.key)
					|| (9 === e.keyCode || 'Tab' === e.key)
				) {
					e.preventDefault()
					const hoveredTag = e.currentTarget.querySelector('.promt__item.hover')
					if (hoveredTag) {
						return saveProductTagToken(hoveredTag)
					}

					saveProductTagToken({
						dataset: {
							tag: e.target.value
						}
					})

					hideAddNewTagBtn()

					return
				}
			})

			function switchingBetweenPromtTags(e) {
				let arrowUp, arrowDown
				if (
					'product_tag' !== e.target.id
					|| !productTagsPromt.classList.contains('opened')
					|| !( (arrowDown = (40 === e.keyCode || 'ArrowDown' === e.key)) || (arrowUp = (38 === e.keyCode || 'ArrowUp' === e.key)) )
				) {
					// Bailout
					return
				}

				e.preventDefault()

				const hoveredTag = productTagsPromt.querySelector('.promt__item.hover')
				if (!hoveredTag) {
					const tag = arrowDown ? getFirstPromtTag() : getLastPromtTag();
					return tag.classList.add('hover')
				}

				hoveredTag.classList.remove('hover')
				const siblingTag = arrowDown ? getNextPromtTag(hoveredTag) : getPrevPromtTag(hoveredTag);
				siblingTag.classList.add('hover')
			}

			function getFirstPromtTag() {
				return productTagsPromt.querySelector('.promt__item.suggestion')
			}
			function getLastPromtTag() {
				const suggestionTags = productTagsPromt.querySelectorAll('.promt__item.suggestion')
				return suggestionTags[suggestionTags.length - 1]
			}

			function getNextPromtTag(el) {
				let nextSuggestedTag = el.nextElementSibling;

				if (!nextSuggestedTag) {
					nextSuggestedTag = getFirstPromtTag()
				}

				while (nextSuggestedTag) {
					if (nextSuggestedTag.classList.contains('suggestion')) {
						return nextSuggestedTag;
					}
					nextSuggestedTag = nextSuggestedTag.nextElementSibling
				}

				return getFirstPromtTag()
			}

			function getPrevPromtTag(el) {
				let prevSuggestedTag = el.previousElementSibling;

				if (!prevSuggestedTag) {
					prevSuggestedTag = getLastPromtTag()
				}

				while (prevSuggestedTag) {
					if (prevSuggestedTag.classList.contains('suggestion')) {
						return prevSuggestedTag;
					}
					prevSuggestedTag = prevSuggestedTag.previousElementSibling
				}

				return getLastPromtTag()
			}

			function saveProductTagToken(el) {
				if (!el.dataset.tag || el.dataset.tag.length < 2) {
					return
				}

				const elTag = el.dataset.tag.trim().replaceAll('&', '&amp;')
					.replaceAll('<', '&lt;').replaceAll('>', '&gt;')
					.replaceAll('"', '&quot;').replaceAll("'", '&#039;');
				const tagAlreadySaved = productTagsList.querySelector(`.tag_token[data-tag="${elTag}"]`);
				if (tagAlreadySaved) { return }

				const newToken = productTagTemplate.cloneNode(true);
				newToken.classList.remove('template')
				newToken.dataset.tag = elTag
				newToken.querySelector('.tag_name').innerHTML = el.textContent ? el.textContent : elTag
				productTagsList.appendChild(newToken)
				hideProductTagsPromt()
				sidebarTags.querySelector('#product_tag').value = ''
			}

			function getProductTags() {
				const tagTokens = []
				sidebarTags
					.querySelectorAll('.tag_token:not(.template)')
					.forEach((tagToken) => tagTokens.push(tagToken.dataset.tag))

				return tagTokens.length ? tagTokens : ''
			}
			// ↑ product tags
		}

		/**
		 * Select all products
		 */
		$('.products__board #all').on('change', function(e) {
			e.preventDefault();
			let checked = $(this).is(':checked');
			$('.product .product__select input[type=checkbox]').prop('checked', checked);
		});

		/**
		 * Filter products by status
		 */
		$('.status__filter-product').on('click', function(e) {
			e.preventDefault();
			if ($(this).hasClass('active')) {
				return
			}

			$('.status__filter-product').removeClass('active');
			$(this).addClass('active');

			let status = $(this).attr('data-status-filter');
			let paged = 1;
			let filter = $('.board__form-products').serialize();

			updateProductBoard(filter, status, paged);
		});

		function updateProductBoard(filter, status = 'any', page = 1) {
			$.ajax({
				type: 'POST',
				url: ajax_object.ajaxurl,
				data: {
					'action': 'get_products',
					'paged': page,
					'posts_per_page': 10,
					'status': status,
					'filter': filter,
				},
				beforeSend: function() {
					$('.board__overlay').css('display', 'block');
				},
				success: function (data) {
					if (data !== 'error') {
						let response = JSON.parse(data);
						let ordersBoard = $('.result__products');

						$('.action__result > span').html(response['pagination']);
						$('.status__filter-product[data-status-filter=""] > span').html('(' + response['counters']['total'] + ')');
						$('.status__filter-product[data-status-filter="draft"] > span').html('(' + response['counters']['draft'] + ')');
						$('.status__filter-product[data-status-filter="published"] > span').html('(' + response['counters']['published'] + ')');
						$('.status__filter-product[data-status-filter="scheduled"] > span').html('(' + response['counters']['scheduled'] + ')');
						$('.status__filter-product[data-status-filter="archived"] > span').html('(' + response['counters']['archived'] + ')');
						$('.status__filter-product[data-status-filter="trashed"] > span').html('(' + response['counters']['trashed'] + ')');

						ordersBoard.attr('data-current-page', response['current_page']);
						ordersBoard.attr('data-max-page', response['max_page']);
						ordersBoard.html(response['products']);
						updateProductSelect();
					}

					$('.board__overlay').css('display', 'none');
				}
			});
		}

		$('.radio-container').click(function() {
			let tab = $(this).find('input').attr("id");
			$('.tab').hide();
			$('.tab.' + tab).show();

			if (tab !== 'onetime_plan') {
				$('#has_product_variants').removeAttr("checked");
				$('#variation_repeater').hide();
			}
		});

		$('#product_frequency').change(function() {
			$('.change-word-product').text($(this).val());
		});

		$('#bump_frequency').change(function() {
			$('.change-word-bump').text($(this).val());
		});

		$('.submit-btn').click(function (e) {
			$(this).parent().find('.loader').show();
		});

		$('body').on('click', '.product__delete-button', function() {
			let product_id = $(this).data('product-id');

			$('.modal-delete a.delete').data('id', product_id);
			$('.modal-delete a.delete').data('type', 'product');
			$('.modal-delete').fadeIn('fast');
		});

		$('body').on('click', '.order__delete button', function(e) {
			e.preventDefault()
			let order_id = $(this).data('order-id')

			$('.modal-delete a.delete').data('id', order_id)
			$('.modal-delete a.delete').data('type', 'order')
			$('.modal-delete').fadeIn('fast')
		});

		$('.modal-delete a.delete').on('click', function() {
			let that = $(this)
			let action = 'delete_' + that.data('type')
			let id = that.data('id')

			$.ajax({
				type: 'POST',
				url: ajax_object.ajaxurl,
				data: {
					'action': action,
					'delete_id': id
				},
				beforeSend() {
					$('.modal-delete .loader').show();
				},
				success: function (data) {
					$('.modal-delete .loader').hide();
					$('.modal').hide();
					location.reload();
				}
			})
		})

		$('.modal-delete a.cancel').click(function() {
			$('.modal-delete').hide();
		});


		$('.sync-product').click(function(e) {
			e.preventDefault();
			let loader = $(this).parent().find('.loader');
			let loader_message = $(this).parent().parent().find('.loader-message');

			$.ajax({
				type: 'POST',
				url: ajax_object.ajaxurl,
				data: {
					'action': 'synchronize_payments_plans',
					'ajax_response': 'true'
				},
				beforeSend() {
					loader.show();
				},
				success: function (data) {
					loader.hide();
					loader_message.text("Synchronization completed successfully").show();
				}
			});
		});


		// general settings select
		$('.north-single-select').select2();

		$('.select__all').on('click', function(e) {
			e.preventDefault();
			const id = $(this).data('select-id');
			$('#'+ id + ' > option').prop('selected', true);
			$('#'+ id).trigger('change');
		});

		$('.select__none').on('click', function(e) {
			e.preventDefault();
			const id = $(this).data('select-id');
			$('#'+ id + ' > option').prop('selected', false);
			$('#'+ id).trigger('change');
		});

		$('#sale_restriction').on('change', function() {
			const val = $(this).val()
			if (val == 'except') {
				$('.selling__except-wrapper').show()
				$('.selling__specifig-wrapper').hide()
			} else if (val == 'specific') {
				$('.selling__except-wrapper').hide()
				$('.selling__specifig-wrapper').show()
			} else {
				$('.selling__except-wrapper').hide()
				$('.selling__specifig-wrapper').hide()
			}
		});

		$('#shipping_restriction').on('change', function() {
			const val = $(this).val();
			if (val == 'specific') {
				$('.shipping__specific-wrapper').show()
			} else {
				$('.shipping__specific-wrapper').hide()
			}
		})

		$('.btn.cancel').on('click', function(e) {
			e.preventDefault();
			location.reload();
		});

	});

})(jQuery)
