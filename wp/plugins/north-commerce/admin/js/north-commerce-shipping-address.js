(function ($) {
    'use strict';

    let isAddShipmentAddressPopupOpened = false
    let isEditShipmentAddressPopupOpened = false
    let isDeleteShipmentAddressPopupOpened = false

    $(document).ready(function () {

        const {
            addressDropdownItemTemplate,
            addressDropdownShippingAddressItemTemplate
        } = getAddressDropdownTemplates()

        setupShipmentAddressActions()
        setupShipmentAddressFormSubmitEvents()
        setupPopupsCloseEvent()


        function getAddressDropdownTemplates() {
            if (
                NorthCommerce
                && NorthCommerce.templates
                && NorthCommerce.templates.shippingAddresses
            ) {
                return NorthCommerce.templates.shippingAddresses
            }

            const parentTemplate = document.querySelector('.store-address-section .address-dropdown.template')

            if (!parentTemplate) {
                return {
                    addressDropdownItemTemplate: null,
                    addressDropdownShippingAddressItemTemplate: null
                }
            }

            const childTemplate = parentTemplate.querySelector('.shipping-address.template')
            const addressDropdownShippingAddressItemTemplate = childTemplate.cloneNode(true)
            addressDropdownShippingAddressItemTemplate.classList.remove('template')
            childTemplate.remove()

            const addressDropdownItemTemplate = parentTemplate.cloneNode(true)
            addressDropdownItemTemplate.classList.remove('template')
            parentTemplate.remove()

            if (!window.NorthCommerce) {
                window.NorthCommerce = {}
            }
            if (!window.NorthCommerce.templates) {
                window.NorthCommerce.templates = {}
            }

            return NorthCommerce.templates.shippingAddresses = {
                addressDropdownItemTemplate,
                addressDropdownShippingAddressItemTemplate
            }
        }

        function setupShipmentAddressActions() {
            const settingsContent = jQuery('.north-commerce_page_north-commerce-settings .shipment')

            settingsContent.on('click', '.north-dropdown__header__toggle', handleAddressesDropdownToggle)
            settingsContent.on('click', '.add-new-address-button', handleShowAddShipmentAddressPopup)
            settingsContent.on('click', '.address__actions__edit', handleShipmentAddressEditEvent)
            settingsContent.on('click', '.address__actions__remove', handleShipmentAddressDeleteEvent)
        }

        function setupShipmentAddressFormSubmitEvents() {
            jQuery('.popup-create-shipment-address').on('submit', handleSubmitingShipmentAddressCreating)
            jQuery('.popup-edit-shipment-address').on('submit', handleSubmitingShipmentAddressEditing)
            jQuery('.shipping-address-delete-popup').on('submit', handleSubmittingShipmentAddressDeleting)
        }

        function setupPopupsCloseEvent() {
            jQuery('.popup-create-shipment-address .admin-popup__close, .popup-create-shipment-address .admin-popup-cancel').on('click', function () {
                isAddShipmentAddressPopupOpened = false
                jQuery.fancybox.close()
            })

            jQuery('.popup-edit-shipment-address .admin-popup__close, .popup-edit-shipment-address .admin-popup-cancel').on('click', function () {
                isEditShipmentAddressPopupOpened = false
                jQuery.fancybox.close()
            })

            jQuery('.shipping-address-delete-popup .admin-popup__close, .shipping-address-delete-popup .admin-popup-cancel').on('click', function () {
                isDeleteShipmentAddressPopupOpened = false
                jQuery.fancybox.close()
            })
        }

        function handleSubmitingShipmentAddressCreating(e) {
            e.preventDefault();

            const loader = document.querySelector('.popup-create-shipment-address .loader')

            $.ajax({
                type: 'POST',
                url: `${ajax_object.rest_url}/address`,
                data: {
                    address: this.querySelector('[name="shipping_address"]').value,
                    country: this.querySelector('[name="address_country"]').value,
                    city: this.querySelector('[name="address_city"]').value,
                    zipcode: this.querySelector('[name="address_zipcode"]').value,
                    state: this.querySelector('[name="address_state"]').value,
                },
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('X-WP-Nonce', ajax_object.rest_nonce)
                    loader.style.display = 'block'
                },
                success: function (response) {
                    loader.style.display = 'none'

                    if (!response.success) {
                        document
                            .querySelector('.popup-create-shipment-address .admin-popup__notice')
                            .innerHTML = `<div class="north-error">${response.message}</div>`

                        window.scrollTo({
                            top: 0,
                            left: 0,
                            behavior: 'smooth'
                        })
                        return
                    }

                    const addressLists = document.querySelectorAll('.store-address-section .address-dropdown .address-list')
                    if (addressLists.length) {

                        addressLists.forEach((list) => {
                            const addressTemplate = addressDropdownShippingAddressItemTemplate.cloneNode(true)
                            addressTemplate.dataset.id = response.data.id
                            addressTemplate.dataset.options = JSON.stringify( response.data )
                            addressTemplate.querySelector('[name="shipping_address_id"]').checked = false
                            addressTemplate.querySelector('[name="shipping_address_id"]').value = response.data.id
                            addressTemplate.querySelector('.address__title').textContent = response.data.preformatted_line
                            addressTemplate.querySelector('.address__country').textContent = response.data.country.name
                            list.insertAdjacentElement('beforeend', addressTemplate)
                        })

                    } else {

                        document.querySelectorAll('.store-address-section').forEach((section) => {
                            document.querySelector('.shipping-form [name="address_id"]').value = response.data.id

                            const dropdownTemplate = addressDropdownItemTemplate.cloneNode(true)
                            dropdownTemplate.querySelector('.north-dropdown__header .address__title').textContent = response.data.label
                            dropdownTemplate.querySelector('.north-dropdown__header .address__country').textContent = response.data.country_label

                            const addressTemplate = addressDropdownShippingAddressItemTemplate.cloneNode(true)
                            addressTemplate.dataset.id = response.data.id
                            addressTemplate.dataset.options = JSON.stringify( response.data )
                            addressTemplate.querySelector('[name="shipping_address_id"]').checked = true
                            template.querySelector('[name="shipping_address_id"]').value = response.data.id
                            addressTemplate.querySelector('.address__title').textContent = response.data.preformatted_line
                            addressTemplate.querySelector('.address__country').textContent = response.data.country.name

                            section.querySelector('.add-new-address-button').remove()
                            section.insertAdjacentElement('beforeend', dropdownTemplate)
                            section.querySelector('.address-dropdown .address-list').insertAdjacentElement('beforeend', addressTemplate)
                        })

                    }

                    document.querySelectorAll('.store-address-section .address-dropdown:not(.template) .address-list').forEach((list) => {
                        if (
                            list.querySelector('[name="shipping_address_id"]:checked')
                            || list.querySelector('[name="shipping_address_id"][checked]')
                        ) {
                            return
                        }

                        const dropdown = list.closest('.address-dropdown')
                        const hiddenDropdownHeader = dropdown.querySelector('.north-dropdown__header.hide')
                        if (hiddenDropdownHeader) {
                            hiddenDropdownHeader.classList.remove('hide')
                            const extraButton = hiddenDropdownHeader.closest('.store-address-section').querySelector('.address-dropdown > .add-new-address-button')
                            if (extraButton) {
                                extraButton.remove()
                            }
                        }

                        const insertedCheckbox = list.querySelector(`[name="shipping_address_id"][value="${response.data.id}"]`)
                        insertedCheckbox.checked = true
                        insertedCheckbox.dispatchEvent( new Event('change', { 'bubbles': true }) )

                        dropdown.classList.remove('active')
                    })

                    $.fancybox.close()
                    isAddShipmentAddressPopupOpened = false
                }
            })
        }

        function handleSubmitingShipmentAddressEditing(e) {
            e.preventDefault()

            const addressId = this.querySelector('[name="shipment_address_id"]').value
            const loader = document.querySelector('.popup-edit-shipment-address .loader')

            $.ajax({
                type: 'PUT',
                url: `${ajax_object.rest_url}/address/${addressId}`,
                data: {
                    id: addressId,
                    address: this.querySelector('[name="shipping_address"]').value,
                    country: this.querySelector('[name="address_country"]').value,
                    city: this.querySelector('[name="address_city"]').value,
                    state: this.querySelector('[name="address_state"]').value,
                    zipcode: this.querySelector('[name="address_zipcode"]').value,
                },
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('X-WP-Nonce', ajax_object.rest_nonce)
                    loader.style.display = 'block'
                },
                success: function (response) {
                    loader.style.display = 'none'

                    if (!response.success) {
                        $('.popup-edit-shipment-address .admin-popup__notice').append(`<div class="north-error">${response.message}</div>`)

                        window.scrollTo({
                            top: 0,
                            left: 0,
                            behavior: 'smooth'
                        })
                        return
                    }

                    const shippingProfileDataElement = document.querySelector('#shipping_profile_data')
                    let profileData = {}
                    try {
                        profileData = JSON.parse( shippingProfileDataElement.value )
                    } catch(e) {
                        console.log(e);
                    }
                    profileData.shipping_address_id = response.data.id
                    shippingProfileDataElement.value = JSON.stringify(profileData)

                    document
                        .querySelectorAll(`.address-dropdown:not(.template) .address-list .shipping-address[data-id="${response.data.id}"]`)
                        .forEach((address) => {
                            address.querySelector('.address__title').textContent = response.data.preformatted_line
                            address.querySelector('.address__country').textContent = response.data.country.name
                            address.dataset.options = JSON.stringify(response.data)

                            const addressCheckbox = address.querySelector('.address-checkbox-handler')
                            if (addressCheckbox.checked) {
                                const dropdownElement = address.closest('.north-dropdown')
                                dropdownElement.querySelector('.address__title').textContent = response.data.preformatted_line
                                dropdownElement.querySelector('.address__country').textContent = response.data.country.name
                            }
                        })

                    $.fancybox.close()
                    isEditShipmentAddressPopupOpened = false
                }
            })
        }

        function handleAddressesDropdownToggle() {
            this.closest('.north-dropdown').classList.toggle('active')
        }

        function validateShippingAddressForm(form) {
            const address = form.find('[name="shipping_address"]').val()
            const country = form.find('[name="address_country"]').val()
            const city = form.find('[name="address_city"]').val()
            const state = form.find('[name="address_state"]').val()
            const zipcode = form.find('[name="address_zipcode"]').val()
            const isValid = address && country && city;
            form.find('input[type="submit"]').prop('disabled', !isValid)
        }

        function handleShowAddShipmentAddressPopup() {
            if (isAddShipmentAddressPopupOpened) {
                return
            }

            isAddShipmentAddressPopupOpened = true

            const form = $('.popup-create-shipment-address')
            form.trigger('reset')

            $.fancybox.open({
                src: form,
                type: 'inline',
                opts: {
                    scrolling: 'auto',
                    modal: true,
                    infobar: false,
                    toolbar: false,
                    arrows: false,
                },
            })

            function validateAddAddressFormFields() {
                validateShippingAddressForm(form)
            }

            setupAddAddressFields(form, validateAddAddressFormFields)
        }

        function setupAddAddressFields(container, validateAddAddressFormFields) {
            container.find('#add_shipping_address').on('keyup', validateAddAddressFormFields)
            container.find('#add_address_country').on('keyup', validateAddAddressFormFields)
            container.find('#add_address_city').on('keyup', validateAddAddressFormFields)
            container.find('#add_address_zipcode').on('keyup', validateAddAddressFormFields)

            const countriesSubunitsMap = JSON.parse( document.querySelector('#countries-subunits-map').value )

            container.find('#add_address_country').select2({
                dropdownParent: $(document).find('.fancybox-stage'),
                width: '90%'
            }).on('change', function () {
                const countryCode = this.value
                window.NorthCommerce.ShippingProfile.getCountrySubunits(countryCode, 'create');
                if (countriesSubunitsMap[countryCode] && countriesSubunitsMap[countryCode].subunits) {

                    const select2Data = Object.keys(countriesSubunitsMap[countryCode].subunits).map((key) => ({
                        id: key,
                        text: countriesSubunitsMap[countryCode].subunits[key]
                    }))

                    container.find('#add_address_state_select').on('change keyup', validateAddAddressFormFields)
                    if (container.find('#add_address_state_select').length) {
                        container.find('#add_address_state_select').empty()
                    } else {
                        container
                            .find('#add_address_state_input')
                            .replaceWith(`<select name="address_state" id="add_address_state_select" class="admin-popup-field-new__input"></select>`);
                    }

                    select2Data
                        .forEach((state) => container.find('#add_address_state_select')
                        .append(`<option value="${state.id}">${state.text}</option>`))

                    container.find('#add_address_state_select').select2({
                        data: select2Data,
                        dropdownParent: $(document).find('.fancybox-stage'),
                        width: '90%',
                        dropdownCssClass: 'admin-popup-field-new__select2-dropdown',
                        selectionCssClass: 'selectionCssClass'
                    }).trigger('change')

                } else {

                    container.find('#add_address_state_select')
                        .select2()
                        .select2('destroy')
                        .replaceWith(`<input type="text" name="address_state" class="admin-popup-field-new__input" id="add_address_state_input">`)

                    container.find('#add_address_state_input').on('change keyup', validateAddAddressFormFields)
                    validateAddAddressFormFields()

                }

            }).trigger('change')
        }

        function handleShipmentAddressEditEvent() {
            if (isEditShipmentAddressPopupOpened) {
                return
            }

            isEditShipmentAddressPopupOpened = true

            const form = $('.popup-edit-shipment-address')
            const countriesSubunitsMap = JSON.parse( document.querySelector('#countries-subunits-map').value )

            const addressDataJSON = this.closest('.shipping-address').dataset.options
            const addressData = JSON.parse( addressDataJSON )

            form.find('[name="shipment_address_options"]').val(addressDataJSON)
            form.find('[name="shipment_address_id"]').val(addressData.id)
            form.find('[name="shipping_address"]').val(addressData.address)
            form.find('[name="address_country"]').val(addressData.country.abbreviation)
            form.find('[name="address_city"]').val(addressData.city)
            form.find('[name="address_state"]').val(addressData.state)
            form.find('[name="address_zipcode"]').val(addressData.zipcode)

            $.fancybox.open({
                src: form,
                type: 'inline',
                opts: {
                    scrolling: 'auto',
                    modal: true,
                    infobar: false,
                    toolbar: false,
                    arrows: false,
                },
            })

            function validateEditAddressFormFields() {
                const form = $('.popup-edit-shipment-address');
                validateShippingAddressForm(form)
            }

            $('#edit_shipping_address').on('keyup', validateEditAddressFormFields)
            $('#edit_address_country').on('keyup', validateEditAddressFormFields)
            $('#edit_address_city').on('keyup', validateEditAddressFormFields)
            $('#edit_address_zipcode').on('keyup', validateEditAddressFormFields)

            form.find('#edit_address_country').select2({
                dropdownParent: $(document).find('.fancybox-stage'),
                width: '90%'
            }).on('change', function (event) {
                const countryCode = this.value
                window.NorthCommerce.ShippingProfile.getCountrySubunits(countryCode, 'edit');
                if (countriesSubunitsMap[countryCode] && countriesSubunitsMap[countryCode].subunits) {

                    const select2Data = Object.keys(countriesSubunitsMap[countryCode].subunits).map((key) => ({
                        id: key,
                        text: countriesSubunitsMap[countryCode].subunits[key]
                    }))

                    $('#edit_address_state_select').on('change keyup', validateEditAddressFormFields)
                    if ($('#edit_address_state_select').length) {
                        $('#edit_address_state_select').empty()
                    } else {
                        $('#edit_address_state_input')
                            .replaceWith(`<select name="address_state" id="edit_address_state_select" class="admin-popup-field-new__input"></select>`)
                    }

                    select2Data.forEach((state) => {
                        $('#edit_address_state_select')
                            .append(`<option value="${state.id}" ${addressData.state === state.id ? 'selected' : ''}>${state.text}</option>`)
                    })

                    $('#edit_address_state_select')
                        .removeClass('select2-offscreen')
                        .select2({
                            data: select2Data,
                            dropdownParent: $(document).find('.fancybox-stage'),
                            width: '90%'
                        })
                        .trigger('change')

                } else {

                    $('#edit_address_state_select')
                        .select2()
                        .select2('destroy')
                        .replaceWith(`<input type="text" name="address_state" value="${addressData.state}" class="admin-popup-field-new__input" id="edit_address_state_input">`);

                    $('#edit_address_state_input').on('change keyup', validateEditAddressFormFields)
                    validateEditAddressFormFields()

                }

            }).trigger('change')

        }

        function handleShipmentAddressDeleteEvent() {
            if (isDeleteShipmentAddressPopupOpened) {
                return
            }

            const form = document.querySelector('.shipping-address-delete-popup')
            const addressID = this.closest('.shipping-address').dataset.id

            form.querySelector('.admin-popup__notice').innerHTML = ''
            form.querySelector('input[name="address_id"]').value = addressID
            form.querySelector('input[type="submit"]').disabled = false

            $.fancybox.open({
                src: form,
                type: 'inline',
                opts: {
                    scrolling: 'auto',
                    modal: true,
                    infobar: false,
                    toolbar: false,
                    arrows: false,
                },
            })
        }

        function handleSubmittingShipmentAddressDeleting(e) {
            e.preventDefault()

            const form = this
            const addressID = form.querySelector('[name="address_id"]').value
            const submitBtn = form.querySelector('input[type="submit"]')
            const noticeElement = form.querySelector('.admin-popup__notice')
            const loader = form.querySelector('.loader')

            $.ajax({
                type: 'DELETE',
                url: `${ajax_object.rest_url}/address/${addressID}`,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('X-WP-Nonce', ajax_object.rest_nonce)
                    noticeElement.textContent = ''
                    loader.style.display = 'block'
                    submitBtn.disabled = true
                },
                success: function (response) {
                    submitBtn.disabled = false
                    loader.style.display = 'none'

                    if (!response.success) {
                        noticeElement.innerHTML = `<div class="north-error">${response.message}</div>`
                        return
                    }

                    const addressList = jQuery(`.address-list .shipping-address:not(.template)[data-id="${addressID}"]`)

                    addressList.each(function () {
                        const addressContainer = $(this).closest('.address-list')
                        const previouslyChecked = $(this).find('.address-checkbox-handler').prop('checked')
                        $(this).remove()

                        const addressesElements = addressContainer.find('.shipping-address:not(.template)')
                        if (addressesElements.length) {

                            if (addressesElements.length === 1) {
                                addressesElements.find('.address-checkbox-handler').prop('checked', true)
                            } else if (previouslyChecked) {
                                const newDefaultAddress = $(addressesElements[addressesElements.length -1])
                                const dropdownContainer = newDefaultAddress.closest('.store-address-section')
                                const dropdownHeader = dropdownContainer.find('.north-dropdown:not(.template) .north-dropdown__header')
                                newDefaultAddress.find('.address-checkbox-handler').prop('checked', true)
                                dropdownHeader.find('.address__title').html(newDefaultAddress.find('.address__title').html())
                                dropdownHeader.find('.address__country').html(newDefaultAddress.find('.address__country').html())
                            }
                        } else {

                            const addressDropdown = $('.address-dropdown:not(.template)')
                            const button = addressDropdown.find('.add-new-address-button').first()
                            addressDropdown.replaceWith(button)
                            $('.shipping-form input[name="address_id"]').val('')

                        }
                    })

                    $.fancybox.close()
                    isDeleteShipmentAddressPopupOpened = false
                }
            })
        }

    })

    document.addEventListener('DOMContentLoaded', () => {
        const shippingSettingsContainer = document.querySelector('.north-commerce_page_north-commerce-settings .shipment')

        if ( ! shippingSettingsContainer ) {
            return
        }

        setupChangeProfileAddressEvent()

        function setupChangeProfileAddressEvent() {
            shippingSettingsContainer.addEventListener('change', handleChangeTrigger)

            function handleChangeTrigger(e) {
                if (!e.target.classList.contains('address-checkbox-handler')) {
                    return
                }

                e.preventDefault()

                const addressCheckbox = e.target

                const checkedWithinHTML = addressCheckbox.closest('.address-list').querySelector('[name="shipping_address_id"][checked]')
                if (checkedWithinHTML === e.target) {
                    // Bailout.
                    return
                }

                if (checkedWithinHTML) {
                    checkedWithinHTML.removeAttribute('checked')
                }

                const shippingProfileDataElement = document.querySelector('#shipping_profile_data')
                if (shippingProfileDataElement) {
                    let profileData = {}
                    try {
                        profileData = JSON.parse( shippingProfileDataElement.value )
                    } catch(e) {
                    }
                    profileData.shipping_address_id = addressCheckbox.value
                    shippingProfileDataElement.value = JSON.stringify(profileData)
                }

                const shippingProfileContainer = addressCheckbox.closest('.single-shipping-profile')

                if ( ! shippingProfileContainer ) {
                    updateAddressTitle(addressCheckbox)

                    // Bailout.
                    return
                }

                const shippingProfileID = shippingProfileContainer.dataset.id

                jQuery.ajax({
                    type: 'PUT',
                    url: `${ajax_object.rest_url}/shipping-profile/${shippingProfileID}/address/${addressCheckbox.value}`,
                    data: {},
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('X-WP-Nonce', ajax_object.rest_nonce)
                    },
                    success: function (response) {
                        if (!response.success) {
                            addressCheckbox.checked = false
                            return
                        }

                        updateAddressTitle(addressCheckbox)
                    }
                })
            }

            function updateAddressTitle(addressCheckbox) {
                // Retrieve all elements with the class '.store-address-section'
                const addressesSections = document.querySelectorAll('.store-address-section');

                // Iterate through each section to update
                addressesSections.forEach((addressesSectionContainer) => {
                    // Find the input container relative to the addressCheckbox
                    const inputContainer = addressCheckbox.closest('.shipping-address');

                    // Find and update the empty address if present
                    const emptyAddress = addressesSectionContainer.querySelector('.north-dropdown__header .address.empty');
                    if (emptyAddress) {
                        emptyAddress.classList.remove('empty');
                    }

                    // Update the address title and country
                    const addressTitle = addressesSectionContainer.querySelector('.address__title');
                    const addressCountry = addressesSectionContainer.querySelector('.address__country');

                    // Ensure the elements exist before trying to update their textContent
                    if (addressTitle && addressCountry) {
                        addressTitle.textContent = inputContainer.querySelector('.address__title').textContent
                        addressCountry.textContent = inputContainer.querySelector('.address__country').textContent
                    }
                })
            }
        }

    })

})(jQuery)


document.addEventListener('DOMContentLoaded', function () {
    const baseUrl = `${location.protocol}//${location.hostname}`

    const shippingForms = document.querySelectorAll('[data-form-identity="shipping-address-form"]')
    let countryId
    let countryName

    const countryDropdowns = document.querySelectorAll('[data-shipping-country-selector]')

    countryDropdowns.forEach((countryDropdown) => {
        countryDropdown.addEventListener('change', () => {
            const selectedValue = countryDropdown.value;
            countryId = selectedValue;
            countryName = countryDropdown.options[countryDropdown.selectedIndex].text;
        })
    })
   
    const updateAddress = (type, name, value) => {
       const titleContainer = document.querySelector(`.${type}-address-title-container`);
        const label = document.querySelector(`.${type}-address-${name}`);
        console.log(type);

        var htmlContent = `
            <div class="customer-shipping-address-name-container">
                <img src="${baseUrl}/wp-content/plugins/north-commerce/admin/images/location.svg" alt="">
                <p class="customer-name-text shipping-address-name">
                    ${value ? value : ''}
            </div>
                </p>
                <p class="customer-address-text shipping-address-address">
                     ${value ? value : ''}
                </p>
                <p class="customer-address-text shipping-address-city-state-zipcode">
                    ${value ? value : ''}
                </p>
                <p class="customer-address-text shipping-address-country">
                    ${value ? value : ''}
                </p>
        `;

        if(!label && titleContainer) {
            titleContainer.insertAdjacentHTML('afterend', htmlContent);
            return;
        }

        label.innerText = value;
    }

    const getQueryParamId = () => {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get('id');
    }

    shippingForms.forEach((shippingForm) => {
        const formFields = shippingForm.querySelectorAll('input, select');
        let submitBtn = shippingForm.querySelector('.admin-popup-submit');
        let isFormModified = false;

        // Add event listener to each form field to track changes
        formFields.forEach((field) => {
          field.addEventListener('change', () => {
            isFormModified = true;
          });
        });

        shippingForm.addEventListener('submit', function (event) {
            event.preventDefault();
            const currentForm = event.target;
            const customer_id = getQueryParamId();
            const formType = currentForm.getAttribute('data-form-type');
            const type = formType.substring(formType.indexOf("-") + 1);
        
            if (!isFormModified) {
                return;
            }
        
            const addressId = currentForm.getAttribute('data-shipping-address-id');
            const baseEndpoint = `${baseUrl}/wp-json/nc-data/v1/addresses`;
            const url = addressId ? `${baseEndpoint}/${addressId}` : baseEndpoint;
            const method = 'POST'; 
        
            // Show the loader
            submitBtn.value = "Loading..."
            submitBtn.disabled = true;

            let requestBody = {
                first_name: currentForm.querySelector('[name="shipping_name"]').value,
                last_name: currentForm.querySelector('[name="shipping_surname"]').value,
                addressline1: currentForm.querySelector('[name="shipping_address"]').value,
                addressline2: currentForm.querySelector('[name="shipping_address2"]').value,
                country_id: countryId,
                city: currentForm.querySelector('[name="city"]').value,
                state: currentForm.querySelector('[name="state"]').value,
                zipcode: currentForm.querySelector('[name="zip"]').value,
                [`is_default_${type}`]: 1
            };

              // Conditionally add customer_id if addressId does not exist
            if (!addressId) {
                requestBody.customer_id = customer_id;  // Ensure `customer_id` is defined and accessible
            }

        
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                submitBtn.value = "Save";
                submitBtn.disabled = false;
                window.jQuery.fancybox.close();  // Consider removing jQuery dependency if not needed
                // Update the DOM elements to reflect changes
                updateAddress(type, 'name', (data.data.first_name || '') + ' ' + (data.data.last_name || ''));
                updateAddress(type, 'address', (data.data.addressline1 || '') + ' ' + (data.data.addressline2 || ''));
                updateAddress(type, 'city-state-zipcode', (data.data.city +',' || '') + ' ' + (data.data.state || '') + ' ' + (data.data.zipcode || ''));
                if(countryName != undefined ) {
                    updateAddress(type, 'country', ( countryName || ''));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                submitBtn.value = "Save";
                submitBtn.disabled = false;
                alert('Failed to update the address. Please try again.');  // Provide user feedback
            });
        });
        
    

    })

});
