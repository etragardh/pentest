export class CustomPopup {

    constructor(props) {
        const defaultConfig = {
            linkAttributeName: 'data-nc-custom-popup',
            closeOnOverlay: false,
        }
        this.config = Object.assign(defaultConfig, props);

        this.init()
    }

    init() {
        this._isOpened = false
        this._isOverlayChecker = false

        this._openedWindow = null
        this._modalBlock = null
        this._starter = null
        this._nextWindows = null

        this.setEventListeners()
    }

    setEventListeners() {
        document.addEventListener('click', this.handlePopupOpen.bind(this))
        document.addEventListener('mousedown', this.handlePopupClose.bind(this))
        document.addEventListener('mouseup', this.handleMouseUp.bind(this))
    }

    handlePopupOpen(e) {
        const clickedlink = e.target.closest(`[${this.config.linkAttributeName}]`);
        if (clickedlink) {
            e.preventDefault();
            this._starter = clickedlink;
            let targetSelector = this._starter.getAttribute(this.config.linkAttributeName);
            this._nextWindows = document.querySelector(targetSelector);
            this.openModal()
            return
        }

        if (e.target.closest('[data-nc-custom-popup-close]')) {
            this.closeModal()
            return
        }
    }

    handlePopupClose(e) {
        this._isOverlayChecker = false

        if (!this.config.closeOnOverlay) {
            return
        }

        const isTargetValid = e.target.classList.contains('nc-custom-popup')

        if (!isTargetValid) {
            return
        }

        this._isOverlayChecker = true
    }

    // handle popup on overlay
    handleMouseUp(e) {
        if (
            this._isOverlayChecker
            && e.target.classList.contains('nc-custom-popup')
        ) {
            e.preventDefault()
            this.closeModal()
            return
        }

        this._isOverlayChecker = false;
    }

    openModal() {
        this._openedWindow = this._nextWindows;
        this._modalBlock = this._openedWindow.querySelector('.nc-custom-modal__window')

        this._openedWindow.classList.add('nc-custom-popup--animated')
        this._openedWindow.classList.add('nc-custom-popup--active')
        this._openedWindow.setAttribute('aria-hidden', 'false')
        this._isOpened = true
        this._bodyScrollControl()

        setTimeout(() => {
            this._openedWindow.classList.remove('nc-custom-popup--animated');
        }, 200);
    }

    closeModal() {
        if (!this._isOpened) {
            return
        }
        this._openedWindow.classList.add('nc-custom-popup--animated')
        this._openedWindow.classList.add('nc-custom-popup--moved')
        this._openedWindow.classList.remove('nc-custom-popup--active')

        setTimeout(() => {
            this._openedWindow.classList.remove('nc-custom-popup--animated')
            this._openedWindow.classList.remove('nc-custom-popup--moved')
            this._bodyScrollControl()
        }, 150)

        this._openedWindow.setAttribute('aria-hidden', 'true')
        this._isOpened = false;
    }

    _closeAfterTransition() {
        this._openedWindow.classList.remove('nc-custom-popup--moved');
        this._openedWindow.classList.remove('nc-custom-popup--animated');
        this._openedWindow.setAttribute('aria-hidden', 'true');

        this._isOpened = false;
    }

    _bodyScrollControl() {
        let body = document.body;
        if (this._isOpened === true) {
            body.style.marginRight = `${window.innerWidth - document.documentElement.clientWidth}px`;
            body.style.overflow = 'hidden';

            return
        }
        body.style.marginRight = ''
        body.style.overflow = ''
    }

}