(function ($) {
    'use strict';
    $(function () {
        window.NorthCommerce.CuctomersManager = {}

        /**
         * Select customers with status
         */
        $('.status__filter-customer').on('click', function (e) {
            e.preventDefault();
            if (!$(this).hasClass('active')) {
                $('.status__filter-customer').removeClass('active');
                $(this).addClass('active');

                let status = $(this).attr('data-status-filter');
                let paged = 1;
                let filter = getCustomerBoardFilter();

                updateCustomerBoard(filter, status, paged);
            }
        });

        $('.board__form-customers').on('submit', function (e) {
            e.preventDefault();
            let status = $('.status__filter-customer.active').attr('data-status-filter');
            let paged = 1;
            let filter = getCustomerBoardFilter();
            updateCustomerBoard(filter, status, paged);
        });

        $('#customer-data-sort, #customer-total-spent-sort, #customer-purchased-products-filter').on('change', function (e) {
            e.preventDefault();
            let status = $('.status__filter-customer.active').attr('data-status-filter');
            let paged = 1;
            let filter = getCustomerBoardFilter();
            updateCustomerBoard(filter, status, paged);
        });

        // Toggle Filters wrapper
        $('.more-filter-toggle').on('click', function () {
            const filterDrawer = $('.filters-drawer');
            if (filterDrawer.hasClass('filters-drawer--active')) {
                filterDrawer.removeClass('filters-drawer--active')
            } else {
                filterDrawer.addClass('filters-drawer--active')
            }
        })

        $('.filters-drawer__header__toggle').on('click', function () {
            const filterDrawer = $('.filters-drawer');
            filterDrawer.removeClass('filters-drawer--active')
        })

        $('.drawer-filter-item .drawer-filter-item__header').on('click', function (event) {
            const inputElement = $(this).closest('.drawer-filter-item');
            const eventTarget = event.target;
            if (inputElement.hasClass('drawer-filter-item--active')) {
                if (!$(eventTarget).is('label')) {
                    inputElement.removeClass('drawer-filter-item--active');
                }
            } else {
                $('.drawer-filter-item').removeClass('drawer-filter-item--active')
                inputElement.addClass('drawer-filter-item--active');
            }
        });

        // setup filter wrapper fields

        $('.north-filter-wrapper-multiple-select[name="customer-purchased-products-filter"]').select2({
            dropdownParent: $(document).find('.filters-drawer'),
            multiple: true,
            formatInputTooShort: "Please enter 1 or more characters",
            minimumInputLength: 1,
            ajax: {
                url: `${window.ajax_object.rest_url}/products`,
                dataType: 'json',
                delay: 250,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('X-WP-Nonce', ajax_object.rest_nonce)
                    $('.shipping-profile-products-duplicate-popup .loader').css('display', 'block')
                },
                data: function (params) {
                    return {
                        name: params.term, // search term
                        page: params.page
                    };
                },
                error: function (jqXHR, status, error) {
                    return {results: []}; // Return dataset to load after error
                },
                processResults: function (data, params) {
                    // parse the results into the format expected by Select2
                    // since we are using custom formatting functions we do not need to
                    // alter the remote JSON data, except to indicate that infinite
                    // scrolling can be used
                    params.page = params.page || 1;
                    return {
                        results: data.items.map(item => ({id: item.id, text: item.name})),
                        pagination: {
                            more: data.meta.current_page < data.meta.max_page
                        }
                    };
                },
                cache: true
            },
        });

        $('.north-filter-wrapper-multiple-select[name="customer-tagged-with-filter"]').select2({
            dropdownParent: $(document).find('.filters-drawer'),
            multiple: true,
            formatInputTooShort: "Please enter 1 or more characters",
            minimumInputLength: 1,
            ajax: {
                url: `${window.ajax_object.rest_url}/products`,
                dataType: 'json',
                delay: 250,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('X-WP-Nonce', ajax_object.rest_nonce)
                    $('.shipping-profile-products-duplicate-popup .loader').css('display', 'block')
                },
                data: function (params) {
                    return {
                        name: params.term, // search term
                        page: params.page
                    };
                },
                error: function (jqXHR, status, error) {
                    return {results: []}; // Return dataset to load after error
                },
                processResults: function (data, params) {
                    // parse the results into the format expected by Select2
                    // since we are using custom formatting functions we do not need to
                    // alter the remote JSON data, except to indicate that infinite
                    // scrolling can be used
                    params.page = params.page || 1;
                    return {
                        results: data.items.map(item => ({id: item.id, text: item.name})),
                        pagination: {
                            more: data.meta.current_page < data.meta.max_page
                        }
                    };
                },
                cache: true
            },
        });
        $('.north-filter-wrapper-single-select').select2({
            dropdownParent: $(document).find('.filters-drawer'),
            formatInputTooShort: "Please enter 1 or more characters",
            minimumInputLength: 1,
            // ajax: {
            //     url: "https://api.github.com/search/repositories",
            //     dataType: 'json',
            //     delay: 250,
            //     data: function (params) {
            //         return {
            //             q: params.term, // search term
            //             page: params.page
            //         };
            //     },
            //     processResults: function (data, params) {
            //         // parse the results into the format expected by Select2
            //         // since we are using custom formatting functions we do not need to
            //         // alter the remote JSON data, except to indicate that infinite
            //         // scrolling can be used
            //         params.page = params.page || 1;
            //
            //         return {
            //             results: data.items,
            //             pagination: {
            //                 more: (params.page * 30) < data.total_count
            //             }
            //         };
            //     },
            //     cache: true
            // },
        });

        function getCustomerBoardFilter() {
            let filters = {};
            const form = $('.board__form-customers');
            form.serializeArray().forEach(filter => {
                filters[filter.name] = filter.value;
            });

            filters['customer-purchased-products-filter'] = form.find('select[name="customer-purchased-products-filter"]').val()
            filters['customer-tagged-width-filter'] = form.find('select[name="customer-tagged-width-filter"]').val()

            console.log('debug: filters', filters)
            return filters;
        }

        /**
         * Prev page customers
         */
        $('.btn-prev.customer-prev').on('click', function () {
            let ordersBoard = $('.result__customers');
            let currentPage = parseInt(ordersBoard.attr('data-current-page'));
            let maxPage = parseInt(ordersBoard.attr('data-max-page'));

            if (maxPage !== 0 && currentPage - 1 > 0) {
                let status = $('.status__filter-customer.active').attr('data-status-filter');
                let paged = currentPage - 1;
                let filter = getCustomerBoardFilter();
                updateCustomerBoard(filter, status, paged);
            }
        });

        /**
         * Next page customers
         */
        $('.btn-next.customer-next').on('click', function () {
            let ordersBoard = $('.result__customers');
            let currentPage = parseInt(ordersBoard.attr('data-current-page'));
            let maxPage = parseInt(ordersBoard.attr('data-max-page'));

            if (maxPage !== 0 && currentPage + 1 <= maxPage) {
                let status = $('.status__filter-customer.active').attr('data-status-filter');
                let paged = currentPage + 1;
                let filter = getCustomerBoardFilter();
                updateCustomerBoard(filter, status, paged);
            }
        });

        function updateCustomerBoard(filter, status = 'any', page = 1) {
            $.ajax({
                type: 'POST',
                url: ajax_object.ajaxurl,
                data: {
                    'action': 'get_customers_admin_ui',
                    'page': page,
                    'posts_per_page': 10,
                    'status': status,
                    'filter': filter,
                },
                beforeSend: function () {
                    $('.board__overlay').css('display', 'block');
                },
                success: function (data) {
                    if (data !== 'error') {
                        let response = JSON.parse(data);
                        let customersBoard = $('.result__customers');

                        $('.action__result > span').html(response['pagination']);
                        $('.status__filter-customer[data-status-filter="any"] > span').html('(' + response['all_count'] + ')');
                        $('.status__filter-customer[data-status-filter="draft"] > span').html('(' + response['draft'] + ')');
                        $('.status__filter-customer[data-status-filter="published"] > span').html('(' + response['published'] + ')');
                        $('.status__filter-customer[data-status-filter="scheduled"] > span').html('(' + response['scheduled'] + ')');
                        $('.status__filter-customer[data-status-filter="archived"] > span').html('(' + response['archived'] + ')');
                        $('.status__filter-customer[data-status-filter="trash"] > span').html('(' + response['trash'] + ')');

                        customersBoard.attr('data-current-page', response['current_page']);
                        customersBoard.attr('data-max-page', response['max_page']);
                        customersBoard.html(response['customers']);
                        updateCustomerSelect();
                    }

                    $('.board__overlay').css('display', 'none');
                }
            });
        }

        window.NorthCommerce.CuctomersManager.updateCustomerBoard = updateCustomerBoard


        let updateCustomerSelect = () => {
            let count = $('.customer.bump-selected').length;
            let allCustomer = $('.customer').length;
            let checkbox = $('#all-customer');

            checkbox.prop('checked', count === allCustomer && allCustomer !== 0);

            if (count > 0 && count < allCustomer) {
                $('.result__labels').addClass('bump-active');
                $('.bump__count-selecting p').html('<span>' + count + '</span> selected');
            } else if (count === allCustomer && allCustomer !== 0) {
                $('.result__labels').addClass('bump-active');
                $('.bump__count-selecting p').html('All selected');
            } else {
                $('.result__labels').removeClass('bump-active');
            }
        };

    })


})(jQuery);

document.addEventListener('DOMContentLoaded', function() {

    const customersList = document.querySelector('.customers__board .result__customers')

	setCustomerItemClickListener()

	function setCustomerItemClickListener() {
		if (!customersList) {
			return
		}

		customersList.addEventListener('click', handleCustomerItemClick)
	}

	function handleCustomerItemClick(e) {
		if (
			'A' === e.target.tagName
			|| e.target.closest('a')
			|| e.target.closest('.customer__select')
		) {
			return
		}

		const customerItem = e.target.closest('[data-customer-id]')

		if (!customerItem) {
			return
		}

		const permalink = customerItem.dataset.customerUrl

		if (!permalink) {
			return
		}

		window.location.href = permalink
	}

    class CustomerEdit {
        constructor(container) {
            if (!container) {
                return
            }

            this.popup         = container
            this.form          = this.popup.querySelector('form')
            this.button_submit = this.popup.querySelector('[type="submit"]')
            this.errors        = this.popup.querySelector('.form-errors')
            this.loader        = this.popup.querySelector('.loader')

            this.fields = {
                nonce:        this.form.querySelector('[name="customer_form_nonce"]'),
                first_name:   this.form.querySelector('[name="customer_first_name"]'),
                last_name:    this.form.querySelector('[name="customer_last_name"]'),
                email:        this.form.querySelector('[name="customer_email"]'),
                country_code: this.form.querySelector('[name="customer_country_code"]'),
                phone:        this.form.querySelector('[name="customer_phone"]'),
            }

            this.events()
            this.initCountryCodes()
        }

        events() {
            document.querySelectorAll('.customer-add').forEach(el => {
                el.addEventListener('click', event => {
                    event.preventDefault()
                    this.open()
                })
            })

            document.querySelectorAll('[data-nc-custom-popup-close]').forEach(el => {
                el.addEventListener('click', event => {
                    event.preventDefault()
                    this.closePopup()
                })
            })

            this.fields.country_code.addEventListener('change', event => {
                this.setPhonePlaceholder()
            })

            //save
            this.form.addEventListener('submit', event => {
                event.preventDefault()
                this.save()
            })
        }

        open() {
            this.openPopup()
        }

        save() {
            if (!this.validate()) {
                return
            }

            this.setBusyState()

            fetch(`${ajax_object.rest_url}/customer`, {
                method:  'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept':       'application/json',
                    'X-WP-Nonce':   ajax_object.rest_nonce,
                },
                body:    JSON.stringify({
                    customer: {
                        form_nonce: this.fields.nonce.value,
                        first_name: this.fields.first_name.value,
                        last_name:  this.fields.last_name.value,
                        email:      this.fields.email.value,
                        phone:      this.fields.phone.value,
                    },
                }),
            }).then((response) => response.json()).then((response) => {
                if (
                  'rest_forbidden' === response.code
                  || !response.success
                ) {
                    this.setFormError(response.message ?? response.data ?? 'internal error')
                    return
                }

                this.setSavedState()

            }).catch((error) => console.error(error)).finally(() => {
                this.setUnBusyState()
            })
        }

        validate() {
            return true
        }

        setSavedState() {
            this.button_submit.innerText = this.button_submit.dataset.textCreated

            setTimeout(() => {
                this.button_submit.innerText = this.button_submit.dataset.textInitial
                this.closePopup()
                window.NorthCommerce?.CuctomersManager?.updateCustomerBoard()
            }, 1000)
        }

        setBusyState() {
            this.loader.style.display = 'block'
            this.button_submit.setAttribute('disabled', 'disabled')
        }

        setUnBusyState() {
            this.loader.style.display = 'none'
            this.button_submit.removeAttribute('disabled')
        }

        setFormError(text) {
            this.errors.innerText     = text
            this.errors.style.display = 'block'
        }

        clearFormError() {
            this.errors.innerText = '';
            this.errors.style.display = 'none'
        }

        reset() {
            this.form.reset()
            this.setUnBusyState()
            this.clearFormError()
        }

        async initCountryCodes() {
            if ('undefined' === typeof libphonenumber) {
                await import('../../libs/Intl-Tel/build/libphonenumber.js')
            }

            this.phoneUtil = libphonenumber.PhoneNumberUtil.getInstance()
            const codes    = this.phoneUtil.getSupportedRegions()

            this.fillCountryCodeOptions(codes)
            this.setPhonePlaceholder()
        }

        fillCountryCodeOptions(items) {
            items.map(item => {
                const option     = document.createElement('option')
                option.value     = item
                option.innerHTML = item
                this.fields.country_code.appendChild(option)
            })
        }

        setPhonePlaceholder() {
            this.fields.phone.placeholder = this.phoneUtil.formatOutOfCountryCallingNumber(
              this.phoneUtil.getExampleNumber(this.fields.country_code.value),
            )
        }

        openPopup() {
            this.popup.classList.add('nc-custom-popup--active')
        }

        closePopup() {
            this.popup.classList.remove('nc-custom-popup--active')
            this.reset()
        }
    }

    new CustomerEdit(document.querySelector('#customer-create-modal'));

})
