/**
 * A JS file for implementing a Easy Post Manager - that is an object
 * that helps the create shipping labels for orders
 */
(function() {
    if(!window.NorthCommerce) {
        window.NorthCommerce = {}
    }

    const baseUrl = `${window.location.protocol}//${window.location.hostname}`;


    window.NorthCommerce.EasyPostManager = {

       getOrderLineItems: async function(orderId) {
        const response = await fetch(`${baseUrl}/wp-json/nc-data/v1/orders/${orderId}?expand=line-items,line-items.product-variant.product,shipping-address.country`);
            if (!response.ok) {
                throw new Error(`There was a problem: ${response.status}`)
            }

            const { data } = await response.json();
            let lineItems = data.line_items;
            const shippingAddress = data.shipping_address;

            let lineItemData = [];

            for(let i = 0; i < lineItems.length; i++) {
                // Check if product_variant.price is null
                if(lineItems[i].product_variant.price === null) {
                    // Replace product variant price with product variant produce base price
                    lineItems[i].product_variant.price = lineItems[i].product_variant.product.base_price;
                    lineItems[i].product_variant.quantity = lineItems[i].product_variant.product.quantity;
                }

                // Add item to new array
                lineItemData.push(lineItems[i]);
            }

            lineItems = lineItemData;
            window.NorthCommerce.EasyPostManager.modifyLineItemData(lineItems, shippingAddress);
        },

        retrieveShippingRates: async function(modifiedLineItems, shipping_address) {
            const data = {
                cart_items: modifiedLineItems,
                address: shipping_address.addressline1,
                city: shipping_address.city,
                state: shipping_address.state,
                country: shipping_address.country.abbreviation,
                zip_code: shipping_address.zipcode
            }

            const response = await fetch(`${ajax_object.rest_url}/shipping/rates`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })

            if (!response.ok) {
                throw new Error(`There was a problem: ${response.status}`)
            }

            const results = await response.json()

            return results
        },

        modifyLineItemData: async function(lineItems, shippingAddress) {
            const modifiedData = {
                cart_items: lineItems.map(item => {
                    return {
                        price: item.amount,
                        product_variant_id: item.product_variant_id,
                        max_quantity: item.product_variant.quantity,
                        product_id: item.product_variant.product_id,
                        qty: item.quantity
                    }
                })
            }

            const response = await window.NorthCommerce.EasyPostManager.retrieveShippingRates(modifiedData.cart_items, shippingAddress)

            if (!response.success) {
                const shippingLoader = document.querySelector('.shipping-carrier-container-loading')
                if (shippingLoader) {
                    shippingLoader.innerText = `Ooops, something went wrong. Try again.`;
                }

                const rateContainer = document.querySelector('[data-shipping-root]')
                rateContainer.innerHTML = `${results.data.errors.shipping_profile_coverage}`
            } else {
                window.NorthCommerce.EasyPostManager.insertShippingRateHTML(response.data)
            }
        },

        insertShippingRateHTML: function(rates) {
            const easypostRates = rates.filter(rate => rate.rate_type === 'easypost');
            const rateContainer = document.querySelector('[data-shipping-root]');
            const currencySymbol = rateContainer.getAttribute('data-currency-symbol');
            rateContainer.innerHTML = ''; // Clear existing contents
            easypostRates.map(r => {
                rateContainer.insertAdjacentHTML('afterbegin',
                `
                <label for="${r.carrier}" class="shipping-carrier-container">
                    <div class="shipping-carrier-name">
                    <input class="shipping-address-selection" id="${r.carrier}" type="radio" id="shipping-address" name="carrier" data-shipping-rate-selector data-ezpost-shipment-id="${r.shipment_id}" value="${r.easypost_rate_id}" required>
                    <div class="nc-shipping-label-rate-item-image">
                        <img decoding="async" src="${baseUrl}/wp-content/plugins/north-commerce/public/images/shipping-rates/${r.carrier.toLowerCase()}.svg" alt="">
                    </div>
                        <p class="shipping-carrier-container-rate-label">${r.carrier} ${r.service}  ${r.delivery_days === null ? '' : '- ' + r.delivery_days + ' day delivery time'}</p>
                    </div>
                    <p class="shipping-carrier-container-rate-price">${currencySymbol}${r.rate}</p>
                </label>
                `
                )
            })

            window.NorthCommerce.EasyPostManager.prepareShippingSelection();

        },

        prepareShippingSelection: function() {
            const createShippingLabelBtn = document.querySelector('[data-action-create-shipping-label]');
            let labelSubmitBtn = document.querySelector('[data-action-create-shipping-label]');
            let easyPostShipmentId;
            let easyPostRateId;
            let orderId = document.querySelector('[data-order-id]').getAttribute('data-order-id');
            let nonce = document.querySelector('.shipping-popup').getAttribute('data-nonce');


            createShippingLabelBtn.addEventListener('click', function(e) {
              e.preventDefault();
              labelSubmitBtn.value = 'Generating Label...'
              let selectedServiceButton = document.querySelector('input[name="carrier"]:checked');
              if(selectedServiceButton) {
                easyPostRateId = selectedServiceButton.value;
                easyPostShipmentId = selectedServiceButton.getAttribute('data-ezpost-shipment-id');
                window.NorthCommerce.EasyPostManager.buyShippingLabels(orderId, easyPostShipmentId, easyPostRateId, nonce)
              } else {
                const errorMessage = document.createElement('p');
                    errorMessage.classList.add('label-error-message');
                    errorMessage.textContent = "Please select a service.";
                    shippingRootElement.insertAdjacentElement('beforebegin', errorMessage);

                    // Remove the error message after 4 seconds
                    setTimeout(() => {
                        errorMessage.remove();
                    }, 4000);
              }
            })

        },

        buyShippingLabels: async function(orderId, easyPostShipmentID, easyPostRateId, nonce) {
            let labelSubmitBtn = document.querySelector('[data-action-create-shipping-label]');
            const shippingRootElement = document.querySelector('[data-shipping-root]');
            const data = {
                order_id: orderId,
                shipment_id: easyPostShipmentID,
                rate_id: easyPostRateId
            }

            const response = await fetch(`${ajax_object.rest_url}/shipping/buy`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-WP-Nonce': nonce
                },
                body: JSON.stringify(data)
            })

            const results = await response.json();
            labelSubmitBtn.value = 'Label Created...'

            if (results.success) {
                window.open(results.data.shipping_details.shipping_label_url, '_blank' );
                window.jQuery.fancybox.close();
                window.NorthCommerce.singleOrderManager.updateOrderStatusUI(results.data.order_status_id);
                window.NorthCommerce.singleOrderManager.updateCarrierLineItem(results.data.shipping_details.carrier);
                window.NorthCommerce.singleOrderManager.updateCarrierTracking(results.data.shipping_details.tracking_number);
                window.NorthCommerce.singleOrderManager.updateCarrierEstimatedDelivery(results.data.shipping_details.estimated_delivery);
                window.NorthCommerce.singleOrderManager.updateLabelBtnState(results.data.shipping_details.shipping_label_url);
            } else {
                const errors = results.data.errors;
                labelSubmitBtn.value = 'Create Label'

                errors.forEach(err => {
                    const errorMessage = document.createElement('p');
                    errorMessage.classList.add('label-error-message');
                    errorMessage.textContent = err;
                    shippingRootElement.insertAdjacentElement('beforebegin', errorMessage);

                     // Remove the error message after 4 seconds
                    setTimeout(() => {
                        errorMessage.remove();
                    }, 4000);
                })
            }

        }
    }
})();
