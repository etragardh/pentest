/**
 * Variants Manager for Product Single
 *
 * @version 0.1.21
 */
(function() {

    window.NorthCommerce = window.NorthCommerce ?? {}

    let localIds = window.NorthCommerce.LocalIds
    let optionManager = window.NorthCommerce.OptionManager

    window.NorthCommerce.VariantManager = {

        refreshVariants: function() {
            const options = optionManager.currentOptions()
            const variantsArr = []

            if (options.length) {
                this.permute(options, [], (combo) => {
                    const variant = this.makeVariant(combo)
                    const variantElt = this.makeVariantElt(variant)
                    variantsArr.push(variantElt)
                })
            }

            const containerEl = document.querySelector('.generated__variant')
            containerEl.innerHTML = ''
            variantsArr.forEach((elt) => containerEl.appendChild(elt))
        },

        currentVariants() {
            let sequence = 0

            return Array
                .from(document.querySelectorAll('.generated__variant .variant'))
                .map((elt) => {
                    const hasImage = elt.querySelector('.variant__image').classList.contains('active')
                    const title = elt.querySelector('.variant__title').textContent.trim()
                    const price = elt.querySelector('.variant-price').value
                    const quantity = elt.querySelector('.variant-quantity').value

                    return {
                        id: elt.dataset.id,
                        slug: title.split(',').map((part) => this.slugify(part)).join('-'),
                        visible: elt.querySelector('.variant-visible').checked ? true : false,
                        sku: elt.querySelector('.variant-sku').value,
                        price: price ? parseFloat(price) : 0,
                        quantity: quantity ? parseInt(quantity) : null,
                        image_url: hasImage ? elt.querySelector('.image__variant img').src : null,
                        sequence: ++sequence,
                        signature: elt.dataset.signature,
                    }
                }
            );
        },

        makeVariantElt: function(variant) {
            const elt = document.querySelector('.variant.template').cloneNode(true)
            elt.classList.remove('template');
            elt.dataset.id = variant.id;
            elt.dataset.signature = variant.signature;
            elt.querySelector('.variant-visible').checked = variant.visible;
            elt.querySelector('.variant__title').innerHTML = variant.title;
            elt.querySelector('.variant-price').value = variant.price;
            if (variant.imageUrl) {
                elt.querySelector('.variant__image').classList.add('active');
                elt.querySelector('.image__variant img').src = variant.imageUrl;
            }
            elt.querySelector('.variant-quantity').value = variant.quantity;
            elt.querySelector('.variant-sku').value = variant.sku;

            return elt
        },

        makeVariant: function(optionValues) {
            let basePrice = this.basePrice();

            let price = optionValues.reduce((carry, ov)  => {
                if (ov.value.is_price_offset_percent) {
                    return (carry + (carry * (ov.value.price_offset / 100)));
                } else {
                    return carry + ov.value.price_offset;
                }
            }, basePrice);

            const signature = optionValues.map((ov) => ov.value.id).join(':')

            return {
                id: localIds.newId(),
                visible: this.variantUiValue(signature, '.variant-visible', true),
                price: this.variantUiValue(signature, '.variant-price', parseFloat(price).toFixed(2)),
                sku: this.variantUiValue(signature, '.variant-sku', ''),
                quantity: this.variantUiValue(signature, '.variant-quantity', ''),
                image_url: this.variantUiValue(signature, '.image__variant img', null),
                slug: optionValues.map((ov) => this.slugify(ov.value.value)).join('-'),
                title: optionValues.map((ov) => ov.value.display_value).join(', '),
                option_values: optionValues.map((ov) => ov.value),
                signature: signature
            }
        },

        variantUiValue: function(signature, selector, fallback) {
            let selectorAttrs = `[data-signature="${signature}"]`;

            if(signature.split(':').length > 1) {
                selectorAttrs = '';
                signature.split(':').forEach(part => selectorAttrs += `[data-signature*="${part}"]`)
            }

            const elt = document.querySelector(`.variant${selectorAttrs}`)

            if (elt) {
                let input = elt.querySelector(selector)
                return input.tagName == 'IMG'
                    ? input.src
                    : (input.type == 'checkbox' ? input.checked : input.value)
            }

            return fallback
        },

        variant: function(signature) {
            let elt = document.querySelector('.variant[data-signature=' + signature + ']')

            if (elt) {
                return elt.querySelector('.variant-sku').value;
            }

            return ''
        },

        slugify: (value) => value.toLowerCase().replace(/[^.a-z0-9]/g, ''),

        permute: function(options, accumulator, callback) {
            if (!options.length) {
                callback(accumulator);
                return;
            }

            let option = options.shift()

            option.product_option_values.forEach((ov) => {
                this.permute(
                    options.concat(),
                    accumulator.concat({ value: ov, option: option }),
                    callback
                )
            })
        },

        basePrice: function() {
            const price = document.querySelector('#product-pricing [name="product_price"]').value
            return price ? parseFloat(price) : 0
        }

    }

})()
