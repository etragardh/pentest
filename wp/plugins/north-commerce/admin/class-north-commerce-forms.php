<?php
/**
 * Forms class.
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.13
 */
class North_Commerce_Forms extends North_Commerce_Admin_Base {

	public function __construct() {
		parent::__construct();
	}

    public function register_shortcode() {
		add_shortcode( 'commerce-form', [ $this, 'shortcode_build' ] );
        add_shortcode( 'commerce-checkout-form', [ $this, 'checkout_form_build' ] );
        add_shortcode( 'commerce-signup', [ $this, 'signup_form_build' ] );
    }

	/**
	 * @since   0.1.0
	 * @version 0.1.13
	 */
    public function checkout_form_build( $atts ) {

        $template = new NorthCommerce\Template_Manager( 'public' );

        $atts = shortcode_atts( array(
            'product' => null,
            'bump' => null,
            'redirect' => null,
            'password_field' => null // for licenses host
        ), $atts );

        $products = trim( $atts['product'], '”' );
        $products = preg_replace( '/\s+/', '', $products );

        $args = array(
            'products' => $products ? explode( ',', $products ) : array(),
            'bumps' => ! empty( $atts['bump'] ) ? explode( ',', preg_replace( '/\s+/', '', $atts['bump'] ) ) : array(),
            'redirect' => ! empty( $atts['redirect'] ) ? $atts['redirect'] : '',
            'password_field' => $atts['password_field'] ?: null,
        );

        ob_start();
		$template->use( 'single-page-checkout-form', [ 'args' => $args ] );
        $render_object = ob_get_contents();
        ob_end_clean();

        return $render_object;

    }


    public function signup_form_build( $atts ) {

        $template = new NorthCommerce\Template_Manager( 'public' );

        $atts = shortcode_atts( array(
            'redirect' => null,
            'submit_button' => 'Create Your Account'
        ), $atts );


        $args = array(
            'redirect' => ! empty( $atts['redirect'] ) ? $atts['redirect'] : '',
            'submit_button' => ! empty( $atts['submit_button'] ) ? $atts['submit_button'] : 'Create Your Account',
        );

        ob_start();
		$template->use( 'sign-up-form', [ 'args' => $args ] );
        $render_object = ob_get_contents();
        ob_end_clean();

        return $render_object;

    }


    function shortcode_build( $atts ) {
        $atts = shortcode_atts( array(
            'id' => null,
            'title' => ''
        ), $atts );

        $form = North_Form_DB_Controller::get_form($atts['id']);
        if ( empty( $form ) || ! isset( $form['form_data'] ) ) {
            return '';
        }

        $form = self::prepare_form_to_output($form);
        $output = North_Commerce_Form_Generation::generate($form['form_data']);
        return $output;
    }

    function get_forms_by_params() {
        $name = isset($_POST['name']) ? sanitize_text_field( $_POST['name'] ) : '';
        $order = isset($_POST['order']) ? sanitize_text_field( $_POST['order'] ) : '';

        $forms = North_Form_DB_Controller::get_forms_by_params( $name, $order );
        $forms = self::prepare_forms($forms);

        $result = $this->get_forms_include($forms);
        echo  $result  ;
        wp_die();
    }

    function delete_form($id = null) {
        $id = isset($_POST['id']) ? sanitize_text_field( $_POST['id'] ) : '';
        $result = North_Form_DB_Controller::delete_form($id);
        echo  $result;
        wp_die();
    }

    function duplicate_form($id = null) {
        $id = isset($_POST['id']) ? sanitize_text_field( $_POST['id'] ) : '';
        $form = North_Form_DB_Controller::get_form($id);
        $result = false;
        if($form != false && !empty($form)){
            $result = North_Form_DB_Controller::insert_form($form['name'] . '-Copy', $form['form_data']);
        }

        echo  $result;
        wp_die();
    }

    public function get_forms() {
        $forms = North_Form_DB_Controller::get_forms();
        $forms = self::prepare_forms( $forms );
        return $this->get_forms_include( $forms );
    }

    /** @deprecated 0.1.19 */
    private function get_forms_include( $forms = array() ) {
        if ( ! empty( $forms ) ) {
            ob_start();
            // foreach ( $forms as $form ) {
            //     $this->template( 'form-item', 'builder', $form );
            // }

            $result = ob_get_contents();
            ob_end_clean();
        }

        return $result;
    }

    public static function prepare_forms( $forms = null ) {
        for ($i = 0; $i < count($forms); $i++) {
			$forms[$i] = self::prepare_form_to_output($forms[$i]);
		}
        return $forms;
    }

    public static function prepare_form_to_output($form = null)
    {
        $form['form_data'] = json_decode($form['form_data'], JSON_UNESCAPED_SLASHES);
        return $form;
    }


 }
