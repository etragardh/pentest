<?php
/**
 * Integration class.
 *
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.24
 */
class North_Commerce_Integration extends North_Commerce_Admin_Base {

    /**
     *  Info for integration cards
     */
    private $integration_services;

    /**
     * @var  array  $integration_placeholders  Placeholders cards
     * @since 0.1.1
     */
    private $integration_placeholders = array();


    public function __construct() {
		parent::__construct();

        do_action( 'north-commerce/integrations/init' );

        $native_integrations = array(
            North_Commerce_Paypal::OPTIONAL_KEY => [
                'object' => North_Commerce_Integration_Factory::create( 'paypal' )
            ],

            North_Commerce_Stripe::OPTIONAL_KEY => [
                'object' => North_Commerce_Integration_Factory::create( 'stripe' )
            ],

            North_Commerce_Mollie::OPTIONAL_KEY => [
                'object' => North_Commerce_Integration_Factory::create( 'mollie' )
            ],

            North_Commerce_MailChimp::OPTIONAL_KEY => [
                'object' => North_Commerce_Integration_Factory::create( 'mailchimp' )
            ],

            North_Commerce_Twilio::OPTIONAL_KEY => [
                'object' => North_Commerce_Integration_Factory::create( 'twilio' )
            ],

            North_Commerce_Easypost::OPTIONAL_KEY => [
                'object' => North_Commerce_Integration_Factory::create( 'easypost' )
            ],

            North_Commerce_GooglePlaceAutocomplete::OPTIONAL_KEY => [
                'object' => North_Commerce_Integration_Factory::create( 'google_place_autocomplete' )
            ],
        );

        $addon_integrations = apply_filters( 'north-commerce/integrations/extra-array', array() );

        $this->integration_services = $native_integrations + $addon_integrations;
        $this->define_integration_placeholders();
    }

    /**
     * @since   0.1.1
     * @version 0.1.24
     */
    protected function define_integration_placeholders() : void {
        if ( empty( $this->integration_services['royal_mail_service'] ) ) {
            $this->integration_placeholders[ North_Commerce_Royal_Mail_Placeholder::OPTIONAL_KEY ] = [
                'object' => new North_Commerce_Royal_Mail_Placeholder(),
            ];
        }

	    if ( empty( $this->integration_services['square_service'] ) ) {
		    $this->integration_placeholders[ North_Commerce_Square_Placeholder::OPTIONAL_KEY ] = [
			    'object' => new North_Commerce_Square_Placeholder(),
		    ];
	    }

        return; // Delete line after addons approving

        if ( empty( $this->integration_services['zapier_service'] ) ) {
            $this->integration_placeholders[ North_Commerce_Zapier_Placeholder::OPTIONAL_KEY ] = [
                'object' => new North_Commerce_Zapier_Placeholder(),
            ];
        }

        if ( empty( $this->integration_services['pabbly_service'] ) ) {
            $this->integration_placeholders[ North_Commerce_Pabbly_Placeholder::OPTIONAL_KEY ] = [
                'object' => new North_Commerce_Pabbly_Placeholder(),
            ];
        }
    }

    /**
     * Include all integrations in integration tab
     *
     * @version 0.1.24
     */
    public function render_integrations() {
        foreach ( $this->integration_services as $key => $value ) {
            $integration = $value['object'];

            $service = [
                'integration_item' => [
                    'id' => $key,
                    'name' => $integration->get_integration_label(),
                    'description' => $integration->get_integration_description(),
                    'icon_src' => $integration->get_integration_icon(),
                    'enabled' => $integration->is_connected(),
                ]
            ];

            if ( $integration instanceof North_Integration_Connectable_Mode ) {
                $service['integration_item'] += [
                    'switchable' => $integration->has_keys(),
                    'test_mode' => $integration->is_test_mode(),
                ];
            }

            $this->template( 'integration-item', 'integration', $service );
        }

        foreach ( $this->integration_placeholders as $key => $value ) {
            $instance = $value['object'];

            $placeholder = [
                'integration_item' => [
                    'id' => $key,
                    'addon_id' => $instance->get_placeholder_id(),
                    'name' => $instance->get_placeholder_name(),
                    'description' => $instance->get_placeholder_description(),
                    'icon_src' => $instance->get_placeholder_icon(),
                ]
            ];

            $this->template( 'integration-placeholder', 'integration', $placeholder );
        }
    }

    /**
     * Get integration form
     *
     * @since    0.1.0
     * @version  0.1.1
     */
    public function get_integration_form_fields() {
        $params = isset( $_POST['data'] ) ? sanitize_text_field( $_POST['data'] ) : '';
        $service = $this->integration_services[ $params ];

        if ( ! empty( $service['object'] ) && $service['object'] instanceof North_Integration_Connectable ) {
            echo ( $service['object']->get_form_fields() );
        }

        wp_die();
    }

    /**
     * @since    0.1.0
     * @version  0.1.4
     */
    public function toggle_integration() {

        $integration = sanitize_text_field( $_POST['data']['integration_id'] ?? '' );
        $status = sanitize_text_field( $_POST['data']['status'] ?? '' );
        $status = 'live' !== $status && 'test' !== $status ? 'test' : $status;

        $service = $this->integration_services[ $integration ];

        if ( ! empty( $service['object']) && $service['object'] instanceof North_Integration_Connectable_Mode ) {
            $new_mode = 'test' === $status ? 'live' : 'test';
            print json_encode( $service['object']->toggle_mode( $new_mode ) );
        }

        wp_die();

    }

    /**
     * Call API to connect with integration
     *
     * @since    0.1.0
     * @version  0.1.4
     */
    public function enable_integration() {

        parse_str( $_POST['data'], $params );

        $service = $this->integration_services[ $params['integration_id'] ];
        if ( ! empty( $service['object'] ) && $service['object'] instanceof North_Integration_Connectable ) {
            print json_encode( $service['object']->connect( $params ) );
        } else {
            echo 'error';
        }

        wp_die();

    }

    /**
     * @since   0.1.0
     * @version 0.1.24
     */
    public function disable_integration() {
        $params = sanitize_text_field( $_POST['data'] ?? '' );
        $service = $this->integration_services[ $params ];

        if ( ! empty( $service['object'] ) && $service['object'] instanceof North_Integration_Connectable ) {
            echo $service['object']->disconnect();
        }

        wp_die();
    }

}
