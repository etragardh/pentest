<?php

use NorthCommerce\Models\WebhookModel;
use NorthCommerce\Models\WebhookEventModel;

use NorthCommerce\Db\WebhookManager;

defined('ABSPATH') || exit;

/**
 * Webhook controller class.
 *
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.21
 */
class North_Commerce_Webhooks extends North_Commerce_Admin_Base {

    protected $webhook_model;
    protected $webhook_event_model;

    public function __construct() {
        parent::__construct();
        $this->webhook_model = new WebhookModel();
        $this->webhook_event_model = new WebhookEventModel();
    }

    public function load_webhooks_ajax() {
        global $wpdb;

        $page = isset($_POST['page']) ? max(1, intval($_POST['page'])) : 1;
        $perPage = 20;

        // Include 'created' in allowed columns
        $allowed_columns = [ 'id', 'url', 'service', 'created', 'last_triggered' ];
        $sortColumn = isset($_POST['sortColumn']) && in_array($_POST['sortColumn'], $allowed_columns) ? $_POST['sortColumn'] : 'created';

        $allowed_orders = [ 'ASC', 'DESC' ];
        $sortOrder = isset($_POST['sortOrder']) && in_array($_POST['sortOrder'], $allowed_orders) ? $_POST['sortOrder'] : 'DESC';

        $offset = ($page - 1) * $perPage;

        // Include 'created' in the selected fields
        $webhooks = $wpdb->get_results("SELECT id, url, service, created, last_triggered FROM {$wpdb->prefix}nc_webhooks ORDER BY {$sortColumn} {$sortOrder} LIMIT {$offset}, {$perPage}");

        // Fetch the events for each webhook
        foreach ($webhooks as &$webhook) {
            $webhook->events = $wpdb->get_col("SELECT event FROM {$wpdb->prefix}nc_webhook_events WHERE webhook_id = $webhook->id");
        }

        $total = $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}nc_webhooks");
        $pages = ceil($total / $perPage);

        wp_send_json_success(['webhooks' => $webhooks, 'pages' => $pages]);
    }

    /**
     * Delete a webhook.
     *
     * @param int $id The id of the webhook to delete.
     */
    public function delete_webhook( $id ): bool {
        // Call the delete method on the Webhook model.
        $result = $this->webhook_model->delete($id);

        // If the delete was successful, return true
        if ($result !== false) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Handle delete webhook AJAX request.
     */
    public function delete_webhook_ajax() {
        if (isset($_POST['id']) && is_numeric($_POST['id'])) {
            $id = $_POST['id'];

            // Call the delete_webhook method and handle AJAX response.
            if ($this->delete_webhook($id)) {
                wp_send_json_success();
            } else {
                wp_send_json_error();
            }
        } else {
            wp_send_json_error();
        }

        die();
    }

    /**
     * Create a new webhook.
     *
     * @param array $data Array containing url, service, uid, and events of the webhook.
     * @return int|false The id of the new webhook, or false on failure.
     */
    public function create_webhook($data) {
        $manager = WebhookManager::instance();

        $webhook = $manager->registerWebhook(
            $data['url'],
            $data['events'],
        );

        return $webhook;
    }

    /**
     * Update an existing webhook.
     *
     * @param int $id The id of the webhook to update.
     * @param array $data Array containing url, service, uid, and events of the webhook.
     */
    public function update_webhook( $id, $data ) {
        $manager = WebhookManager::instance();

        $manager->updateWebhook(
            $id,
            $data['url'],
            $data['events'],
        );

        return true;
    }
}
