<?php

use NorthCommerce\Redirects\StripeConfirmPaymentRedirectHandler;
use North_Commerce_Settings as Settings;

/**
 * Admin controller class.
 *
 * Admin-specific functionality
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.25
 */
class North_Commerce_Admin extends North_Commerce_Admin_Base {

	/**
     * @var   string $plugin_name The ID of this plugin.
	 * @since 0.1.0
	 */
	private $plugin_name;

	/**
	 * @var   string $version The current version of this plugin.
	 * @since 0.1.0
	 */
	private $version;

    /**
	 * @var   array $plugin_tabs Array of plugin tabs on the options page.
	 * @since 0.1.0
     */
	public $plugin_tabs;

    /**
	 * @var   string $options_slug Slug for the plugin options page.
	 * @since 0.1.0
     */
    public $options_slug;

    /**
	 * @var    string  $options_url  Link to the plugin options page.
	 * @since  0.1.0
     */
    public $options_url;

	/**
	 * Initialize the class and set its properties.
	 *
	 * @since  0.1.0
	 * @param  string  $plugin_name  The name of this plugin.
	 * @param  string  $version      The version of this plugin.
	 */
	public function __construct( $plugin_name, $version ) {
		parent::__construct();

        $this->plugin_name = $plugin_name;
        $this->version = $version;
        $this->options_slug = 'north-commerce';
        $this->options_url = 'admin.php?page=' . $this->options_slug;
        $this->plugin_tabs = [
            [
                'slug'  => 'north-commerce',
                'class' => 'overview',
                'title' => _x( 'Overview', 'General statistic', 'north-commerce' ),
            ],
            [
                'slug'  => 'north-commerce-orders',
                'class' => 'orders',
                'title' => _x( 'Orders', 'List of all orders', 'north-commerce' ),
            ],
            [
                'slug'  => 'north-commerce-products',
                'class' => 'products',
                'title' => _x( 'Products', 'List of all products', 'north-commerce' ),
            ],
            [
                'slug'  => 'north-commerce-customers',
                'class' => 'customers',
                'title' => _x( 'Customers', 'List of all customers', 'north-commerce' ),
            ],
            [
                'slug'  => 'north-commerce-coupons',
                'class' => 'coupons',
                'title' => _x( 'Coupons', 'List of all discounts', 'north-commerce' ),
            ],
            [
                'slug'  => 'north-commerce-settings',
                'class' => 'settings',
                'title' => _x( 'Settings', 'Plugin general setting', 'north-commerce' ),
            ],
            [
                'slug'  => 'north-commerce-integration',
                'class' => 'integration',
                'title' => _x( 'Integrations', 'Integration manager', 'north-commerce' ),
            ],
        ];
	}

	/**
	 * Register the stylesheets for the admin area.
	 *
	 * @version 0.1.19
	 */
	public function enqueue_styles() {
		$dir_url = plugin_dir_url( __FILE__ ) . 'css/';

		wp_enqueue_style( $this->plugin_name . '-fancy', $dir_url . 'jquery.fancybox.min.css', array(), $this->version );
		wp_enqueue_style( $this->plugin_name . 'select2', $dir_url . 'select2.min.css', array(), $this->version );
		wp_enqueue_style( $this->plugin_name . 'datepicker', $dir_url . 'daterangepicker.min.css', array(), $this->version );
		wp_enqueue_style( $this->plugin_name . 'jquery-ui', $dir_url . 'jquery-ui.min.css', array(), $this->version );
		wp_enqueue_style( 'wp-color-picker' );
		wp_enqueue_style( $this->plugin_name, $dir_url . 'north-commerce-admin.css', array(), $this->version );
	}

	/**
	 * Register the JavaScript for the admin area.
	 *
	 * @version 0.1.25
	 */
	public function enqueue_scripts() {
        $dir_url = plugin_dir_url( __FILE__ ) . 'js/';

		wp_enqueue_script( $this->plugin_name . '-repeater', $dir_url . 'jquery.repeater.min.js', [ 'jquery' ], $this->version );
		wp_enqueue_script( $this->plugin_name . '-fancy', $dir_url . 'jquery.fancybox.min.js', [ 'jquery' ], $this->version );
		wp_enqueue_script( $this->plugin_name . '-lottie', $dir_url . 'lottie-player.js', [ 'jquery' ], $this->version );
		wp_enqueue_script( $this->plugin_name . '-jquery-ui', $dir_url . 'jquery-ui.min.js', [ 'jquery' ], $this->version );
		wp_enqueue_script( $this->plugin_name . '-moment', $dir_url . 'moment.js', [ 'jquery' ], $this->version );
		wp_enqueue_script( $this->plugin_name . '-moment-timezone', $dir_url . 'moment-timezone.js', [ 'jquery' ], $this->version );
		wp_enqueue_script( $this->plugin_name . '-datepicker', $dir_url . 'jquery.daterangepicker.min.js', [ 'jquery', $this->plugin_name . '-moment' ], $this->version, false );

        $admin_libs = [
            'local-ids',
            'option-manager',
            'variant-manager',
            'easypost-manager',
            'singleOrder-manager',
            'shippingProfile-manager',
            'utility-manager'
        ];
		$admin_deps = [];
		foreach ( $admin_libs as $name ) {
			$admin_deps[] = $this->plugin_name . '-' . $name;
			wp_enqueue_script(
				$this->plugin_name . '-' . $name,
				plugin_dir_url( __FILE__ ) . "js/lib/$name.js",
				[],
				$this->version,
				true
			);
		}

		wp_enqueue_script( $this->plugin_name, $dir_url . 'north-commerce-admin.js', array_merge( [ 'jquery' ], $admin_deps ), $this->version );
        add_filter( 'script_loader_tag', [ $this, 'add_data_to_script' ], 10, 3 );

		wp_enqueue_script( $this->plugin_name . '-overview-handler', $dir_url . 'north-commerce-overview-filter.js', [ 'jquery' ], $this->version );
		wp_enqueue_script( $this->plugin_name . '-integration-handler', $dir_url . 'north-commerce-integration.js', [ 'jquery' ], $this->version );
		wp_enqueue_script( $this->plugin_name . '-shipment-handler', $dir_url . 'north-commerce-shipping-profile.js', [ 'jquery' ], $this->version );
		wp_enqueue_script( $this->plugin_name . '-shipments-handler', $dir_url . 'north-commerce-shipping-address.js', [ 'jquery' ], $this->version );
		wp_enqueue_script( $this->plugin_name . '-orders', $dir_url . 'north-commerce-orders.js', [], $this->version );
        wp_enqueue_script( $this->plugin_name . '-products', $dir_url . 'north-commerce-products.js', [], $this->version );
		wp_enqueue_script( $this->plugin_name . '-settings', $dir_url . 'north-commerce-settings.js', [], $this->version );
		wp_enqueue_script( $this->plugin_name . '-select', $dir_url . 'select2.min.js', [ 'jquery' ], $this->version );
		wp_enqueue_script( $this->plugin_name . '-customer', $dir_url . 'north-commerce-customers.js', [ 'jquery' ], $this->version );

		wp_enqueue_script( 'theia-sticky-sidebar', $dir_url . 'theia-sticky-sidebar.min.js', [ 'jquery' ], '1.5.0' );
		wp_enqueue_script( 'wp-color-picker' );
        wp_script_is( 'wp-color-picker-alpha' )
			? wp_enqueue_script( 'wp-color-picker-alpha' )
			: wp_enqueue_script( 'wp-color-picker-alpha', $dir_url . 'wp-color-picker-alpha.min.js', [ 'wp-color-picker' ], $this->version );

        $wp_rest_nonce = wp_create_nonce( 'wp_rest' );
        $ajax_object = [
            'ajaxurl'       => admin_url( 'admin-ajax.php' ),
            'order_paged'   => 2,
            'product_paged' => 2,
            'coupon_paged'  => 2,
            'rest_url'      => rest_url( 'north-commerce/v1' ),
            'rest_nonce'    => $wp_rest_nonce,
            'countriesList' => ( new \NorthCommerce\Models\CountryModel() )->get_formated_list()
        ];

        wp_localize_script( $this->plugin_name, 'ajax_object', $ajax_object );

        wp_localize_script( $this->plugin_name, 'northCommerceSettings',
            [
                'rest_url' => rest_url( 'north-commerce/v1' ),
                'rest_nonce' => $wp_rest_nonce,
                'currencySymbol' => Settings::get_currency_symbol(),
                'currencyCode' => Settings::get_currency_code(),
                'currencyPosition' => Settings::get_currency_position(),
                'priceDecimals' => Settings::get_number_of_decimals(),
                'decimalOperator' => Settings::get_decimal_separator(),
                'thousandSeparator' => Settings::get_thousands_separator(),
                'unitSystem' => Settings::get_current_unit_system(),
                'weightUnit' => Settings::get_weight_unit(),
            ] + (
                $this->is_order_draft_page()
                    ? [ 'stripeConfirmPaymentURL' => ( new StripeConfirmPaymentRedirectHandler() )->handlerUrl() ]
                    : []
            )
        );

        wp_enqueue_media();

        $public_libs = [
            'cart-api',
        ];
        if ( $this->is_order_draft_page() ) {
            $extra_public_libs = [
                'data-api',
                'checkout-manager',
                'coupon-manager',
                'stripe-helper',
            ];
            $public_libs = array_merge( $public_libs, $extra_public_libs );
        }
		foreach ( $public_libs as $name ) {
			wp_enqueue_script(
				$this->plugin_name . '-' . $name,
				plugin_dir_url( __FILE__ ) . "../public/js/lib/$name.js",
				[],
				$this->version,
				true
			);
		}
        if ( $this->is_order_draft_page() ) {
            $stripe = new North_Commerce_Stripe();

            wp_enqueue_script( 'stripe', 'https://js.stripe.com/v3/' );
            wp_localize_script( 'stripe', 'ncStripe', [
                'public' => $stripe->get_public_key()
            ] );
        }
	}

    /**
     * Enable modules functionality for selected scripts
     * @since 0.1.19
     */
    public function add_data_to_script( $tag, $handle, $source ) {
        if ( ! in_array( $handle, [ $this->plugin_name ] ) ) {
            // Bailout
            return $tag;
        }
        return '<script src="'. esc_url( $source ) . '" id="' . $handle . '-js" type="module"></script>';
    }

    /**
     * Create plugin tabs in admin area.
     *
     * @since 0.1.0
     */
    public function plugin_tabs() {
        $i = 0;
        $current_tab = 0;
        $columns = array_column( $this->plugin_tabs, 'slug' );

        if ( isset( $_GET['page' ] ) ) {
            $current_tab = array_search( $_GET['page'], $columns );
        }

        foreach ( $this->plugin_tabs as $key => $tab ) {
            $active = $current_tab === $i ? ' north-tab-active' : '';

            printf(
                '<a href="/wp-admin/admin.php?page=%s" class="north-tab %s %s">%s</a>',
                esc_html( $tab['slug']),
                esc_attr( $tab['class']),
                esc_attr( $active ),
                esc_html( $tab['title'])
            );

            $i++;
        }
    }

    public function overview_page() {
        $this->template( 'overview', 'tabs' );
    }

    public function orders_page() {
        $this->template( 'orders', 'tabs' );
    }

    public function products_page() {
        $this->template( 'products', 'tabs' );
    }

    public function customers_page() {
        $this->template( 'customers', 'tabs' );
    }

    public function coupons_page() {
        $this->template( 'coupons', 'tabs' );
    }

    public function settings_page() {
        $this->template( 'settings', 'tabs' );
    }

    public function integration_page() {
        $this->template( 'integration', 'tabs' );
    }

    /**
     * Options page init.
     *
     * @version 0.1.19
     */
    public function admin_menu() {
        add_menu_page(__( 'North Commerce', 'north-commerce' ), __( 'North Commerce', 'north-commerce' ), 'edit_posts', $this->options_slug, [ $this, 'overview_page' ], plugin_dir_url(__FILE__) . 'images/mini-icon.png');
        add_submenu_page( $this->options_slug, __( 'Overview', 'north-commerce' ), __( 'Overview', 'north-commerce' ), 'edit_posts', $this->options_slug, array($this, 'overview_page') );
        add_submenu_page( $this->options_slug, __( 'Orders', 'north-commerce' ), __( 'Orders', 'north-commerce' ), 'edit_posts', $this->options_slug . '-orders', array($this, 'orders_page') );
        add_submenu_page( $this->options_slug, __( 'Products', 'north-commerce' ), __( 'Products', 'north-commerce' ), 'edit_posts', $this->options_slug . '-products', array($this, 'products_page') );
	    add_submenu_page( $this->options_slug, __( 'Customers', 'north-commerce' ), __( 'Customers', 'north-commerce' ), 'edit_posts', $this->options_slug . '-customers', array($this, 'customers_page') );
        add_submenu_page( $this->options_slug, __( 'Coupons', 'north-commerce' ), __( 'Coupons', 'north-commerce' ), 'edit_posts', $this->options_slug . '-coupons', array($this, 'coupons_page') );
        add_submenu_page( $this->options_slug, __( 'Settings', 'north-commerce' ), __( 'Settings', 'north-commerce' ), 'edit_posts', $this->options_slug . '-settings', [ $this, 'settings_page' ] );
        add_submenu_page( $this->options_slug, __( 'Integration', 'north-commerce' ), __( 'Integrations', 'north-commerce' ), 'edit_posts', $this->options_slug . '-integration', [ $this, 'integration_page' ] );
    }

    /**
     * @version 0.1.23
     */
    public static function is_plugin_activated() {

        $str_ends_with = function ( $haystack, $needle ) {
            $length = strlen( $needle );
            if ( ! $length ) {
                return true;
            }
            return substr( $haystack, -$length ) === $needle;
        };

        if (
            isset( $_SERVER['SERVER_NAME'] )
            && $str_ends_with( $_SERVER['SERVER_NAME'], 'northcommerce.com' )
        ) {
            return true;
        }

        $north_commerce_licence_key = get_option( 'north_commerce_licence_key' );

        if ( ! $north_commerce_licence_key ) {
            return false;
        }

        $api_params = [
            'slm_action' => 'slm_check',
            'secret_key' => NORTH_COMMERCE_SECRET_KEY,
            'license_key' => $north_commerce_licence_key,
            'registered_domain' => sanitize_text_field( wp_unslash( $_SERVER['SERVER_NAME'] ) ),
        ];

        $response = wp_remote_get(
            add_query_arg( $api_params, NORTH_COMMERCE_LICENSE_SERVER_URL ),
            [
                'timeout' => 20,
                'sslverify' => false
            ]
        );

        if ( is_wp_error( $response ) ) {
            return false;
        }

        $license_data = json_decode( wp_remote_retrieve_body( $response ) );

        if (
            'error' === $license_data->result
            || 'active' !== $license_data->lic_status
            || 'north-commerce' !== $license_data->product_ref
        ) {
            return false;
        }

        foreach ( $license_data->registered_domains as $domain_data ) {
            if ( $_SERVER['SERVER_NAME'] === $domain_data->registered_domain ) {
                return true;
            }
        }

        return false;

    }

    /**
     * Activate plugin licence.
     *
     * @param $licence_key
     * @return array
     */
    public function activate_product( $licence_key ) {

        $api_params = [
            'slm_action' => 'slm_activate',
            'secret_key' => NORTH_COMMERCE_SECRET_KEY,
            'license_key' => $licence_key,
            'item_reference' => 'north-commerce',
            'registered_domain' => isset( $_SERVER['SERVER_NAME'] ) ? sanitize_text_field( wp_unslash( $_SERVER['SERVER_NAME'] ) ) : '',
        ];

        $response = wp_remote_get(
            add_query_arg( $api_params, NORTH_COMMERCE_LICENSE_SERVER_URL ),
            [
                'timeout' => 20,
                'sslverify' => false,
            ]
        );

        $status = false;
        $text = '';

        // Check for error in the response
        if ( is_wp_error( $response ) ) {
            $status = false;
            $text = 'Licence key are not saved! Bad request';
        }

        $license_data = json_decode( wp_remote_retrieve_body( $response ) );

        if ( $license_data->result == 'error' ) {
            if ( $license_data->error_code == 40 ) {
                update_option( 'north_commerce_licence_key', $licence_key );
                $status = true;
                $text = 'Plugin was activated!';
            } else {
                $status = false;
                $text = esc_html( $license_data->message );
            }
        } else {
            update_option( 'north_commerce_licence_key', $licence_key );
            $status = true;
            $text = 'Plugin was activated!';
        }

        return [
            'key' => $licence_key,
            'status' => $status,
            'message' => $text
        ];

    }

    /**
     * Dectivate plugin licence.
     */
    public function deactivate_product() {

        $api_params = [
            'slm_action' => 'slm_deactivate',
            'secret_key' => NORTH_COMMERCE_SECRET_KEY,
            'license_key' => get_option( 'north_commerce_licence_key' ),
            'registered_domain' => isset( $_SERVER['SERVER_NAME'] ) ? sanitize_text_field( wp_unslash( $_SERVER['SERVER_NAME'] ) ) : '',
        ];

        $response = wp_remote_get(
            add_query_arg( $api_params, NORTH_COMMERCE_LICENSE_SERVER_URL ),
            [
                'timeout' => 20,
                'sslverify' => false,
            ]
        );
        $status = false;
        $text = '';

        // Check for error in the response
        if ( is_wp_error( $response ) ) {
            $status = false;
            $text = 'Licence are not deactivated! Bad request';
        } else {
            $license_data = json_decode( wp_remote_retrieve_body( $response ) );
            if ( $license_data->result === 'error' ) {
                $status = false;
                $text = $license_data->message;
            } else {
                delete_option( 'north_commerce_licence_key' );
                $status = true;
                $text = 'Plugin was deactivated!';
            }
        }

        return [
            'status' => $status,
            'message' => $text
        ];

    }

    /**
     * @version 0.1.23
     */
	public function north_plugin_info( $res, $action, $args ) {
		$plugin_slug = 'north-commerce';

		if (
			'plugin_information' !== $action
			|| $plugin_slug !== $args->slug
		) {
			return $res;
		}

        $remote = get_transient( 'north_commerce_update_' . $plugin_slug );

		if ( false == $remote ) {
			$remote = wp_remote_get( 'https://northcommerce.com/app-commerce/info.json', [
                'headers' => [ 'Accept' => 'application/json' ],
				'timeout' => 10,
			] );

			if (
				! is_wp_error( $remote )
				&& isset( $remote['response']['code'] ) && $remote['response']['code'] == 200
				&& ! empty( $remote['body'] )
			) {
				set_transient( 'north_commerce_update_' . $plugin_slug, $remote, DAY_IN_SECONDS );
			}
		}

        if (
            ! is_wp_error( $remote )
            && isset( $remote['response']['code'] ) && 200 == $remote['response']['code']
            && ! empty( $remote['body'] )
        ) {
            $remote = json_decode( $remote['body'] );
            $res = new stdClass();

            $res->name = $remote->name;
            $res->slug = $plugin_slug;
            $res->version = $remote->version;
            $res->tested = $remote->tested;
            $res->requires = $remote->requires;
            $res->author = '<a href="https://northcommerce.com/">North Commerce</a>';
            $res->author_profile = 'https://profiles.wordpress.org/zellocoding';
            $res->download_link = $remote->download_url;
            $res->trunk = $remote->download_url;
            $res->requires_php = $remote->requires_php;
            $res->last_updated = $remote->last_updated;
            $res->sections = [
                'description' => $remote->sections->description,
                'installation' => $remote->sections->installation,
                'changelog' => $remote->sections->changelog,
                'screenshots' => $remote->sections->screenshots,
            ];
            $res->contributors = [
                [
                    'display_name' => 'zellocoding',
                    'profile' => 'https://profiles.wordpress.org/zellocoding',
                    'avatar' => 'https://secure.gravatar.com/avatar/0ae87009b37f2dc5d4d9b7722d65689c?s=100&d=mm&r=g',
                ], [
                    'display_name' => 'kelleymuro',
                    'profile' => 'https://profiles.wordpress.org/kelleymuro/',
                    'avatar' => 'https://secure.gravatar.com/avatar/ab86267f60175c6b706b7fbe8e874183?s=100&d=mm&r=g',
                ]
            ];

            $res->banners = [ 'high' => 'https://northcommerce.com/app-commerce/banner.jpg' ];
        }

		return $res;
    }

    /**
     * @version 0.1.23
     */
    public function north_push_update( $transient ) {

        if ( empty( $transient->checked ) ) {
            return $transient;
        }

        $transient_name = 'north_upgrade_north-commerce';
        $remote = get_transient( $transient_name );

        if ( false == $remote ) {

            // file with the actual plugin information
            $remote = wp_remote_get( 'https://northcommerce.com/app-commerce/info.json', [
				'timeout' => 10,
				'headers' => [
					'Accept' => 'application/json'
				]
			] );

            if (
				! is_wp_error( $remote )
				&& isset( $remote['response']['code'] )
				&& 200 == $remote['response']['code']
				&& ! empty( $remote['body'] )
			) {
				set_transient( $transient_name, $remote, 12 * HOUR_IN_SECONDS );
			}

        }

        if ( ! isset( $remote->errors ) ) {

            $remote = json_decode( $remote['body'] );

            if (
                $remote
                && version_compare( NORTH_COMMERCE_VERSION, $remote->version, '<' )
                && version_compare( $remote->requires, get_bloginfo( 'version' ), '<' )
            ) {
                $res = new stdClass();
                $res->slug = 'north-commerce';
                $res->plugin = 'north-commerce/north-commerce.php';
                $res->new_version = $remote->version;
                $res->tested = $remote->tested;
                $res->package = $remote->download_url;
                $transient->response[$res->plugin] = $res;
                //$transient->checked[$res->plugin] = $remote->version;
            }

        }

        return $transient;
    }

    /**
     * Store plugin google api key.
     *
     * @param $upgrader_object
     * @param $options
     * @return mixed
     */
    public function north_after_update( $upgrader_object, $options ) {
        if ( $options['action'] == 'update' && $options['type'] === 'plugin' )  {
            // just clean the cache when new plugin version is installed
            delete_transient( 'north_upgrade_north-commerce' );
        }
    }

	/**
	 * Download and install North Commerce Addon
	 *
	 * @since 0.1.1
	 */
	public function install_addon() {
		check_ajax_referer( 'install-addon' );

		if ( empty( $_REQUEST['addon'] ) ) {
			wp_send_json_error( [
				'errorCode'    => 'no_plugin_specified',
				'errorMessage' => esc_html__( 'No plugin specified.', 'north-commerce' ),
			] );
		}

        require_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';
        $skin     = new WP_Ajax_Upgrader_Skin();
        $upgrader = new Plugin_Upgrader( $skin );

        $addon_url = 'https://northcommerce.com/addons/' . urlencode( $_REQUEST['addon'] ) . '/' . urlencode( $_REQUEST['addon'] ) . '.zip';
        $result = $upgrader->install( $addon_url );

        if ( is_wp_error( $result ) ) {
            $status['errorCode']    = $result->get_error_code();
            $status['errorMessage'] = $result->get_error_message();
            wp_send_json_error( $status );
        } elseif ( is_wp_error( $skin->result ) ) {
            $status['errorCode']    = $skin->result->get_error_code();
            $status['errorMessage'] = $skin->result->get_error_message();
            wp_send_json_error( $status );
        } elseif ( $skin->get_errors()->has_errors() ) {
            $status['errorMessage'] = $skin->get_error_messages();
            wp_send_json_error( $status );
        } elseif ( is_null( $result ) ) {
            global $wp_filesystem;

            $status['errorCode']    = 'unable_to_connect_to_filesystem';
            $status['errorMessage'] = __( 'Unable to connect to the filesystem. Please confirm your credentials.' );

            // Pass through the error from WP_Filesystem if one was raised.
            if ( $wp_filesystem instanceof WP_Filesystem_Base && is_wp_error( $wp_filesystem->errors ) && $wp_filesystem->errors->has_errors() ) {
                $status['errorMessage'] = esc_html( $wp_filesystem->errors->get_error_message() );
            }

            wp_send_json_error( $status );
        }

        if ( $_REQUEST['addon'] !== $upgrader->result['destination_name'] ) {
            $correct_destination = dirname( $upgrader->result['destination'] ) . '/' . $_REQUEST['addon'] . '/';
            if ( rename( $upgrader->result['destination'], $correct_destination ) ) {
                $upgrader->result['destination'] = $correct_destination;
                $upgrader->result['destination_name'] = $_REQUEST['addon'];
            } elseif ( file_exists( $correct_destination ) ) {
                $this->_remove_directory( rtrim( $correct_destination, '/' ) );
                if ( rename( $upgrader->result['destination'], $correct_destination ) ) {
                    $upgrader->result['destination'] = $correct_destination;
                    $upgrader->result['destination_name'] = $_REQUEST['addon'];
                }
            }
        }

        $main_file = $upgrader->result['destination'] . $upgrader->result['destination_name'] . '.php';
        $installed_plugin = $upgrader->result['destination_name'] . '/' . $upgrader->result['destination_name'] . '.php';
        if ( file_exists( $main_file ) && current_user_can( 'activate_plugin', $installed_plugin ) && is_plugin_inactive( $installed_plugin ) ) {
            $status['activateUrl'] = add_query_arg(
                [
                    'action' => 'activate',
                    'plugin' => urlencode( $installed_plugin ),
                    'plugin_status' => 'all',
                    '_wpnonce' => wp_create_nonce( 'activate-plugin_' . $installed_plugin ),
                ],
                admin_url( 'plugins.php' )
            );
        }

        wp_send_json_success( $status ?? [] );
	}

    /**
     * Delete folder with recursive deletion of all contains
     *
     * @since 0.1.1
     */
    private function _remove_directory( $path ) {
        $files = glob( $path . '/*' );
        foreach ( $files as $file ) {
            is_dir( $file ) ? $this->_remove_directory( $file ) : unlink( $file );
        }
        rmdir( $path );
    }

    /**
     * @since   0.1.24
     * @version 0.1.25
     */
    protected function is_order_draft_page():bool {
        if (
            ! isset( $_GET['page'], $_GET['id'] )
            || 'north-commerce-orders' !== $_GET['page']
        ) {
            return false;
        }

        $ea = North_Commerce_Db_Agent::instance()->entityAccess();
        try {
            $order = $ea->ref( $_GET['id'] );
        } catch ( Exception $e ) {
        }

        return isset( $order['id'] )
            && \NorthCommerce\Db\Collections\OrderStatuses::draft()->id === $order['order_status_id'];
    }

}
