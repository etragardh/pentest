<?php
/**
 * Overview model class.
 *
 *
 * @package north-commerce/admin/models
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 */
class Overview_Model {

    private $total_sale = 0;

    private $total_orders = 0;

    private $total_subscriptions = 0;

    private $average_order = 0;

    private $returned_customer_rate = 0;

    private $total_customer;

    private $returned_customer = array();

    private $top_products = array();

    private $top_coupons = array();


    public function get_total_sale() : float {
        return $this->total_sale;
    }

    public function get_total_orders() : int {
        return $this->total_orders;
    }

    public function get_average_order() : float {
        return $this->average_order;
    }

    public function get_total_subscriptions() : int {
        return $this->total_subscriptions;
    }

    public function get_total_customers() : array {
        return $this->total_customer;
    }

    public function get_returned_customers() : array {
        return $this->returned_customer;
    }

    public function get_returned_customer_rate() : float {
        return $this->returned_customer_rate;
    }

    public function set_total_customers( $customers ) {
        $this->total_customer = $customers;
    }

    function __construct ( $customers = array() ) {
        $this->total_customer = $customers;
    }

    public static function compare( $current_overview, $previous_overview ) : array {
        if ( ! empty( $current_overview ) && ! empty( $previous_overview ) ) {
            return array(
                'total_sales' => self::procent_calculate( $current_overview->get_total_sale(), $previous_overview->get_total_sale() ),
                'total_orders' => self::procent_calculate( $current_overview->get_total_orders(), $previous_overview->get_total_orders() ),
                'average' => self::procent_calculate( $current_overview->get_average_order(), $previous_overview->get_average_order() ),
                'subscriptions' => self::procent_calculate( $current_overview->get_total_subscriptions(), $previous_overview->get_total_subscriptions() ),
                'returned_rate' => self::procent_calculate( $current_overview->get_returned_customer_rate(), $previous_overview->get_returned_customer_rate() )
            );
        }

        return array();
    }

    private static function procent_calculate( $first, $second ) {
        if ( empty( $first ) && $second > 0 ) {
            return -100;
        } elseif ( $first > 0 && empty( $second ) ) {
            return 100;
        } elseif ( empty( $first ) && empty( $second ) ) {
            return 0;
        } else {
            return round( ( $first * 100 / $second - 100 ), 1 );
        }
    }

    public function get_top_products($count = 5) {
        if ( isset( $this->top_products ) && count( $this->top_products ) > 0 ) {
            usort( $this->top_products, function($first, $second){
                if ( $first['count'] == $second['count'] ) {
                    return 0;
                }
                return $first['count'] < $second['count'];
            } );

            if ( count( $this->top_products ) > $count ) {
                return array_slice( $this->top_products, 0 , $count );
            }

            return $this->top_products;
        }

        return array();
    }

    public function get_top_coupons( $count = 5 ) {
        if ( isset( $this->top_coupons ) && count( $this->top_coupons ) > 0 ) {
            usort( $this->top_coupons, function( $first, $second ) {
                if ( $first['count'] == $second['count'] ) {
                    return 0;
                }
                return $first['count'] < $second['count'];
            } );

            if ( count( $this->top_coupons ) > $count ) {
                return array_slice( $this->top_coupons, 0, $count );
            }

            return $this->top_coupons;
        }

        return array();
    }

    public function add_sale( $total ) {
        if ( is_numeric( $total ) ) {
            $this->total_sale += floatval( $total );
            $this->add_total_orders();
            $this->calculate_average_order();
        }
    }

    public function add_subscription( $count = 1 ) {
        $this -> total_subscriptions += $count;
    }

    public function add_product( $id, $name, $count = 1 ) {
        if ( ! isset( $this -> top_products[ $id ] ) ) {
            $this->top_products[ $id ] = [
                'name' => $name,
                'count' => 0,
                'id' => $id
            ];
        }

        $this->top_products[ $id ]['count'] += $count;
    }

    public function add_coupon($name, $count = 1) {
        if ( ! isset( $this->top_coupons[ $name ] ) ) {
            $this -> top_coupons[ $name ] = [
                'name' => $name,
                'count' => 0
            ];
        }

        $this->top_coupons[ $name ]['count'] += $count;
    }

    public function add_email_customer( $email ) {

        if ( empty( $email ) ) {
            return;
        }

        if (
            ! in_array( $email, $this->returned_customer )
            && isset( $this->total_customer[ $email ] )
            && $this->total_customer[ $email ]->count + 1 > 2
        ) {
            array_push($this->returned_customer, $email);
            $this -> calculate_returned_customers();
        }

    }

    private function add_total_orders() {
        $this->total_orders += 1;
    }

    private function calculate_average_order() {
        $this->average_order = floatval( $this->total_sale / $this->total_orders );
    }

    private function calculate_returned_customers() {
        $this->returned_customer_rate = 100 + self::procent_calculate( count( $this->returned_customer ), count( $this->total_customer ) );
    }

}
