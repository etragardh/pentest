<?php

use EasyPost\{
	CarrierAccount,
	EasyPost,
    Error,
    Parcel,
	Shipment
};

/**
 * Easypost integration service
 *
 *
 * @package north-commerce/admin/core/integration
 * @link    https://northcommerce.com/
 * @since   0.1.1
 * @version 0.1.13
 */
class North_Commerce_Easypost implements North_Integration_Connectable_Mode {

	public const OPTIONAL_KEY = 'easypost_service';

	/**
	 * @var    string  $secret_key  Production API Key.
	 * @since  0.1.1
	 */
	private $secret_key;

	/**
	 * @var    string  $secret_test_key  Test API key.
	 * @since  0.1.1
	 */
	private $secret_test_key;

	/**
	 * @var    bool   $is_connected  Connection status.
	 * @since  0.1.1
	 */
	private $is_connected;

	/**
	 * @var    bool   $active_mode
	 * @since  0.1.4
	 */
	private $active_mode;

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function __construct() {
		$options = get_option( self::OPTIONAL_KEY, array() );
		$this->secret_key = $options['secret_key'] ?? '';
		$this->secret_test_key = $options['secret_test_key'] ?? '';
		$this->is_connected = $options['enabled'] ?? false;
		$this->active_mode = $options['active_mode'] ?? 'test';
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function get_api_key() {
		return $this->is_test_mode()
			? $this->_get_api_key_test()
			: $this->_get_api_key_production();
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	private function _get_api_key_production() {
		return $this->secret_key;
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	private function _get_api_key_test() {
		return $this->secret_test_key;
	}

	public function get_integration_label(): string {
		return 'EasyPost';
	}

	/**
	 * @since 0.1.1
	 */
	public function get_integration_icon(): string {
		return NORTH_COMMERCE_PLUGIN_DIR_URL . 'admin/images/easypost.svg';
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function get_integration_description(): string {
		return __( 'EasyPost is a Shipping API that solves logistics problems for online businesses.', 'north-commerce' );
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function update_options() {
		return update_option( self::OPTIONAL_KEY, [
			'secret_key'      => $this->_get_api_key_production(),
			'secret_test_key' => $this->_get_api_key_test(),
			'enabled'         => $this->is_connected,
			'active_mode'     => $this->active_mode,
		] );
	}

	/**
	 * @param  array  $args  Connection arguments.
	 *
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function connect( $args ): array {

		if ( empty( $args ) || $args['integration_id'] !== self::OPTIONAL_KEY ) {
			return [ 'is_connected' => false ];
		}

		$this->disconnect();

		$status = false;
		$errors = [];

		// Try to connect to test EasyPost
		if ( ! empty( $args['secret_test_key'] ) ) {
			EasyPost::setApiKey( $args['secret_test_key'] );

			try {
				Parcel::create( [
					'weight' => 65.9
				] );

				$this->secret_test_key = $args['secret_test_key'];
				$status = true;
			} catch ( Exception $error ) {
				$errors[] .= 'EasyPost Test: ' . $error->getMessage();
			}

		}

		// Try to connect to production EasyPost
		if ( ! empty( $args['secret_key'] ) ) {
			EasyPost::setApiKey( $args['secret_key'] );

			try {
				CarrierAccount::all();
				$this->secret_key = $args['secret_key'];
				$status = true;
			} catch ( Exception $error ) {
				$errors[] .= 'EasyPost Production: ' . $error->getMessage();
			}

		}

		if ( $this->_get_api_key_production() || $this->_get_api_key_test() ) {
			$this->is_connected = true;
			$this->active_mode = $this->_get_api_key_test() ? 'test' : 'live';
		}

		$this->update_options();

		return [
			'is_connected' => $status,
			'active_mode' => $this->active_mode,
			'errors' => $errors
		];
	}

	/**
	 * Disconnect from service.
	 *
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function disconnect(): bool {
		$this->secret_test_key = '';
		$this->secret_key = '';
		$this->is_connected = false;
		return $this->update_options();
	}

	/**
	 * Connection status.
	 *
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function is_connected(): bool {
		return $this->get_api_key() && $this->is_connected;
	}

	/**
	 * @param $mode
	 */
	public function is_mode_connected( $mode ): bool {
		return ! empty( ( $mode === 'live' ) ? $this->_get_api_key_production() : $this->_get_api_key_test() );
	}

	/**
	 * @since   0.1.4
	 * @version 0.1.13
	 */
	public function has_keys(): bool {
		return $this->_get_api_key_production() || $this->_get_api_key_test();
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.4
	 */
	public function is_test_mode(): bool {
		return 'test' === $this->active_mode;
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 *
	 * @param $mode
	 *
	 * @return string[]
	 */
	public function toggle_mode( string $mode ) {
		$method = 'live' === $mode ? 'production' : $mode;
		$has_key = (bool) $this->{'_get_api_key_' . $method}();

		if ( $has_key ) {
			$this->active_mode = $mode;
			$this->update_options();
		}

		return [ 'active_mode' => $this->active_mode ];
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function get_form_fields(): string {
		ob_start();
		?>
		<input type="hidden" name="integration_id" value="<?php echo self::OPTIONAL_KEY ?>">
		<div class="admin-popup-field">
			<label for="secret_key">
				<?php esc_html_e( 'Production API Key', 'north-commerce' ); ?>
			</label>
			<input
				type="text"
				name="secret_key"
				id="secret_key"
				value="<?php echo $this->_get_api_key_production(); ?>"
				class="secret_key"
			>
		</div>
		<div class="admin-popup-field">
			<label for="secret_test_key">
				<?php esc_html_e( 'Test API Key', 'north-commerce' ); ?>
			</label>
			<input
				type="text"
				name="secret_test_key"
				id="secret_test_key"
				value="<?php echo $this->_get_api_key_test(); ?>"
				class="secret_test_key"
			>
		</div>
		<?php

		return ob_get_clean();
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function get_all_carrier_accounts() {
		$easypost = new North_Commerce_Easypost();

		EasyPost::setApiKey( $easypost->get_api_key() );
		return CarrierAccount::all();
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function get_shipment_services( $shipment_params ): array {
		EasyPost::setApiKey( $this->get_api_key() );

		$shipment = Shipment::create( $shipment_params );
		$services = [];
		foreach ( $shipment->rates as $rate ) {
			$services[] = $rate->service;
		}

		return $services;
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function get_shipment_rates(
		$from_address,
		$to_address,
		$weight,
		$options = []
	): array {

		$easy_post_key = $this->get_api_key();
		EasyPost::setApiKey( $easy_post_key );

		$shipment_params = [
			'to_address' => $to_address,
			'from_address' => $from_address,
			'parcel' => [
				'weight' => $weight
			],
			'options' => [
				'currency' => North_Commerce_Settings::get_currency_code()
			]
		];

		$rates = [];
		try {

			$shipment = Shipment::create( $shipment_params );

			if ( nc_g( $options, 'panic' ) ) {
				foreach ( $shipment->messages as $m ) {
					if ( strpos( $m->type, 'error' ) !== false ) {
						throw new UnexpectedValueException(
							"EasyPost error: {$m->type}: {$m->message}"
							. ", from=" . print_r( $from_address, true )
							. ", to=" . print_r( $to_address, true )
						);
					}
				}
			}

			foreach ( $shipment->rates as $rate ) {
				$rates[] = [
					'id'                 => $rate->id,
					'mode'               => $rate->mode,
					'service'            => $rate->service,
					'carrier'            => $rate->carrier,
					'carrier_account_id' => $rate->carrier_account_id,
					'shipment_id'        => $rate->shipment_id,
					'rate'               => $rate->rate,
					'currency'           => $rate->currency,
					'retail_rate'        => $rate->retail_rate,
					'retail_currency'    => $rate->retail_currency,
					'list_rate'          => $rate->list_rate,
					'list_currency'      => $rate->list_currency,
					'delivery_days'      => $rate->delivery_days,
					'delivery_date'      => $rate->delivery_date,
					'delivery_date_guaranteed' => $rate->delivery_date_guaranteed,
				];
			}

		} catch( Error $ex ) {
			if ( nc_g( $options, 'panic' ) ) {
				throw new UnexpectedValueException(
					'EasyPost error: '
						. print_r( $ex->errors, true )
						. ", from=" . print_r( $from_address, true )
						. ", to=" . print_r( $to_address, true ),
					0,
					$ex
				);
			}
		}

		return $rates;

	}

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
	public function get_carrier_account_ids_for_shipment( $shipment_params ): array {
		EasyPost::setApiKey( $this->get_api_key() );

		$shipment = Shipment::create( $shipment_params );
		$carrier_account_ids = [];
		foreach ( $shipment->rates as $rate ) {
			$carrier_account_ids[] = $rate->carrier_account_id;
		}

		return $carrier_account_ids;
	}

	/**
	 * List dummy addresses mapped to a country,
	 * for Easypost Rate calculation
	 *
	 * @since   0.1.12
	 * @version 0.1.13
	 */
	public static function list_dummy_addresses(): object {
		$addresses_json = file_get_contents( __DIR__ . '/easypost/addresses.json' );
		return json_decode( $addresses_json );
	}

}
