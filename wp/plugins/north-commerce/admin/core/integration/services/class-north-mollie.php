<?php
/**
 * Mollie integration
 *
 *
 * @package north-commerce/admin/core/integrations
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.1
 * @version 0.1.13
 */
class North_Commerce_Mollie implements North_Integration_Connectable_Mode {

    public const OPTIONAL_KEY = 'mollie_service';

    private $live_api_key;
    private $test_api_key;
    private $profile_id;
    private $methods;

	/**
	 * @var    string  $active_mode  Mollie current status.
	 * @since  0.1.4
	 */
    private $active_mode;

	public function get_api_key() {
		return $this->is_test_mode() ? $this->test_api_key : $this->live_api_key;
	}

	public function get_profile_id() {
        return $this->profile_id;
    }

    /**
     * Initialize the class and set its properties.
     *
     * @since  0.1.1
     * @version 0.1.4
     */
    public function __construct() {
		$options = get_option( self::OPTIONAL_KEY, [] );
		$this->live_api_key = $options['live_api_key'] ?? '';
		$this->test_api_key = $options['test_api_key'] ?? '';
		$this->profile_id = $options['profile_id'] ?? '';
		$this->active_mode = $options['active_mode'] ?? 'test';
		$this->methods = $options['methods'] ?? [];
	}

	public function get_integration_label(): string {
        return 'Mollie';
    }

	public function get_integration_icon(): string {
        return NORTH_COMMERCE_PLUGIN_DIR_URL . 'admin/images/integration-mollie.png';
    }

    public function get_integration_description(): string {
        return 'The simpler way to pay online, receive money or set up a merchant account.';
    }

	/**
     * @since   0.1.1
     * @version 0.1.4
     */
	public function update_options() {
		update_option( self::OPTIONAL_KEY, [
			'live_api_key' => $this->live_api_key,
			'test_api_key' => $this->test_api_key,
			'profile_id' => $this->profile_id,
			'active_mode' => $this->active_mode,
			'methods' => $this->methods,
		] );
	}

	/**
	 * Connect to Mollie.
	 *
	 * @since   0.1.1
	 * @version 0.1.4
	 *
	 * @param  array  $args  Connection arguments.
	 */
    public function connect( $args ): array {

        if ( empty( $args ) || $args['integration_id'] !== self::OPTIONAL_KEY ) {
            return [ 'is_connected' => false ];
		}

        $status = true;
        $errors = [];

		if (
			! empty( $args['test_api_key'] )
			&& $this->test_api_key != $args['test_api_key']
		) {
			$this->test_api_key = '';

			try {
				$mollie = new \Mollie\Api\MollieApiClient();
				$mollie->setApiKey($args['test_api_key']);
				$all = $mollie->methods->allActive();

				$this->test_api_key = $args['test_api_key'];
			} catch ( \Mollie\Api\Exceptions\ApiException $e ) {
				$status = false;
				$errors[] .= 'Mollie Test: ' . $e->getMessage();
			} catch ( Exception $e ) {
				$status = false;
				$errors[] .= 'Mollie Test: ' . $e->getMessage();
			}

			$this->active_mode = 'test';
		}

		if (
			! empty( $args['live_api_key'] )
			&& $this->live_api_key != $args['live_api_key']
		) {
			$this->live_api_key = '';

			try {
				$mollie = new \Mollie\Api\MollieApiClient();
				$mollie->setApiKey( $args['live_api_key'] );
				$all = $mollie->methods->allActive();

				$this->live_api_key = $args['live_api_key'];
			} catch ( \Mollie\Api\Exceptions\ApiException $e ) {
				$status = false;
				$errors[] .= 'Mollie Live: ' . $e->getMessage();
			} catch ( Exception $e ) {
				$status = false;
				$errors[] .= 'Mollie Live: ' . $e->getMessage();
			}

			$this->active_mode = 'live';
		}

		if ( ! empty( $args['profile_id'] ) ) {
            $this->profile_id = $args['profile_id'];
		} else {
            $status = false;
            $errors[] .= 'WARNING: Empty Profile ID';
        }

		$this->maybe_check_disabled_methods( $args );
		$this->update_options();

		return [
			'is_connected' => $status,
			'active_mode' => $this->active_mode,
			'errors' => $errors,
		];
    }

	/**
	 * Disconnect from Mollie.
	 *
	 * @since 0.1.1
	 */
    public function disconnect(): bool {

        $this->live_api_key = '';
        $this->test_api_key = '';
        $this->profile_id = '';
        $this->methods = [];
        $this->update_options();

        return true;

    }

	/**
	 * Connection status.
	 *
	 * @since 0.1.1
	 */
	public function is_connected(): bool {
		return ! empty( $this->get_api_key() );
	}

	/**
     * Check Mollie connection.
     *
     * @param $mode
     * @return bool
     */
	function is_mode_connected( $mode ) {
		return ! empty( ( $mode == 'live' ) ? $this->live_api_key : $this->test_api_key );
    }

	/**
	 * @since 0.1.4
	 */
	function has_keys(): bool {
		return ( $this->test_api_key || $this->live_api_key ) && $this->profile_id;
	}

	/**
	 * @since   0.1.1
	 * @version 0.1.4
     */
    function is_test_mode(): bool {
        return 'test' === $this->active_mode;
    }

    /**
	 * @since   0.1.1
	 * @version 0.1.10
	 */
    public function toggle_mode( string $mode ) {
		$api_key = $this->{$mode . '_api_key'};
		if ( $api_key ) {
			$this->active_mode = $mode;
			$this->update_options();
		}

        return [ 'active_mode' => $this->active_mode ];
    }

    /**
     * Refund payment
     */
    function refund( $payment_id = null ) {
        try {

            $mollie = new \Mollie\Api\MollieApiClient();
            $mollie->setApiKey($this->get_api_key());
            $payment = $mollie->payments->get($payment_id);
            $refund = $payment->refund([
                "amount" => [
                   "currency" => $payment->amount->currency,
                   "value" => $payment->amount->value
                ]
            ]);

            return [
				'success' => true,
				'message' => 'Refund is created'
			];

        } catch ( \Mollie\Api\Exceptions\ApiException $e ) {
            return [
				'success' => false,
				'message' => 'API call failed: ' . htmlspecialchars( $e->getMessage() )
			];
        }
    }


    /**
     * Create subscription payment
	 *
	 * @since 0.1.1
	 * @version 0.1.13.3
     */
    public function create_recurring_payment( $payment_id, $order_id ) {
		try {
            $mollie = new \Mollie\Api\MollieApiClient();
            $mollie->setApiKey( $this->get_api_key() );
            $payment = $mollie->payments->get( $payment_id );
			$is_bump_product = isset( $payment->metadata->bump_product ) ? $payment->metadata->bump_product : false;
            $customer = $mollie->customers->get( $payment->customerId );
            $today = new DateTime();

			$order_obj = new North_Commerce_Order( $order_id );
			$order_model = new \NorthCommerce\Models\OrderModel();
            $order = $order_model->get_by_id( $order_id );
			$index = $is_bump_product ? 1 : 0;

			$amount = floatval( $order['line_items'][ $index ]['amount'] );
			$product_payment_detail = $order['line_items'][ $index ]['product_variant']['product']['payment_detail'];

			$frequency = $product_payment_detail['payment_frequency']['slug'];
			$frequency = 'ly' === substr( $frequency, -2 ) ? substr( $frequency, 0, -2 ) : $frequency;

			$product_type = $order['line_items'][ $index ]['product_variant']['product']['product_type']['slug'];
            if ( 'subscription' === $product_type ) {

				$has_free_trial = (bool) ( $product_payment_detail['has_free_trial'] ?? null );
                if ( $has_free_trial ) {
                    $modify_date = DateInterval::createFromDateString( $product_payment_detail['free_trial_frequency'] . ' ' . $product_payment_detail['free_trial_type']['slug'] );
                } else {
                    $modify_date = DateInterval::createFromDateString( '1 ' . $frequency );
                }

                $interval = 'year' === $frequency ? '12 months' : '1 ' . $frequency;
                $product_name = $order['line_items'][ $index ]['product_variant']['product']['name'];
                $start_date = $today->add( $modify_date );
                return $subscription = $customer->createSubscription( [
                    'amount' => [
                        'value' => number_format( $amount, 2 ),
                        'currency' => North_Commerce_Settings::get_currency_code()
                    ],
                    'interval' => $interval,
                    'description' => "Subscription: {$product_name} #{$order_id}",
                    'webhookUrl' => North_Rest_Conrtoller::get_url() . 'mollie-payment',
                    'startDate' => $start_date->format( 'Y-m-d' ),
                    'metadata' => [
                        'customer_id' => $customer->id,
                        'order_id' => $order_id,
						'bump_product' => $is_bump_product,
                    ],
                ] );

            }

			if ( 'payment-plan' === $product_type ) {

                $payment_numbers = intval( $product_payment_detail['num_payments'] );

                if ( (bool) $product_payment_detail['has_first_payment'] ) {
                    $first_payment = floatval( $product_payment_detail['first_payment'] );
                } else {
                    $first_payment = $amount / $payment_numbers;
                    $payment_numbers -= 1;
                }

                $amount -= $first_payment;

                if ( $payment_numbers > 0 ) {
                    $modify_date = DateInterval::createFromDateString( '1 ' . $frequency );
                    $start_date = $today->add( $modify_date );
                    $interval = 'year' === $frequency ? '12 months' : '1 ' . $frequency;
                    $product_name = $is_bump_product ? ( $bump_product_name ?? null ) : $order['line_items'][0]['product_variant']['product']['name'];

                    $payment_value = $amount / $payment_numbers;

                    return $payment_plan = $customer->createSubscription( [
                        'amount' => [
                            'value' => number_format( $payment_value, 2 ),
                            'currency' => North_Commerce_Settings::get_currency_code()
                        ],
                        'interval' => $interval,
                        'description' => "Payment Plan: {$product_name} #{$order_id}",
                        'webhookUrl' => North_Rest_Conrtoller::get_url() . 'mollie-payment',
                        'startDate' => $start_date->format( 'Y-m-d' ),
                        'times' => $payment_numbers,
                        'metadata' => [
                            'customer_id' => $customer->id,
                            'order_id' => $order_id,
							'bump_product' => $is_bump_product,
                        ],
                    ] );
                }
            }

        } catch ( \Mollie\Api\Exceptions\ApiException $e ) {
            echo 'API call failed: ' . htmlspecialchars( $e->getMessage() );
        }
    }

	/**
	 * @since   0.1.1
	 * @version 0.1.13
	 */
    public function get_form_fields(): string {

		ob_start();

		?>
        <input type="hidden" name="integration_id" value="<?php echo self::OPTIONAL_KEY; ?>">

        <div class="admin-popup-field">
            <label for="test_client_id">
				<?php esc_html_e( 'Live API key', 'north-commerce' ); ?>
			</label>
            <input
				type="text"
				name="live_api_key"
				class="live_api_key"
				value="<?php echo $this->live_api_key; ?>"
				>
        </div>

        <div class="admin-popup-field">
            <label for="test_secret_key">
				<?php esc_html_e( 'Test API key', 'north-commerce' ); ?>
			</label>
            <input
				type="text"
				name="test_api_key"
				value="<?php echo $this->test_api_key; ?>"
				class="test_api_key"
				>
        </div>

        <div class="admin-popup-field">
			<label for="live_client_id">
				<?php esc_html_e( 'Profile ID', 'north-commerce' ); ?>
			</label>
			<input
				type="text"
				name="profile_id"
				value="<?php echo $this->profile_id; ?>"
				class="profile_id"
				>
		</div>

		<div class="mollie_payments">
			<h3 class="payments__heading">
				<?php esc_html_e( 'Payment Methods', 'north-commerce' ); ?>
			<h3>
			<?php $this->list_payment_methods(); ?>
		</div>
		<?php

		return ob_get_clean();

    }

	protected function request_payment_methods() {

		if ( ! $this->is_connected() ) {
			$this->methods = [];
			return $this->update_options();
		}

		$mollie_api = new \Mollie\Api\MollieApiClient();
		$mollie_api->setApiKey( $this->get_api_key() );
		try {
			$mollie_methods = $mollie_api->methods->allActive();
		} catch ( Exception $e ) {
		}

		if ( empty( $mollie_methods ) || ! is_iterable( $mollie_methods ) ) {
			return;
		}

		foreach ( $mollie_methods as $method ) {
			$nc_enabled = $this->methods[ $method->id ]->nc_enabled ?? null;

			$this->methods[ $method->id ] = $method;

			if ( false === $nc_enabled ) {
				$this->methods[ $method->id ]->nc_enabled = $nc_enabled;
			}
		}

		$this->update_options();

	}

	/**
	 * @since   0.1.4
	 * @version 0.1.13
	 */
	protected function list_payment_methods() {

		$this->request_payment_methods();

		if ( ! $this->methods || ! is_iterable( $this->methods ) ) {
			?>
			<p>
				<?php esc_html_e( 'Saved API Key is necessary for retrieving list of methods.', 'north-commerce' ); ?>
			<p>
			<?php

			// Bailout.
			return;
		}

		?>
		<ul class="payments__list">
			<?php
			foreach ( $this->methods as $method ) {
				?>
				<li class="payment__item <?php echo esc_attr( $method->id ); ?>">

					<div class="item__logo">
						<img class="logo__img" src="<?php echo esc_url( $method->image->svg ); ?>">
					</div>

					<div class="item__content">
						<div class="content__title">
							<?php echo esc_html( $method->description ); ?>
						</div>
						<div class="content__description">
							<?php echo $this->get_payment_method_description( $method ); ?>
						</div>
					</div>
					<?php

					$method_id = 'mollie_method_' . $method->id;

					?>
					<div class="item__toggle switch">
						<input
							type="checkbox"
							name="<?php echo esc_attr( $method_id ); ?>"
							class="switch-service-mode"
							id="<?php echo esc_attr( $method_id ); ?>"
							tabindex="0"
							<?php checked( $method->nc_enabled ?? true ); ?>
							>
						<label class="switch-service-label switch-service-label__mode" for="<?php echo esc_attr( $method_id ); ?>">
							<span class="switch-dot"></span>
						</label>
					</div>

				</li>
				<?php
			}
			?>
		</ul>
		<?php

	}

	/**
	 * Retrieve the description of payment method.
	 *
	 * @since 0.1.1
	 */
	protected function get_payment_method_description( Mollie\Api\Resources\Method $method ) : string {

		if ( empty( $this->method_description ) ) {
			$this->method_description = [
				esc_html__( 'Mollie allows you to quickly and easily accept payments through' , 'north-commerce' ),
				'creditcard' => esc_html__( 'The most widely used online payment method in the world.', 'north-commerce' ),
				'ideal' => esc_html__( 'The most used payment method in the Netherlands.', 'north-commerce' ),
				'vouchers' => esc_html__( 'Ideal for online stores offering gift, meals and ecological products.', 'north-commerce' ),
				'banktransfer' => esc_html__( 'Available to shoppers from 34 countries.', 'north-commerce' ),
				'sepa-direct-debit' => esc_html__( 'Collect recurring payments from over 34 European countries.', 'north-commerce' ),
				'sofort' => esc_html__( 'The payment method preferred by 20 million shoppers in 8 countries.', 'north-commerce' ),
				'bancontact' => esc_html__( 'The most popular payment method in Belgium.', 'north-commerce' ),
				'eps' => esc_html__( 'The most used online payment method in Austria.', 'north-commerce' ),
				'giropay' => esc_html__( 'One of the most used online payment method in Germany.', 'north-commerce' ),
				'kbc' => esc_html__( 'Method for Belgium\'s biggest consumer bank.', 'north-commerce' ),
				'belfius' => esc_html__( 'Method of choice for 1 million Belfius customers.', 'north-commerce' ),
				'giftcard' => esc_html__( 'Smartcards that allow the giver to charge them with a desired amount.', 'north-commerce' ),
				'przelewy24' => esc_html__( 'The most popular payment method in Poland.', 'north-commerce' ),
				'paypal' => esc_html__( 'The most used online wallet in the world.', 'north-commerce' ),
			];
		}

		return $this->method_description[ $method->id ] ?? $this->method_description[0] . ' ' . $method->description;

	}

	protected function maybe_check_disabled_methods( $args ) {

		if ( ! $this->methods ) {
			return;
		}

		$enabled_methods = [];
		foreach ( $args as $k => $v ) {
			if ( 0 === strpos( $k, 'mollie_method_' ) ) {
				$enabled_methods[ substr( $k, 14 ) ] = true;
			}
		}

		foreach ( $this->methods as $key => $method ) {
			$this->methods[ $key ]->nc_enabled = $enabled_methods[ $method->id ] ?? false;
		}

	}

	public function get_payment_methods() {

		$transient = 'north-commerce/mollie/methods-recent';
		if ( ! get_transient( $transient ) ) {
			$this->request_payment_methods();

			set_transient( $transient, true, 5 * MINUTE_IN_SECONDS );
		}

		return $this->methods;
	}

}
