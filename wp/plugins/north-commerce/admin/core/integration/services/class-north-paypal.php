<?php

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\Collections\{
    PaymentStatuses,
    ProductTypes
};

/**
 * PayPal integration service
 *
 *
 * @package north-commerce/admin/core/integrations
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.19
 */
class North_Commerce_Paypal implements North_Integration_Connectable_Mode {

    public const OPTIONAL_KEY = 'paypal_service';

	/**
	 * @var    string  $client_id  PayPal client id.
	 * @since  0.1.0
	 */
	private $client_id;

	/**
	 * @var    string  $secret_key  PayPal secret key.
	 * @since  0.1.0
	 */
	private $secret_key;

	/**
	 * @var    string  $access_token  Paypal access token.
	 * @since  0.1.0
	 */
	private $access_token;

	/**
	 * @var    string  $client_id  PayPal client id.
	 * @since  0.1.0
	 */
	private $client_test_id;

	/**
	 * @var    string  $secret_key  PayPal secret key.
	 * @since  0.1.2
	 */
	private $secret_test_key;

	/**
	 * @var    string  $access_token  Paypal access token.
	 * @since  0.1.2
	 */
	private $access_token_test;

	/**
	 * @var    string  $active_mode  PayPal mode.
	 * @since  0.1.4
	 */
	private $active_mode;


    function get_client_id() {
        return $this->is_test_mode() ? $this->client_test_id : $this->client_id;
    }

    function get_secret_key() {
        return $this->is_test_mode() ? $this->secret_test_key : $this->secret_key;
    }

    function get_access_token() {
        return $this->is_test_mode() ? $this->access_token_test : $this->access_token;
    }

    function get_live_access_auth() {
        return base64_encode( $this->client_id . ':' . $this->secret_key );
    }

    function get_test_access_auth() {
        return base64_encode( $this->client_test_id . ':' . $this->secret_test_key );
    }

    function get_access_auth() {
        return base64_encode( $this->get_client_id() . ':' . $this->get_secret_key() );
    }


    /**
     * Initialize the class and set its properties.
     *
     * @since 0.1.0
     * @version 0.1.4
     */
    public function __construct()  {

	    $options = get_option( self::OPTIONAL_KEY, array() );

        $this->client_id = $options['client_id'] ?? '';
        $this->secret_key = $options['secret_key'] ?? '';
        $this->access_token = $options['access_token'] ?? '';
        $this->client_test_id = $options['client_test_id'] ?? '';
        $this->secret_test_key = $options['secret_test_key'] ?? '';
        $this->access_token_test = $options['access_test_token'] ?? '';
        $this->active_mode = $options['active_mode'] ?? 'test';

	}

    public function get_integration_label(): string {
        return 'Paypal';
    }

    /**
     * @since   0.1.0
     * @version 0.1.1
     */
    public function get_integration_icon(): string {
        return NORTH_COMMERCE_PLUGIN_DIR_URL . 'admin/images/integration-paypal.png';
    }

	public function get_integration_description(): string {
        return 'The simpler way to pay online, receive money or set up a merchant account.';
    }

    /**
     * @since   0.1.0
     * @version 0.1.13
     */
	public function update_options() {
        return update_option( self::OPTIONAL_KEY, [
            'client_id' => $this->client_id,
            'secret_key' => $this->secret_key,
            'client_test_id' => $this->client_test_id,
            'secret_test_key' => $this->secret_test_key,
            'active_mode' => $this->active_mode,
            'access_token' => $this->access_token,
            'access_test_token' => $this->access_token_test
        ] );
    }

	/**
	 * PayPal connect to service.
	 *
	 * @version 0.1.23
	 * @param array $args PayPal arguments to connect.
	 */
	public function connect( $args ): array {
        if ( empty( $args ) || $args['integration_id'] !== self::OPTIONAL_KEY ) {
            return [ 'is_connected' => false ];
        }

        $status = true;
        $errors = [];

        // TRY CONNECT TEST PAYPAL
        $test_client_id = $args['test_client_id'] ?? null;
        $test_secret_key = $args['test_secret_key'] ?? null;
        if ( $test_client_id || $test_secret_key ) {
            if (
                $this->client_test_id != $test_client_id
                || empty( $this->client_test_id )
                || $this->secret_test_key != $test_secret_key
                || empty( $this->secret_test_key )
            ) {
                $this->access_token_test = '';
                $this->client_test_id = '';
                $this->secret_test_key = '';
            }

            $auth = base64_encode( $test_client_id . ':' . $test_secret_key );
            $request = [
                'headers' => [
                    'Authorization' => "Basic $auth"
                ],
                'body' => 'grant_type=client_credentials',
            ];

            $response = wp_remote_post( 'https://api-m.sandbox.paypal.com/v1/oauth2/token', $request );
            $response_body = wp_remote_retrieve_body( $response );

            $data = json_decode( $response_body );
            if ( isset( $data->error_description ) ) {
                $status = false;
                $errors[] .= 'PayPal Test: ' .  $data->error_description;
            }

            if ( isset( $data->access_token ) ) {
                $this->access_token_test = $data->access_token;
                $this->client_test_id = $test_client_id;
                $this->secret_test_key = $test_secret_key;
            }
        }

        // TRY CONNECT LIVE PAYPAL
        $live_client_id = $args['live_client_id'] ?? null;
        $live_secret_key = $args['live_secret_key'] ?? null;
        if ( $live_client_id || $live_secret_key ) {
            if (
                $this->client_id != $live_client_id
                || empty( $this->client_id )
                || $this->secret_key != $live_secret_key
                || empty( $this->secret_key )
            ) {
                $this->access_token = '';
                $this->client_id = '';
                $this->secret_key = '';
            }

            $auth = base64_encode( $live_client_id . ':' . $live_secret_key );
            $request = [
                'headers' => [
                    'Authorization' => "Basic $auth"
                ],
                'body' => 'grant_type=client_credentials',
            ];

            $response = wp_remote_post( 'https://api-m.paypal.com/v1/oauth2/token', $request );
            $response_body = wp_remote_retrieve_body( $response );

            $data = json_decode( $response_body );
            if ( isset( $data->error_description ) ) {
                $status = false;
                $errors[] .= 'PayPal Live: ' .  $data->error_description;
            }

            if ( isset( $data->access_token ) ) {
                $this->access_token = $data->access_token;
                $this->client_id = $live_client_id;
                $this->secret_key = $live_secret_key;
            }
        }

        $this->update_options();
        ( new North_Commerce_Product() )->synchronize_payments_plans( false, $paypal = true );

        return [
            'is_connected' => $status,
            'active_mode' => $this->active_mode,
            'errors' => $errors
        ];
    }

	/**
	 * Disconnect from PayPal.
	 *
	 * @since   0.1.0
	 * @version 0.1.10
	 */
    public function disconnect(): bool {
        $this->client_id = '';
        $this->secret_key = '';
        $this->client_test_id = '';
        $this->secret_test_key = '';
        $this->access_token = '';
        $this->access_token_test = '';

		return $this->update_options();
    }

	/**
	 * @since 0.1.0
	 */
	public function is_connected(): bool {
		return ! empty( $this->get_access_token() );
	}

	/**
	 * Check paypal connection.
	 */
	public function is_mode_connected( $mode ): bool {
        return ! empty( ( $mode == 'live' ) ? $this->access_token : $this->access_token_test );
    }

	/**
	 * @since 0.1.4
	 */
	public function has_keys(): bool {
		return ( $this->client_id && $this->secret_key )
            || ( $this->client_test_id && $this->secret_test_key );
	}

	/**
	 * Live or Test mode integration
	 */
    public function is_test_mode(): bool {
        return 'test' === $this->active_mode;
    }

    /**
     * @since   0.1.0
     * @version 0.1.10
     */
    public function toggle_mode( string $mode ) {
        $this->active_mode = $mode;
        $this->update_options();

        return [ 'active_mode' => $this->active_mode ];
	}

	/**
	 * @since   0.1.0
	 * @version 0.1.13
	 */
	public function get_form_fields(): string {
		ob_start();

		?>
		<input type="hidden" name="integration_id" value="<?php echo self::OPTIONAL_KEY; ?>">

		<div class="admin-popup-field">
			<label for="test_client_id">
				<?php esc_html_e( 'Test Client ID', 'north-commerce' ); ?>
			</label>
			<input
				type="text"
				name="test_client_id"
				value="<?php echo $this->client_test_id; ?>"
				class="cliend_id"
				>
		</div>

		<div class="admin-popup-field">
			<label for="test_secret_key">
				<?php esc_html_e( 'Test Secret Key', 'north-commerce' ); ?>
			</label>
			<input
				type="password"
				name="test_secret_key"
				class="secret_key"
				value="<?php echo $this->secret_test_key; ?>"
				>
		</div>

		<div class="admin-popup-field">
			<label for="live_client_id">
				<?php esc_html_e( 'Live Client ID', 'north-commerce' ); ?>
			</label>
			<input
				type="text"
				name="live_client_id"
				class="cliend_id"
				value="<?php echo $this->client_id; ?>"
				>
		</div>

		<div class="admin-popup-field">
			<label for="live_secret_key">
				<?php esc_html_e( 'Live Secret Key', 'north-commerce' ); ?>
			</label>
			<input
				type="password"
				name="live_secret_key"
				value="<?php echo $this->secret_key; ?>"
				class="secret_key"
				>
		</div>
		<?php

		return ob_get_clean();
	}

    /**
     * Create paypal product and plan.
     *
     * @version 0.1.23
     *
     * @param  $data  Checkout form data or Product object data
     */
    public function create_plan( $mode, $data ) {

        do_action( 'nc/paypal/create_plan/before', $mode, $data );

        $auth = 'live' === $mode ? $this->get_live_access_auth() : $this->get_test_access_auth();
        $prefix = 'test' === $mode ? '.sandbox' : '';

        $headers = [
            'Content-Type' => 'application/json',
            'Authorization' => "Basic $auth",
        ];

        $date_modify = date( 'jnYGis' );

		$product_data = [
			'id' => 'plan_' . ( $data['product_id'] ?? $data['id'] ) . '_' . $date_modify,
			'name' => $data['product_name'] ?? $data['name'],
			'type' => 'SERVICE'
		];

        $product_args = [
            'headers' => $headers,
            'body' => json_encode( $product_data ),
        ];

        // Create paypal product
        $product_response = json_decode( wp_remote_retrieve_body(
			wp_remote_post( 'https://api-m' . $prefix . '.paypal.com/v1/catalogs/products', $product_args )
		) );

        $plan_data = [
            'product_id' => $product_response->id,
            'name' => $product_response->name,
            'status' => 'ACTIVE',
            'payment_preferences' => [
                'setup_fee' => [
                    'value' => '0',
                    'currency_code' => North_Commerce_Settings::get_currency_code(),
                ]
            ]
        ];

		$payment_detail = $data['payment_detail'] ?? null;

		$product_frequency = $data['product_frequency'] ?? $payment_detail['payment_frequency']['slug'];
		$product_frequency = 'ly' === substr( $product_frequency, -2 ) ? substr( $product_frequency, 0, -2 ) : $product_frequency;
		$product_frequency = strtoupper( $product_frequency );

		$product_price = $data['product_price'] ?? $data['base_price'];

        $sequence = 1;

		$product_type = $data['product_type']['slug'] ?? $data['product_type'];
		if ( ProductTypes::subscription()->slug === $product_type ) {

			if (
                filter_var( $data['is-free-trial'] ?? null, FILTER_VALIDATE_BOOLEAN )
				&& ! empty( $data['product_trial_count'] )
			) {
				$free_trial_type = $data['product_trial_type'];
				$free_trial_frequency = $data['product_trial_count'];
			}

			if (
				isset( $payment_detail )
				&& filter_var( $payment_detail['has_free_trial'], FILTER_VALIDATE_BOOLEAN )
				&& $payment_detail['free_trial_frequency']
			) {
				$free_trial_type = $payment_detail['free_trial_type']['slug'];
				$free_trial_frequency = $payment_detail['free_trial_frequency'];
			}

			if ( isset( $free_trial_frequency ) ) {
                $plan_data['billing_cycles'][] = [
                    'frequency' => [
                        'interval_unit' => strtoupper( substr( $free_trial_type, 0, -1 ) ),
                        'interval_count' => intval( $free_trial_frequency )
                    ],
                    'tenure_type' => 'TRIAL',
                    'sequence' => $sequence,
                    'total_cycles' => 1,
                    'pricing_scheme' => [
                        'fixed_price' => [
                            'value' => '0',
                            'currency_code' => North_Commerce_Settings::get_currency_code(),
                        ]
                    ]
                ];

                $sequence++;
            }

            if (
                filter_var( $data['is-first-period'] ?? null, FILTER_VALIDATE_BOOLEAN )
				&& ! empty( $data['product_start_price_sub'] )
				&& floatval( $data['product_start_price_sub'] ) > 0
			) {
				$first_period_payment = $data['product_start_price_sub'];
			}

			if (
				isset( $payment_detail )
				&& $payment_detail['has_first_period_payment']
				&& $payment_detail['first_period_payment']
			) {
				$first_period_payment = $payment_detail['first_period_payment'];
			}

			if ( isset( $first_period_payment ) ) {
                $plan_data['billing_cycles'][] = [
                    'frequency' => [
                        'interval_unit' => $product_frequency,
                        'interval_count' => 1
                    ],
                    'tenure_type' => 'TRIAL',
                    'sequence' => $sequence,
                    'total_cycles' => 1,
					'pricing_scheme' => [
						'fixed_price' => [
							'value' => round( floatval( $first_period_payment ), 2 ),
							'currency_code' => North_Commerce_Settings::get_currency_code(),
						]
					]
                ];

                $sequence++;
            }

            $plan_data['billing_cycles'][] = array(
                'frequency' => [
                    'interval_unit' => $product_frequency,
                    'interval_count' => 1
                ],
                'tenure_type' => 'REGULAR',
                'sequence' => $sequence,
                'total_cycles' => 0,
				'pricing_scheme' => [
					'fixed_price' => [
						'value' => round( floatval( $product_price ), 2 ),
						'currency_code' => North_Commerce_Settings::get_currency_code(),
					]
				]
            );

        }

		if ( ProductTypes::paymentPlan()->slug === $product_type ) {

			$first_payment = 0;

			if (
                filter_var( $data['is-first-payment'] ?? null, FILTER_VALIDATE_BOOLEAN )
				&& ! empty( $data['product_start_price'] )
				&& floatval( $data['product_start_price'] ) > 0
			) {
				$first_payment = floatval( $data['product_start_price'] );
			}

			if (
				isset( $payment_detail )
				&& (bool) $payment_detail['has_first_payment']
				&& $payment_detail['first_payment']
			) {
				$first_payment = floatval( $payment_detail['first_payment'] );
			}

			if ( $first_payment > 0 ) {
                $plan_data['billing_cycles'][] = [
                    'frequency' => [
                        'interval_unit' => $product_frequency,
                        'interval_count' => 1
                    ],
                    'tenure_type' => 'TRIAL',
                    'sequence' => $sequence,
                    'total_cycles' => 1,
                    'pricing_scheme' => [
                        'fixed_price' => [
                            'value' => round( $first_payment, 2 ),
                            'currency_code' => North_Commerce_Settings::get_currency_code(),
                        ]
                    ]
                ];

                $sequence++;
            }

            $product_payment_number = intval( $data['product_payment_number'] ?? $payment_detail['num_payments'] );
            $payment_number = 0 !== $product_payment_number ? $product_payment_number : 1;

            $plan_data['billing_cycles'][] = [
                'frequency' => [
                    'interval_unit' => $product_frequency,
                    'interval_count' => 1
                ],
                'tenure_type' => 'REGULAR',
                'sequence' => $sequence,
                'total_cycles' => intval( $payment_number ),
				'pricing_scheme' => [
					'fixed_price' => [
						'value' => round( ( floatval( $product_price ) - $first_payment ) / $payment_number, 2 ),
						'currency_code' => North_Commerce_Settings::get_currency_code(),
					]
				]
            ];
        }

        $plan_args = [
            'headers' => $headers,
            'body' => json_encode( $plan_data ),
        ];

        $response = json_decode( wp_remote_retrieve_body(
            wp_remote_post( 'https://api-m' . $prefix . '.paypal.com/v1/billing/plans', $plan_args )
        ) );

        if ( isset( $response->id ) ) {
            do_action( 'nc/paypal/create_plan/success', $mode, $data );

            return [
                'success' => true,
                'product_id' => $response->id,
                'product_plan_id' => $product_response->id,
            ];
        }

        do_action( 'nc/paypal/create_plan/failed', $mode, $data );

        return false;

    }

    /**
     * @since   0.1.0
	 * @version 0.1.3
     */
    public function recreate_plans() {
        if ( ! $this->is_mode_connected( 'test' ) && ! $this->is_mode_connected( 'live' ) ) {
            // Bailout.
            return;
        }

        $product_model = new \NorthCommerce\Models\ProductModel();

        $payment_plan_id = $product_model->get_type_by_slug( 'payment-plan' )['id'];
        $subscription_id = $product_model->get_type_by_slug( 'subscription' )['id'];

        $criteria = [
            'and',
            [ 'is', 'deleted', null ],
            [
                'or',
                [ 'eq', 'product_type_id', $payment_plan_id ],
                [ 'eq', 'product_type_id', $subscription_id ],
            ],
        ];

        $products = $product_model->list_all( $criteria );

        foreach ( $products as $product ) {

            foreach ( [ 'live', 'test' ] as $mode ) {
                $response = null;

                if ( $this->is_mode_connected( $mode ) ) {
                    $response = $this->create_plan( $mode, $product );
                }

                if ( $response ) {
                    $product_model->update_attribute_value( $product['id'], 'paypal_' . $mode . '_product_id', $response['product_id'] );
                    $product_model->update_attribute_value( $product['id'], 'paypal_' . $mode . '_product_plan_id', $response['product_plan_id'] );
                }
            }

        }
    }

    /**
     * Delete paypal product and plan.
     *
	 * @since   0.1.0
	 * @version 0.1.3
     */
    public function delete_plan( $mode, $product_id ) {
        do_action( 'north_before_paypal_plan_deleted', $mode, $product_id );

		$product_model = new \NorthCommerce\Models\ProductModel();

        $auth = $this->get_access_auth();
        $prefix = 'test' === $mode ? '.sandbox' : '';

        $headers = array(
            'Content-Type' => 'application/json',
            'Authorization' => "Basic $auth",
        );

        $args = array(
            'method' => 'POST',
            'headers' => $headers,
        );

        $plan_id = $product_model->get_attribute_value( $product_id, 'paypal_' . $mode . '_product_id' );

        //$plan_bump_id = get_post_meta($product_id, 'paypal_bump_id', true);

        $response = wp_remote_request( 'https://api-m' . $prefix . '.paypal.com/v1/billing/plans/' . $plan_id . '/deactivate', $args );
        //$response = wp_remote_request('https://api-m.sandbox.paypal.com/v1/billing/plans/' . $plan_bump_id . '/deactivate', $args);

        do_action('north_after_paypal_plan_deleted', $mode, $product_id);
    }

    /**
     * @deprecated Need revision
     */
    public function get_subscription_details( $order_id ) {

        $subscription_id = get_option( "nc/order_{$order_id}/paypal_subscription_id" );

        if ( ! $subscription_id ) {
            return;
        }

        $mode = $this->is_mode_connected( 'live' ) ? 'live' : '';
        if ( ! $mode && $this->is_mode_connected( 'test' ) ) {
            $mode = 'test';
        }

        $auth = $this->get_access_auth();
        $prefix = 'test' === $mode ? '.sandbox' : '';

        $args = [
            'method' => 'GET',
            'headers' => [
                'Content-Type' => 'application/json',
                'Authorization' => "Basic $auth",
            ],
        ];

        $response = wp_remote_request( 'https://api-m' . $prefix . '.paypal.com/v1/billing/subscriptions/' . $subscription_id, $args );

        if ( 200 === ( $response['response']['code'] ?? '' ) ) {
            return json_decode( $response['body'] );
        }

    }

    /**
     * @deprecated Need revision
     */
    public function cancel_subscription( $order_id ) {

        $mode = $this->is_mode_connected( 'live' ) ? 'live' : '';
        if ( ! $mode && $this->is_mode_connected( 'test' ) ) {
            $mode = 'test';
        }
        $auth = $this->get_access_auth();
        $prefix = 'test' === $mode ? '.sandbox' : '';

        $args = [
            'method' => 'POST',
            'headers' => [
                'Content-Type' => 'application/json',
                'Authorization' => "Basic $auth",
            ],
        ];

        $subscription_id = get_option( "nc/order_{$order_id}/paypal_subscription_id" );

        $response = wp_remote_request( 'https://api-m' . $prefix . '.paypal.com/v1/billing/subscriptions/' . $subscription_id . '/cancel', $args );

        if ( 204 === ( $response['response']['code'] ?? '' ) ) {
            return [
                'result' => 'success',
                'subscription_status' => 'canceled',
            ];
        }

    }

    public function upgrade_subscription( $order_id, $cost_of_extra_domain ) {

        $subscription = $this->get_subscription_details( $order_id );

        if ( 'ACTIVE' !== ( $subscription->status ?? '' ) ) {
            return;
        }

        $mode = $this->is_mode_connected( 'live' ) ? 'live' : '';
        if ( ! $mode && $this->is_mode_connected( 'test' ) ) {
            $mode = 'test';
        }
        $auth = $this->get_access_auth();
        $prefix = 'test' === $mode ? '.sandbox' : '';

        $args = [
            'method' => 'PATCH',
            'headers' => [
                'Content-Type' => 'application/json',
                'Authorization' => "Basic $auth",
            ],
            'body' => '[
                {
                    "op": "replace",
                    "path": "/plan/billing_cycles/@sequence==1/pricing_scheme/fixed_price",
                    "value": {
                        "currency_code": "USD",
                        "value": "23.45"
                    }
                }
            ]',
        ];

        $response = wp_remote_request( 'https://api-m' . $prefix . '.paypal.com/v1/billing/subscriptions/' . $subscription->id, $args );

        if ( 204 === ( $response['response']['code'] ?? '' ) ) {
            return [ 'result' => 'success' ];
        }

    }

    /**
     * @deprecated Need revision
     */
    public function get_subscription_invoices( $order_id ) {

        $mode = $this->is_mode_connected( 'live' ) ? 'live' : '';
        if ( ! $mode && $this->is_mode_connected( 'test' ) ) {
            $mode = 'test';
        }
        $auth = $this->get_access_auth();
        $prefix = 'test' === $mode ? '.sandbox' : '';

        $args = [
            'method' => 'GET',
            'headers' => [
                'Content-Type' => 'application/json',
                'Authorization' => "Basic $auth",
            ],
        ];

        $date_format = 'Y-m-d\TH:i:s.v\Z';
        $subscription_id = get_option( "nc/order_{$order_id}/paypal_subscription_id" );
        $subscription_created_date = get_the_date( 'Y-m-d\TH:i:s.v\Z', $order_id ); // todo:
        $start_time = date( $date_format, strtotime( '-1 hour' , strtotime( $subscription_created_date ) ) );
        $current_time = date( $date_format );

        $response = wp_remote_request(
            'https://api-m' . $prefix . ".paypal.com/v1/billing/subscriptions/{$subscription_id}/transactions?start_time={$start_time}&end_time={$current_time}",
            $args
        );

        if ( 200 === ( $response['response']['code'] ?? '' ) ) {
            return json_decode( wp_remote_retrieve_body( $response ) )->transactions;
        }

    }

}
