<?php

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Models\ProductModel;
use NorthCommerceStripe\{
    StripeClient,
    Stripe,
    OAuth
};

/**
 * Stripe integration
 *
 *
 * @package north-commerce/admin/core/integrations
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.23
 */
class North_Commerce_Stripe implements North_Integration_Connectable_Mode {

    public const OPTIONAL_KEY = 'stripe_service';

    /**
     * @var string $secret_key Stripe secret key.
     * @since 0.1.0
     */
    private $secret_key;

    /**
     * @var string $public_key Stripe public key.
     * @since 0.1.0
     */
    private $public_key;

    /**
     * @var string $secret_test_key Stripe secret test key.
     * @since 0.1.0
     */
    private $secret_test_key;

    /**
     * @var string $public_test_key Stripe public test key.
     * @since  0.1.0
     */
    private $public_test_key;

    /**
     * @var object $stripe Stripe client object.
     */
    private $stripe;

    /**
     * @since 0.1.4
     */
    private $active_mode;

	/**
	 * @since   0.1.0
	 * @version 0.1.13
	 */
	public function get_secret_key() {
		return $this->is_test_mode()
			? $this->get_test_secret_key()
			: $this->get_live_secret_key();
	}

	/**
	 * @since   0.1.0
	 * @version 0.1.13
	 */
	public function get_public_key() {
		return $this->is_test_mode()
			? $this->get_test_public_key()
			: $this->get_live_public_key();
	}

	public function get_live_secret_key() {
		return $this->secret_key;
	}

	public function get_test_secret_key() {
		return $this->secret_test_key;
	}

	public function get_live_public_key() {
		return $this->public_key;
	}

	public function get_test_public_key() {
		return $this->public_test_key;
	}

	public function get_integration_label(): string {
        return 'Stripe';
    }

    /**
     * @version 0.1.1
     */
	public function get_integration_icon() : string {
        return NORTH_COMMERCE_PLUGIN_DIR_URL . 'admin/images/integration-stripe.png';
    }

    public function get_integration_description(): string {
        return 'A suite of payment APIs that powers commerce for online businesses.';
    }

    /**
     * Initialize the class and set its properties.
     *
     * @version 0.1.4
     */
    public function __construct() {
	    $options = get_option( self::OPTIONAL_KEY, array() );
        $this->secret_key = $options['secret_key'] ?? '';
        $this->secret_test_key = $options['secret_test_key'] ?? '';
        $this->public_key = $options['public_key'] ?? '';
        $this->public_test_key = $options['public_test_key'] ?? '';
        $this->active_mode = $options['active_mode'] ?? 'test';

		$this->maybe_connect_via_oauth();

        Stripe::setAppInfo(
            'WordPress North Commerce',
            '1.0.0',
            'https://northcommerce.com/',
            'pp_partner_JiUG9veiPfwmtv'
        );
	}

    /**
     * @version 0.1.13
     */
	public function update_options() {
        return update_option( self::OPTIONAL_KEY, array(
            'secret_key' => $this->get_live_secret_key(),
            'secret_test_key' => $this->get_test_secret_key(),
            'public_key' => $this->get_live_public_key(),
            'public_test_key' => $this->get_test_public_key(),
            'active_mode' => $this->active_mode,
        ) );
    }

	/**
	 * Ğ¡onnect to Stripe service.
	 *
     * @param array $args Stripe arguments to connect.
	 * @version 0.1.13
	 */
	public function connect( $args ): array {
		if ( empty( $args ) || $args['integration_id'] !== self::OPTIONAL_KEY ) {
			$is_connected = false;
		}

		$is_connected = $is_connected ?? $this->is_connected();

		return [
			'is_connected' => $is_connected,
			'active_mode' => $this->active_mode
		];
	}

    /**
     * Disconnect from Stripe.
     *
     * @since 0.1.13
     */
    public function disconnect(): bool {
        $this->secret_test_key = '';
        $this->secret_key = '';
        $this->public_key = '';
        $this->public_test_key = '';
        return $this->update_options();
    }


    /**
	 * Conncetion status.
	 *
     * @since 0.1.0
     */
    public function is_connected(): bool {
        return ! empty( $this->get_secret_key() );
    }

    /**
     * Connection status by mode.
     *
	 * @since   0.1.0
	 * @version 0.1.13
	 *
     * @param $mode
     * @return bool
     */
    public function is_mode_connected( $mode ) {
        return ! empty( 'live' === $mode ? $this->get_live_secret_key() : $this->get_test_secret_key() );
    }

	/**
	 * @since   0.1.4
	 * @version 0.1.13
	 */
	public function has_keys(): bool {
		return ( $this->get_live_secret_key() && $this->get_live_public_key() )
			|| ( $this->get_test_secret_key() && $this->get_test_public_key() );
	}

	/**
	 * @since 0.1.0
	 * @version 0.1.4
	 */
	public function is_test_mode(): bool {
		return 'test' === $this->active_mode;
	}

    /**
	 * @since   0.1.0
	 * @version 0.1.13
     */
	public function toggle_mode( string $mode ) {
		if (
			$this->{"get_{$mode}_secret_key"}()
			&& $this->{"get_{$mode}_public_key"}()
		) {
			$this->active_mode = $mode;
			$this->update_options();
		}

		return [ 'active_mode' => $this->active_mode ];
    }

    /**
     * @version 0.1.23
     */
    public function get_form_fields(): string {

        $already_connected = function () {
            ?>
            <h3>
                <?php esc_html_e( 'You are already connected to Stripe', 'north-commerce' ); ?>
            </h3>
            <p>
                <?php
                $account_name = $this->get_account_name();
                if ( $account_name ) {
                    esc_html_e( 'Current account: ', 'north-commerce' );
                    echo esc_html( $account_name );
                }
                ?>
            </p>
            <?php
        };

        $await_connection = function () {
            $state = urlencode( get_admin_url() . 'admin.php?page=north-commerce-integration&stripe-connect' );

			?>
			<h3>
				<?php esc_html_e( 'Connect to Stripe', 'north-commerce' ); ?>
			</h3>
			<p>
				<?php esc_html_e( 'Connect your Stripe account by clicking the button below.', 'north-commerce' ); ?>
			</p>
			<a
				href="https://connect.stripe.com/oauth/authorize?response_type=code&amp;client_id=ca_H6nPbsHSt2jYFVlOaHX8t9dTMVrcd0t3&amp;scope=read_write&state=<?php echo $state; ?>"
				class="connect-button stripe"
				>
				<span>
					<?php esc_html_e( 'Connect with Stripe', 'north-commerce' ); ?>
				</span>
			</a>
			<?php
        };

		ob_start();

		if ( $this->is_connected() ) {
            $already_connected();
		} else {
            $await_connection();
		}

		?>
		<input type="hidden" name="integration_id" value="<?php echo self::OPTIONAL_KEY; ?>">
		<?php

		return ob_get_clean();

    }

    /**
     * Create payment plan or subscription in Stripe.
     *
     * @version 0.1.21
     *
     * @param $data Checkout form data or Product object data
     */
    public function create_plan( $data ):bool {
        do_action( 'north-commerce/stripe/plan/create/before', $data );

        $product_id = $data['product_id'] ?? $data['id'];

		$product_model = new ProductModel();
		$product = $product_model->get_by_id( $product_id, [
			'columns' => [ 'id', 'id_salt' ],
			'expand' => ''
		] );

        $args = array();
        $args_bump = array();
        $product_name = $data['product_name'] ?? $data['name'];
        $product_price = floatval( $data['product_price'] ?? $data['base_price'] );
        $product_type = $data['product_type']['slug'] ?? $data['product_type'];

        $payment_detail = $data['payment_detail'] ?? null;
        $product_frequency = $data['product_frequency'] ?? $payment_detail['payment_frequency']['slug'];
        $product_frequency = 'ly' === substr( $product_frequency, -2 ) ? substr( $product_frequency, 0, -2 ) : $product_frequency;

        $need_bump = isset( $data['reload_bump'] );

        try {

			if ( 'subscription' === $product_type ) {
                $plan_id = $product['id_salt']
                    ? $product_id . '_' . $product['id_salt']
                    : $product_id;

                $args = [
					'id' => 'plan_' . $plan_id,
                    'currency' => strtolower( North_Commerce_Settings::get_currency_code() ),
                    'interval' => $product_frequency,
                    'product' => [ 'name' => $product_name ],
				];

                if ( $need_bump ) {
                    $args_bump = [
                        'id' => 'plan_bump_' . $plan_id,
                        'currency' => strtolower( North_Commerce_Settings::get_currency_code() ),
                        'interval' => $data['bump_frequency'] ?? '',
                        'product' => [ 'name' => $product_name . ' (bump)' ],
                    ];
                }

				if (
					filter_var( $data['is-first-period'] ?? null, FILTER_VALIDATE_BOOLEAN )
					&& floatval( $data['product_start_price_sub'] ?? null ) > 0
				) {
					$first_period_payment = $data['product_start_price_sub'];
				}

				if (
					isset( $payment_detail )
					&& $payment_detail['has_first_period_payment']
					&& $payment_detail['first_period_payment']
				) {
					$first_period_payment = $payment_detail['first_period_payment'];
				}

				if ( isset( $first_period_payment ) ) {
					$args['billing_scheme'] = 'tiered';
					$args['tiers_mode'] = 'graduated';
					$args['tiers'] = [
						[
							'up_to' => 1,
							'unit_amount' => round( floatval( $first_period_payment ) * 100, 2 ),
						],
						[
							'up_to' => 'inf',
							'unit_amount' => round( $product_price * 100, 2 ),
						],
					];
				} else {
					$args['amount'] = round( $product_price * 100, 2 );
				}

                if ( $need_bump ) {
                    if ( ! empty( $data['bump_start_price_sub'] ) ) {
                        $bump_start_price = round( floatval( $data['bump_start_price_sub'] ) * 100, 2 );
                        $args_bump['billing_scheme'] = 'tiered';
                        $args_bump['tiers_mode'] = 'graduated';
                        $args_bump['tiers'] = [
                            [
                                'up_to' => 1,
                                'unit_amount' => $bump_start_price,
                            ],
                            [
                                'up_to' => 'inf',
                                'unit_amount' => isset( $data['bump_price'] ) ? round( floatval( $data['bump_price'] ) * 100, 2 ) : 0,
                            ],
                        ];
                    } else {
                        $args_bump['amount'] = isset( $data['bump_price'] ) ? round( floatval( $data['bump_price'] ) * 100, 2 ) : 0;
                    }
                }

            }

			if ( 'payment-plan' === $product_type ) {

                $product_payment_number = intval( $data['product_payment_number'] ?? $payment_detail['num_payments'] );
                $payment_number = 0 !== $product_payment_number ? $product_payment_number : 1;
				$bump_payment_number = intval( $data['bump_payment_number'] ?? null ) !== 0 ? intval( $data['bump_payment_number'] ) : 1;

                $payment_price = round( $product_price / $payment_number, 2 ) * 100;

                $plan_id = $product['id_salt']
                    ? $product_id . '_' . $product['id_salt']
                    : $product_id;

                $args = [
					'id' => 'plan_' . $plan_id,
                    'currency' => strtolower( North_Commerce_Settings::get_currency_code() ),
                    'interval' => $product_frequency,
                    'product' => [ 'name' => $product_name ],
                ];
                $args_bump = array();

                if ( $need_bump ) {
                    $args_bump = [
                        'id' => 'plan_bump_' . $plan_id,
                        'currency' => strtolower( North_Commerce_Settings::get_currency_code() ),
                        'interval' => $data['bump_frequency'],
                        'product' => [ 'name' => $product_name . ' (bump)' ],
                    ];
                }

				if (
                    filter_var( $data['is-first-payment'] ?? null, FILTER_VALIDATE_BOOLEAN )
					&& floatval( $data['product_start_price'] ?? null ) > 0
				) {
					$first_payment = floatval( $data['product_start_price'] );
				}

				if (
					isset( $payment_detail )
					&& (bool) $payment_detail['has_first_payment']
					&& $payment_detail['first_payment']
				) {
					$first_payment = floatval( $payment_detail['first_payment'] );
				}

                if ( isset( $first_payment ) ) {
					$start_price = round( $first_payment * 100, 2);
					$left_price = $product_price - $first_payment;
					$args['billing_scheme'] = 'tiered';
					$args['tiers_mode'] = 'graduated';
					$args['tiers'] = [
						[
							'up_to' => 1,
							'unit_amount' => $start_price,
						],
						[
							'up_to' => 'inf',
							'unit_amount' => round( ( $left_price / $payment_number ), 2 ) * 100,
						],
					];
                } else {
                    $args['amount'] = $payment_price;
                }

                if ( $need_bump ) {
                    if ( ! empty( $data['bump_start_price'] ) ) {
                        $bump_start_price = round( floatval($data['bump_start_price'] ) * 100, 2);
                        $bump_left_price = floatval( $data['bump_price'] ) - floatval( $data['bump_start_price'] );
                        $args_bump['billing_scheme'] = 'tiered';
                        $args_bump['tiers_mode'] = 'graduated';
                        $args_bump['tiers'] = [
                            [
                                'up_to' => 1,
                                'unit_amount' => $bump_start_price,
                            ],
                            [
                                'up_to' => 'inf',
                                'unit_amount' => round( ( $bump_left_price / $bump_payment_number ), 2 ) * 100,
                            ],
                        ];
                    } else {
                        $bump_payment_price = round( ( floatval( $data['bump_price'] ) ) / $bump_payment_number, 2 ) * 100;
                        $args_bump['amount'] = $bump_payment_price;
                    }
                }

            }

			foreach ( [ 'live', 'test' ] as $mode ) {
				if ( ! $this->is_mode_connected( $mode ) ) {
					continue;
				}

				$stripe = new StripeClient( $this->{'get_' . $mode . '_secret_key'}() );

				$response = $stripe->plans->create( $args );
				if ( $need_bump ) {
					$response = $stripe->plans->create( $args_bump );
				}
			}

        } catch ( Exception $e ) {
            do_action( 'north-commerce/stripe/plan/create/failed', $product_id, $data, $need_bump );
            return false;
        }

        do_action( 'north-commerce/stripe/plan/create/success', $product_id, $data, $need_bump );

        return true;
    }

	/**
	 * Delete payment plan in Stripe.
	 *
	 * @since   0.1.0
	 * @version 0.1.13.3
	 *
	 * @param  $product_id
	 * @throws \NorthCommerceStripe\Exception\ApiErrorException
	 */
	public function delete_plan( $product_id ) {

		if ( ! $this->is_connected() ) {
			// Bailout.
			return;
		}

		$product_model = new ProductModel();
		$product = $product_model->get_by_id( $product_id, [
			'columns' => [ 'id', 'id_salt' ],
			'expand' => ''
		] );

		foreach ( [ 'live', 'test' ] as $mode ) {
			if ( ! $this->is_mode_connected( $mode ) ) {
				continue;
			}

			$stripe = new StripeClient( $this->{'get_' . $mode . '_secret_key'}() );

            $plan_id = $product['id_salt']
                ? $product_id . '_' . $product['id_salt']
                : $product_id;

			try {
				$plan = $stripe->plans->retrieve( 'plan_' . $plan_id, [] );
				$response = $stripe->plans->delete( 'plan_' . $plan_id, [] );
				$response = $stripe->products->delete( $plan->product, [] );
			} catch ( Exception $e ) {
				$error_message = $e->getMessage();
			}

			try {
				$plan = $stripe->plans->retrieve( 'plan_bump_' . $plan_id, [] );
				$response = $stripe->plans->delete( 'plan_bump_' . $plan_id, [] );
				$response = $stripe->products->delete( $plan->product, [] );
			} catch ( Exception $e ) {
				$error_message = $e->getMessage();
			}
		}

		do_action( 'nc/stripe/plan/deleted', $product_id );

    }

    /**
     * @since   0.1.3
     * @version 0.1.13.3
     */
    public function cancel_subscription( $subscription_id ) {

        if ( ! $this->is_connected() ) {
            // Bailout.
            return;
        }

        $stripe = $this->stripe_client();

        try {
            $subscription = $stripe->subscriptions->retrieve( $subscription_id );
            if ( 'active' === $subscription->status ) {
                $result = $stripe->subscriptions->cancel( $subscription_id );
            }
        } catch ( Exception $e ) {
            $error = $e->getJsonBody()['error'] ?? [];
            return [
                'result' => 'error',
                'data' => [
                    'code' => $error['code'] ?? '',
                    'message' => $error['message'] ?? '',
                ],
            ];
        }

        return [
            'result' => 'success',
            'subscription_status' => $result->status,
        ];

    }

    /**
     * @since   0.1.3
     * @version 0.1.13.3
     */
    public function update_subscription_card( $subscription_id ) {

        $secret_key = $this->get_secret_key();

        if ( ! $secret_key || empty( $_POST['data']['stripe_token']) ) {
            // Bailout.
            return [
                'result' => 'error',
                'message' => 'Internal error',
            ];;
        }

        $this->stripe = $this->stripe_client();

        try {
            $subscription = $this->stripe->subscriptions->retrieve( $subscription_id );
            if ( 'active' === $subscription->status ) {
                $customer_id = $subscription->customer;
                $new_card = $this->stripe->customers->createSource( $customer_id, [ 'source' => $_POST['data']['stripe_token'] ] );
                $result = $this->stripe->subscriptions->update( $subscription_id, [ 'default_payment_method' => $new_card->id ] );
            }
        } catch ( Exception $e ) {
            $error = $e->getJsonBody()['error'] ?? [];
            return [
                'result' => 'error',
                'message' => $error['message'] ?? '',
            ];
        }

        return [
            'result' => 'success',
        ];

    }

    /**
     * @since   0.1.3
     * @version 0.1.13.3
     */
    public function upgrade_subscription( $subscription_id, $new_subscription_price ) {

        $secret_key = $this->get_secret_key();

        if ( ! $secret_key ) {
            // Bailout.
            return [
                'result' => 'error',
                'message' => 'Internal error',
            ];
        }

        $this->stripe = $this->stripe_client();

        try {
            $subscription = $this->stripe->subscriptions->retrieve( $subscription_id );
            if ( 'active' === $subscription->status ) {
                $subscription_item = $subscription->items->data[0];
                $product_id = $subscription_item->price->product;

                $new_price = $new_subscription_price * 100;

                $desired_price_id = '';
                $available_prices = $this->stripe->prices->all( [ 'product' => $product_id ] );
                foreach ( $available_prices->data as $price_obj ) {
                    if (
                        ! $desired_price_id
                        && $price_obj->unit_amount === $new_price
                    ) {
                        $desired_price_id = $price_obj->id;
                    }
                }
                if ( ! $desired_price_id ) {
                    $existing_plan = $subscription_item->plan;
                    $created = $this->stripe->prices->create( [
                        'unit_amount' => $new_price,
                        'currency' => $existing_plan->currency,
                        'recurring' => [ 'interval' => $existing_plan->interval ],
                        'product' => $product_id,
                    ] );
                    $desired_price_id = $created->id;
                }

                $this->stripe->subscriptions->update( $subscription_id, [
                    'items' => [
                        [
                            'id' => $subscription_item->id,
                            'price' => $desired_price_id,
                        ],
                    ],
                ] );
            }
        } catch ( Exception $e ) {
            $error = $e->getJsonBody()['error'] ?? [];
            return [
                'result' => 'error',
                'message' => $error['message'] ?? '',
            ];
        }

        return [
            'result' => 'success',
            'product_price' => number_format( $new_price / 100, 2 ),
        ];

    }

    /**
     * @since   0.1.3
     * @version 0.1.13.3
     */
    public function get_subscription_invoices( $order_id ) {

        $stripe = $this->stripe_client();

        $subscription_id = get_option( "nc/order_{$order_id}/transaction_id" );

        try {
            $invoices = $stripe->invoices->all( [ 'subscription' => $subscription_id ] );
        } catch ( Exception $e ) {
        }

        return $invoices->data ?? false;

    }

    /**
     * @since   0.1.0
     * @version 0.1.3
     */
    public function recreate_plans() {

        if ( ! $this->is_connected() ) {
            // Bailout.
            return;
        }

        $product_model = new ProductModel();

        $payment_plan_id = $product_model->get_type_by_slug( 'payment-plan' )['id'];
        $subscription_id = $product_model->get_type_by_slug( 'subscription' )['id'];

        $criteria = [
            'and',
            [ 'is', 'deleted', null ],
            [
                'or',
                [ 'eq', 'product_type_id', $payment_plan_id ],
                [ 'eq', 'product_type_id', $subscription_id ],
            ],
        ];

        $products = $product_model->list_all( $criteria );

        foreach ( $products as $product ) {
            $this->delete_plan( $product );
            $this->create_plan( $product );
        }

    }

	/**
     * Connect to Stripe
     *
     * @since 0.1.2
     */
    public function maybe_connect_via_oauth() {

        if (
			$this->is_connected()
			|| ! isset( $_GET['code'], $_GET['stripe-connect'] )
		) {
            // Bailout.
            return;
        }

        try {
			Stripe::setApiKey( 'sk_live_hlL3TWO6vS1YvzieS9JbBXU800MsWIY7Ni' );

            $response_live = OAuth::token( [
                'grant_type' => 'authorization_code',
                'code' => $_GET['code'],
            ] );

            Stripe::setApiKey( 'sk_test_chpSo9eXqSEsO9Q8dSc8K6tC006QYoVZsj' );

            $response_test = OAuth::token( [
                'grant_type' => 'refresh_token',
                'refresh_token' => $response_live->refresh_token,
            ] );

			$this->public_key = $response_live->stripe_publishable_key;
			$this->secret_key = $response_live->access_token;
			$this->public_test_key = $response_test->stripe_publishable_key;
			$this->secret_test_key = $response_test->access_token;
			$this->update_options();

        } catch ( Exception $e ) {
            $e->getMessage();
        }

        try {
            Stripe::setApiKey( $this->get_secret_key() );

            \NorthCommerceStripe\ApplePayDomain::create( [
                'domain_name' => isset( $_SERVER['SERVER_NAME'] ) ? sanitize_text_field( wp_unslash( $_SERVER['SERVER_NAME'] ) ) : '',
            ] );
        } catch ( Exception $e ) {
			$e->getMessage();
            // echo '<div class="north-error" style="display: block;">You won\'t be able to use apple pay until you add your apple developer merchant-id. Follow <a href="https://stripe.com/docs/stripe-js/elements/payment-request-button#verifying-your-domain-with-apple-pay" target="_blank">this tutorial</a></div>';
        }

        ( new North_Commerce_Product() )->synchronize_payments_plans( $stripe = true, false );

    }

	/**
     * Get stripe account name.
	 *
	 * @since   0.1.2
	 * @version 0.1.13
     */
    public function get_account_name() {
        try {
            Stripe::setApiKey( $this->get_secret_key() );

            $akk = \NorthCommerceStripe\Account::retrieve();
            return $akk->settings->dashboard->display_name ? $akk->settings->dashboard->display_name : $akk->display_name;
        } catch ( Exception $e ) {
            echo '<div class="north-error" style="display: block;">' . esc_html( $e ) . '</div>';

            $headers = array('content-type: text/html');
            $message = 'Something wrong with your Stripe account. Check Your <a href="'. site_url() .'/wp-admin/admin.php?page=north-checkout-settings">Settings Tab</a>, please.';
            wp_mail( get_option( 'admin_email' ), 'North Comerce - Stripe Error', $message, $headers );
        }
    }

	/**
	 * Given a custom tables customer, either find or create a Stripe customer
	 */
	public function lookup_customer($customer) {
		$client = $this->stripe_client();
		$found = $client->customers->all(['email' => $customer['email'], 'limit' => 1]);
		if(count($found->data) == 1) {
			return $found->data[0];
		} else {
			return $client->customers->create([
				'email' => $customer['email'],
				'name' => "{$customer['first_name']} {$customer['last_name']}",
			]);
		}
	}

    /**
     * @since 0.1.13
     */
	public function stripe_client() {
		return new StripeClient( $this->get_secret_key() );
	}
}
