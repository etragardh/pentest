<?php
/**
 * Twilio integration service
 *
 *
 * @package  north-commerce/admin/core/integrations
 * @link     https://northcommerce.com/
 * @since    0.1.0
 * @version  0.1.4
 */
class North_Commerce_Twilio  implements North_Integration_Connectable {

    public const OPTIONAL_KEY = 'twilio_service';

	/**
	 * @var    string  $account_sid  Twilio client id.
	 * @since  0.1.0
	 */
    private $account_sid;

	/**
	 * @var    string  $auth_token   Twilio secret key.
	 * @since  0.1.0
	 */
    private $auth_token;

	/**
	 * @var    string  $twilio_phone  Twilio phone number.
	 * @since  0.1.0
	 */
    private $twilio_phone;

	/**
	 * @var    bool   $is_connected  Twilio connection status.
	 * @since  0.1.0
	 */
    private $is_connected;


    public function get_integration_label() : string {
        return 'Twilio';
    }

    /**
     * @since   0.1.0
     * @version 0.1.1
     */
    public function get_integration_icon() : string {
        return NORTH_COMMERCE_PLUGIN_DIR_URL . 'admin/images/integration-twilio.svg';
    }

    public function get_integration_description() : string {
        return 'SMS notifications.';
    }

    /**
     * Initialize the class and set its properties.
     *
     * @since 0.1.0
     */
    public function __construct() {

	    $arguments = get_option( self::OPTIONAL_KEY, array() );
        $this->account_sid = $arguments['account_sid'] ?? '';
        $this->auth_token = $arguments['auth_token'] ?? '';
        $this->twilio_phone = $arguments['twilio_phone'] ?? '';
        $this->is_connected = $arguments['enabled'] ?? false;

	}

    public function send_sms( $phone = null, $text = null ) {
        if ( $phone == null ) {
            return [
                'success' => false,
                'data' => 'Phone number can`t be empty.'
            ];
        }

        try {

            $client = new Twilio\Rest\Client( $this->account_sid, $this->auth_token );
            $client->messages->create( $phone, [
                'from' => $this->twilio_phone,
                'body' => $text ?? ''
            ] );

        } catch( Twilio\Exceptions\TwilioException $e ) {

            return [
                'success' => false,
                'data' => $e->getMessage()
            ];

        }

        return [ 'success' => true ];
    }

    public function update_options() {
        update_option( self::OPTIONAL_KEY, [
            'account_sid' => $this->account_sid,
            'auth_token' => $this->auth_token,
            'twilio_phone' => $this->twilio_phone,
            'enabled' => $this->is_connected
        ] );
    }

    /**
     * Connect to Twilio service.
     *
     * @since  0.1.0
     * @param  array  $args  Twilio arguments to connect.
     */
	public function connect( $args ) : array {

		if ( empty( $args ) || $args['integration_id'] !== self::OPTIONAL_KEY ) {
			return array('is_connected' => false);
		}

        $this->account_sid = ! empty( $args['account_sid'] ) ? $args['account_sid'] : $this->account_sid;
        $this->auth_token = ! empty( $args['auth_token'] ) ? $args['auth_token'] : $this->auth_token;
        $this->twilio_phone  = ! empty( $args['twilio_phone'] ) ? $args['twilio_phone'] : $this->twilio_phone;

        try {

            $client = new Twilio\Rest\Client( $this->account_sid, $this->auth_token );
            $accounts = $client->api->v2010->accounts->read( [], 20 );

            $this->is_connected = true;
            $this->update_options();

            return [
                'is_connected' => true,
            ];

        } catch( Twilio\Exceptions\TwilioException $e ) {
            return array(
                'is_connected' => false,
                'errors' => array($e->getMessage())
            );
        }
    }

	/**
	 * Twilio disconnect from service.
	 *
	 * @since 0.1.0
	 */
	public function disconnect() : bool {
        $this->is_connected = false;
        $this->update_options();
        return true;
    }

	/**
	 *  Disconnect from Twilio service.
	 *
	 * @since 0.1.0
	 */
    public function is_connected() : bool {
        return $this->is_connected;
    }

	/**
	 * @since 0.1.4
	 */
	public function has_keys() : bool {
		return $this->account_sid && $this->auth_token;
	}

    /**
     * Get form field fot integration tab
     */
    public function get_form_fields() : string {
        $fields = '<input type="hidden" name="integration_id" value="' . self::OPTIONAL_KEY .'" >';
        $fields .= '<div class="admin-popup-field">';
        $fields .= '<label for="account_sid">Account Sid</label>';
        $fields .= '<input type="text" name="account_sid" value="' . $this->account_sid . '" class="account_sid"></div>';
        $fields .= '<div class="admin-popup-field">';
        $fields .= '<label for="twilio_phone">Twilio Phone</label>';
        $fields .= '<input type="tel" name="twilio_phone" value="' . $this->twilio_phone .'" class="twilio_phone"></div>';
        $fields .= '<div class="admin-popup-field">';
        $fields .= '<label for="auth_token">Auth Token</label>';
        $fields .= '<input type="password" name="auth_token" value="' . $this->auth_token .'" class="auth_token"></div>';
        return $fields;
    }

}
