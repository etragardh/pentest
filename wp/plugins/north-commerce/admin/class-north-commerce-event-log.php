<?php

defined('ABSPATH') || exit;

/**
 * Action Scheduler controller class.
 *
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.21
 */
class North_Commerce_Event_Log extends North_Commerce_Admin_Base {

    private function time_elapsed_string($datetime, $full = false) {
        $now = new DateTime;
        $then = new DateTime($datetime);
        $diff = $now->diff($then);

        $isFuture = $now < $then;

        $diff->w = floor($diff->d / 7);
        $diff->d -= $diff->w * 7;

        $string = array(
            'y' => 'year',
            'm' => 'month',
            'w' => 'week',
            'd' => 'day',
            'h' => 'hour',
            'i' => 'minute',
            's' => 'second',
        );
        foreach ($string as $k => &$v) {
            if ($diff->$k) {
                $v = $diff->$k . substr($v, 0, 1);
            } else {
                unset($string[$k]);
            }
        }

        // Only get first 3 non-zero time elements
        $string = array_slice($string, 0, 3);

        return $string ? implode(' ', $string) . ($isFuture ? ' from now' : ' ago') : 'just now';
    }

    /**
     * Respond to pagination AJAX requests from frontend.
     *
     * @return void
     */
    function pagination_callback() {
        // Check nonce
        /*$result = check_ajax_referer('north_actions_pagination_nonce', 'nonce');*/

        $group_id = sanitize_text_field($_POST['group_id']);
        $status = sanitize_text_field($_POST['status']);

        if ( ! in_array( $status, [ 'pending', 'complete', 'failed', 'in-progress' ] ) ) {
            die();
        }

        $page = intval($_POST['page']);
        $limit = intval($_POST['limit']);

        $actions_per_page = intval($_POST['actions_per_page']);

        if ($page < 1) {
            $page = 1;
        }

        if ($actions_per_page < 1) {
            $actions_per_page = 5; // Default to 5 per page
        }

        $this->print_status_tab($status, $page, $limit);
    }


    /**
     * Print a tab to list actions/statuses on the Action Scheduler settings page.
     *
     * @param [type] $status
     * @param integer $page
     * @param integer $limit
     * @return void
     */
    function print_status_tab($status, $page = 1, $limit = 10) {
        echo '<div class="tab" data-status="'.$status.'">';
        echo '<h2>' . ucwords($status) . '</h2>';
        echo '<table style="width: 100%">';
        echo '<tr>';
        echo '<th style="text-align: left;">Hook</th>';
        echo '<th style="text-align: left;">Scheduled (GMT)</th>';
        echo '<th style="text-align: left;">Priority</th>';
        echo '<th style="text-align: left;"></th>';
        echo '</tr>';

        global $wpdb;

        $offset = ($page - 1) * $limit;

        $rows = $wpdb->get_results(
            $wpdb->prepare(
                "SELECT action_id, hook, scheduled_date_gmt, priority, args, extended_args
                    FROM {$wpdb->prefix}actionscheduler_actions
                    WHERE group_id = %d AND status = %s
                    ORDER BY scheduled_date_gmt DESC
                    LIMIT %d, %d",
                2,
                $status,
                $offset,
                $limit
            )
        );

        // If there are no rows, show a message
        if ( count( $rows ) == 0 ) {
            echo '<tr>';
            echo '<td colspan="4">No actions found.</td>';
            echo '</tr>';
            echo '</table>';

            return;
        }

        foreach ($rows as $row) {
            $logs = $wpdb->get_results(
                $wpdb->prepare(
                    "SELECT message, log_date_gmt FROM {$wpdb->prefix}actionscheduler_logs WHERE action_id = %d",
                    $row->action_id
                )
            );

            if ($row->extended_args) {
                $args_text = $row->extended_args;
            } else {
                $args_text = $row->args;
            }

            //var_dump($args_text);;
            $logs_text = json_encode($logs);

            // use time_elapsed_string() to get a human readable time
            $date = $this->time_elapsed_string($row->scheduled_date_gmt);

            if (strlen($row->hook) > 30) {
                $hook = substr($row->hook, 0, 30) . "...";
            } else {
                $hook = $row->hook;
            }

            // snake case to title case
            $hook = ucwords(str_replace("_", " ", $hook));

            echo '<tr>';
            echo '<td><b>' . $hook . '</b></td>';
            echo '<td>' . $date . '</td>';
            echo '<td>' . $row->priority . '</td>';
            echo '<td><button class="show_more btn" data-args="' . esc_attr($args_text) . '" data-logs="' . esc_attr($logs_text) . '" data-hook="' . esc_attr($row->hook) . '" data-time="' . esc_attr($this->time_elapsed_string($row->scheduled_date_gmt)) . '">Show more</button></td>';
            echo '</tr>';
        }

        echo '</table>';

        // Output pagination
        $total_actions = $wpdb->get_var(
            $wpdb->prepare(
                "SELECT COUNT(*) FROM {$wpdb->prefix}actionscheduler_actions WHERE group_id = %d AND status = %s",
                2,
                $status
            )
        );

        $total_pages = ceil( $total_actions / $limit );

        if ($total_pages > 1 ) {
            echo '<div class="pagination">';
            for ($i = 1; $i <= $total_pages; $i++) {
                echo '<button class="btn small page-numbers" data-status="' . $status . '" data-page="' . $i . '">' . $i . '</button>';
            }
            echo '</div>';
        }


        echo '</div>';
    }
}
