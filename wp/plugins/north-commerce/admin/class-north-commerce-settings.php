<?php
/**
 * Settings controller class.
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.25
 */
class North_Commerce_Settings {

	/**
	 * @version 0.1.13
	 */
    public static function get_warehouse_country() {
        return get_option( 'nc/warehouse/country' ) ?: 'US';
    }

	/**
	 * @version 0.1.13
	 */
    public static function get_sale_restriction() {
        return get_option( 'nc/restriction/sale' ) ?: 'all';
    }

	/**
	 * @version 0.1.13
	 */
    public function list_countries_excepted_for_sale(): array {
        return get_option( 'nc/countries/sale/excepted' ) ?: array();
    }

	/**
	 * @version 0.1.13
	 */
    public function list_countries_specific_for_sale(): array {
        return get_option( 'nc/countries/sale/specific' ) ?: array();
    }

	/**
	 * @version 0.1.13
	 */
    public static function get_shipping_restriction() {
        return get_option( 'nc/restriction/shipping' ) ?: '';
    }

	/**
	 * @version 0.1.13
	 */
    public function list_countries_specific_for_shipping() {
        return get_option( 'nc/countries/shipping/specific' ) ?: array();
    }

	/**
	 * @version 0.1.13
	 */
    public function get_customer_location_determination() {
        return get_option( 'nc/customer-location-determination' ) ?: '';
    }

    public static function get_current_time_zone() {
        return get_option( 'time_zone' ) ?: 'America/New_York';
    }

	/**
	 * @version 0.1.24
	 */
    public static function get_current_unit_system():string {
        return get_option( 'unit_system' ) ?: 'Imperial';
    }

	/**
	 * @version 0.1.24
	 */
	public static function get_weight_unit():string {
		return get_option( 'nc/weight_unit' ) ?: 'Kg';
	}

	/**
	 * @version 0.1.13
	 */
	public static function get_currency_code() {
		return get_option( 'nc/currency_code' ) ?: 'USD';
	}

	public static function get_currency_symbol() {
		$currency_code = self::get_currency_code();
		$symbols = nc_list_currency_symbols();
		return $symbols[ $currency_code ] ?? '$';
	}

	/**
	 * @since 0.1.10
	 */
	public static function get_cart_drawer_display_status() {
		return get_option( 'nc_cart_drawer_status' ) ?: 'enabled';
	}

	/**
	 * Format price for output.
	 *
	 * @version 0.1.24
	 */
	public static function formatted_price(
		$price,
		$wrapped = true,
		$currency = null
	): string {
		$currency = $currency ?? self::get_currency_symbol();
		$price_decimals = intval( self::get_number_of_decimals() );
		$decimal  = self::get_decimal_separator();
		$thousand = self::get_thousands_separator();
		$position = self::get_currency_position();

		$price_value = floatval( $price );
		$sign = $price_value < 0 ? '-' : '';
		$price_formatted = number_format( abs($price_value), $price_decimals, $decimal, $thousand );

		if ( $wrapped ) {
			$price_wrapper = function ( $price ) {
				return '<span class="value">' . $price . '</span>';
			};
			$currency_wrapper = function ( $currency ) {
				return $currency ? '<span class="currency">' . $currency . '</span>' : '';
			};

			$price_formatted = $price_wrapper( $price_formatted );
			$currency = $currency_wrapper( $currency );
		}

		switch ( $position ) {
			case 'right':
				return $sign . $price_formatted . $currency;

			case 'right_space':
				return $sign . $price_formatted . ' ' . $currency;

			case 'left_space':
				return $sign . $currency . ' ' . $price_formatted;

			default:
				return $sign . $currency . $price_formatted;
		}
	}

	/**
	 * Format date/time for output.
	 *
	 * @since   0.1.24
	 * @version 0.1.25
	 */
	public static function formatted_datetime(
		string $datetime,
		array $options = []
	): string {
		$separator = $options['separator'] ?? ', ';
		$date = self::convert_datetime_into_date( $datetime, $options );
		$time = self::convert_datetime_into_time( $datetime, $options );
		return $date . $separator . $time;
	}

	/**
	 * Format SQL Date for outout.
	 *
	 * @since   0.1.24
	 * @version 0.1.25
	 */
	public static function convert_datetime_into_date(
		string $datetime,
		array $options = []
	): string {
		$date_format = $options['date_format'] ?? get_option( 'date_format' );
		$default_timezone = date_default_timezone_get();
		$nc_time_zone = self::get_current_time_zone();

		$dt = new DateTime( $datetime, new DateTimeZone( $default_timezone ) );
		$dt->setTimezone( new DateTimeZone( $nc_time_zone ) );
		return $dt->format( $date_format );
	}

	/**
	 * Format SQL Time for outout.
	 *
	 * @since   0.1.24
	 * @version 0.1.25
	 */
	public static function convert_datetime_into_time(
		string $datetime,
		array $options = []
	): string {
		$time_format = $options['time_format'] ?? get_option( 'time_format' );
		$default_timezone = date_default_timezone_get();
		$nc_time_zone = self::get_current_time_zone();

		$dt = new DateTime( $datetime, new DateTimeZone( $default_timezone ) );
		$dt->setTimezone( new DateTimeZone( $nc_time_zone ) );
		return $dt->format( $time_format );
	}

	/**
	 * @deprecated 0.1.10
	 */
	public function get_active_selling_locations() {
		$sale_restriction = self::get_sale_restriction();
		$countries_list = ( new \NorthCommerce\Models\CountryModel() )->get_formated_list();

		$result = [
			'locations_type' => $sale_restriction,
			'countries' => array_keys( $countries_list )
		];

		if ( 'except' === $sale_restriction ) {
			$except_locations = $this->list_countries_excepted_for_sale();
			$result['countries'] = array_diff( $result['countries'], $except_locations );
		}

		if ( 'specific' === $sale_restriction ) {
			$result['countries'] = $this->list_countries_specific_for_sale();
		}

		return $result;
	}

	/**
	 * @version 0.1.13
	 */
	public static function get_thousands_separator() {
        return get_option( 'nc/thousands_separator' ) ?: ',';
    }

	/**
	 * @version 0.1.13
	 */
	public static function get_decimal_separator() {
		return get_option( 'nc/decimal-separator' ) ?: '.';
	}

	public static function get_currency_position() {
		return get_option( 'currency_position' ) ?: 'left';
	}

	public static function get_number_of_decimals() {
		return get_option( 'nc/decimals-number' ) ?: '2';
	}

	/**
	 * @version 0.1.13
	 */
	public static function set_warehouse_country( $value ) {
		update_option( 'nc/warehouse/country', sanitize_text_field( $value ) );
	}

	/**
	 * @version 0.1.13
	 */
	public static function set_sale_restriction( $value ) {
		update_option( 'nc/restriction/sale', sanitize_text_field( $value ) );
	}

	/**
	 * @version 0.1.13
	 */
	public static function set_countries_excepted_for_sale( $value ) {
		update_option( 'nc/countries/sale/excepted', $value );
	}

	/**
	 * @version 0.1.13
	 */
	public static function set_countries_specific_for_sale( $value ) {
		update_option( 'nc/countries/sale/specific', $value );
	}

	/**
	 * @version 0.1.13
	 */
	public static function set_shipping_restriction( $value ) {
		update_option( 'nc/restriction/shipping', $value );
	}

	/**
	 * @version 0.1.13
	 */
	public static function set_countries_specific_for_shipping( $value ) {
		update_option( 'nc/countries/shipping/specific', $value );
	}

	/**
	 * @version 0.1.13
	 */
	public static function set_customer_location_determination( $value ) {
		update_option( 'nc/customer-location-determination', sanitize_text_field( $value ) );
	}

	/**
	 * @version 0.1.13
	 */
	public static function set_time_zone( $value ) {
		update_option( 'time_zone', sanitize_text_field( $value ) );
	}

	public static function set_current_unit_system( $value ) {
		update_option( 'unit_system', $value );
	}

	/**
	 * @version 0.1.13
	 */
	public static function set_weight_unit( $value ) {
		update_option( 'nc/weight_unit', sanitize_text_field( $value ) );
	}

	/**
	 * @version 0.1.13
	 */
    public static function set_currency_code( $currency_code ) {
        update_option( 'nc/currency_code', sanitize_text_field( $currency_code ) );
    }

	/**
	 * @version 0.1.13
	 */
    public static function set_thousands_separator( $value ) {
        update_option( 'nc/thousands_separator', sanitize_text_field( $value ) );
    }

	/**
	 * @version 0.1.13
	 */
    public static function set_decimal_separator( $value ) {
        update_option( 'nc/decimal-separator', sanitize_text_field( $value ) );
    }

	/**
	 * @version 0.1.13
	 */
    public static function set_currency_position( $value ) {
        update_option( 'currency_position', sanitize_text_field( $value ) );
    }

    public static function set_number_of_decimals( $value ) {
        update_option( 'nc/decimals-number', sanitize_text_field( $value ) );
    }

	/**
	 * @version 0.1.10
	 */
	public static function set_tax_percentage( $value ) {
		update_option( 'north-commerce/tax_percentage', $value );
	}

	/**
	 * @version 0.1.13
	 */
	public static function get_tax_percentage() {
		return get_option( 'north-commerce/tax_percentage' ) ?? 0;
	}

	/**
	 * @version 0.1.21
	 */
	public static function get_tax_is_vat() {
		return get_option( 'north-commerce/tax_is_vat' ) ?: 'disabled';
	}

	/**
	 * @version 0.1.21
	 */
	public static function get_vat_is_incl() {
		return get_option( 'north-commerce/vat_is_incl' ) ?: 'disabled';
	}

	/**
	 * @version 0.1.21
	 */
	public static function get_sales_tax_is_visible() {
		return get_option( 'north-commerce/sales_tax_is_visible' ) ?: 'disabled';
	}

	/**
	 * @version 0.1.21
	 */
	public static function set_tax_is_vat( $status ) {
		update_option( 'north-commerce/tax_is_vat', $status );
	}

	/**
	 * @version 0.1.21
	 */
	public static function set_vat_is_incl( $status ) {
		update_option( 'north-commerce/vat_is_incl', $status );
	}

	/**
	 * @version 0.1.21
	 */
	public static function set_sales_tax_is_visible( $status ) {
		update_option( 'north-commerce/sales_tax_is_visible', $status );
	}

	/**
	 * @since 0.1.10
	 */
	public function set_menu_cart_icon_name( $icon_name ) {
		update_option( 'north-commerce/menu-cart-icon/name', $icon_name );
		$this->_set_menu_cart_icon_html( $icon_name );
	}

	/**
	 * @since 0.1.10
	 */
	private function _set_menu_cart_icon_html() {
		$stored_name = $this->get_menu_cart_icon_name();

		$icons_folder = NORTH_COMMERCE_PLUGIN_DIR_PATH . 'admin/templates/settings/cart-icons';
		$default_icons = glob( $icons_folder . '/*.svg' );
		$uploaded_icons = glob( $icons_folder . '/upload/*.svg' );
		$icons = array_merge( $default_icons, $uploaded_icons );

		$matched_icons = array_filter( $icons, function( $icon ) use ( $stored_name )  {
			return basename( $icon, '.svg' ) === $stored_name;
		});

		$icon = reset( $matched_icons ) ?? null;

		if ( ! file_exists( $icon ) ) {
			return;
		}

		$icon_html = file_get_contents( $icon );
		$icon_html = trim( $icon_html );

		if ( $first_char = strpos( $icon_html, '<svg ') ) {
			$icon_html = substr( $icon_html, $first_char );
		}

		update_option( 'north-commerce/menu-cart-icon/html', $icon_html );
	}

	/**
	 * @since 0.1.10
	 */
	public static function get_menu_cart_icon_name() {
		return get_option( 'north-commerce/menu-cart-icon/name' ) ?: '';
	}

	/**
	 * @since 0.1.10
	 */
	public static function get_menu_cart_icon_html() {
		return get_option( 'north-commerce/menu-cart-icon/html' ) ?: '';
	}

	/**
	 * @since 0.1.10
	 */
	public function set_menu_cart_icon_colors( $colors ) {
		update_option( 'north-commerce/menu-cart-icon/colors', $colors );
	}

	/**
	 * @since 0.1.10
	 */
	public static function get_menu_cart_icon_colors() {
		return get_option( 'north-commerce/menu-cart-icon/colors' ) ?: '';
	}

	/**
	 * @since 0.1.10
	 */
    public static function set_cart_drawer_display_status($status) {
	    update_option('nc_cart_drawer_status', $status);
    }

	/**
	 * @since 0.1.19
	 */
	public static function set_company_name( string $name ) {
		update_option( 'north-commerce/company-name', $name );
	}

	/**
	 * @since 0.1.19
	 */
	public static function get_company_name(): string {
		return get_option( 'north-commerce/company-name' ) ?: get_bloginfo( 'name' );
	}

	/**
	 * @since 0.1.19
	 */
	public static function get_company_logo_name() {
		return get_option( 'north-commerce/logo-image/name' ) ?: '';
	}

	/**
	 * @since 0.1.19
	 */
	public static function get_company_logo_url( $logo_name = null ) {
		$name = $logo_name ?? self::get_company_logo_name();

		if(!$name) {
			// default image
			return plugin_dir_url( __FILE__ ).'/templates/settings/logo-images/nc-logo-red.png';
		}

		// custom logo
		return WP_CONTENT_URL . "/uploads/north-commerce-logo-images/{$name}";
	}

	/**
	 * @since 0.1.20
	 */
    public static function set_scheduler_status( $status, $type ) {
		if ( ! in_array( $type, [ 'email', 'sms', 'webhook', 'coupon' ] ) ) {
			return;
		}

	    update_option( 'nc_' . $type . '_scheduler_status', $status );
    }

	/**
	 * @since   0.1.20
	 * @version 0.1.24
	 */
	public static function get_scheduler_status( $type ) {
		if ( ! in_array( $type, [ 'email', 'sms', 'webhook', 'coupon' ] ) ) {
			return;
		}

		return (bool) get_option( 'nc_' . $type . '_scheduler_status' );
	}

	/**
	 * @since 0.1.10
	 */
	public static function set_company_logo_name( $image_name ) {
		update_option( 'north-commerce/logo-image/name', $image_name );
	}

	/**
	 * @since 0.1.22
	 */
	public static function upload_company_logo() {

		if (!isset($_FILES['company-logo-image']) || $_FILES['company-logo-image']['error'] != UPLOAD_ERR_OK) {
			return false;
		}

		$file = $_FILES['company-logo-image'];

		$upload_dir = wp_upload_dir();
		$target_dir = $upload_dir['basedir'] . '/north-commerce-logo-images/';

		if (!file_exists($target_dir)) {
			mkdir($target_dir, 0755, true);
		}

		$target_file = $target_dir . basename($file['name']);

		if (!move_uploaded_file($file['tmp_name'], $target_file)) {
			return false;
		}

		update_option('north-commerce/logo-image/name', basename($file['name']));

	}


	public static function delete_company_logo() {

		$icon_name = self::get_company_logo_name();
		if (!$icon_name) {
			return false;
		}

		$icon_file = WP_CONTENT_DIR . "/uploads/north-commerce-logo-images/" . $icon_name;

		if (file_exists($icon_file)) {
			unlink($icon_file);
		}

		update_option('north-commerce/logo-image/name', '');

	}

    public static function maybe_create_pages() {
	    if ( empty( get_option( 'north_commerce_maybe_create_page' ) ) ) {
		    self::create_pages();
	    }
    }

	public static function nc_get_page_id( $page ) {
		$page_id = get_option( 'north_commerce_' . $page . '_page_id' );
		$page_id = apply_filters( 'north_commerce_get_' . $page . '_page_id', $page_id );
		return $page_id ? absint( $page_id ) : -1;
	}

	public static function nc_get_page_url( $page ) {
		$page_id = self::nc_get_page_id( $page );
		return get_permalink( $page_id ) ?: '';
	}

    public static function nc_set_page_id( $page, $page_id ) {
	    $page_id = apply_filters( 'north_commerce_set_' . $page . '_page_id', $page_id );
	    update_option( 'north_commerce_' . $page . '_page_id', $page_id );
    }

	/**
	 * @since   0.1.0
	 * @version 0.1.6
	 */
    public static function create_pages() {

	    $pages = apply_filters(
			'nc_create_pages',
			array(
			    'checkout' => [
					'name' => esc_html_x( 'checkout', 'Page slug', 'north-commerce' ),
					'title' => esc_html_x( 'Checkout', 'Page title', 'north-commerce' ),
					'content' => '<!-- wp:shortcode -->[' . apply_filters( 'nc/shortcode/checkout', 'nc-checkout' ) . ']<!-- /wp:shortcode -->',
				],
				'checkout_thank_you' => [
					'name' => esc_html_x( 'thank-you', 'Page slug', 'north-commerce' ),
					'title' => esc_html_x( 'Checkout Thank You', 'Page title', 'north-commerce' ),
					'content' => '<!-- wp:shortcode -->[' . apply_filters( 'nc/shortcode/checkout-thank-you', 'nc-checkout-thank-you' ) . ']<!-- /wp:shortcode -->',
					'parent' => esc_html_x( 'checkout', 'Checkout slug', 'north-commerce' )
				],
				'product' => [
					'name' => esc_html_x( 'products', 'Page slug', 'north-commerce' ),
					'title' => esc_html_x( 'Products', 'Page title', 'north-commerce' ),
					'content' => '<!-- wp:shortcode -->[' . apply_filters( 'nc/shortcode/product', 'nc-product' ) . ']<!-- /wp:shortcode -->',
				],
				'collections' => [
					'name' => esc_html_x( 'collections', 'Page slug', 'north-commerce' ),
					'title' => esc_html_x( 'Collections', 'Page title', 'north-commerce' ),
					'content' => '<!-- wp:shortcode -->[' . apply_filters( 'nc/shortcode/collections', 'nc-collection' ) . ']<!-- /wp:shortcode -->',
				],
				'cart' => [
					'name' => esc_html_x( 'cart', 'Page slug', 'north-commerce' ),
					'title' => esc_html_x( 'Cart', 'Page title', 'north-commerce' ),
					'content' => '<!-- wp:shortcode -->[' . apply_filters( 'nc/shortcode/cart', 'nc-cart' ) . ']<!-- /wp:shortcode -->',
				]
		    )
	    );

	    foreach ( $pages as $key => $page ) {
			$parent = ( $p = nc_g( $page, 'parent' ) )
				? get_page_by_path( $p )
				: false;

		    nc_create_page(
				esc_sql( $page['name'] ),
				'north_commerce_' . $key . '_page_id',
				$page['title'],
				$page['content'],
				$parent ? $parent->ID : 0
			);
	    }

	    update_option( 'north_commerce_maybe_create_page', 'created' );

    }

	/**
	 * @since   0.1.10
	 * @version 0.1.19
	 */
	public function upload_cart_icon_svg() {

		if ( empty( $_FILES['icon'] ) ) {
			return wp_send_json_error( 'SVG file is missed. Please try again.' );
		}

		if ( ! check_ajax_referer( 'svg_uploader', 'security', false ) ) {
			return wp_send_json_error( 'Security issues. Try to refresh the page.' );
		}

		$ensure_svg_compitability = function ( $mime_types ) {
			if ( empty( $mime_types['svg'] ) ) {
				$mime_types['svg'] = 'image/svg+xml';
			}
			return $mime_types;
		};

		$extend_svg_mime_types = function ( $data, $file, $filename, $mimes, $real_mime ) {
			if ( 'image/svg' === $real_mime ) {
				preg_match( '!\.(svg)$!i', $filename, $ext_matches );
				if ( isset( $ext_matches[1] ) && 'svg' === $ext_matches[1] ) {
					$data['ext'] = 'svg';
					$data['type'] = 'image/svg+xml';
				}
			}
			return $data;
		};

		add_filter( 'upload_mimes', $ensure_svg_compitability );
		add_filter( 'wp_check_filetype_and_ext', $extend_svg_mime_types, 10, 5 );

		$uploaded_file = wp_handle_upload( $_FILES['icon'], [ 'test_form' => false ] );

		if ( ! empty( $uploaded_file['error'] ) ) {
			return wp_send_json_error( $uploaded_file['error'] );
		}

		$icons_folder = __DIR__ . '/templates/settings/cart-icons/upload';
		if ( ! is_dir( $icons_folder ) && ! mkdir( $icons_folder ) ) {
			return wp_send_json_error( 'Uploading is prohibited by filesystem permissions' );
		}

		$unique_filename = wp_unique_filename( $icons_folder, basename( $uploaded_file['file'] ) );
		$file_path = "$icons_folder/$unique_filename";

		$moved = rename( $uploaded_file['file'], $file_path );
		if ( ! $moved ) {
			$moved = copy( $uploaded_file['file'], $file_path );
		}
		if ( ! $moved ) {
			return wp_send_json_error( 'Uploading is prohibited by filesystem permissions' );
		}

		ob_start();
		( new North_Commerce_Admin( null, null ) )->template(
			'cart-icon-list',
			'settings/cart-icons',
			[ 'filename' => $unique_filename ]
		);
		$new_icon = ob_get_clean();

		wp_send_json_success( $new_icon );

	}


	/**
	 * Since 0.1.21
	 *
	 */
	public function delete_company_logo_image() {

		if ( ! check_ajax_referer( 'logo_uploader', 'security', false ) ) {
			return wp_send_json_error( 'Security issues. Try to refresh the page.' );
		}

		update_option( 'north-commerce/logo-image/name', '' );

		wp_send_json_success();

	}


	/**
	 * @since 0.1.19
	 */
	public function upload_company_logo_image() {

		if ( empty( $_FILES['image'] ) ) {
			return wp_send_json_error( 'Image file is missing. Please try again.' );
		}

		if ( ! check_ajax_referer( 'logo_uploader', 'security', false ) ) {
			return wp_send_json_error( 'Security issues. Try to refresh the page.' );
		}

		$uploaded_file = wp_handle_upload( $_FILES['image'], [ 'test_form' => false ] );

		if ( ! empty( $uploaded_file['error'] ) ) {
			return wp_send_json_error( $uploaded_file['error'] );
		}

		$icons_folder = WP_CONTENT_DIR . "/uploads/north-commerce-logo-images";

		if ( ! is_dir( $icons_folder ) && ! mkdir( $icons_folder ) ) {
			return wp_send_json_error( 'Uploading is prohibited by filesystem permissions' );
		}

		$unique_filename = wp_unique_filename( $icons_folder, basename( $uploaded_file['file'] ) );

		$file_path = "$icons_folder/$unique_filename";

		$moved = rename( $uploaded_file['file'], $file_path );
		if ( ! $moved ) {
			$moved = copy( $uploaded_file['file'], $file_path );
		}
		if ( ! $moved ) {
			return wp_send_json_error( 'Uploading is prohibited by filesystem permissions' );
		}

		update_option( 'north-commerce/logo-image/name', $unique_filename );

		ob_start();
		( new North_Commerce_Admin( null, null ) )->template(
			'logo-list',
			'settings/logo-images',
			[ 'filename' => $unique_filename ]
		);
		$new_image = ob_get_clean();

		wp_send_json_success( $new_image );

	}

}
