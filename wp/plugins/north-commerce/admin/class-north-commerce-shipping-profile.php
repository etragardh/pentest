<?php

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\PerspectiveManager;
use NorthCommerce\Models\ShippingProfileModel;

/**
 * Shipping Profile controller class.
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.2
 * @version 0.1.25
 */
class North_Commerce_Shipping_Profile extends North_Commerce_Admin_Base {

	private static $regions_countries_map;
	private static $countries_subunits_map;
	private static $shipping_regions;

	/**
	 * @since   0.1.2
	 * @version 0.1.13
	 */
	public function __construct( $profile_id = null ) {
		parent::__construct();

		self::$regions_countries_map = self::$regions_countries_map ?? nc_get_regions_countries_map();
		self::$countries_subunits_map = self::$countries_subunits_map ?? nc_get_countries_subunits_map();

		if (
			! $profile_id
			&& isset( $_GET['page'] ) && 'north-commerce-settings' === $_GET['page']
			&& isset( $_GET['tab'] ) && 'shipment' === $_GET['tab']
			&& isset( $_GET['id'] )
		) {
			$profile_id = $_GET['id'];
		}
	}

	/**
	 * Create a Default Profile if there is no any
	 *
	 * @since   0.1.2
	 * @version 0.1.25
	 */
	public function ensure_default_shipping_profile() {
		if (
			wp_doing_ajax()
			|| wp_doing_cron()
			|| defined( 'REST_REQUEST' )
		) {
			return;
		}

		$pm = PerspectiveManager::instance();
		return $pm->asAdministrator( function() {
			$profile_model = new ShippingProfileModel();
			$request_options = [
				'columns' => [
					'id',
					'shipping_address_id'
				],
				'expand' => [ 'shipping_address' ],
			];

			try {
				$default_profile = $profile_model->get_regional_default( $request_options );
				$default_address = $profile_model->get_default_shipping_address();
			} catch ( Exception $e ) {
				$e->getMessage();
			}

			if ( isset( $e ) ) {
				// Bailout.
				return;
			}

			if ( ! $default_profile  ) {
				$profile_data = [
					'name' => esc_html__( 'Default Profile', 'north-commerce' ),
					'is_default' => true,
					'all_variants_included' => true,
					'shipping_address_id' => $default_address['id'] ?? null,
				];

				$default_profile = $profile_model->store( $profile_data );
			}

			if (
				! $default_address
				&& isset( $default_profile['shipping_address']['id'] )
			) {
				$address_data = [
					'id' => $default_profile['shipping_address']['id'],
					'is_default' => true, // mark as `default`
				];

				$default_address = $profile_model->store_address( $address_data );
			}

			return $default_profile;

		} );
	}

	/**
	 * @since   0.1.2
	 * @version 0.1.24
	 */
	public function get_shipping_regions(): array {

		if ( self::$shipping_regions ) {
			return self::$shipping_regions; // cached
		}

		$countries_list = ( new \NorthCommerce\Models\CountryModel() )->get_formated_list();

		$format_countries = function ( $countries ) use ( $countries_list ) {
			foreach ( $countries as $country_code ) {
				if ( ! isset( $countries_list[ $country_code ] ) ) {
					continue;
				}

				$region_countries[ $country_code ] = [
					'name' => $countries_list[ $country_code ],
				];

				if ( isset( self::$countries_subunits_map[ $country_code ] ) ) {
					$region_countries[ $country_code ]['division'] = self::$countries_subunits_map[ $country_code ];
				}
			}

			return $region_countries;
		};

		$regions = [];
		foreach ( self::$regions_countries_map as $region_code => $region ) {
			$regions[ $region_code ] = [
				'name' => $region['name'],
				'countries' => $format_countries( $region['countries'] ),
			];
		}

		return self::$shipping_regions = $regions;

	}

	/**
	 * @since   0.1.23
	 * @version 0.1.23
	 */
	public function get_shipping_regions_for_countries(): array {
		if ( self::$shipping_regions ) {
			return self::$shipping_regions; // cached
		}

		$countries_list = ( new \NorthCommerce\Models\CountryModel() )->get_formated_list();

		$format_countries = function ( $countries ) use ( $countries_list ) {
			$region_countries = [];
			foreach ( $countries as $country_code ) {
				if ( isset( $countries_list[ $country_code ] ) ) {
					$region_countries[ $country_code ] = [
						'name' => $countries_list[ $country_code ]
					];
				}
			}
			return $region_countries;
		};

		$regions = [];
		foreach ( self::$regions_countries_map as $region_code => $region ) {
			$regions[ $region_code ] = [
				'name' => $region['name'],
				'countries' => $format_countries( $region['countries'] ),
			];
		}

		self::$shipping_regions = $regions;
		return $regions;
	}

}
