<?php

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\Collections\{
    ProductVariantTypes,
    ProductStatuses,
    ProductTypes
};
use NorthCommerce\Importers\ProductOptionsVariantsImporter;
use NorthCommerce\Models\ProductModel;
use NorthCommerceStripe\StripeClient;
use North_Commerce_Settings as Settings;

/**
 * Product controller class.
 *
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.25
 */
class North_Commerce_Product extends North_Commerce_Admin_Base {

    /**
	 * @var   ProductModel $product_model Product Model.
     * @since 0.1.3
	 */
    private ProductModel $product_model;

	public function __construct( $product_id = null ) {
		parent::__construct();
        $this->product_model = new ProductModel();
	}

    /**
     * @version 0.1.9
     */
	public static function get_permalink_base() {
        $products_page_id = North_Commerce_Settings::nc_get_page_id( 'product' );
        $products_page = get_post( $products_page_id );
        return home_url( trailingslashit( $products_page->post_name ?? '' ) );
	}

	/**
	 * @since   0.1.2
	 * @version 0.1.20
	 */
	public static function get_shippable_products() {
		$product_model = new ProductModel();

        $pvt_solo = ProductVariantTypes::solo();

		$criteria = [
			'and',
			[ 'is', 'is_physical_product', true ],
			[ 'is', 'deleted', null ],
		];

		$options = [
			'columns' => [ 'id', 'name' ],
			'expand' => [ 'product_images', 'product_variants' ],
		];

		$products = $product_model->list( $criteria, $options );

		foreach ( $products as $index => $product ) {
			$products[ $index ]['image_url'] = $product['product_images'][0]['image_url']
                ?? NORTH_COMMERCE_PLUGIN_DIR_URL . 'admin/images/product-empty-img.png';
			unset( $products[ $index ]['product_images'] );

			$products[ $index ]['variants'] = array();
			$variants_counter = count( $product['product_variants'] );
			foreach ( $product['product_variants'] as $v_index => $variant ) {
				if (
					$variant['deleted']
					|| $variant['product_variant_type_id'] === $pvt_solo->id
				) {
					// exlude deleted and `solo` variants
					continue;
				}

				$products[ $index ]['variants'][] = $variant;

				if ( 1 + $v_index === $variants_counter ) {
					unset( $products[ $index ]['product_variants'] );
				}
			}
		}

		return $products;
	}

    /**
     * @version 0.1.24
     */
    public function create_product() {
        $_REQUEST['product_nonce'] = $_POST['data']['product_nonce'] ?? null;
        check_admin_referer( 'product', 'product_nonce' );

        $result = [ 'status' => true ]; // assumption

        $data = $_POST['data'];

        $product_name = sanitize_text_field( $data['product_name'] ?: esc_html__( 'Product name', 'north-commerce' ) );
        $product_description = $data['product_content'];
        $product_status = sanitize_text_field( $data['product_status'] ?: ProductStatuses::published()->slug );

        $product_name = stripslashes( $product_name );
        $product_price = floatval( $data['product_price'] );
        $product_cost = floatval( $data['product-cost'] );

        do_action( 'north-commerce/product/before_create', $product_name, $data, $product_status );

        $errors = $this->validate_product_data( $data );
        if ( $errors ) {
            // Bailout.
            echo json_encode( [
                'status' => false,
                'errors' => $errors,
            ] );
            wp_die();
        }

        $variants = $data['variants'] ?? null;
        $data['has_product_variants'] = filter_var( $data['has_product_variants'] ?? null, FILTER_VALIDATE_BOOLEAN ) && $variants;

        $product_data = [
            'name' => apply_filters( 'north-commerce/product/name', $product_name ),
            'slug' => sanitize_title( $product_name ),
            'description' => apply_filters( 'north-commerce/product/description', wp_unslash( $product_description ) ),
            'created_by_wp_user_id' => get_current_user_id(),
            'sku' => $data['product_sku'],
            'product_type_id' => $this->product_model->get_type_by_slug( $data['product_type'] )['id'] ?? ProductTypes::oneTime()->id,
            'product_status_id' => ProductStatuses::draft()->id,
            'base_price' => $product_price,
            'compare_price' => $data['product-price-compare'] ?: null,
            'cost_of_goods_price' => $product_cost,
            'cost_margin' => $product_cost && $product_price
                ? round( ( $product_price - $product_cost ) / $product_price * 100, 2 )
                : null,
            'profit' => $product_cost
                ? round( $product_price - $product_cost, 2 )
                : null,
            'quantity' => '' === $data['product_quantity']
                ? null // `null` implied as unlimited quantity
                : $data['product_quantity'],
            'weight' => $data['shipping_weight'] ? filter_var( $data['shipping_weight'], FILTER_VALIDATE_FLOAT ) : null,
            'is_physical_product' => filter_var( $data['is_physical'] ?? null, FILTER_VALIDATE_BOOLEAN ),
            'has_product_variants' => $data['has_product_variants'],
            'has_customs_details' => filter_var( $data['has_custom_info'] ?? null, FILTER_VALIDATE_BOOLEAN ),
            'id_salt' => wp_generate_password( 4, false ),
        ];

        $product_id = $this->product_model->store( $product_data )['id'] ?? null;

        if ( ! $product_id ) {
            $result['status'] = false;
            $result['errors'][] = __( 'Internal error. Please try again.', 'north-commerce' );

            // Bailout.
            echo json_encode( $result );
            wp_die();
        }

        $data = apply_filters( 'north-commerce/product/before_payment/data', $data, $product_id );

        if (
            'subscription' === $data['product_type']
            || 'payment-plan' === $data['product_type']
        ) {
            // create plan for subscription
            $stripe = new North_Commerce_Stripe();
            $stripe_connected = $stripe->is_connected();
            $stripe_response = null;

            $paypal = new North_Commerce_Paypal();
            $paypal_test_connected = $paypal->is_mode_connected( 'test' );
            $paypal_live_connected = $paypal->is_mode_connected( 'live' );
            $paypal_connected = $paypal_test_connected || $paypal_live_connected;
            $paypal_response = null;

            if ( $stripe_connected || $paypal_connected ) {
                $data['product_id'] = $product_id;
                $data['product_id_salt'] = $product_data['id_salt'];

                $stripe_response = $stripe_connected ? $stripe->create_plan( $data ) : false;

                $paypal_response_test = $paypal_test_connected ? $paypal->create_plan( 'test', $data ) : false;
                $paypal_response_live = $paypal_live_connected ? $paypal->create_plan( 'live', $data ) : false;
                $paypal_response = $paypal_response_test || $paypal_response_live;
                if ( $paypal_response ) {
                    if ( $paypal_response_test ) {
                        $this->product_model->update_attribute_value( $product_id, 'paypal_test_product_id', $paypal_response_test['product_id'] );
                        $this->product_model->update_attribute_value( $product_id, 'paypal_test_product_plan_id', $paypal_response_test['product_plan_id'] );
                    }
                    if ( $paypal_response_live ) {
                        $this->product_model->update_attribute_value( $product_id, 'paypal_live_product_id', $paypal_response_live['product_id'] );
                        $this->product_model->update_attribute_value( $product_id, 'paypal_live_product_plan_id', $paypal_response_test['product_plan_id'] );
                    }
                }
            }

            if (
                ( $stripe_connected && ! $stripe_response )
                || ( $paypal_connected && ! $paypal_response )
                || ( ! $stripe_connected && ! $paypal_connected )
            ) {
                $this->delete_product( $product_id );
                $result['status'] = false;
                $result['errors'][] = 'Error on create plan`s';
            }
        }

        if ( $result['status'] ) {
            $result['redirect'] = esc_url( site_url() ) . '/wp-admin/admin.php?page=north-commerce-products&action=edit&id=' . $product_id;

            $this->update_product_meta( $product_id, $data );

            do_action( 'north-commerce/product/created', $product_id );
        }

        echo json_encode( $result );
        wp_die();
    }

    /**
     * @version 0.1.24
     */
    public function update_product() {
        $_REQUEST['product_nonce'] = $_POST['data']['product_nonce'] ?? null;
        check_admin_referer( 'product', 'product_nonce' );

        $result = [ 'status' => true ]; // assumption

        $form_data = $_POST['data'];

        $product_id = sanitize_text_field( $form_data['product_id'] ?? '' );
        $product_name = sanitize_text_field( $form_data['product_name'] ?: esc_html__( 'Product name', 'north-commerce' ) );
        $product_description = $form_data['product_content'];
        $product_status = sanitize_text_field( $form_data['product_status'] ?: ProductStatuses::published()->slug );

        $data = $form_data;
        $product_name = stripslashes( $product_name );
        $product_price = floatval( $data['product_price'] );
        $product_cost = floatval( $data['product-cost'] );

        do_action( 'north-commerce/product/update/before', $product_name, $data, $product_status );

        $errors = $this->validate_product_data( $data );
        if ( $errors ) {
            // Bailout.
            echo json_encode( [
                'status' => false,
                'errors' => $errors,
            ] );
            wp_die();
        }

        $variants = $data['variants'] ?? null;
        $data['has_product_variants'] = filter_var( $data['has_product_variants'] ?? null, FILTER_VALIDATE_BOOLEAN ) && $variants;

        $product_data = [
            'id' => $product_id,
            'name' => apply_filters( 'north-commerce/product/name', $product_name ),
            'description' => apply_filters( 'north-commerce/product/description', wp_unslash( $product_description ) ),
            'sku' => $data['product_sku'],
            'product_type_id' => $this->product_model->get_type_by_slug( $data['product_type'] )['id'] ?? ProductTypes::oneTime()->id,
            'base_price' => $product_price,
            'compare_price' => $data['product-price-compare'] ?: null,
            'cost_of_goods_price' => $product_cost ?: null,
            'cost_margin' => $product_cost && $product_price
                ? round( ( $product_price - $product_cost ) / $product_price * 100, 2 )
                : null,
            'profit' => $product_cost
                ? round( $product_price - $product_cost, 2 )
                : null,
            'quantity' => '' === $data['product_quantity']
                ? null // `null` implied as unlimited quantity
                : $data['product_quantity'],
            'weight' => $data['shipping_weight'] ? filter_var( $data['shipping_weight'], FILTER_VALIDATE_FLOAT ) : null,
            'is_physical_product' => filter_var( $data['is_physical'] ?? null, FILTER_VALIDATE_BOOLEAN ),
            'has_product_variants' => $data['has_product_variants'],
            'has_customs_details' => filter_var( $data['has_custom_info'] ?? null, FILTER_VALIDATE_BOOLEAN ),
        ];

		$data = apply_filters( 'north-commerce/product/update/data', $data, $product_id );

		if (
            'subscription' === $data['product_type']
            || 'payment-plan' === $data['product_type']
        ) {
            // create plan on Stripe and PayPal side

            $stripe = new North_Commerce_Stripe();
            $stripe_connected = $stripe->is_connected();

            $paypal = new North_Commerce_Paypal();
            $paypal_test_connected = $paypal->is_mode_connected( 'test' );
            $paypal_live_connected = $paypal->is_mode_connected( 'live' );
            $paypal_connected = $paypal_test_connected || $paypal_live_connected;

            if ( $stripe_connected || $paypal_connected ) {
                $data['product_id'] = $product_id;

                $stripe_response = false;
                if ( $stripe_connected ) {
                    $stripe->delete_plan( $product_id );
                    $stripe_response = $stripe->create_plan( $data );
                }

                $paypal_response_test = $paypal_test_connected ? $paypal->create_plan( 'test', $data ) : false;
                $paypal_response_live = $paypal_live_connected ? $paypal->create_plan( 'live', $data ) : false;
                $paypal_response = $paypal_response_test || $paypal_response_live;
                if ( $paypal_response ) {
                    if ( $paypal_response_test ) {
                        $this->product_model->update_attribute_value( $product_id, 'paypal_test_product_id', $paypal_response_test['product_id'] );
                        $this->product_model->update_attribute_value( $product_id, 'paypal_test_product_plan_id', $paypal_response_test['product_plan_id'] );
                    }
                    if ( $paypal_response_live ) {
                        $this->product_model->update_attribute_value( $product_id, 'paypal_live_product_id', $paypal_response_live['product_id'] );
                        $this->product_model->update_attribute_value( $product_id, 'paypal_live_product_plan_id', $paypal_response_test['product_plan_id'] );
                    }
                }
            }

            if (
                ( $stripe_connected && ! $stripe_response )
                || ( $paypal_connected && ! $paypal_response )
                || ( ! $stripe_connected && ! $paypal_connected )
            ) {
                $result['status'] = false;
                $result['errors'][] = 'Error on create plan`s';
            }
		}

		if ( $result['status'] ) {
            $result['redirect'] = esc_url( site_url() ) . '/wp-admin/admin.php?page=north-commerce-products&action=edit&id=' . $product_id;

            $this->product_model->store( $product_data );
			$this->update_product_meta( $product_id, $data );

            do_action( 'north-commerce/product/update/success', $product_id );
		}

        echo json_encode( $result );
        wp_die();
    }

	/**
	 * @version 0.1.21
	 */
    public function update_product_meta( $product_id, $data ) {
        $this->update_product_payment_details( $data );

		foreach ( $data as $key => $value ) {

			if ( 'product_status' === $key ) {

                $publishing_data = [
                    'date' => $data['publishing_date'],
                    'time' => $data['publishing_time'],
                ];

				$this->delete_delay_publishing( $product_id );
				if (
					ProductStatuses::schedule()->slug !== $value
					|| (
						ProductStatuses::schedule()->slug === $value
						&& $this->create_scheduled_publishing( $product_id, $publishing_data )
					)
				) {
					$product_status_id = $this->product_model->get_status_by_slug( $value )['id'];
				}

				if ( $product_status_id ?? null ) {
					$product_data = [
						'id' => $product_id,
						'product_status_id' => $product_status_id,
					];

                    if ( ProductStatuses::published()->slug === $value ) {
                        $product_data['published'] = $this->product_model->sql_timestamp();
                    }

					$this->product_model->store( $product_data );
				}

				continue;

			}

            if ( 'product_img' === $key ) {
                $images = [];
                foreach ( $value as $image ) {
                    if ( $image['rotate'] !== 0 ) {
                        rotate_post_attachment( $image );
                    }
                    $images[] = $image['url'];
                }

                $this->product_model->update_images( $product_id, $images );
                continue;
            }

            if ( 'custom_info' === $key ) {
                $this->product_model->update_custom_info( $product_id, $value );
                continue;
            }

            if ( 'product_categories' === $key ) {
                $this->product_model->update_product_categories( $product_id, $value );
                continue;
            }

            if ( 'product_tags' === $key ) {
                $this->product_model->update_product_tags( $product_id, $value );
                continue;
            }

        }

		$importer = new ProductOptionsVariantsImporter();
		$importer->import( [ 'product_id' => $product_id ] + $data );
    }

	/**
	 * @since   0.1.3
	 * @version 0.1.13.3
	 */
    public function update_product_payment_details( $data ) {
        if (
            'subscription' !== $data['product_type']
            && 'payment-plan' !== $data['product_type']
        ) {
            // Bailout.
            return;
        }

        $product_id = $data['product_id'] ?? null;

		$payment_detail_data = [
			'payment_frequency_id' => $this->product_model->get_payment_frequency_by_slug( $data['product_frequency'] )['id'],
		];

        if ( 'subscription' === $data['product_type'] ) {
            $payment_detail_data += [
                'has_free_trial' => (bool) ( $data['is-free-trial'] ?? false ),
                'free_trial_type_id' => $this->product_model->get_free_trial_type_by_slug( $data['product_trial_type'] )['id'] ?? null,
                'free_trial_frequency' => $data['product_trial_count'] ?? null,
                'has_first_period_payment' => (bool) ( $data['is-first-period'] ?? false ),
                'first_period_payment' => $data['product_start_price_sub'],
            ];
        }

		if ( 'payment-plan' === $data['product_type'] ) {
			$payment_detail_data += [
				'has_first_payment' => (bool) ( $data['is-first-payment'] ?? false ),
				'first_payment' => $data['product_start_price'],
				'num_payments' => $data['product_payment_number'],
			];
		}

        $this->product_model->store_payment_detail( $product_id, $payment_detail_data );
    }

    /**
     * @version 0.1.23
     */
    public function duplicate_product( $stored_product_id ) {
        $stored_product_id = sanitize_text_field( $_POST['product_id'] ?? $stored_product_id ) ; // phpcs:ignore WordPress.Security.NonceVerification.Missing
        $result['status'] = false;

        do_action( 'nc/duplicate_product/before', $stored_product_id );

        $stored_product = $this->product_model->get_by_id( $stored_product_id );

        if ( $stored_product ) {
            $product_data = [
                'name' => $stored_product['name'] . ' - Copy',
                'slug' => sanitize_title( $stored_product['name'] . ' - Copy' ),
                'description' => $stored_product['description'],
                'created_by_wp_user_id' => get_current_user_id(),
                'sku' => $stored_product['sku'],
                'product_type_id' => $stored_product['product_type_id'],
                'product_status_id' => ProductStatuses::draft()->id,
                'base_price' => $stored_product['base_price'],
                'compare_price' => $stored_product['compare_price'],
                'cost_of_goods_price' => $stored_product['cost_of_goods_price'],
                'cost_margin' => $stored_product['cost_margin'],
                'profit' => $stored_product['profit'],
                'quantity' => $stored_product['quantity'],
                'weight' => $stored_product['weight'],
                'is_physical_product' => $stored_product['is_physical_product'],
                'has_product_variants' => $stored_product['has_product_variants'],
            ];

            $new_product_id = $this->product_model->store( $product_data )['id'] ?? null;

            $result = [
                'status' => true,
                'redirect' => admin_url( 'admin.php?page=north-commerce-products&action=edit&id=' . $new_product_id ),
            ];

            if (
                'subscription' === $stored_product['product_type']['slug']
                || 'payment-plan' === $stored_product['product_type']['slug']
            ) {
                $this->synchronize_payments_plans();
            }
        }

        if ( isset( $_POST['product_id'] ) ) {
            echo json_encode( $result );
            wp_die();
        }

        return $result;
    }

    /**
     * @version 0.1.18
     * @param integer $product_id Product ID
     */
    public function delete_product( $product_id ): bool {
        $product_id = sanitize_text_field( $_POST['delete_id'] ?? $product_id ); // phpcs:ignore WordPress.Security.NonceVerification.Missing

        do_action( 'nc/delete_product/before', $product_id );

        $this->delete_delay_publishing( $product_id );

        $product = $this->product_model->get_by_id( $product_id );
        $trashed_status_id = ProductStatuses::trashed()->id;

        if ( $product['product_status_id'] !== $trashed_status_id ) {

            $product_data = [
                'id' => $product_id,
                'product_status_id' => $trashed_status_id,
                'scheduled' => null,
                'published' => null,
            ];

            $this->product_model->store( $product_data );
            $result = true;

        } else {

            $product_type = $product['product_type']['slug'] ?? '';
            if (
                'subscription' === $product_type
                || 'payment-plan' === $product_type
            ) {
                $stripe = new North_Commerce_Stripe();
                $paypal = new North_Commerce_Paypal();

                $stripe->delete_plan( $product_id );

                if ( $paypal->is_mode_connected( 'test' ) ) {
                    $paypal->delete_plan( 'test', $product_id );
                }
                if ( $paypal->is_mode_connected( 'live' ) ) {
                    $paypal->delete_plan( 'live', $product_id );
                }
            }

            $this->product_model->delete( $product_id );

            do_action( 'north-commerce/product/deleted', $product_id );

        }

        if ( isset( $_POST['delete_id'] ) ) {
            echo isset( $_POST['reload'] )
                ? esc_url( 'admin.php?page=north-commerce-products' )
                : true;
            wp_die();
        }

        return $result;
    }

    /**
     * Delete products.
     */
    public function delete_products( $products ) {
        $products = $_POST['products'] ?? $products;
        $is_post = isset( $_POST['products'] );
        $success = false;

        if ( is_array( $products ) ) {
            foreach ( $products as $product_id ) {
                $this->delete_product( $product_id );
            }
            $success = true;
        }

        if ( $is_post ) {
            echo $success;
            wp_die();
        }

        return $success;
    }

    /**
     * Validate product before create/update
     *
     * @version 0.1.25
     */
    private function validate_product_data( $data ) {
        $errors = [];

        $product_type = $data['product_type'];
        $product_price = floatval( $data['product_price'] ?? null );

        if ( 'payment-plan' === $product_type ) {
            $payment_number = isset( $data['product_payment_number'] ) ? intval( $data['product_payment_number'] ) : '';
            if ( $payment_number < 1 ) {
                $errors[] = '<b>' . esc_html( 'Product', 'north-commerce' ) . ':</b> ' . esc_html( 'Number of payments must be greater than 0', 'north-commerce' );
            }

            if ( filter_var( $data['is-first-payment'] ?? null, FILTER_VALIDATE_BOOLEAN ) ) {
                $product_start_price = isset( $data['product_start_price'] ) ? floatval( $data['product_start_price'] ) : '';
                if ( $product_start_price <= 0 ) {
                    $errors[] = '<b>' . esc_html( 'Product', 'north-commerce' ) . ':</b> ' . esc_html( 'First payment must be greater than 0', 'north-commerce' );
                }
                if ( $product_price <= $product_start_price ) {
                    $errors[] = '<b>' . esc_html( 'Product', 'north-commerce' ) . ':</b> ' . esc_html( 'Price of product must be greater than First payment. First payment is part of Product price', 'north-commerce' );
                }
            }
        }

        if ( 'subscription' === $product_type ) {
            if ( filter_var( $data['is-free-trial'] ?? null, FILTER_VALIDATE_BOOLEAN ) ) {
                $product_free_trial = isset( $data['product_trial_count'] ) ? intval( $data['product_trial_count'] ) : '';
                if ( $product_free_trial <= 0 ) {
                    $errors[] = '<b>' . esc_html( 'Product', 'north-commerce' ) . ':</b> ' . esc_html( 'Free trial of product must be greater than 0', 'north-commerce' );
                }
            }

            if ( filter_var( $data['is-first-period'] ?? null, FILTER_VALIDATE_BOOLEAN ) ) {
                $product_start_price_sub = isset( $data['product_start_price_sub'] ) ? intval( $data['product_start_price_sub'] ) : '';
                if ( $product_start_price_sub <= 0 ) {
                    $errors[] = '<b>' . esc_html( 'Product', 'north-commerce' ) . ':</b> ' . esc_html( 'First period payment must be greater than 0', 'north-commerce' );
                }
            }
        }

        if ( 'one-time' === $product_type ) {
            if ( filter_var( $data['is_physical'] ?? null, FILTER_VALIDATE_BOOLEAN ) ) {
                $product_weight = floatval( $data['shipping_weight'] ?? 0 );
                if ( $product_weight <= 0 ) {
                    $errors[] = '<b>' . esc_html( 'Product', 'north-commerce' ) . ':</b> ' . esc_html( 'product weight must be greater than 0', 'north-commerce' );
				}
            }
        }

        return $errors;

    }

	public function get_product_option_value_max_quantity( $product_option_value ) {
		$agent = North_Commerce_Db_Agent::instance();
		$ea    = $agent->entityAccess();

		$product_option = $ea->get( 'product_options', [
			'id' => $product_option_value['product_option_id']
		] );
		$product = $ea->get('products', ['id' => $product_option['product_id']]);
		$product_variants = $ea->list( 'product_variants', [
			'product_id' => $product_option['product_id'],
			'product_variant_option_values.product_option_value_id' => $product_option_value['id']
		] );

		$quantity = null;
		foreach ( $product_variants as $pv ) {
			$q = $pv['quantity'] == null ? $product['quantity'] : $pv['quantity'];
			if ( $q === null ) {
				continue;
			}
			$quantity = $quantity == null ? $q : max( $quantity, $q);
		}
		return $quantity;
	}

    /**
     * @version 0.1.20
     */
	public function get_product_variant_data( $product_id, $variant_options = [] ) {
        $options = [
            'columns' => [ 'id', 'name', 'base_price', 'quantity' ],
            'expand' => [ 'product_images' ],
        ];
		$product = $this->product_model->get_by_id( $product_id, $options );

		if ( empty( $variant_options ) ) {
            $pvt_solo = ProductVariantTypes::solo();
            $variant = $this->product_model->list_product_variants_by_type( $product_id, $pvt_solo->slug )[0];
		} else {
            $variant = $this->product_model->get_variant_by_option_ids( $product_id, $variant_options );
        }

        $data = [
            'id' => $product_id,
			'title' => $product['name'],
            'variant' => $variant,
            'status' => (bool) $variant['visible'],
            'price' => $variant['price'] ?: $product['base_price'],
            'inventory' => is_string( $variant['quantity'] ) ? $variant['quantity'] : $product['quantity'],
            'featured_image' => $variant['image_url'] ?? ( $product['product_images'][0]['image_url'] ?? null ),
        ];

		return $data;
	}

	/**
     * @version 0.1.21
	 */
	public function create_scheduled_publishing( $product_id, $publishing ) {
		$default_timezone = date_default_timezone_get();
		$nc_time_zone = Settings::get_current_time_zone();
		date_default_timezone_set( $nc_time_zone );

		$date_time_zone = new DateTimeZone( $nc_time_zone );
		$publish_date = $this->_create_date_time( $date_time_zone, $publishing );
		$current_date = $this->_create_date_time( $date_time_zone );

        $result = false;
		if (
            $publish_date !== false
            && $current_date !== false
            && $this->product_model->get_by_id( $product_id )
        ) {
			$diff = $publish_date->getTimestamp() - $current_date->getTimestamp();
			$result = wp_schedule_single_event( time() + ( $diff < 0 ? 0 : $diff ), 'wp_delayed_publishing', [ 'product_id' => $product_id ] );

            $product_data = [
                'id' => $product_id,
                'scheduled' => $this->product_model->sql_timestamp( time() + ( $diff < 0 ? 0 : $diff ) ),
            ];
            $this->product_model->store( $product_data );
		}

		date_default_timezone_set( $default_timezone );
		return is_wp_error( $result ) ? false : $result;
	}

    /**
     * @version 0.1.21
     */
	private function _create_date_time( $time_zone, $date = null ) {
        $format = 'F d, Y h:i a';

        $date = $date ?? date( $format );
        if ( is_array( $date ) ) {
            $date = $date['date'] . ' ' . $date['time'];
        }

		$dateTime = DateTime::createFromFormat( $format, $date, $time_zone );

		$errors = DateTime::getLastErrors();
		if ( ! empty( $errors['warning_count'] ) ) {
			return false;
		}

		return $dateTime;
	}

	public function delete_delay_publishing( $product_id ) {
		wp_clear_scheduled_hook( 'wp_delayed_publishing', compact( 'product_id' ) );
	}

	/**
     * @version 0.1.20
	 */
	public function scheduled_publishing( $args ) {
        $product_id = $args['product_id'] ?? null;

        if ( ! $this->product_model->get_by_id( $product_id ) ) {
            // Bailout.
            return;
        }

        $product_data = [
            'id' => $product_id,
            'published' => $this->product_model->sql_timestamp(),
            'product_status_id' => ProductStatuses::published()->id,
        ];

        $this->product_model->store( $product_data );
	}

	/**
     * @deprecated 0.1.3 Need revision
     */
    public function update_statuses( $status = 'published', $products = [] ) {
        $products = $_POST['products'] ?? $products;
        $status   = $_POST['product_status'] ?? $status;

        foreach ( $products ?? [] as $key => $product_id ) {
            $this->update_status( $status, $product_id );
        }
    }

    /**
     * @deprecated 0.1.3 Need revision
     */
    public function update_status( $status = 'published', $product_id = null ) {
        $product_id = $_POST['product_id'] ?? $product_id;
        $status = $_POST['product_status'] ?? $status;

        $this->delete_delay_publishing( $product_id );
        // TODO:: add logic
    }

    /**
    * @version 0.1.3
    */
	public function get_products() {
        $paged = sanitize_text_field( $_POST['paged'] ?? 1 ); // phpcs:ignore WordPress.Security.NonceVerification.Missing
		$posts_per_page = sanitize_text_field( $_POST['posts_per_page'] ?? 10 ); // phpcs:ignore WordPress.Security.NonceVerification.Missing
		$status = sanitize_text_field( $_POST['status'] ?? '' );
        parse_str( $_POST['filter'] ?? '', $filter ); // phpcs:ignore WordPress.Security.NonceVerification.Missing, ET.Sniffs.ValidatedSanitizedInput.InputNotSanitized

		$result = $this->get_product_items( $status, $filter, $paged, $posts_per_page );

		echo json_encode( $result );
		wp_die();
	}

    /**
     * @version 0.1.3
     */
	public function get_product_items( $status, $filter, $page = 1, $per_page = 10 ) {
        $filter_criteria = [];

        $options = [
            'limit' => $per_page,
            'offset' => $per_page * ( $page - 1 ),
        ];

        if ( $status ) {
            $filter_criteria[] = [ 'eq', 'product_status.slug', sanitize_text_field( $status ) ];
        }

		if ( $filter ) {
			if ( ! empty( $filter['product-inventory-sort'] ) ) {
				$filter_criteria[] = [ 'eq', 'quantity', '0' ];
			}

			if ( ! empty( $filter['product-type-sort'] ) ) {
				$filter_criteria[] = [
					'eq',
					'product_type.name',
					sanitize_text_field( $filter['product-type-sort'] )
				];
			}

			if ( ! empty( $filter['product-name'] ) ) {
				$search_input = sanitize_text_field( $filter['product-name'] );
				$filter_criteria[] = [
					'or',
					[ 'eq', 'id', "{$search_input}" ],
					[ 'like', 'name', "%{$search_input}%" ],
				];
			}

			if ( ! empty( $filter['product-data-sort'] ) ) {
				$options['order_by'] = 'id ' . sanitize_text_field( $filter['product-data-sort'] );
			}

			if ( ! empty( $filter['product-price-sort'] ) ) {
				$options['order_by'] = 'base_price ' . sanitize_text_field( $filter['product-price-sort'] );
			}
		}

		if ( $filter_criteria ) {
			$filter_criteria[] = [ 'is', 'deleted', null ];
		}

		$criteria = $filter_criteria
			? [ 'and', $filter_criteria ]
			: [ 'deleted' => null ];

		$criteria = apply_filters( 'nc/get_product_items/criteria', $criteria );
		$options = apply_filters( 'nc/get_product_items/options', $options );

		$products = $this->product_model->list_all( $criteria, $options );
        if ( $products ) {
            ob_start();
            foreach ( $products as $product ) {
                $this->template( 'product-item', 'product', [ 'product' => $product ] );
            }
            $result['products'] = ob_get_contents();
            ob_end_clean();

            $total_products_count = $this->product_model->get_total_count( $criteria );
            $result['max_page'] = ceil( $total_products_count / $per_page );
        } else {
            $result['products'] = '<div class="result__empty" style="display: block;">Products not found!</div>';
            $result['max_page'] = 0;
        }

        $result['current_page'] = $page;

        $result['pagination'] = count( $products )
            ? $options['offset'] + 1 . '-' . ( $options['offset'] + count( $products ) ) . ' of ' . ( $total_products_count ?? 0 )
            : '0-0 of 0';

        $result['counters'] = [
            'total' => $this->product_model->count(),
            'draft' => $this->product_model->count_by_status_name( 'Draft' ),
            'published' => $this->product_model->count_by_status_name( 'Published' ),
            'scheduled' => $this->product_model->count_by_status_name( 'Schedule' ),
            'archived' => $this->product_model->count_by_status_name( 'Archive' ),
            'trashed' => $this->product_model->count_by_status_name( 'Trashed' ),
        ];

        return $result;
    }

	/**
	 * Sync products details with Stripe and Paypal.
	 *
	 * @version 0.1.23
	 */
	public function synchronize_payments_plans( bool $stripe_sync = true, bool $paypal_sync = true ) {
        do_action( 'north-commerce/payment-plans-synchronization/before', $stripe_sync, $paypal_sync );

        if ( isset( $_POST['ajax_response'] ) ) {
            $stripe_sync = true;
            $paypal_sync = true;
        }

        $payment_plan_id = ProductTypes::paymentPlan()->id;
        $subscription_id = ProductTypes::subscription()->id;

        $criteria = [
            'and',
            [ 'is', 'deleted', null ],
            [
                'or',
                [ 'eq', 'product_type_id', $payment_plan_id ],
                [ 'eq', 'product_type_id', $subscription_id ],
            ],
        ];

        $options = [
            'expand' => [
                'product_type',
                'payment_detail.payment_frequency',
                'payment_detail.free_trial_type',
            ],
        ];

        $products = $this->product_model->list_all( $criteria, $options );

        $stripe = new North_Commerce_Stripe();

        if ( $stripe_sync && $stripe->is_connected() ) {

            $stripe_plan_arrays = [];

            if ( $stripe->is_mode_connected( 'live' ) ) {
                try {
                    $stripe_client = new StripeClient( $stripe->get_live_secret_key());
                    $current_plans = $stripe_client->plans->all( [ 'limit' => 100 ] )['data']; // 100 is an API limit
                    $stripe_plan_arrays['live'] = array_column( $current_plans, 'id' );
				} catch ( Exception $e ) {
				}
            }

            if ( $stripe->is_mode_connected( 'test' ) ) {
                try {
                    $stripe_client = new StripeClient( $stripe->get_test_secret_key() );
                    $current_plans = $stripe_client->plans->all( [ 'limit' => 100 ] )['data']; // 100 is an API limit
                    $stripe_plan_arrays['test'] = array_column( $current_plans, 'id' );
				} catch ( Exception $e ) {
				}
            }

            foreach ( $stripe_plan_arrays as $plan_array ) {
                foreach ( $products as $product ) {
                    $plan_id = 'plan_' . $product['id'];
                    $plan_id = $product['id_salt']
                        ? $plan_id . '_' . $product['id_salt']
                        : $plan_id;

                    if ( ! in_array( $plan_id, $plan_array ) ) {
                        $stripe->create_plan( $product );
                    }
                }
            }
        }

        $paypal = new North_Commerce_Paypal();
        $paypal_plan_arrays = [];

        if ( $paypal_sync && $paypal->is_mode_connected( 'test' ) ) {
            $current_page = 1;
            $total_pages = 1;
            $paypal_products = array();

            do {
                $response = wp_remote_get(
                    'https://api-m.sandbox.paypal.com/v1/catalogs/products?page_size=20&page=' . $current_page . '&total_required=true',
                    [
                        'headers' => [
                            'Authorization' => 'Basic ' . $paypal->get_test_access_auth(),
                            'Accept' => 'application/json',
                        ],
                    ]
                );

                $data = json_decode( wp_remote_retrieve_body( $response ) );

                $total_pages = intval( $data->total_pages );
                $paypal_products = array_merge( $paypal_products, $data->products );

                $current_page++;

            } while ( $current_page != $total_pages + 1 );

            $paypal_plan_arrays['test'] = array_column( $paypal_products, 'id' );

        }

        if ( $paypal_sync && $paypal->is_mode_connected( 'live' ) ) {
            $current_page = 1;
            $total_pages = 1;
            $paypal_products = array();

            do {
                $response = wp_remote_get(
                    'https://api-m.paypal.com/v1/catalogs/products?page_size=20&page=' . $current_page . '&total_required=true',
                    [
                        'headers' => [
                            'Authorization' => 'Basic ' . $paypal->get_live_access_auth(),
                            'Accept' => 'application/json',
                        ],
                    ]
                );

                $data = json_decode( wp_remote_retrieve_body( $response ) );

                $total_pages = intval( $data->total_pages );
                $paypal_products = array_merge( $paypal_products, $data->products );

                $current_page++;

            } while ( $current_page != $total_pages + 1 );

            $paypal_plan_arrays['live'] = array_column( $paypal_products, 'id' );

        }

        foreach ( $paypal_plan_arrays as $mode => $plan_array ) {

            foreach ( $products as $product ) {

                $product_plan_id = $this->product_model->get_attribute_value( $product['id'], 'paypal_' . $mode . '_product_plan_id' );
                if ( ! in_array( $product_plan_id, $plan_array ) ) {
                    $response = $paypal->create_plan( $mode, $product );

                    if ( $response && $response['success'] ) {
                        $this->product_model->update_attribute_value( $product['id'], 'paypal_' . $mode . '_product_id', $response['product_id'] );
                        $this->product_model->update_attribute_value( $product['id'], 'paypal_' . $mode . '_product_plan_id', $response['product_plan_id'] );
                    }
                }

            }

        }

        do_action( 'north-commerce/payment-plans-synchronization/after', $stripe_sync, $paypal_sync );

        if ( isset( $_POST['ajax_response'] ) ) {
            wp_die();
        }
    }

	/**
	 * @since 0.1.4
	 */
    public function update_permalink() {
        if ( empty( $_POST['data'] ) ) {
            // Bailout.
            return;
        }

        parse_str( $_POST['data'] ?? null, $data );

        $_REQUEST['permalink_nonce'] = $data['permalink_nonce'] ?? null;
        check_admin_referer( 'permalink', 'permalink_nonce' );

        $product_id = $data['product_id'] ?? null;
        $product_slug = $data['product_slug'] ?? null;

        if ( ! $product_id || ! $product_slug )  {
            // Bailout.
            return;
        }

        $product_data = [
            'id' => $product_id,
            'slug' => sanitize_title( $product_slug ),
        ];

        $new_slug = $this->product_model->store( $product_data )['slug'] ?? null;

        $result = [
            'success' => (bool) $new_slug,
            'new_permalink' => North_Commerce_Product::get_permalink_base() . $new_slug,
        ];

        wp_send_json_success( $result );
    }

	/**
	 * Handle `load more` button click on Products List page
	 *
	 * @since   0.1.6
	 * @version 0.1.13
	 */
	public function get_more_products() {
		$page = intval( $_POST['page'] ?? 1 );
		$limit = intval( $_POST['limit'] ?? 15 );

		$options = [
			'offset' => $limit * $page,
			'limit' => $limit,
		];

		$products = $this->product_model->list_by_status_name( 'Published', $options );

		ob_start();
		$this->template( 'products-grid', NORTH_COMMERCE_PLUGIN_DIR_PATH . 'public/templates/products-list', [ 'products' => $products ] );
		$products_html = ob_get_contents();
		ob_end_clean();

		$result = [
			'html' => $products_html,
			'all_products_counter' => $this->product_model->count_by_status_name( 'Published' )
		];

		wp_send_json_success( $result );
	}

    /**
     * @since   0.1.10
     * @version 0.1.25
	 */
    public function get_variant_options_map() {
        $product_id = $_POST['product_id'] ?? null;

        if ( ! $product_id ) {
            wp_send_json_error();
        }

        $variant_options_map = [];
        $variant_option_matrix = $this->product_model->get_variant_option_values_of_product( $product_id );

        if ( ! $variant_option_matrix ) {
            wp_send_json_success( $variant_options_map );
        }

        $product = $this->product_model->get_by_id( $product_id, [
            'columns' => [ 'id' ],
            'expand' => [
                'product_options.product_option_values',
                'product_variants',
                'product_variants.product_variant_type'
            ]
        ] );

        foreach ( $product['product_variants'] as $variant ) {
            if (
                ProductVariantTypes::solo()->slug === $variant['product_variant_type']['slug']
                || isset( $variant['deleted'] )
            ) {
                continue;
            }

            $variant_id = $variant['id'];

            $options = array_filter( $variant_option_matrix, function ( $item ) use ( $variant_id ) {
                return $variant_id === $item['product_variant_id'];
            } );

            foreach ( $options as $option ) {
                $variant_options_map[ (int) $variant_id ][] = (int) $option['product_option_value_id'];
            }
        }

        wp_send_json_success( $variant_options_map );
    }

}
