<?php

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\Collections\{
    ShippingDetailTypes,
    ProductVariantTypes,
    PaymentProviders,
    PaymentStatuses,
    OrderStatuses,
    ProductTypes,
    RateTypes
};
use NorthCommerce\Models\{
    OrderModel,
    ProductModel,
    CouponModel
};

/**
 * Order controller class.
 *
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.25
 */
class North_Commerce_Order extends North_Commerce_Admin_Base {

    /**
     * @var integer|bool $order_id Order ID.
     * @deprecated 0.1.3
     */
    private $order_id;

    /**
	 * @var  \NorthCommerce\Models\OrderModel  $order_model  Order Model.
     * @since 0.1.3
	 */
    private $order_model;


    public function __construct( $order_id = null ) {
		parent::__construct();
        $this->set_id( $order_id );
        $this->initialize_db_entity_model();
    }

    /**
     * Set an ID for Order instance.
     *
     * @param null|int $order_id
     * @deprecated 0.1.3
     */
    protected function set_id( $order_id ) {
        if ( isset( $this->order_id ) ) {
            return;
        }

        $this->order_id = $order_id ?: get_the_ID();
    }

    /**
	 * Initialize object for manipulating data within database
	 *
	 * @since 0.1.3
	 */
    protected function initialize_db_entity_model() {

        if ( isset( $this->order_model ) ) {
			return;
		}

        $this->order_model = new \NorthCommerce\Models\OrderModel();

    }

    /**
     * Retrieve order ID.
     *
     * @deprecated 0.1.3
     * @return int|null
     */
    public function get_id() {
        return $this->order_id;
    }

    /**
     * Create new order.
     *
     * @version 0.1.23
     *
     * @param   array         $order_data
     * @return  int|WP_Error  Order ID or WP_Error on failure
     */
    public static function create_order( $order_data ) {

        do_action( 'north-commerce/order/create/before', $order_data );

        $order_model = new OrderModel();
        $product_model = new ProductModel();

        $product = $product_model->get_by_id( $order_data['product_id'] );
        $order_status = $order_model->get_order_status_by_slug( $order_data['order_status_slug'] ?? null );
        $order_status = $order_status ?: (array) OrderStatuses::created();

        $payment_status = $order_model->get_payment_status_by_slug( $order_data['payment_status_slug'] ?? null );
        $payment_status = $payment_status ?: (array) PaymentStatuses::failed();

        if (
            ProductTypes::subscription()->slug !== $product['product_type']['slug']
            && PaymentStatuses::failed()->slug !== $payment_status['slug']
        ) {
            $variant_type_id = $order_data['product_variant']['product_variant_type_id'] ?? null;

            // Decreace quantity counter
            if (
                $variant_type_id !== ProductVariantTypes::solo()->id
                && ! empty( $order_data['product_variant']['quantity'] )
            ) {
                $new_quantity = intval( $order_data['product_variant']['quantity'] ) - intval( $order_data['product_quantity'] );
                $product_model->update_variant_quantity( $order_data['product_variant']['id'], $new_quantity );
            } elseif (
                null !== $product['quantity']
                && $order_data['product_quantity']
            ) {
                $new_quantity = intval( $product['quantity'] ) - intval( $order_data['product_quantity'] );
                $product_model->update_quantity( $order_data['product_id'], $new_quantity );
            }
        }

        if ( isset( $order_data['bump_product_id'] ) ) {
            $meta['bump_product_id'] = $order_data['bump_product_id'];
            $meta['bump_subtotal'] = $order_data['bump_subtotal'];
            $meta['bump_product_currency'] = $order_data['bump_product_currency'];
            $meta['bump_total'] = $order_data['bump_total'];
            $meta['bump_product_paid'] = $order_data['bump_product_paid'];
            $meta['bump_product_price'] = $order_data['bump_product_price'];
            $meta['bump_product_type'] = $order_data['bump_product_type'];
            $meta['bump_product_trans_id'] = $order_data['bump_product_trans_id'] ?? '';
            $meta['bump_order_status'] = $order_data['bump_order_status'];
            $meta['bump_order_payment_status'] = $order_data['bump_order_payment_status'];
            $meta['bump_product_quantity'] = $order_data['bump_product_quantity'];
            $meta['bump_product_subtotal'] = $order_data['bump_product_subtotal'];

            if ( 'subscription' === $meta['bump_product_type'] ) {
                $meta['bump_product_frequency'] = $order_data['bump_product_frequency'];

                if ( isset( $order_data['bump_product_first_period'] ) && $order_data['bump_product_first_period'] === 'on' ) {
                    $meta['bump_product_first_period'] = $order_data['bump_product_first_period'];
                    $meta['bump_product_start_price'] = $order_data['bump_product_start_price'];
                }

                if ( isset( $order_data['bump_product_free_trial'] ) && $order_data['bump_product_free_trial'] == 'on' ) {
                    $meta['bump_product_free_trial'] = $order_data['bump_product_free_trial'];
                    $meta['bump_product_trial_count'] = $order_data['bump_product_trial_count'];
                    $meta['bump_product_trial_type'] = $order_data['bump_product_trial_type'];
                }

            } elseif ( 'payment-plan' === $meta['bump_product_type'] ) {
                $meta['bump_product_frequency'] = $order_data['bump_product_frequency'];
                $meta['bump_product_payment_numbers'] = $order_data['bump_product_payment_numbers'];
                $meta['bump_product_payment_numbers_left'] = $order_data['bump_product_payment_numbers_left'];

                if ( $order_data['bump_product_first_payment'] === 'on' ) {
                    $meta['bump_product_first_payment'] = $order_data['bump_product_first_payment'];
                    $meta['bump_product_first_payment_price'] = $order_data['bump_product_first_payment_price'];
                }
            }

            if ( 'subscription' !== $meta['bump_product_type'] ) {
                $bump_product = $product_model->get_by_id( $order_data['bump_product_id'] );
                if ( null !== $bump_product['quantity'] ) {
                    $new_bump_quantity = intval( $bump_product['quantity'] ) - intval( $meta['bump_product_quantity'] );
                    $product_model->update_quantity( $order_data['bump_product_id'], $new_bump_quantity );
                }
            }
        }

        $customer_data = [
            'first_name' => $order_data['firstName'],
            'last_name' => $order_data['secondName'],
            'email' => $order_data['email'],
            'country_code' => $order_data['phone_code'],
            'phone' => $order_data['phone'],
        ];
        $customer = $order_model->retrieve_customer( $customer_data );

        if ( $order_data['checkout_address'] ) {
            $country_data = [
                'name' => $order_data['checkout_country'],
                'abbreviation' => $order_data['phone_code'],
            ];

            $shipping_address_data = [
                'is_default_shipping' => true, // ?
                'customer_id' => $customer['id'],
                'is_default_billing' => true, // ?
                'first_name' => $customer_data['first_name'],
                'last_name' => $customer_data['last_name'],
                'phone' => $customer_data['phone'],
                'addressline1' => $order_data['checkout_address'],
                'addressline2' => null,
                'city' => $order_data['checkout_city'],
                'state' => $order_data['checkout_state'],
                'zipcode' => $order_data['checkout_zip'],
                'country_id' => $order_model->retrieve_country_id( $country_data )
            ];

            $shipping_address_id = $order_model->retrieve_shipping_address_id( $shipping_address_data );
        }

        if ( ! empty( $order_data['card_exp_date'] ) ) {
            $card_exp_date = explode( '/', $order_data['card_exp_date'] );
            $card_expiration = [
                'month' => $card_exp_date[0],
                'year' => $card_exp_date[1],
            ];
        }

        $payment_method_data = [
            'customer_id' => $customer['id'],
            'payment_provider_id' => $order_model->get_payment_provider_by_slug( $order_data['payment_provider_slug'] )['id'],
            'token' => $order_data['stripe_token'] ?? null,
            'last4' => $order_data['card_last_four'] ?? null,
            'brand' => $order_data['card_brand'] ?? null,
            'expiration_month' => $card_expiration['month'] ?? null,
            'expiration_year' => $card_expiration['year'] ?? null,
        ];
        $customer_payment_method_id = $order_model->retrieve_customer_payment_method_id( $payment_method_data );

        // $shipping_detail_data = [
        //     'shipping_detail_type_id' => ShippingDetailTypes::actual()->id, // todo: need logic
        //     'rate_type_id' => RateTypes::calculatedRate()->id, // todo: need logic
        //     'shipping_rates_internal_id' => null, // ?
        //     'shipping_rates_easypost_id' => null, // ?
        //     'tracking_number' => null, // ?
        //     'estimated_delivery' => null, // ?
        //     'carrier' => null, // ?
        //     'service' => null, // ?
        //     'handling_fee' => null, // ?
        //     'handling_percentage' => null, // ?
        //     'shipping_cost' => null, // ?
        //     'easypost_rate_id' => null, // ?
        //     'easypost_shipment_id' => null, // ?
        //     'shipping_label_url' => null, // ?
        // ];
        // $shipping_detail_id = $order_model->retrieve_shipping_detail_id( $shipping_detail_data );

        foreach ( $product['product_variants'] as $key => $variant ) {
            if ( $order_data['product_variant']['id'] === $variant['id'] ) {
                $product_variant = $product['product_variants'][ $key ];
                break;
            }
        }
        $variant_sku = $product_variant['sku'] ?? $product['sku'];
        $variant_slug = isset( $product_variant['slug'] ) && 'solo' !== $product_variant['product_variant_type']['slug'] ? $product_variant['slug'] : '';
        $variant_description = $variant_sku ? $variant_sku . ': ' : '';
        $variant_description .= $order_data['product_name'] ?? $product['name'];
        $variant_description .= $variant_slug ? " ( {$variant_slug} )" : '';

        $formatted_order_data = [
            'customer_id' => $customer['id'],
            'shipping_address_id' => $shipping_address_id ?? null,
            'billing_address_id' => $shipping_address_id ?? null,
            'order_status_id' => $order_status['id'],
            'payment_status_id' => $payment_status['id'],
            // 'shipping_detail_id' => $shipping_detail_id,
            'customer_payment_method_id' => $customer_payment_method_id,
            'shipping' => 0, // ?
            'tax' => 0, // ?
            'subtotal' => $order_data['subtotal'],
            'total' => $order_data['total'],
            'paid' => $order_data['product_paid'] ?? 0,
            '_line_items' => [
                [
                    'ordered_variant_id' => $product_variant['id'] ?? $product['product_variants'][0]['id'],
                    'ordered_variant_description' => $variant_description,
                    'ordered_amount' => $order_data['subtotal'],
                    'ordered_quantity' => $order_data['product_quantity'],
                ]
            ],
        ];

        $new_order = $order_model->store( $formatted_order_data );

        if ( isset( $new_order['id'] ) ) {

            if ( isset( $order_data['product_trans_id'] ) ) {
                add_option( "nc/order_{$new_order['id']}/transaction_id", $order_data['product_trans_id'] );

                // $order_model->update_attribute_value( TODO: tbd
                //     $new_order['id'],
                //     'transaction_id',
                //     $order_data['payment_transaction_id']
                // );
            }

            if (
                ProductTypes::subscription()->slug === $product['product_type']['slug']
                && ! empty( $order_data['paypal_subscription_id'] )
            ) {
                add_option( "nc/order_{$new_order['id']}/paypal_subscription_id", $order_data['paypal_subscription_id'] );

                // $order_model->update_attribute_value( TODO: tbd
                //     $new_order['id'],
                //     'paypal_subscription_id',
                //     $order_data['paypal_subscription_id']
                // );
            }

            if ( isset( $order_data['product_payment_numbers_left'] ) ) {
                $payments_counter = (int) $product['payment_detail']['num_payments'];
                $first_payment_successful = (bool) (float) $new_order['paid'];
                if ( $first_payment_successful ) {
                    $remaining_payments_counter = $payments_counter - 1; // exclude first payment
                    $payments_counter = $remaining_payments_counter < 0 ? 0 : $remaining_payments_counter;
                }

                add_option( "nc/order_{$new_order['id']}/num_payments_left", $payments_counter );

                // $order_model->update_attribute_value( TODO: tbd
                //     $new_order['id'],
                //     'remaining_payments_counter',
                //     $payments_counter
                // );
            }

            do_action( 'north-commerce/order/create/success', $new_order['id'] );

        }

        if ( isset( $order_data['coupon_id'] ) ) {
            self::store_applied_coupon( $new_order['id'], $order_data['coupon_id'] ?? null );
        }

        return $new_order['id'] ?? null;

    }

    /**
     * @since 0.1.1
     * @deprecated Need revision
     */
	public function refund_order() {
		$order_id = sanitize_text_field( $_POST['order_id'] ); // phpcs:ignore WordPress.Security.NonceVerification.Missing
		$order    = $this->order_model->get_by_id( $order_id );

		//Square payment provider
		if($square_result = apply_filters('north-commerce/order/refund', $order)) {
			$square_result['success']
				? wp_send_json_success( [ 'message' => $square_result['message'] ] )
				: wp_send_json_error( [ 'message' => $square_result['message'] ], 422 );
		}

		// Mollie payment provider
		if (
			PaymentProviders::mollie()->slug === $order['customer_payment_method']['payment_provider']['slug']
			&& get_post_meta( $order_id, 'mollie_payment' ) // todo: eliminate
		) {
			$mollie_payment = json_decode( get_post_meta( $order_id, 'mollie_payment' )[0] ); // todo:
			$mollie         = new North_Commerce_Mollie();
			$result         = $mollie->refund( $mollie_payment->id );

			$result['success']
				? wp_send_json_success( [ 'message' => $result['message'] ] )
				: wp_send_json_error( [ 'message' => $result['message'] ], 422 );
		}

		//else
		$not_available_message = sprintf('%s: %s',
			__( 'Not Available for payment provider', 'north-commerce' ),
			$order['customer_payment_method']['payment_provider']['name']);

		wp_send_json_error( [ 'message' => $not_available_message ] );
	}

    /**
     * Update customer name
     *
     * @deprecated Need revision
     */
    function update_customer_name( $first_name = null, $second_name = null, $order_id = null ) {
        $first_name = sanitize_text_field( $_POST['customer']['customer_name'] ?? $first_name ); // phpcs:ignore WordPress.Security.NonceVerification.Missing
        $second_name = sanitize_text_field( $_POST['customer']['customer_surname'] ?? $first_name ); // phpcs:ignore WordPress.Security.NonceVerification.Missing
        $order_id = sanitize_text_field( $_POST['customer']['order_id'] ?? $order_id ); // phpcs:ignore WordPress.Security.NonceVerification.Missing
        $is_post = isset( $_POST['customer'] );

        update_post_meta( $order_id, 'customer_name',  $first_name . ' ' . $second_name );
        update_post_meta( $order_id, 'customer_first', $first_name );
        update_post_meta( $order_id, 'customer_last', $second_name );

        if ( $is_post ) {
            wp_die();
        }

        return true;
    }

    /**
     * Update customer information
     *
     * @deprecated Need revision
     */
    function update_customer_information(
        $email = null,
        $phone = null,
        $isUpdateProfile = false,
        $order_id = null
    ) {
        $email = sanitize_text_field( $_POST['customer']['contact_email'] ?? $email ); // phpcs:ignore WordPress.Security.NonceVerification.Missing
        $phone = sanitize_text_field( $_POST['customer']['contact_phone'] ?? $phone ); // phpcs:ignore WordPress.Security.NonceVerification.Missing
        $isUpdateProfile = sanitize_text_field( $_POST['customer']['update_customer'] ?? $isUpdateProfile );
        $order_id = sanitize_text_field( $_POST['customer']['order_id'] ?? $order_id ); // phpcs:ignore WordPress.Security.NonceVerification.Missing
        $is_post = isset( $_POST['customer'] );

        update_post_meta( $order_id, 'customer_email',  $email );
        update_post_meta( $order_id, 'phone', $phone );

        if ( $is_post ) {
            wp_die();
        }

        return true;
    }

    /**
     * Update status for order`s
     *
     * @version 0.1.19
     */
    function update_orders_status( $status = null, $orders = null ) {
        $orders = $_POST['orders'] ?? array();
        $fulfilled_status = OrderStatuses::fulfilled()->slug;
        $status = sanitize_text_field( $_POST['status'] ?? $fulfilled_status );
        $is_post = isset( $_POST['orders'] );

        $order_model = new OrderModel();

        if ( is_array( $orders ) ) {
            foreach ( $orders as $order_id ) {
                $updated_order = $order_model->update_order_status( $order_id, $status );

                if ( isset( $updated_order['id'] ) && $status === $fulfilled_status ) {
                    do_action( 'north-commerce/order/status/fulfilled', $updated_order['id'] );
                }
            }
            $success = true;
        }

        if ( $is_post ) {
            echo $success;
            wp_die();
        }

        return $success;
    }

    /**
     * @since   0.1.0
     * @version 0.1.2
     */
    public function get_orders() {
        $page = sanitize_text_field( $_POST['page'] ?? 1 ); // phpcs:ignore WordPress.Security.NonceVerification.Missing
        $posts_per_page = sanitize_text_field( $_POST['posts_per_page'] ?? 10 ); // phpcs:ignore WordPress.Security.NonceVerification.Missing
        $status = sanitize_text_field( $_POST['status'] ?? true );
		parse_str( $_POST['filter'] ?? '', $filter );

        $result = $this->get_order_items( $page, $posts_per_page, $status, $filter );

        wp_die( json_encode( $result ) );
    }

    /**
     * Get orders
     *
     * @since   0.1.0
     * @version 0.1.19
     */
    public function get_order_items( $page, $per_page, $status, $filter ) {
        $filter_criteria = [];

        $options = [
            'limit' => $per_page,
            'offset' => $per_page * ( $page - 1 ),
        ];

        if ( $status ) {
            $filter_criteria[] = [ 'eq', 'order_status.slug', sanitize_text_field( $status ) ];
        }

        if ( $filter ) {

            if ( ! empty( $filter['order-name'] ) ) {
                $search_input = sanitize_text_field( $filter['order-name'] );
                $filter_criteria[] = [
                    'or',
                    [ 'eq', 'id', "{$search_input}" ],
                    [ 'eq', 'order_number', "{$search_input}" ],
                    [ 'like', 'customer.first_name', "%{$search_input}%" ],
                    [ 'like', 'customer.last_name', "%{$search_input}%" ],
                    [ 'like', 'customer.email', "%{$search_input}%" ],
                    [ 'like', 'customer.phone', "%{$search_input}%" ],
                ];
            }

            if ( ! empty( $filter['order-data-sort'] ) ) {
                $options['order_by'] = 'created ' . sanitize_text_field( $filter['order-data-sort'] );
            }

            if ( ! empty( $filter['order-customer-sort'] ) ) {
                // $options['order_by'] = 'customer.first_name ' . sanitize_text_field( $filter['order-customer-sort'] );
            }

        }

        $criteria = $filter_criteria ? [ 'and', $filter_criteria ] : true;

        $criteria = apply_filters( 'north-commerce/get_order_items/criteria', $criteria );
        $options = apply_filters( 'north-commerce/get_order_items/options', $options );

        $orders = $this->order_model->list_all( $criteria, $options );
        if ( $orders ) {
            ob_start();
            foreach ( $orders as $order ) {
                $this->template( 'order-item-template', 'order/list', [ 'order' => $order ] );
            }
            $result['orders'] = ob_get_contents();
            ob_end_clean();

            $total_orders_count = $this->order_model->get_total_count( $criteria );
            $result['max_page'] = !empty($per_page) ? ceil( $total_orders_count / $per_page ) : $total_orders_count;
        } else {
            $result['orders'] = '<div class="result__empty" style="display: block;">'
                . __( 'Orders not found!', 'north-commerce' )
                . '</div>';
            $result['max_page'] = 0;
        }

        $result['current_page'] = $page;

        $result['pagination'] = count( $orders )
            ? $options['offset'] + 1 . '-' . ( $options['offset'] + count( $orders ) ) . ' of ' . ( $total_orders_count ?? 0 )
            : esc_html__( '0-0 of 0', 'north-commerce' );

        $result['counters'] = [
            'total' => $this->order_model->count(),
        ];

        foreach ( $this->order_model->list_statuses() as $status ) {
            $result['counters'][ $status['slug'] ] = $this->order_model->count_by_status( $status['slug'] );
        }

        return $result;
    }

    /**
     * @since 0.1.21
     */
    protected static function store_applied_coupon( $order_id, $coupon_id ): void {
        if ( ! $coupon_id ) {
            return;
        }

        $coupon_model = new CouponModel();
        $map_data = compact( 'order_id', 'coupon_id' );

        $result = $coupon_model->store_coupon_order( $map_data );
        $result = $coupon_model->increment_usage_counter( $coupon_id );
    }

}
