<?php

// use NorthCommerce\Models\CustomerModel;

//FYI Martin: https://github.com/kelleymuro/north-commerce/wiki/Basic-Entity-Access-Usage

use NorthCommerce\Db\PerspectiveManager;

/**
 * User class.
 *
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.3
 * @version 0.1.12
 */
class North_Commerce_User extends North_Commerce_Admin_Base {

	/**
	 * @var  integer  $customer_id  Customer ID.
	 */
	private $user_id;
	private static $self;

	protected WP_REST_Request $request;

	// private $customer_model;

	public function __construct( $user_id = null ) {
		parent::__construct();
		// $this->set_id( $customer_id );
		// $this->customer_model = new CustomerModel();
	}

	public static function instance(): North_Commerce_User {
		if ( ! self::$self ) {
			self::$self = new self();
		}
		return self::$self;
	}

	public function permission_callback( WP_REST_Request &$request ) {
		$_REQUEST['form_nonce'] = $_REQUEST['form_nonce'] ?? $request->get_header( 'nc-form-nonce' );
		return check_ajax_referer( 'sign-up-form', 'form_nonce', false );
	}

	public function create_user( WP_REST_Request &$request ) {
		$nonce = $request->get_header( 'nc-form-nonce' );
		$body = $request->get_json_params();

		$first_name = sanitize_text_field($body['firstName']);
		$last_name = sanitize_text_field($body['lastName']);
		$email = sanitize_email($body['email']);
		$password = $body['password'];

		// Create a WordPress user
		$user_id = $this->maybe_create_wordpress_user( $first_name, $last_name, $email, $password );

		// Check if the result is a WP_Error
		if ( is_wp_error( $user_id ) ) {
			return new WP_REST_Response( [
				'success' => false,
				'error'   => $user_id->get_error_message(),
			], 400 ); // Use an appropriate HTTP status code, 400 for Bad Request
		}

		// Create a North Commerce Customer
		$customer_id = $this->maybe_create_north_commerce_customer( $first_name, $last_name, $email, $password );

		// Check for errors after creating North Commerce Customer
		if ( is_wp_error( $customer_id ) ) {
			return new WP_REST_Response( [
				'success' => false,
				'error'   => $customer_id->get_error_message(),
			], 400 ); // Adjust the HTTP status code as needed
		}

		// Exchange the data between systems
		$this->exchange_customer_and_user_data( $customer_id, $user_id );

		return new WP_REST_Response( [
			'success' => true,
			'user' => [
				'user_id' => $user_id,
			],
			'customer' => [
				'customer_id' => $customer_id,
			],
		] );
	}

	public function maybe_create_north_commerce_customer( $first_name, $last_name, $email, $password = '' ) {
		// see if customer exists
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();
		$pm = PerspectiveManager::instance();
		$customer = $pm->asAdministrator( function() use ( $ea, $email ) {
			return $ea->get( 'customers', compact( 'email' ) );
		} );

		if ( empty( $customer['id'] ) ) {
			// Customer does not exist, create new customer using administrator perspective
			$data = $pm->asAdministrator( function() use ( $ea, $first_name, $last_name, $email ) {
				return $ea->create( 'customers', [
					'first_name' => $first_name,
					'last_name' => $last_name,
					'email' => $email,
					'marketing_optin' => 0
					] );
				});
				$customer = $data;
			}

			return $customer['id'];
			
	}

	public function maybe_create_wordpress_user( $first_name, $last_name, $email, $password = '' ) {
		//try and get existing user
		$user = get_user_by('email', $email);


		if($user){
			// if user already exists, show error message.
			return new WP_Error('existing_user', 'User already exists with this email', array('status' => 400));

		}

		$full_name = $first_name.' '.$last_name;

		$userdata = array(
			'user_login' => $email,
			'user_email' => $email,
			'user_nicename' => $full_name,
			'display_name' => $full_name,
			'nickname' => $full_name,
			'first_name' => $first_name,
			'last_name' => $last_name,
			'role' => apply_filters('north_commerce/user/new_user_role', 'subscriber', $email),
		);

		//if an existing user, update the user
		if( isset($user_id) ){
			$userdata['ID'] = $user_id;
		} else {
			//if new user we also want to add password
			$userdata['user_pass'] = $password;
		}

		$user_id = wp_insert_user($userdata);

		//return the user id
		return $user_id;
	}

	public function exchange_customer_and_user_data( $customer_id, $user_id ) {
		// Add the customer id to the user data
		update_user_meta($user_id, 'north_commerce_customer_id', $customer_id);

		// Add the user id to North Commerce
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();
		$pm = PerspectiveManager::instance();

		// Retrieve and update customer data using administrator perspective
		$pm->asAdministrator(function() use ($ea, $customer_id, $user_id) {
			$customer = $ea->get('customers', ['id' => $customer_id]);
			if ($customer) {
				$ea->update('customers', $customer, ['wp_user_id' => $user_id]);
			}
		});
	}

	public function update_user(WP_REST_Request &$request) {
		$nonce = $request->get_header( 'nc-form-nonce' );
		$body = $request->get_json_params();

		$customer_id = sanitize_text_field($body['customer_id']);
		$first_name = sanitize_text_field($body['first_name']);
		$last_name = sanitize_text_field($body['last_name']);
		$email = sanitize_email($body['email']);
		$phone = sanitize_text_field($body['phone']);

		$current_customer = $this->maybe_update_north_commerce_customer($customer_id, $first_name, $last_name, $email, $phone);

		return new WP_REST_Response( [
			'success' => true,
			'customer' => [
				'customer' => $current_customer['id'],
			],
		] );
	}

	public function maybe_update_north_commerce_customer($customer_id, $first_name, $last_name, $email, $phone) {
		//Check if customer exists
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();
		$pm = PerspectiveManager::instance();
		$data = $pm->asAdministrator(function() use ($ea, $customer_id) {
			return $ea->get('customers', ['id' => $customer_id], []);
		});

		if(!$data) {
			return new WP_Error('missing_user', esc_html__('We could not find that North Commerce customer. Try again or logout and log back in.', 'north-commerce'), array('status' => 400));
		}

		$updated_customer = [
			'first_name' => $first_name,
			'last_name' => $last_name,
			'email' => $email,
			'phone' => $phone
		];

		$pm->asAdministrator(function() use ($data, $ea, $customer_id, $updated_customer) {
			return $ea->update('customers', $data, $updated_customer, ['id' => $data['id']]);
		});

		return $data;
	}

	public function get_public_current_user_addresses() {
		$customer_id = get_user_meta( get_current_user_id(), 'north_commerce_customer_id', true );

		if ( ! $customer_id ) {
			wp_send_json_error( [ 'addresses' => [] ] );
		}

		$addresses        = [];
		$template_manager = new \NorthCommerce\Template_Manager( 'public' );
		$agent            = North_Commerce_Db_Agent::instance();
		$ea               = $agent->entityAccess();
		$pm               = PerspectiveManager::instance();

		$filter = [ 'id' => $customer_id ];
		$expand = [
			'expand' => [
				'addresses',
			],
		];

		$pm->asAdministrator( function () use ( $ea, $filter, $expand, &$addresses ) {
			$customer  = $ea->get( 'customers', $filter, $expand );
			$addresses = $customer['addresses'] ?: [];
		} );

		ob_start();
		$template_manager->use( 'my-account/shipping-addresses/items', compact( 'addresses' ) );
		$public_html = ob_get_clean();

		wp_send_json_success( compact( 'addresses', 'public_html' ) );
	}

}
