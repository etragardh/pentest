<?php

use North_Commerce_Settings as Settings;


/**
 * Overview controller class.
 *
 *
 * @package north-commerce/admin
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.5
 * @version 0.1.5
 */
class North_Commerce_Overview extends North_Commerce_Admin_Base {

	public function __construct() {
		parent::__construct();
	}

    /**
     * Get overview info
     */
    public function get_overview_info() {

        $nc_time_zone = Settings::get_current_time_zone();
        date_default_timezone_set($nc_time_zone);

        $startDate = ! empty( $_POST['filter']['startFromDate']) ? $this->convert_date_formate( $_POST['filter']['startFromDate'], 'm/d/Y', 'Y-m-d' ) : date( 'Y-m-d' );
        $endDate = ! empty( $_POST['filter']['endFromDate'] ) ? $this->convert_date_formate( $_POST['filter']['endFromDate'], 'm/d/Y', 'Y-m-d' ) : date( 'Y-m-d' );
        $filterType = ! empty( $_POST['filterType'] ) ? $_POST['filterType'] : 'Today';
        $total_customers = $this->get_total_customers();

        $overview = $this->get_overview_model( $startDate, $endDate,  $total_customers );
        $args = array(
            'overview_info' => $overview,
            'startDate' => $startDate,
            'endDate' => $endDate,
            'filterType' => $filterType
        );

        if ( ! empty( $_POST['filter']['startToDate'] ) ) {
            $startCompareDate = ! empty( $_POST['filter']['startToDate'] ) ? $this->convert_date_formate( $_POST['filter']['startToDate'], 'm/d/Y', 'Y-m-d' ) : date( 'Y-m-d' );
            if ( isset( $_POST['filter']['endToDate'] ) ) {
                $endCompareDate = $this->convert_date_formate( $_POST['filter']['endToDate'], 'm/d/Y', 'Y-m-d' );
            }

            $overview_compare = $this->get_overview_model( $startCompareDate, $endCompareDate, $total_customers );

            $args['compare'] = Overview_Model::compare($overview, $overview_compare);
            $args['compare']['start_date'] = $this->convert_date_formate( $startCompareDate, 'Y-m-d', 'M d, Y' );
            if ( isset( $endCompareDate ) ) {
                $args['compare']['end_date'] = $this->convert_date_formate( $endCompareDate, 'Y-m-d', 'M d, Y' );
            }
        }

        $this->get_short_overview_template($args);
        wp_die();
    }

    /**
     * @since 0.1.0
     * @deprecated Need revision
     */
    private function get_overview_model( $startDate, $endDate, $total_customers ) {

        $args = array(
            'posts_per_page' => -1,
            // 'post_type' => 'c_north_order',
            'post_status' => 'fulfilled',
            'date_query' => array(
                array(
                    'after' => $startDate,
                    'before' => isset( $endDate ) ? $endDate : $startDate,
                    'inclusive' => true,
                ),
            )
        );

        $overview_query = new WP_Query( $args );
        $overview_model = new Overview_Model( $total_customers );

        while ( false /*$overview_query->have_posts()*/ ) { // todo:

            $overview_query->the_post();
            $total_sale = get_post_meta( get_the_ID(), 'total', true );

            $product_id = get_post_meta( get_the_ID(), 'product_id', true );
            $product_name = get_post_meta( get_the_ID(), 'product_name', true );
            $product_type = get_post_meta( get_the_ID(), 'product_type', true );
            $product_quantity = get_post_meta( get_the_ID(), 'product_quantity', true );
            $coupon = get_post_meta( get_the_ID(), 'coupon', true );
            $email_customer = get_post_meta( get_the_ID(), 'customer_email', true );

            $overview_model->add_sale( $total_sale );
            $overview_model->add_product( $product_id, $product_name, $product_quantity );

            if ( ! empty( $coupon ) ) {
                $coupon = is_object($coupon) ? $coupon->post_title : $coupon;
                $overview_model->add_coupon( $coupon );
            }

            if ( strcasecmp( $product_type, 'subscription' ) == 0 ) {
                $overview_model->add_subscription();
            }

            if ( ! empty( $email_customer ) ) {
                $overview_model->add_email_customer($email_customer);
            }

        }

        wp_reset_postdata();
        wp_reset_query();
        return $overview_model;
    }


    private function get_total_customers() : array {
        //TODO: CHECK CACHE TOTAL (NEED UPDARE THIS VALUE AFTER NEW ORDER)
        global $wpdb;
        $customers = $wpdb->get_results(
            "SELECT meta_value as email,
                COUNT(*) as count
                FROM wp_postmeta
                WHERE meta_key = 'customer_email'
                GROUP BY meta_value",
            'OBJECT_K'
        );

        return $customers ? $customers : array();
    }

    private function convert_date_formate($date, $oldFormat, $newFormat){
        try {
            $newformat = \DateTime::createFromFormat( $oldFormat, $date )->format( $newFormat );
            return $newformat;
        } catch ( Exception $e ) {
            return null;
        }
    }

    /**
     * Get short overview template
     */
    private function get_short_overview_template( $args ) {
        $this->template( 'overview_short_details', 'overview', $args );
    }

}
