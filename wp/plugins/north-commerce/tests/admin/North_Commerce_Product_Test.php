<?php
/*
 * A PHP file for testing out our the north commerce product code
 */
require_once(__DIR__ . '/../north-commerce-test-case.php');

class North_Commerce_Product_Test extends North_Commerce_Test_Case
{

	function test_get_product_option_value_max_quantity()
	{
		$ncp = new North_Commerce_Product();
		$pv = $this->ef->randomProductVariant();
		$p = $this->ea->get('products', ['id' => $pv['product_id']]);
		$pov = $this->ea->get('product_option_values', [
			'product_option.product.id' => $p['id']
		]);

		$this->assertIsArray($pov);

		$set_quantity = function($p_q, $pv_q) use($p, $pov) {
			$this->ea->update('products', $p, ['quantity' => $p_q]);
			$pvs = $this->ea->list('product_variants', [
				'product_variant_option_values.product_option_value_id' => $pov['id']
			]);

			foreach($pvs as $i => $pv) {
				$this->ea->update('product_variants', $pv, ['quantity' => $pv_q($i)]);
			}
		};

		$max = 0;
		$set_quantity(null, function($i) use(&$max) {
			$max = $i;
			return $i;
		});
		$found = $ncp->get_product_option_value_max_quantity($pov);
		$this->assertEquals($max, $found);

		$set_quantity(10, function($i) { unset($i); return null; });
		$found = $ncp->get_product_option_value_max_quantity($pov);
		$this->assertEquals(10, $found);

		$set_quantity(null, function($i) { unset($i); return null; });
		$found = $ncp->get_product_option_value_max_quantity($pov);
		$this->assertNull($found);

	}
}
