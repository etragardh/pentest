<?php
/*
 * A PHP file for testing out access to the North Commerce Db Entity Access object.
 */

use NorthCommerce\Db\Collections\RateTypes;
use NorthCommerce\Db\Collections\ShippingDetailTypes;
use NorthCommerce\Db\Schema;
use NorthCommerce\Testing\EntityFactory;

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class North_Commerce_Db_Entity_Access_Test extends North_Commerce_Db_Test_Case
{

	public function testGet() {
		$customer = $this->ef->newCustomer();
		$order = $this->ef->newOrder(['customer' => $customer]);

		$tests = [
			['id' => $customer['id']],
			['email' => $customer['email']],
			['id' => $customer['id'], 'email' => $customer['email']],
			['and',
			 ['=', 'id', $customer['id']],
			 ['=', 'email', $customer['email']]],
			['email' => ['like', $customer['email']]],
		];

		foreach($tests as $where) {
			$found = $this->ea->get('customers', $where);
			$this->assertEquals($customer['id'], $found['id'], print_r($where, true));
		}

		$found = $this->ea->get('orders', ['customer.email' => $customer['email']]);
		$this->assertEquals($found['customer_id'], $order['customer_id']);
	}

	public function testList()
	{
		$num_customers = 3;
		$customers = [];
		$orders = [];
		$quantity = 1;
		for($i = 0;	$i < $num_customers; $i++) {
			$customers[] = $this->ef->newCustomer();
			$orders[] = $this->ef->newOrder(['customer' => $customers[$i],
											 'line_items' => [
												 ['product_variant' => $this->ef->randomProductVariant(), 'quantity' => ($quantity++) ],
												 ['product_variant' => $this->ef->randomProductVariant(), 'quantity' => ($quantity++) ]
											 ]]);
		}

		$found = $this->ea->list('customers', true);
		$this->assertGreaterThanOrEqual($num_customers, count($found));

		$found = $this->ea->list('customers', ['email' => $customers[0]['email']]);
		$this->assertEquals($customers[0]['id'], $found[0]['id']);
		$this->assertEquals(1, count($found));

		$found = $this->ea->list('orders', [
			'customer.email' => $customers[0]['email']
		]);
		$this->assertEquals(1, count($found));
		$found_customer = $this->ea->get('customers', ['id' => $found[0]['customer_id']]);
		$this->assertEquals($customers[0]['email'], $found_customer['email']);
		$this->assertEquals($orders[0]['customer_id'], $found[0]['customer_id']);
		$this->assertEquals($orders[0]['id'], $found[0]['id'],
							print_r($orders[0], true) . "\n\n" . print_r($found[0], true));
		$this->assertEquals(1, count($found));

		$found = $this->ea->list('customers', ['>', 'orders.line_items.quantity', 3]);
		$this->assertGreaterThanOrEqual(2, count($found));
	}

	public function testGetExpanded()
	{
		$ef = EntityFactory::instance();
		$customer = $ef->newCustomer();
		$orders = [];
		for($i = 0; $i < 3; $i++) {
			$orders[] = $ef->newOrder(['customer' => $customer]);
		}

		$ea = North_Commerce_Db_Entity_Access::instance();


		$expands = [
			[
				'orders.line-items.product-variant',
				'orders.billing-address.country'
			],
			'orders.line-items.product-variant,' .
			'orders.billing-address.country'
		];

		foreach($expands as $expand) {
			$c = $ea->get('customers', ['id' => $customer['id']], [
				'expand' => $expand
			]);

			$this->assertEquals($c['id'], $customer['id']);

			foreach($c['orders'] as $o) {
				$found = $ea->get('orders', ['customer_id' => $customer['id'],
											 'id' => $o['id']]);
				$this->assertIsArray($found);
				$this->assertIsArray($o['line_items']);
				$this->assertIsDbId('line_items', $o['line_items'][0]['id']);
				$this->assertIsDbId('countries', $o['billing_address']['country']['id']);
			}
		}
	}

	public function testListExpand()
	{
		$ef = EntityFactory::instance();
		$products = $ef->randomProducts(3, ['is','product_options.name', ['not', null]],
										['variants' => 'auto']);

		$ea = North_Commerce_Db_Entity_Access::instance();
		$where = ['or',
				  ['id' => $products[0]['id']],
				  ['id' => $products[1]['id']],
				  ['id' => $products[2]['id']]];

		$p_list = $ea->list('products', $where, ['expand' => [
			'product_status',
			'product_variants.product_variant_type',
			'product_options.product_option_type'
		]]);

		$this->assertEquals(count($products), count($p_list));
		foreach($p_list as $p) {
			$this->assertIsDbId('products', $p['id']);
			$this->assertIsString($p['product_status']['slug']);
			$this->assertIsDbId('product_variants', $p['product_variants'][0]['id']);
			$this->assertIsString($p['product_options'][0]['product_option_type']['slug']);
		}

	}

	public function testUpdate()
	{
		$new =	$this->ef->newCustomer();
		$updated_first_name = nc_random_token();
		$updated = $this->ea->update('customers', $new, [
			'first_name' => $updated_first_name
		]);

		$this->assertEquals($new['last_name'], $updated['last_name']);
		$this->assertEquals($updated_first_name, $updated['first_name']);
	}

	public function testDelete()
	{
		$customer = $this->ef->newCustomer();
		$addr1 = $this->ef->newAddress(['customer' => $customer]);
		$this->ef->newAddress(['customer' => $customer]);

		$this->ea->delete('addresses', $addr1);

		try {
			$this->ea->delete('customers', $customer);
			$this->assertTrue(false, "Whoa, deleted a customer but shouldn't have");
		} catch(Exception $ex) {
			$this->assertInstanceOf(Exception::class, $ex);
		}

		$this->ea->delete('customers', $customer, ['recursive' => true]);


	}

	public function testDeleteByMarkingDeleted()
	{
		$p = $this->ef->newProduct(['variants' => false]);
		$this->ea->delete('products', ['id' => $p['id']]);
		$found = $this->ea->get('products', ['id' => $p['id']],
								['not_found' => null]);
		$this->assertNull($found);
	}

	public function testAttrStoreStrategy()
	{
		$ea = $this->ea;

		$tests = [
			['t' => "orders", 'c' => "shipping", 'v' => "2021-03-01",
			 's' => NORTH_COMMERCE_DB_STORE_STRATEGY_ATTR_VALUE ],

			['t' => "orders", 'c' => "line_items",
			 'v' => [ [ 'quantity' => 3 ], ['quantity' => 2] ],
			 's' => NORTH_COMMERCE_DB_STORE_STRATEGY_TABLE_REF ],

			['t' => "orders", 'c' => "payment_status",
			 'v' => [ 'slug' => "Paid"  ],
			 's' => NORTH_COMMERCE_DB_STORE_STRATEGY_ATTR_REF ],

			['t' => "orders", 'c' => "foo",
			 'v' => [ [ 'quantity' => 3 ], ['quantity' => 2] ],
			 's' => false ],

			['t' => "orders", 'c' => "payment_status",
			 'v' => [ [ ['slug' => "Paid" ] ] ],
			 's' => false ]
		];

		foreach($tests as $t) {
			$result = $ea->attrStoreStrategy($t['t'], $t['c'], $t['v']);
			$this->assertEquals($result['type'], $t['s'], print_r($t, true));
		}


		$strategy = $ea->attrStoreStrategy("orders", "line_items", [ [ 'quantity' => 2] ]);
		$this->assertEquals($strategy['type'], NORTH_COMMERCE_DB_STORE_STRATEGY_TABLE_REF);
		$this->assertEquals($strategy['source_col'], 'order_id');

		$strategy = $ea->attrStoreStrategy("orders", "payment_status", [ 'slug' => "Paid" ]);
		$this->assertEquals($strategy['type'], NORTH_COMMERCE_DB_STORE_STRATEGY_ATTR_REF);
		$this->assertEquals($strategy['dest_table'], 'payment_statuses');

	}

	public function testStore() {
		$ea = $this->ea;
		$ef = EntityFactory::instance();

		$tracking_number = nc_random_token();
		$tax = round(rand(1000, 5000) / 100, 2);
		$total = round(rand(10000, 50000) / 100, 2);
		$li_amount = round(rand(1000, 5000) / 100, 2);;
		$li_description = "Product " . nc_random_token();
		$li_quantity = rand(1, 54);
		$product_variant = $ef->randomProductVariant();
		$customer = $ef->newCustomer();

		$data = [
			'customer_id' => $customer['id'],
			'order_status_id' => nc_g($ef->pickBySlug('order_statuses', 'on-hold'), 'id'),
			'payment_status_id' => nc_g($ef->pickBySlug('payment_statuses', 'unpaid'), 'id'),
			'shipping_details' => [
				['tracking_number' => $tracking_number,
				 'rate_type_id' => RateTypes::flatRate()->id,
				 'shipping_detail_type_id' => ShippingDetailTypes::planned()->id]
			],
			'tax' => $tax,
			'total' => $total,
			'line_items' => [
				['product_variant_id' => $product_variant['id'],
				 'description' => $li_description,
				 'amount' => $li_amount,
				 'quantity' => $li_quantity ]
			]
		];

		$order = $ea->store('orders', $data);

		$this->assertEquals($order['tax'], $tax);
		$this->assertEquals($order['total'], $total);
		$found = $this->assertValidOrder($order['id'], $tax, $li_amount, $tracking_number);

		$new_amount = round(rand(1000, 5000) / 100, 2);
		$new_tracking_number = nc_random_token();
		$new_tax = round(rand(1000, 5000) / 100, 2);

		$data = [
			'id' => $order['id'],
			'tax' => $new_tax,
			'shipping_details' => [
				['id' => $found['shipping_detail']['id'],
				 'tracking_number' => $new_tracking_number,
				 'rate_type_id' => RateTypes::flatRate()->id,
				 'shipping_detail_type_id' => ShippingDetailTypes::planned()->id]
			],
			'line_items' => [
				['id' => $found['line_item']['id'], 'amount' => $new_amount]
			]
		];

		$ea->store('orders', $data);
		$this->assertValidOrder($order['id'], $new_tax, $new_amount, $new_tracking_number);
	}

	public function testCount() {
		$ea = $this->ea;
		$ef = EntityFactory::instance();

		$country_code = nc_random_token();
		$customers = [];

		for($i = 0; $i < 3; $i++) {
			$customers[] = $ef->newCustomer([
				'country_code' => $country_code
			]);
		}

		$this->assertGreaterThanOrEqual(3, $ea->count('customers', true));
		$this->assertEquals(2, $ea->count('customers', [
			'or', ['id' => $customers[0]['id']], ['id' => $customers[1]['id']]
		]));
		$this->assertGreaterThanOrEqual(3, $ea->count('customers', [ 'addresses.is_default_shipping' => true]));
		$this->assertGreaterThanOrEqual(3, $ea->count('customers', ['country_code' => $country_code]));
		$this->assertEquals(0, $ea->count('customers', ['country_code' => "X$country_code"]));
	}

	public function testGetColumns()
	{
		$ea = $this->ea;
		$ef = EntityFactory::instance();

		$customer = $ef->newCustomer();
		$found = $ea->get('customers', ['id' => $customer['id']]);

		$schema = new Schema();
		$columns = $schema->getColumns('customers');
		foreach(array_keys($columns) as $col) {
			$this->assertTrue(array_key_exists($col, $found));
		}

		try {
			$ea->get('x-customers', ['id' => $customer['id']]);
			$this->assertTrue(false);
		} catch(Exception $ex) {
			$this->assertInstanceOf(Exception::class, $ex);
		}

	}

	public function testListColumns() {
		$ea = $this->ea;
		$ef = EntityFactory::instance();
		$p = $ef->randomProduct();

		$cols = ['id', 'created', 'slug'];
		$found = $ea->get('products', ['id' => $p['id']], [
			'columns' => $cols
		]);

		foreach(array_keys($p) as $index) {
			if(in_array($index, $cols)) {
				$this->assertEquals($p[$index], $found[$index]);
			} else {
				$this->assertTrue(!isset($found[$index]));
			}
		}
	}


	private function assertValidOrder($id, $tax, $li_amount, $sd_tracking_number) {
		$ea = $this->ea;
		$found_order = $ea->get('orders', ['id' => $id]);
		$this->assertEquals($tax, $found_order['tax']);

		$found_shipping_detail = $ea->get('shipping_details', ['order_id' => $id]);
		$this->assertEquals($sd_tracking_number, $found_shipping_detail['tracking_number']);

		$found_line_items = $ea->list('line_items', ['order_id' => $found_order['id']]);
		$this->assertEquals(1, count($found_line_items));
		$found_li = $found_line_items[0];
		$this->assertEquals($li_amount, $found_li['amount']);

		return [
			'order' => $found_order,
			'shipping_detail' => $found_shipping_detail,
			'line_item' => $found_li
		];
	}

	public function testGetWithException()
	{
		$p = $this->ea->get('products', ['id' => -1]);
		$this->assertNull($p);

		$this->assertException(function() {
			$this->ea->get('products', ['id' => -1],
						   ['not_found' => NC_DB_PANIC]);
		}, NcNotFoundException::class);
	}

}
