<?php
/*
 * A PHP file for testing out our visible if automation
 */

use NorthCommerce\Db\Automations\VisibleIfAutomation;

require_once(__DIR__ . '/AutomationTestCase.php');

class VisibleIfAutomationTest extends AutomationTestCase
{

	function testHasVisibleIf()
	{
		$via = new VisibleIfAutomation();
		$tests = [
			'products' => true,
			'orders' => false,
			'product_images' => true,
			'product_variants' => true,
			'product_variant_option_values' => true,
			'countries' => false
		];

		foreach($tests as $table => $expected) {
			$this->assertEquals($expected, is_array($via->visibleIfClause($table)),
								print_r([
									'table' => $table
								], true));
		}
	}

	function testVisibleIfClausesAreValid() {
		$tables = $this->agent->schema()->getTables();
		foreach($tables as $table_name => $table_defn) {
			$vi = nc_g(nc_g($table_defn, 'meta', []), 'visible_if');
			if(!$vi) {
				continue;
			}
			try {
				$result = $this->ea->list($table_name, $vi, ['limit' => 2]);
				$this->assertIsArray($result);
			} catch(Exception $ex) {
				$this->assertTrue(false, print_r([
					'table_name' => $table_name,
					'vi' => $vi,
					'ex' => ($ex . "")
				], true));
			}

		}
	}

	public function testOnEntityAccessCriteria()
	{
		$p = $this->ef->randomProduct([
			'product_images.id' => ['>', 0]
		]);

		$images = $this->ea->list('product_images', ['product_id' => $p['id']]);
		$this->assertGreaterThan(0, count($images));

		$p = $this->ea->update('products', $p, [
			'deleted' => null,
			'published' => $this->agent->sqlTimestamp(time())
		]);

		$this->agent->perspectiveManager()->asPublic(function() use($p, $images) {
			$found = $this->ea->list('product_images', ['product_id' => $p['id']]);
			$this->assertEquals(count($images), count($found));
		});

		$deleted_p = $this->ea->update('products', $p, [
			'deleted' => $this->agent->sqlTimestamp(time())
		]);
		$this->assertNull($deleted_p);

		$this->agent->perspectiveManager()->asPublic(function() use($p) {
			$found = $this->ea->list('product_images', ['product_id' => $p['id']]);
			$this->assertEquals(0, count($found));
		});

		$p = $this->ea->update('products', $p, [
			'deleted' => null,
			'published' => null
		]);

		$this->agent->perspectiveManager()->asPublic(function() use($p) {
			$found = $this->ea->list('product_images', ['product_id' => $p['id']]);
			$this->assertEquals(0, count($found));
		});

		$p = $this->ea->update('products', $p, [
			'deleted' => null,
			'published' => $this->agent->sqlTimestamp(time())
		]);

		$this->agent->perspectiveManager()->asPublic(function() use($p, $images) {
			$found = $this->ea->list('product_images', ['product_id' => $p['id']]);
			$this->assertEquals(count($images), count($found));
		});
	}

}
