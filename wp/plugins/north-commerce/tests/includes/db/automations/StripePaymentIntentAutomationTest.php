<?php
/*
 * A PHP file for testing out our stripe payments automation
 */

use NorthCommerce\Db\Automations\StripePaymentIntentAutomation;
use NorthCommerceStripe\PaymentIntent;

require_once(__DIR__ . '/AutomationTestCase.php');

class StripePaymentIntentAutomationTest extends AutomationTestCase
{
	function __construct() {
		$this->stripe_automation = new StripePaymentIntentAutomation();
		parent::__construct();
	}

	function testCanAutoCreatePaymentIntent()
	{
		$cpm = $this->ef->randomCustomerPaymentMethod();
		$c = $this->ea->get('customers', ['id' => $cpm['customer_id']]);
		$o = $this->ef->newOrder(['customer' => $c]);

		$building_status = $this->ef->pickBySlug('order_transaction_statuses', 'building');
		$processing_status = $this->ef->pickBySlug('order_transaction_statuses', 'processing');


		$scenarios = [
			['status' => $building_status, 'amount' => 0, 'identity_token' => null, 'cpm' => $cpm,
			 'expected' => false],

			['status' => $processing_status, 'amount' => 100, 'identity_token' => null, 'cpm' => $cpm,
			 'expected' => false],

			['status' => $building_status, 'amount' => 100, 'identity_token' => null, 'cpm' => null,
			 'expected' => false],

			['status' => $building_status, 'amount' => 100, 'identity_token' => 'xyz', 'cpm' => $cpm,
			 'expected' => false],

			['status' => $building_status, 'amount' => 100, 'identity_token' => null, 'cpm' => $cpm,
			 'expected' => true]
		];

		foreach($scenarios as $s) {
			$order_transaction = [
				'order_id' => $o['id'],
				'order_transaction_status_id' => $s['status']['id'],
				'customer_payment_method_id' => $s['cpm'] ? $s['cpm']['id'] : null,
				'amount' => $s['amount'],
				'identity_token' => $s['identity_token']
			];
			$result = $this->stripe_automation->canAutoCreatePaymentIntent($order_transaction);
			$this->assertEquals($s['expected'], $result, print_r($s, true));
		}
	}

	public function testAutoCreatePaymentIntent()
	{
		$cpm = $this->ef->randomCustomerPaymentMethod();
		$c = $this->ea->get('customers', ['id' => $cpm['customer_id']]);
		$o = $this->ef->newOrder(['customer' => $c]);
		$building_status = $this->ef->pickBySlug('order_transaction_statuses', 'building');
		$amount = $this->ef->randomDollarAmount(2, 40);

		$order_transaction = [
			'order_id' => $o['id'],
			'order_transaction_status_id' => $building_status['id'],
			'customer_payment_method_id' => $cpm['id'],
			'amount' => $amount,
			'identity_token' => null
		];

		$pi = $this->stripe_automation->autoCreatePaymentIntent($order_transaction);
		$this->assertEquals($pi->amount, $amount * 100);
		$this->assertIsString($pi->client_secret);
	}

	public function testOnEntityAccessCreated()
	{
		$cpm = $this->ef->randomCustomerPaymentMethod();
		$c = $this->ea->get('customers', ['id' => $cpm['customer_id']]);
		$o = $this->ef->newOrder(['customer' => $c]);
		unset($cpm['token']);

		$building_status = $this->ef->pickBySlug('order_transaction_statuses', 'building');
		$amount = $this->ef->randomDollarAmount(2, 40);

		$payload = [
			'order_id' => $o['id'],
			'order_transaction_status_id' => $building_status['id'],
			'customer_payment_method_id' => $cpm['id'],
			'amount' => $amount,
		];

		$created = $this->ea->create('order_transactions', $payload);
		$this->assertEquals($amount, $created['amount']);
		$this->assertStringContainsString("pi_", $created['identity_token']);
		$this->assertIsString($created['stripe_client_secret']);
		$this->assertStringContainsString($created['identity_token'], $created['stripe_client_secret']);
	}

	public function testCanAutoCreatePaymentIntentNoStripe() {

		$cpm = $this->ef->randomCustomerPaymentMethod();
		$c = $this->ea->get('customers', ['id' => $cpm['customer_id']]);
		$o = $this->ef->newOrder(['customer' => $c]);

		$building_status = $this->ef->pickBySlug('order_transaction_statuses', 'building');

		$order_transaction = [
			'order_id' => $o['id'],
			'order_transaction_status_id' => $building_status['id'],
			'customer_payment_method_id' => $cpm['id'],
			'amount' => 100,
			'identity_token' => null,
		];

		nc_with_filter('option_stripe_service', function($keys) {
			unset($keys);
			return false;
		}, function() use($order_transaction) {
			$automation = new StripePaymentIntentAutomation();
			$result = $automation->canAutoCreatePaymentIntent($order_transaction);
			$this->assertFalse($result);
		});

	}

	public function testOnEntityAccessUpdated() {
		$cpm = $this->ef->randomCustomerPaymentMethod();
		$c = $this->ea->get('customers', ['id' => $cpm['customer_id']]);
		$o = $this->ef->newOrder(['customer' => $c]);
		unset($cpm['token']);

		$building_status = $this->ef->pickBySlug('order_transaction_statuses', 'building');
		$amount = $this->ef->randomDollarAmount(2, 40);

		$payload = [
			'order_id' => $o['id'],
			'order_transaction_status_id' => $building_status['id'],
			'customer_payment_method_id' => $cpm['id'],
			'amount' => $amount,
		];

		$created = $this->ea->create('order_transactions', $payload);
		$this->assertIsString($created['stripe_client_secret']);

		$stripe = new North_Commerce_Stripe();
		$pi = $stripe->stripe_client()->paymentIntents->retrieve($created['identity_token']);
		$this->assertInstanceOf(PaymentIntent::class, $pi);

		$this->assertEquals($amount, $created['amount']);
		$this->assertEquals($amount, $pi->amount / 100);

		$new_amount = $this->ef->randomDollarAmount(41, 50);
		$updated = $this->ea->update('order_transactions', $created, [
			'amount' => $new_amount
		]);

		$pi = $stripe->stripe_client()->paymentIntents->retrieve($created['identity_token']);
		$this->assertEquals($new_amount, $updated['amount']);
		$this->assertEquals($new_amount, $pi->amount / 100);
	}
}
