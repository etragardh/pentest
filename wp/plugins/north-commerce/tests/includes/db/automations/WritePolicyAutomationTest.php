<?php
/*
 * A PHP file for testing out the WritePolicyAutomation object
 */

use NorthCommerce\Db\Automations\WritePolicyAutomation;
use NorthCommerce\Db\Collections\OrderStatuses;
use NorthCommerce\Db\Collections\PaymentStatuses;
use NorthCommerce\Db\Security\NoAccessWritePolicy;
use NorthCommerce\Db\Security\Pub\CustomerPaymentMethodsWritePolicy;
use NorthCommerce\Db\Security\Pub\OrdersWritePolicy;

require_once(__DIR__ . '/AutomationTestCase.php');

class WritePolicyAutomationTest extends AutomationTestCase
{

	public function testWritePolicy()
	{
		$wpa = new WritePolicyAutomation();
		$this->assertNull($wpa->writePolicy('products'));
		$this->assertNull($wpa->writePolicy('orders'));
		$this->assertNull($wpa->writePolicy('customers'));

		$this->agent->perspectiveManager()->asCustomer(function() use($wpa) {
			$this->assertInstanceOf(NoAccessWritePolicy::class, $wpa->writePolicy('products'));
			$this->assertInstanceOf(OrdersWritePolicy::class, $wpa->writePolicy('orders'));
			$this->assertInstanceOf(CustomerPaymentMethodsWritePolicy::class,
									$wpa->writePolicy('customer_payment_methods'));
		});

		$this->agent->perspectiveManager()->asPublic(function() use($wpa) {
			$this->assertInstanceOf(NoAccessWritePolicy::class, $wpa->writePolicy('products'));
			$this->assertInstanceOf(OrdersWritePolicy::class, $wpa->writePolicy('orders'));
			$this->assertInstanceOf(CustomerPaymentMethodsWritePolicy::class,
									$wpa->writePolicy('customer_payment_methods'));
		});

	}

	public function testVerifyCols()
	{
		$wpa = new WritePolicyAutomation();
		$table = 'orders';
		$order_wp = new OrdersWritePolicy();
		$cols = $order_wp->createColumnRules([]);

		$wpa->verifyCols($order_wp, $table, $cols, ['customer_id', 'billing_address_id', 'shipping_detail_id']);

		$the_ex = false;
		try {
			$wpa->verifyCols($order_wp, $table, $cols, ['billing_address_id', 'shipping_detail_id']);
		} catch(Exception $ex) {
			$the_ex = $ex;
		}
		$this->assertInstanceOf(Exception::class, $the_ex);

		$the_ex = false;
		try {
			$wpa->verifyCols($order_wp, $table, $cols, ['customer_id', 'created']);
		} catch(Exception $ex) {
			$the_ex = $ex;
		}
		$this->assertInstanceOf(Exception::class, $the_ex);
	}

	public function testOnEntityAccessCreateValues()
	{
		$c = $this->ef->randomCustomer();
		$new_addr = $this->ef->newAddress(['customer' => $c]);
		$this->agent->perspectiveManager()->asPublic(function() use($c, $new_addr) {
			$o = $this->ea->create('orders', [
				'customer_id' => $c['id']
			]);

			$this->assertEquals(OrderStatuses::created()->id, $o['order_status_id']);
			$this->assertEquals(PaymentStatuses::unpaid()->id, $o['payment_status_id']);
			$this->assertEquals(0, $o['total']);
			$this->assertEquals(0, $o['shipping']);

			$o = $this->ea->update('orders', $o, [
				'shipping_address_id' => $new_addr['id']
			]);


			$fail_cases = [
				function() use($c) {
					$this->ea->create('orders', [
						'customer_id' => $c['id'],
						'total' => 9.99
					]);
				},
				function() {
					$this->ea->create('orders', [
						'total' => 9.99
					]);
				},
				function() use($o) {
					$o = $this->ea->update('orders', $o, [
						'total' => 9.99
					]);
				},
				function() use($o) {
					$o = $this->ea->update('orders', $o, [
						'order_status_id' => OrderStatuses::fulfilled()->id
					]);
				}
			];
			foreach($fail_cases as $case) {
				$this->assertException($case);
			}

			$this->agent->perspectiveManager()->asAdministrator(function() use($o) {
				$this->ea->update('orders', $o, ['order_status_id' => OrderStatuses::unfulfilled()->id]);
			});

			$the_ex = false;
			try {
				$o = $this->ea->update('orders', $o, [
					'shipping_address_id' => $new_addr['id']
				]);
			} catch(Exception $ex) {
				$the_ex = $ex;
			}
			$this->assertInstanceOf(Exception::class, $the_ex);
		});
	}

	public function	testOnEntityAccessUpdateChanges()
	{
		$p = $this->ef->randomProduct();
		$this->agent->perspectiveManager()->asPublic(function() use($p) {
			$this->assertException(function() use($p) {
				$this->ea->update('products', $p, ['base_price' => 100]);
			});
		});
	}

	public function testOnEntityAccessCreated()
	{
		$o = $this->ef->newOrder();
		$pv = $this->ef->randomProductVariant();

		$this->agent->perspectiveManager()->asPublic(function() use($o, $pv) {
			$li = $this->ea->create('line_items', [
				'order_id' => $o['id'],
				'product_variant_id' => $pv['id'],
				'quantity' => 3
			]);

			$updated_o = $this->ea->ref($o['id']);
			$this->assertEquals($li['amount'],
								$updated_o['total'] - $o['total'], print_r([
									$li, $o, $updated_o
								], true));
		});

	}

	public function testOnEntityAccessUpdated()
	{
		$o = $this->ef->newOrder();
		$li = $this->ea->get('line_items', ['order_id' => $o['id']]);

		$this->agent->perspectiveManager()->asPublic(function() use($o, $li) {
			$updated_li = $this->ea->update('line_items', $li, [
				'quantity' => $li['quantity'] + 2
			]);

			$updated_o = $this->ea->ref($o['id']);
			$this->assertEquals($updated_li['amount'] - $li['amount'],
								$updated_o['total'] - $o['total'], print_r([
									$li, $updated_li, $o, $updated_o
								], true));
		});

	}

	public function testOnEntityAccessDeleteCriteriaInvalidTable()
	{
		$o = $this->ef->newOrder();
		$this->expectException(InvalidArgumentException::class);
		$this->agent->perspectiveManager()->asPublic(function() use($o) {
			$this->ea->delete('orders', ['id' => $o['id']]);
			$this->fail("Expected exception");
		});
	}

	public function testOnEntityAccessDeleteCriteriaInvalidCriteria()
	{
		$o = $this->ef->newOrder();
		$this->expectException(InvalidArgumentException::class);
		$this->agent->perspectiveManager()->asPublic(function() use($o) {
			$this->ea->delete('line_items', ['order_id' => $o['id']]);
			$this->fail("Expected exception");
		});
	}

	public function testOnEntityAccessDeleteCriteriaValid()
	{
		$o = $this->ef->newOrder();
		$li = $this->ea->get('line_items', ['order_id' => $o['id']]);
		$this->agent->perspectiveManager()->asPublic(function() use($li) {
			$this->ea->delete('line_items', ['id' => $li['id']]);
			$this->assertTrue(true);
		});
	}
}
