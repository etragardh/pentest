<?php
/*
 * A PHP file for testing our sequence number automation
 */

use NorthCommerce\Db\Automations\SequenceNumberAutomation;
use NorthCommerce\Db\Collections\OrderStatuses;
use NorthCommerce\Db\Collections\PaymentStatuses;

require_once(__DIR__ . '/AutomationTestCase.php');

class SequenceNumberAutomationTest extends AutomationTestCase
{

	function testOnEntityAccessCreateValues() {
		$sna = new SequenceNumberAutomation();

		$values = ['first_name' => nc_random_token()];
		$updated = $sna->onEntityAccessCreateValues($values, 'addresses');
		$this->assertEquals(count($values), count($updated));
		$this->assertEquals($values['first_name'], $updated['first_name']);

		$values = ['first_name' => nc_random_token()];
		$updated = $sna->onEntityAccessCreateValues($values, 'customers');
		$this->assertEquals(count($values) + 1, count($updated));
		$this->assertEquals($values['first_name'], $updated['first_name']);
		$this->assertGreaterThan(999, $updated['customer_number']);

		$values = ['shipping' => 100];
		$updated = $sna->onEntityAccessCreateValues($values, 'orders');
		$this->assertEquals(count($values) + 1, count($updated));
		$this->assertEquals($values['shipping'], $updated['shipping']);
		$this->assertGreaterThan(999, $updated['order_number']);

		$values = ['shipping' => 100, 'order_number' => 933];
		$updated = $sna->onEntityAccessCreateValues($values, 'orders');
		$this->assertEquals(count($values), count($updated));
		$this->assertEquals($values['shipping'], $updated['shipping']);
		$this->assertEquals($values['order_number'], $updated['order_number']);
	}

	function testOnEntityAccessCreateValuesAuto() {
		$o = $this->ef->newOrder();
		$this->assertGreaterThan(999, $o['order_number']);

		$c = $this->ea->get('customers', ['id' => $o['customer_id']]);
		$this->assertGreaterThan(999, $c['customer_number']);
	}

	function testOnEntityAccessCreateValuesAutoAsPublic() {
		$c = $this->ef->newCustomer();
		nc_with_current_user(null, function() use($c) {
			$make_order = function() use($c) {
				return $this->ea->create('orders', [
					'customer_id' => $c['id'],
				]);
			};
			$o1 = $make_order();
			$o2 = $make_order();

			$this->assertIsNumeric($o1['order_number']);
			$this->assertIsNumeric($o2['order_number']);
			$this->assertGreaterThan($o1['order_number'], $o2['order_number']);
		});
	}

}
