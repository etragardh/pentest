<?php
/*
 * A PHP file for testing out HideDeletedAutomation
 */

use NorthCommerce\Db\Automations\HideDeletedAutomation;

require_once(__DIR__ . '/../../../north-commerce-test-case.php');

class HideDeletedAutomationTest extends North_Commerce_Test_case
{

	private HideDeletedAutomation $hda;

	public function setUp(): void {
		$this->hda = new HideDeletedAutomation();
		parent::setUp();
	}

	/**
	 * @dataProvider tableHasDeletedColumnProvider
	 */
	public function testTableHasDeletedColumn($table, $expected) {
		$outcome = $this->hda->tableHasDeletedColumn($table);
		$this->assertEquals($expected,$outcome, $table);
	}

	public function tableHasDeletedColumnProvider() {
		return [
			['products', true],
			['product_option_values', true],
			['order_statuses', false],
			['shipping_details', true],
			['order_transactions', false]
		];
	}

	public function testOnEntityAccessCriteriaAddDeleted()
	{
		$updated = $this->hda->onEntityAccessCriteria([
			'product.id' => 17,
			'product_variant_option_values.product_option_value.value' => "Green"
		], 'product_variants');

		$this->assertCount(5, $updated);

		$this->assertEquals('and', $updated[0]);

		$found = [
			'product.deleted' => false,
			'product_variant_option_values.product_option_value.deleted' => false,
			'deleted' => false
		];

		foreach($updated as $expr) {
			foreach($found as $path => $x) {
				unset($x);
				if(is_array($expr) && $expr[0] == 'is' && $expr[1] ==$path) {
					$found[$path] = true;
				}
			}
		}

		foreach($found as $path => $outcome) {
			$this->assertTrue($outcome, "$path not found in " . print_r($updated, true));
		}
	}

	public function testHideDeleted()
	{
		$p = $this->ef->newProduct([
			'variants' => [
				['type' => 'size', 'values' => ["Big", "Small"], 'name' => "Size"],
				['type' => 'text', 'values' => ["A", "B"], 'name' => "Grade"]
			]
		]);

		$small_option_value = $this->ea->get('product_option_values', [
			'product_option.product.id' => $p['id'],
			'product_option.name' => "Size",
			'value' => "Small"
		]);
		$this->assertIsNumeric($small_option_value['id']);

		$small_variants = $this->ea->list('product_variants', [
			'product_variant_option_values.product_option_value.id' => $small_option_value['id']
		]);
		$this->assertCount(2, $small_variants);

		$small_option_value = $this->ea->update('product_option_values', $small_option_value, [
			'deleted' => $this->agent->sqlTimestamp(time())
		]);
		foreach($small_variants as $pv_s) {
			$this->ea->update('product_variants', $pv_s, ['deleted' => $this->agent->sqlTimestamp(time())]);
		}

		$product_variants = $this->ea->list('product_variants', [
			'product_id' => $p['id']
		]);
		$this->assertCount(2, $product_variants);

		foreach($product_variants as $pv) {
			$size_options = $this->ea->list('product_option_values', [
				'product_variant_option_values.product_variant.id' => $pv['id'],
				'product_option.name' => 'Size'
			]);
			$this->assertCount(1, $size_options);
			$this->assertEquals("Big", $size_options[0]['value']);
		}

	}
}
