<?php
/*
 * A PHP file for testing that our belongs to automation works
 */

use NorthCommerce\Db\Automations\BelongsToAutomation;
use NorthCommerce\Db\Security\CustomerPerspective;

require_once(__DIR__ . '/AutomationTestCase.php');

class BelongsToAutomationTest extends AutomationTestCase
{

	function testHasBelongsTo()
	{
		$bta = new BelongsToAutomation();
		$tests = [
			'products' => false,
			'orders' => true,
			'customers' => true,
			'customer_payment_methods' => true,
			'product_images' => false,
			'countries' => false
		];

		foreach($tests as $table => $expected) {
			$outcome = $bta->belongsToColumn($table);
			$this->assertEquals($expected, is_string($outcome),
								print_r([
									'outcome' => $outcome,
									'table' => $table
								], true));
		}
	}

	function testBelongsToClausesAreValid() {
		$tables = $this->agent->schema()->getTables();
		foreach($tables as $table_name => $table_defn) {
			$bt = nc_g(nc_g($table_defn, 'meta', []), 'belongs_to');
			if(!$bt) {
				continue;
			}

			try {
				$result = $this->ea->list($table_name, ['=', $bt, 177]);
				$this->assertIsArray($result);
			} catch(Exception $ex) {
				$this->assertTrue(false, print_r([
					'table_name' => $table_name,
					'bt' => $bt,
					'ex' => ($ex . "")
				], true));
			}

		}
	}

	public function testOnEntityAccessCriteriaPublic()
	{
		$u = $this->ef->newWpCustomerUser();
		$c = $this->ef->newCustomer(['wp_user_id' => $u->ID]);
		$o = $this->ef->newOrder(['customer' => $c]);
		$sd = $this->ea->get('shipping_details', ['order_id' => $o['id']]);
		$this->assertIsArray($sd);

		$this->agent->perspectiveManager()->asPublic(function() use($sd) {
			$the_ex = false;
			try {
				$this->ea->get('shipping_details', true);
			} catch(Exception $ex) {
				$the_ex = $ex;
			}
			$this->assertInstanceOf(Exception::class, $the_ex);

			$found = $this->ea->get('shipping_details', ['id' => $sd['id']]);
			$this->assertEquals($sd['id'], $found['id']);
		});
	}

	public function testOnEntityAccessCriteriaUser() {
		$u = $this->ef->newWpCustomerUser();
		$c = $this->ef->newCustomer(['wp_user_id' => $u->ID]);
		$o = $this->ef->newOrder(['customer' => $c]);
		$sd = $this->ea->get('shipping_details', ['order_id' => $o['id']]);
		$this->assertIsArray($sd);

		nc_with_current_user($u, function() use($c) {
			$cp = $this->agent->perspectiveManager()->currentPerspective();
			$this->assertInstanceOf(CustomerPerspective::class, $cp);
			$found = $this->ea->list('shipping_details', true);
			$this->assertGreaterThan(0, count($found));
			foreach($found as $f) {
				$alt = $this->ea->get('orders', [
					'customer_id' => $c['id'],
					'id' => $f['order_id']
				]);
				$this->assertIsArray($alt);
			}
		});
	}

	public function testVerifyAccess()
	{
		$tests = [
			'customers' => true,
			'customer_payment_methods' => true,
			'addresses' => true,
			'products' => false,
			'product_variant_types' => false,
			'product_variants' => false,
			'countries' => false
		];

		$bta = new BelongsToAutomation();
		$marker = nc_random_token();
		foreach($tests as $table_name => $expected) {
			unset($expected);
			$outcome = $bta->verifyWriteAccess($table_name, $marker);
			$this->assertEquals($marker, $outcome);
		}

		$pm = $this->agent->perspectiveManager();
		foreach($tests as $table_name => $expected) {
			$pm->asCustomer(function() use($marker, $bta, $table_name, $expected) {
				$the_ex = false;
				try {
					$outcome = $bta->verifyWriteAccess($table_name, $marker);
				} catch(Exception $ex) {
					$the_ex = $ex;
				}
				if($expected) {
					$this->assertFalse($the_ex);
					$this->assertEquals($marker, $outcome);
				} else {
					$this->assertInstanceOf(Exception::class, $the_ex);
				}
			});
		}

	}

	public function testOnEntityAccessCreateValues()
	{
		$pm = $this->agent->perspectiveManager();
		$o = $this->ef->newOrder();

		$pm->asPublic(function() use($o) {
			$pv = $this->ef->pickRandom('product_variants', true);
			$li = $this->ea->create('line_items', [
				'order_id' => $o['id'],
				'product_variant_id' => $pv['id'],
				'quantity' => 1
			]);

			$this->assertIsArray($li);
		});

		$token = nc_random_token();
		$c = $this->ea->create('categories', [
			'slug' => "test-category-$token",
			'name' => "Test Category $token"
		]);
		$this->assertIsArray($c);

		$pm->asPublic(function() use($o) {
			$token = nc_random_token();
			$c = null;
			$the_ex = null;
			try {
				$c = $this->ea->create('categories', [
					'slug' => "test-category-$token",
					'name' => "Test Category $token"
				]);
			} catch(Exception $ex) {
				$the_ex  = $ex;
			}
			$this->assertInstanceOf(Exception::class, $the_ex);
			$this->assertNull($c);
		});
	}

	public function testOnEntityAccessUpdateChanges()
	{
		$pm = $this->agent->perspectiveManager();
		$o = $this->ef->newOrder();
		$li = $this->ea->get('line_items', ['order_id' => $o['id']]);
		$pm->asPublic(function() use($li) {
			$quantity = rand(2,20);
			$updated = $this->ea->update('line_items', $li, ['quantity' => $quantity]);
			$this->assertEquals($quantity, $updated['quantity']);
		});

		$price = $this->ef->randomDollarAmount(10, 20);
		$pv = $this->ef->randomProductVariant();
		$updated = $this->ea->update('product_variants', $pv, [
			'price' => $price
		]);
		$this->assertEquals($price, $updated['price']);

		$pm->asPublic(function() use($pv) {
			$price = $this->ef->randomDollarAmount(10, 20);
			$the_ex = null;
			$updated = null;
			try {
				$updated = $this->ea->update('product_variants', $pv, [
					'price' => $price
				]);
			} catch(Exception $ex) {
				$the_ex  = $ex;
			}
			$this->assertInstanceOf(Exception::class, $the_ex);
			$this->assertNull($updated);
		});
	}

	/**
	 * @dataProvider mustHaveIdProvider
	 */
	public function testMustHaveId($table, $criteria) {
		$bta = new BelongsToAutomation();
		$criteria = $bta->mustHaveId($table, $criteria);
		$this->assertIsArray($criteria);
	}

	public function mustHaveIdProvider()
	{
		return [
			['orders', ['and', ['id' => 100]]],
			['orders', ['and', ['id' => 100], ['total' => 100]]],
			['line_items', ['order_id' => 'abc']]
		];
	}

	/**
	 * @dataProvider idColsProvider
	 */
	public function testIdCols($table, $expected) {
		$bta = new BelongsToAutomation();
		$id_cols = $bta->idCols($table);
		$this->assertEquals(count($expected), count($id_cols));
		foreach($expected as $e) {
			$this->assertContains($e, $id_cols);
		}
	}

	public function idColsProvider()
	{
		return [
			['orders', ['id']],
			['order_transactions', ['id']],
			['line_items', ['id', 'order_id']]
		];
	}
}
