<?php
/*
 * A PHP file for testing out our stripe success automation
 */

use NorthCommerce\Db\Automations\StripeSuccessAutomation;
use NorthCommerce\Db\Automations\OrderTransactionUnexpectedStatusException;
use NorthCommerce\Db\Collections\OrderStatuses;
use NorthCommerce\Db\Collections\OrderTransactionStatuses;
use NorthCommerce\Db\Collections\PaymentStatuses;

require_once(__DIR__ . '/AutomationTestCase.php');

class StripeSuccessAutomationTest extends AutomationTestCase
{

	private $stripe_automation;

	public function setUp(): void
	{
		parent::setUp();
		$this->stripe_automation = new StripeSuccessAutomation();
	}

	public function testIsSuccessChange()
	{
		$ot = $this->ef->newOrderTransaction();
		$pp_ot = $this->ef->newOrderTransaction([
			'customer_payment_method_id' => $this->ef->newCustomerPaymentMethod(['provider' => 'paypal'])['id']
		]);

		$success = OrderTransactionStatuses::successful();

		$scenarios = [
			['table' => 'orders', 'existing' => false, 'changes' => false, 'expected' => false, ],

			['table' => 'order_transactions', 'existing' => $ot,
			 'changes' => ['amount' => 1],
			 'expected' => false],

			['table' => 'order_transactions',
			 'existing' => $pp_ot,
			 'changes' => ['order_transaction_status_id' => $success->id],
			 'expected' => false],

			['table' => 'order_transactions',
			 'existing' => $ot,
			 'changes' => ['order_transaction_status_id' => $success->id],
			 'expected' => true],
		];

		foreach($scenarios as $s) {
			$outcome = $this->stripe_automation->isSuccessChange($s['table'],
																	   $s['existing'],
																	   $s['changes']);
			$this->assertEquals($s['expected'], $outcome, print_r($s, true));
		}

	}

	public function testVerifyTransaction()
	{
		$ot = $this->ef->newOrderTransaction();
		$this->assertException(function() use($ot) {
			$this->stripe_automation->verifyTransaction($ot, []);
		}, OrderTransactionUnexpectedStatusException::class);

		$this->confirmPayment($ot);
		$verified = $this->stripe_automation->verifyTransaction($ot, []);
		$this->assertTrue($verified);
	}

	public function testOnEntityAccessUpdateChanges()
	{
		$ot = $this->ef->newOrderTransaction();
		nc_with_current_user(null, function() use($ot) {
			$the_ex = null;
			try {
				$this->ea->update('order_transactions', $ot, [
					'order_transaction_status_id' => $this->ef->pickBySlug('order_transaction_statuses',
																		   'successful',
																		   ['as' => true])
				]);
			} catch(Exception $ex) {
				$the_ex = $ex;
			}
			$this->assertInstanceOf(Exception::class, $the_ex);

			$success_id = $this->ef->pickBySlug('order_transaction_statuses',
												'successful',
												['as' => true]);

			$this->assertNotEquals($success_id, $ot['order_transaction_status_id']);
			$updated = $this->confirmPayment($ot);
			$this->assertEquals($success_id, $updated['order_transaction_status_id']);
		});

	}

	public function testUpdateCustomerPaymentDetails()
	{
		$ot = $this->ef->newOrderTransaction();
		nc_with_current_user(null, function() use($ot) {
			$this->confirmPayment($ot);
			$ot_updated = $this->ea->ref($ot['id']);
			$o = $this->ea->get('orders', ['id' => $ot['order_id']]);

			$this->assertEquals(OrderTransactionStatuses::successful()->id,
								$ot_updated['order_transaction_status_id']);
			$this->assertEquals($ot_updated['amount'], $o['paid']);
			$this->assertEquals(PaymentStatuses::paid()->id,
								$o['payment_status_id']);
			$this->assertEquals(OrderStatuses::unfulfilled()->id,
								$o['order_status_id']);
		});

	}

	private function confirmPayment($order_transaction) {
		return $this->ef->excecuteStripeOrderTransaction($order_transaction);
	}

}
