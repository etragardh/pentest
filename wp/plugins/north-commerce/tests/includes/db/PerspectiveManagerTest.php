<?php
/*
 * A PHP file for testing out our perspective manager
 */

use NorthCommerce\Db\PerspectiveManager;
use NorthCommerce\Db\Security\AdministratorPerspective;
use NorthCommerce\Db\Security\CustomerPerspective;
use NorthCommerce\Db\Security\PublicPerspective;
use NorthCommerce\Testing\EntityFactory;

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class PerspectiveManagerTest extends North_Commerce_Test_Case
{

	public function testCurrentPerspective()
	{
		$tests = [
			['user' => $this->ef->newWpAdminUser(), 'slug' => 'administrator'],
			['user' => $this->ef->newWpUser(), 'slug' => 'customer'],
			['user' => false, 'slug' => 'public']
		];

		$pm = PerspectiveManager::instance();

		foreach($tests as $test) {
			nc_with_current_user($test['user'],
								 function() use($test, $pm) {
									 $p = $pm->currentPerspective();
									 $this->assertEquals($test['slug'], $p->slug());
			});
		}
	}

	public function testWithPerspective() {
		$pm = PerspectiveManager::instance();

		$pm->asCustomer(function() use($pm) {
			$this->assertInstanceOf(CustomerPerspective::class,
									$pm->currentPerspective());

			$pm->asPublic(function() use($pm) {
				$this->assertInstanceOf(PublicPerspective::class,
										$pm->currentPerspective());
				$pm->asAdministrator(function() use($pm) {
					$this->assertInstanceOf(AdministratorPerspective::class,
									$pm->currentPerspective());
				});
				$this->assertInstanceOf(PublicPerspective::class,
										$pm->currentPerspective());
			});
			$this->assertInstanceOf(CustomerPerspective::class,
									$pm->currentPerspective());
		});
	}
}
