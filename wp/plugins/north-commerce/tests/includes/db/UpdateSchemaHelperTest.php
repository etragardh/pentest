<?php
/*
 * A PHP file for testing the UpdateSchemaHelper object
 */

use NorthCommerce\Db\UpdateSchemaHelper;

require_once(__DIR__ . '/North_Commerce_Db_Test_Case.php');

class UpdateSchemaHelperTest extends North_Commerce_Db_Test_Case
{
	private $main_table;
	private $sub1_table;
	private $sub2_table;


	public function testFindDuplicates()
	{
		$h = new UpdateSchemaHelper();
		$dups = $h->findDuplicates($this->main_table, 'email');

		$all = $this->agent->getResults("SELECT * FROM {$this->main_table}");
		$emails = [];
		foreach($all as $row) {
			if(isset($emails[$row['email']])) {
				$emails[$row['email']]++;
			} else {
				$emails[$row['email']] = 1;
			}
		}
		$dup_detected = [];
		foreach($dups as $d) {
			$this->assertGreaterThan(1, $emails[$d['email']]);
			$dup_detected[$d['email']] = true;
		}
		$this->assertGreaterThan(0, count($dup_detected));

		foreach($emails as $email => $count) {
			if($count == 1) {
				$this->assertFalse(isset($dup_detected[$email]));
			}
		}
	}
	public function testMergeDuplicates()
	{
		$h = new UpdateSchemaHelper();
		$before_dups = $h->findDuplicates($this->main_table, 'email');
		$this->assertGreaterThan(0, count($before_dups));
		$before_sub1 = $this->agent->getResults("SELECT * FROM $this->sub1_table");
		$this->assertGreaterThan(0, count($before_sub1));

		$h->mergeDuplicates($this->main_table, 'email');

		$after_dups = $h->findDuplicates($this->main_table, 'email');
		$this->assertEquals(0, count($after_dups));
		$after_sub1 = $this->agent->getResults("SELECT * FROM $this->sub1_table");
		$this->assertEquals(count($before_sub1), count($after_sub1));
	}

	public function setUp() : void
	{
		parent::setUp();

		$prefix = $this->agent->schema()->getTablePrefix() . "unit_test_";
		$this->main_table = $prefix . 'main_' . nc_random_token();
		$this->sub1_table = $prefix . 'sub1_' . nc_random_token();
		$this->sub2_table = $prefix . 'sub2_' . nc_random_token();

		$creates = [
			"CREATE TABLE {$this->main_table} (\n" .
			" id BIGINT NOT NULL AUTO_INCREMENT,\n" .
			" name VARCHAR(255) NOT NULL,\n" .
			" email VARCHAR(255) NOT NULL,\n" .
			" PRIMARY KEY(id)\n" .
			") Engine=Innodb;",

			"CREATE TABLE {$this->sub1_table} (\n" .
			" id BIGINT NOT NULL AUTO_INCREMENT,\n" .
			" parent_id BIGINT NOT NULL,\n" .
			" notes VARCHAR(255) NOT NULL,\n" .
			" FOREIGN KEY(parent_id) REFERENCES {$this->main_table}(id),\n" .
			" PRIMARY KEY(id)\n" .
			") Engine=Innodb;",

			"CREATE TABLE {$this->sub2_table} (\n" .
			" id BIGINT NOT NULL AUTO_INCREMENT,\n" .
			" parent_id BIGINT NOT NULL,\n" .
			" notes VARCHAR(255) NOT NULL,\n" .
			" FOREIGN KEY(parent_id) REFERENCES {$this->main_table}(id),\n" .
			" PRIMARY KEY(id)\n" .
			") Engine=Innodb;",
		];

		foreach($creates as $sql) {
			$this->agent->query($sql);
		}

		for($i = 0; $i < 3; $i++) {
			$this->addTestRows(1);
			$this->addTestRows(2);
			$this->addTestRows(3);
		}
	}

	private function addTestRows($num_main_records) {
		$name = nc_random_token();
		$email = $this->ef->newEmailAddress();
		for($i = 0; $i < $num_main_records; $i++) {
			$main_id = $this->agent->insert($this->main_table, [
				'name' => $name,
				'email' => $email
			]);

			for($j = 0; $j < 3; $j++) {
				$this->agent->insert($this->sub1_table, [
					'notes' => nc_random_token(),
					'parent_id' => $main_id
				]);
				$this->agent->insert($this->sub2_table, [
					'notes' => nc_random_token(),
					'parent_id' => $main_id
				]);
			}
		}
	}

	public function tearDown() : void
	{
		parent::tearDown();
		$this->agent->query("DROP TABLE {$this->sub1_table}");
		$this->agent->query("DROP TABLE {$this->sub2_table}");
		$this->agent->query("DROP TABLE {$this->main_table}");
	}

}
