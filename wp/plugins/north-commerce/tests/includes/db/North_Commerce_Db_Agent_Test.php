<?php
/*
 * A PHP file for testing out our DB Agent
 */

use NorthCommerce\Testing\EntityFactory;

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class North_Commerce_Db_Agent_Test extends North_Commerce_Db_Test_Case
{

    public function testQuery() {
        global $wpdb;
        $agent = North_Commerce_Db_Agent::instance();
        $found = $wpdb->query("SELECT COUNT(*) FROM {$wpdb->prefix}posts");
        $this->assertIsNumeric($found);
		$table = nc_random_token();
		try {
			$agent->query("SELECT x FROM $table");
			$this->assertTrue(false, "Shouldn't get here");
		} catch(Exception $ex) {
			$this->assertStringContainsString($table, $ex->getMessage());
		}
    }

	public function testWithDb() {
		$agent = North_Commerce_Db_Agent::instance();
		$count = $agent->withDb(function($wpdb) {
			return $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}options");
		});
		$this->assertGreaterThan(0, $count);
	}

	public function testWithTx() {
		$agent = North_Commerce_Db_Agent::instance();

		$test_table = "unit_test_" . nc_random_token();
		$make_table = "CREATE TABLE $test_table(" .
					  "  id BIGINT NOT NULL AUTO_INCREMENT, " .
					  "  magic INT NOT NULL, " .
					  "  PRIMARY KEY(id)" .
					  " )";
		$agent->query($make_table);
		$this->registerTestTable($test_table);

		$agent->withTx(function($wpdb) use($test_table) {
			$wpdb->insert($test_table, ['magic' => 100]);
			$wpdb->insert($test_table, ['magic' => 200]);
		});

		$sum = $agent->withDb(function($wpdb) use($test_table) {
			return $wpdb->get_var("SELECT SUM(magic) FROM $test_table");
		});
		$this->assertEquals($sum, 300);

		try {
			$agent->withTx(function($wpdb) use($test_table, $agent) {
				$wpdb->insert($test_table, ['magic' => 900]);
				$agent->withTx(function($wpdb) use($test_table) {
					$wpdb->insert($test_table, ['magic' => 1200]);
				});
				$wpdb->insert($test_table, ['magic' => null]);
			});
			$this->assertTrue(false, "Shouldn't get here.");
		} catch(Exception $ex) {
			$this->assertStringContainsString("cannot be null", $ex->getMessage());
		}

		$sum = $agent->withDb(function($wpdb) use($test_table) {
			return $wpdb->get_var("SELECT SUM(magic) FROM $test_table");
		});
		$this->assertEquals($sum, 300);

	}

	public function testGetResults() {
		$agent = North_Commerce_Db_Agent::instance();

		$found = $agent->getResults("SELECT * FROM wp_options LIMIT 5");
		$this->assertEquals(count($found), 5);
		$this->assertIsNumeric($found[0]['option_id']);
		$this->assertIsString($found[0]['option_name']);
		$this->assertFalse(nc_g($found[0], 'foo'));

		$found_match = false;
		$look_for = $found[0];
		$matches = $agent->getResults("SELECT * FROM wp_options WHERE option_value = %s", [ $look_for['option_value'] ]);
		foreach($matches as $match) {
			if($match['option_id'] === $look_for['option_id']) {
				$found_match = true;
				$this->assertEquals($match['option_name'], $look_for['option_name']);
			}
		}
		$this->assertTrue($found_match);
	}

	public function testGetVar()
	{
		$agent = North_Commerce_Db_Agent::instance();
		$value = $agent->getVar("SELECT option_value FROM wp_options WHERE option_name = %s",
								['home']);
		$this->assertStringStartsWith("http", $value);
	}

	public function testEscSql() {
		$agent = North_Commerce_Db_Agent::instance();

		$tests = [
			"149" => "149",
			"13.238383" => "13.238383",
			"0000003" => "'0000003'",
			"Bob" => "'Bob'",
			"Bob's" => "'Bob\'s'",
			"-78" => "-78",
			"-78.45" => "-78.450000",
			" -78.45" => "' -78.45'",
			"" => "''",
			"  " => "'  '"
		];

		foreach($tests as $value => $expected) {
			$result = $agent->escSql($value);
			$this->assertEquals($result, $expected);
		}

		$this->assertEquals($agent->escSql(null), 'NULL');
		$this->assertEquals($agent->escSql(false), 0);
	}

	public function testEntityToTableName()
	{
		$agent = North_Commerce_Db_Agent::instance();
		$tests = [
			'orders' => 'orders',
			'line-items' => 'line_items',
			'some-long-entity' => 'some_long_entity'
		];
		foreach($tests as $input => $expected){
			$result = $agent->entityToTableName($input);
			$this->assertEquals($expected, $result);
		}
	}

	public function testTableToEntityName()
	{
		$agent = North_Commerce_Db_Agent::instance();
		$tests = [
			'orders' => 'orders',
			'line_items' => 'line-items',
			'some_long_entity' => 'some-long-entity'
		];
		foreach($tests as $input => $expected){
			$result = $agent->tableToEntityName($input);
			$this->assertEquals($expected, $result);
		}
	}

	public function testIsDeadlockError() {
		$agent = North_Commerce_Db_Agent::instance();
		$tests = [
			"Deadlock found when trying to get lock; try restarting transaction"  => true,
			"Duplicate key found" => false
		];
		foreach($tests as $input => $expected){
			$result = $agent->isDeadlockError($input);
			$this->assertEquals($expected, $result);
		}

	}

	public function testWithTxEx()
	{
		$agent = North_Commerce_Db_Agent::instance();
		$ef = EntityFactory::instance();
		$order = false;
		$tx_ex = false;
		try {
			$agent->withTx(function() use($agent, $ef, &$order){
				$order = $ef->newOrder();
				$agent->withTx(function() {
					throw new Exception("Not today!");
				});
			});
		} catch(Exception $ex) {
			$tx_ex = $ex;
		}
		$this->assertInstanceOf(Exception::class, $tx_ex);
		$this->assertIsArray($order);
		$this->assertIsDbId('orders', $order['id']);

		$lookup = $agent->entityAccess()->get('orders', ['id' => $order['id']]);
		$this->assertNull($lookup);
	}

	public function testWithTxRollback()
	{
		$agent = North_Commerce_Db_Agent::instance();
		$ef = EntityFactory::instance();
		$orders = [];
		$retry = 0;
		$token = nc_random_token();

		$tx_token = $agent->withTx(function() use($agent, $ef, &$orders, &$retry, $token){
			$retry++;
			$orders[] = $ef->newOrder();

			$agent->withTx(function() use(&$retry) {
				if($retry < 2) {
					throw new NcDbAgentDeadlockException("Simulated deadlock ex", "fake SQL");
				}
			});
			return $token;
		});
		$this->assertEquals($tx_token, $token);
		$this->assertEquals(2, count($orders));

		$this->assertIsDbId('orders', $orders[0]['id']);

		$lookup = $agent->entityAccess()->get('orders', ['id' => $orders[1]['id']]);
		$this->assertEquals($orders[1]['id'], $lookup['id']);
	}


	public function testTableToClassName() {
		$tests = [
			'orders' => 'Orders',
			'line_items' => 'LineItems',
			'customer_payment_methods' => 'CustomerPaymentMethods'
		];

		foreach($tests as $table_name => $expected) {
			$outcome = $this->agent->tableToClassName($table_name);
			$this->assertEquals($expected, $outcome);
		}

	}

	public function testSqlTimestamp() {
		$t = time();
		$this->assertEquals(date('Y-m-d H:i:s', $t),
							$this->agent->sqlTimestamp($t));
	}
}
