<?php
/*
 * A PHP file for making sure we can update an order transaction properly
 */

use NorthCommerce\Db\Effects\FillInLineItemEffect;
use NorthCommerce\Db\Effects\UpdateOrderTotalsEffect;
use NorthCommerce\Db\Effects\UpdateOrderTransactionAmountEffect;

require_once(__DIR__ . '/../North_Commerce_Db_Test_Case.php');

class UpdateOrderTransactionAmountEffectTest  extends North_Commerce_Db_Test_Case {

	public function testBehavior() {
		$ot = $this->ef->newOrderTransaction();
		$o  = $this->ea->ref($ot['order_id']);
		$li = $this->ea->get('line_items', ['order_id' => $o['id']]);

		$this->assertEquals($o['total'], $ot['amount']);


		$li_updated = $this->ea->update('line_items', $li, FillInLineItemEffect::run([
			'quantity' => $li['quantity'] + 2,
			'product_variant_id' => $li['product_variant_id'],
		]));

		$o_updated = UpdateOrderTotalsEffect::run($o);
		$ot_updated = UpdateOrderTransactionAmountEffect::run($ot);

		$this->assertEquals($o['total'], $ot['amount']);
		$this->assertEquals($o_updated['total'], $ot_updated['amount']);

		$diff = $li_updated['amount'] - $li['amount'];
		$this->assertEquals($diff, $ot_updated['amount'] - $ot['amount']);
		$this->assertEquals($diff, $o_updated['total'] - $o['total']);
	}
}
