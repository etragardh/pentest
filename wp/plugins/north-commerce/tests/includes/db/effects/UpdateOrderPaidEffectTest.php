<?php
/*
 * A PHP file for testing out our OrderPaidEffect
 */

use NorthCommerce\Db\Collections\OrderStatuses;
use NorthCommerce\Db\Collections\PaymentStatuses;
use NorthCommerce\Db\Effects\UpdateOrderPaidEffect;

require_once(__DIR__ . '/../North_Commerce_Db_Test_Case.php');

class UpdateOrderPaidEffectTest extends North_Commerce_Db_Test_Case
{

	public function testBehaviorPendingTransaction()
	{
		$ot = $this->ef->newOrderTransaction();
		$o = $this->ea->ref($ot['order_id']);

		$this->assertEquals(0, $o['paid']);
		$this->assertEquals(OrderStatuses::created()->id, $o['order_status_id']);
		$this->assertEquals(PaymentStatuses::unpaid()->id, $o['payment_status_id']);

		$o = UpdateOrderPaidEffect::run($o);

		$this->assertEquals(0, $o['paid']);
		$this->assertEquals(OrderStatuses::created()->id, $o['order_status_id']);
		$this->assertEquals(PaymentStatuses::unpaid()->id, $o['payment_status_id']);
	}

	public function testBehaviorSuccessfulTransaction()
	{

		$ot = $this->ef->newOrderTransaction();
		$ot = $this->ef->excecuteStripeOrderTransaction($ot);
		$o = $this->ea->ref($ot['order_id']);

		$this->assertEquals(0, $o['paid']);
		$this->assertEquals(OrderStatuses::created()->id, $o['order_status_id']);
		$this->assertEquals(PaymentStatuses::unpaid()->id, $o['payment_status_id']);

		$updated_o = UpdateOrderPaidEffect::run($o);

		$this->assertEquals($o['total'], $updated_o['paid']);
		$this->assertEquals(OrderStatuses::unfulfilled()->id, $updated_o['order_status_id']);
		$this->assertEquals(PaymentStatuses::paid()->id, $updated_o['payment_status_id']);

	}

}
