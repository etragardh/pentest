<?php
/*
 * A PHP file for testing out our UpdateOrderInventoryEffect
 */

use NorthCommerce\Db\Effects\ProductInventoryException;
use NorthCommerce\Db\Effects\UpdateOrderInventoryEffect;

require_once(__DIR__ . '/../North_Commerce_Db_Test_Case.php');

class UpdateOrderInventoryEffectTest  extends North_Commerce_Db_Test_Case
{

	public function testBehaviorNumericProductVariant()
	{
		$quantity = 200;
		$purchased = 3;

		$pv = $this->ef->randomProductVariant();
		[$pv, $p] = $this->ef->resetProductVariantInventory($pv, $quantity, null);
		unset($p);

		$o = $this->ef->newOrder([
			'line_items' => [
				['product_variant' => $pv, 'quantity' => $purchased]
			],
			'reset_inventory' => false
		]);

		$updated_pv = $this->ea->get('product_variants', ['id' => $pv['id']]);
		UpdateOrderInventoryEffect::run($o);

		$updated_pv = $this->ea->get('product_variants', ['id' => $pv['id']]);
		$updated_p = $this->ea->get('products', ['id' => $pv['product_id']]);

		$this->assertEquals($quantity - $purchased, $updated_pv['quantity']);
		$this->assertNull($updated_p['quantity']);
	}

	public function testBehaviorNumericProduct()
	{
		$quantity = 200;
		$purchased = 3;

		$pv = $this->ef->randomProductVariant();
		[$pv, $p] = $this->ef->resetProductVariantInventory($pv, null, $quantity);
		unset($p);

		$o = $this->ef->newOrder([
			'line_items' => [
				['product_variant' => $pv, 'quantity' => $purchased]
			],
			'reset_inventory' => false
		]);

		UpdateOrderInventoryEffect::run($o);

		$updated_pv = $this->ea->get('product_variants', ['id' => $pv['id']]);
		$updated_p = $this->ea->get('products', ['id' => $pv['product_id']]);


		$this->assertNull($updated_pv['quantity']);
		$this->assertEquals($quantity - $purchased, $updated_p['quantity']);
	}

	public function testBehaviorBothNull()
	{
		$purchased = 3;

		$pv = $this->ef->randomProductVariant();
		[$pv, $p] = $this->ef->resetProductVariantInventory($pv, null, null);
		unset($p);

		$o = $this->ef->newOrder([
			'line_items' => [
				['product_variant' => $pv, 'quantity' => $purchased]
			],
			'reset_inventory' => false
		]);

		UpdateOrderInventoryEffect::run($o);

		$updated_pv = $this->ea->get('product_variants', ['id' => $pv['id']]);
		$updated_p = $this->ea->get('products', ['id' => $pv['product_id']]);


		$this->assertNull($updated_pv['quantity']);
		$this->assertNull($updated_p['quantity']);
	}

	public function testBehaviorOverSold()
	{
		$purchased = 3;
		$quantity = 2;

		$pv = $this->ef->randomProductVariant();
		[$pv, $p] = $this->ef->resetProductVariantInventory($pv, $quantity, null);
		unset($p);

		$o = $this->ef->newOrder([
			'line_items' => [
				['product_variant' => $pv, 'quantity' => $purchased]
			],
			'reset_inventory' => false
		]);

		$this->assertException(function() use($o) {
			UpdateOrderInventoryEffect::run($o);
		}, ProductInventoryException::class);
	}
}
