<?php
/**
 * A PHP file for testing out the process of updating our order totals
 */

use NorthCommerce\Db\Effects\FillInLineItemEffect;
use NorthCommerce\Db\Effects\UpdateOrderTotalsEffect;

require_once(__DIR__ . '/../North_Commerce_Db_Test_Case.php');

class UpdateOrderTotalsEffectTest  extends North_Commerce_Db_Test_Case {

	public function testBehavior() {
		$o_before = $this->ef->newOrder();

		$before_li = $this->ea->get('line_items', ['order_id' => $o_before['id']]);

		$add_qty = rand(2, 10);
		$changes = FillInLineItemEffect::run(['quantity' => $before_li['quantity'] + $add_qty,
										'product_variant_id' => $before_li['product_variant_id']]);
		$after_li = $this->ea->update('line_items', $before_li, $changes);

		$this->assertEquals(round($before_li['amount'] / $before_li['quantity'], 2),
							round($after_li['amount'] / $after_li['quantity'], 2));

		$this->assertLessThan($after_li['amount'], $before_li['amount']);

		$o_after = UpdateOrderTotalsEffect::run($o_before);

		$price_diff = $after_li['amount'] - $before_li['amount'];
		$this->assertEquals($price_diff, $o_after['total'] - $o_before['total'], print_r([
			$o_before, $o_after
		], true));
		$this->assertEquals($price_diff, $o_after['subtotal'] - $o_before['subtotal']);
		$this->assertEquals($o_before['shipping'], $o_after['shipping']);
		$this->assertEquals($o_before['tax'], $o_after['tax']);

	}

}
