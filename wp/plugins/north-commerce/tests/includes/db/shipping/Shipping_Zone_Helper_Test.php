<?php
/*
 * A PHP file for testing out Shipping_Zone_Helper_
 */

use NorthCommerce\Db\Shipping\Shipping_Zone_Helper;

use function PHPUnit\Framework\assertEquals;

require_once(__DIR__ . '/../../../north-commerce-test-case.php');

class Shipping_Zone_Helper_Test extends North_Commerce_Test_case
{

	private Shipping_Zone_Helper $sz_helper;
	private $country;

	public function setUp(): void
	{
		$this->sz_helper = new Shipping_Zone_Helper();
		$this->country = nc_random_token();
	}

	/**
	 * @dataProvider is_address_in_zone_provider
	 */
	public function test_is_address_in_zone($shipping_zone, $to_address, $outcome)
	{
		$result = $this->sz_helper->is_address_in_zone($shipping_zone, $to_address);
		assertEquals($outcome, $result);
	}

	public function is_address_in_zone_provider()
	{
		return [
			[ $this->makeShippingZone(['NC','AL']),
			  $this->makeAddress('NC', '28210'),
			  true ],


			[ $this->makeShippingZone(['14618', '28210']),
			  $this->makeAddress('NC', '28210'),
			  true ],

			[ $this->makeShippingZone(['14618', '28*']),
			  $this->makeAddress('NC', '28210'),
			  true ],

			[ $this->makeShippingZone(['NY','TX']),
			  $this->makeAddress('NC', '28210'),
			  false ],


			[ $this->makeShippingZone(['14618', '28210']),
			  $this->makeAddress('NY', '14620'),
			  false ],

			[ $this->makeShippingZone(['14618', '28*']),
			  $this->makeAddress('NC', '29290'),
			  false ]

		];

	}

	private function makeAddress($state, $zip) {
		return [
			'country' => $this->country,
			'state' => $state,
			'zip' => $zip
		];
	}

	private function makeShippingZone($states_and_zips) {
		return [
			'shipping_countries' => [
				$this->country => $states_and_zips
			]
		];
	}
}
