<?php
/*
 * A PHP file for testing out ShippingManager
 */

use NorthCommerce\Db\Collections\{
	ShippingRateConditionBases,
	ShippingZoneTypes
};
use NorthCommerce\Db\Shipping\{
	Shipping_Criteria,
	Shipping_Manager
};
use NorthCommerce\Testing\Fixtures\Includes\Db\Shipping_Manager_Fixture;
use NorthCommerce\Testing\Cleanup;

require_once(__DIR__ . '/../../../north-commerce-test-case.php');

class Shipping_Manager_Test extends North_Commerce_Test_case
{
	private Shipping_Manager $shipping_manager;
	private $shipping_profiles;

	function setUp(): void
	{
		parent::setUp();
		$this->shipping_manager = $this->agent->shipping_manager();
	}

	function tearDown(): void
	{
		parent::tearDown();
		$test_cleanup = new Cleanup();
		$test_cleanup->scrubShippingProfiles();
	}

	public function testAvailableOptionsMatchState()
	{
		$state = nc_random_token();
		$sp = $this->ef->newShippingProfile([
			'zones' => [
				['name' => "Test $state Zone",
				 'locations' => ['US' => [$state]]]
			]
		]);

		$to =  [
			'address' => "100 N Foo St",
			'city' => 'Rochester',
			'state' => $state,
			'country' => 'US'
		];

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([], 10, 10, $to));
		$this->assertCount(1, $available);
		$this->assertEquals($sp['id'], $available[0]->shipping_profile['id']);
	}

	public function testAvailableOptionsMatchZip()
	{
		$state = nc_random_token();
		$zip = nc_random_token();
		$sp = $this->ef->newShippingProfile([
			'zones' => [
				['name' => "Test $state Zone",
				 'locations' => ['US' => [$zip]],
				 'shipping_zone_type' => ShippingZoneTypes::local()]

			]
		]);

		$to =  [
			'address' => "100 N Foo St",
			'city' => 'Rochester',
			'state' => $state,
			'zip' => $zip,
			'country' => 'US'
		];

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([], 10, 10, $to));

		$this->assertCount(1, $available);
		$this->assertEquals($sp['id'], $available[0]->shipping_profile['id']);
	}

	public function testAvailableOptionsMatchesPickup()
	{
		$state = nc_random_token();
		$zip = nc_random_token();
		$pv = $this->ef->randomProductVariant();

		$sp = $this->ef->newShippingProfile([
			'zones' => [
				[ 'name' => "Test pickup Zone",
				  'locations' => [],
				  'shipping_zone_type' => ShippingZoneTypes::pickup() ]
			],
			'product_variants' => [ $pv ]
		]);

		$to =  [
			'address' => "100 N Foo St",
			'city' => 'Rochester',
			'state' => $state,
			'zip' => $zip,
			'country' => 'US'
		];

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ $pv ], 10, 10, $to));

		$this->assertCount(1, $available);
		$this->assertEquals($sp['id'], $available[0]->shipping_profile['id']);
	}



	public function testAvailableOptionsNoMatchesFound()
	{
		$state = nc_random_token();
		$this->ef->newShippingProfile();

		$to =  [
			'address' => "100 N Foo St",
			'city' => 'Rochester',
			'state' => $state,
			'country' => 'US'
		];

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([], 10, 10, $to));
		$this->assertCount(0, $available);
	}

	public function testAvailableOptionsMatchesProductVariants()
	{
		$pv = $this->ef->randomProductVariant();

		$state = nc_random_token();
		$sp = $this->ef->newShippingProfile([
			'zones' => [
				['locations' => ['US' => [$state]]]
			],
			'product_variants' => [ $pv ]
		]);

		$to =  [
			'address' => "100 N Foo St",
			'city' => 'Rochester',
			'state' => $state,
			'country' => 'US'
		];

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ $pv ], 10, 10, $to));

		$this->assertCount(1, $available);
		$this->assertEquals($sp['id'], $available[0]->shipping_profile['id']);
	}

	public function testAvailableOptionsNoMatchesProductVariants()
	{
		$pv1 = $this->ef->randomProductVariant();
		$pv2 = $this->ef->randomProductVariant(['id' => ['<>', $pv1['id']]]);
		$this->assertNotEquals($pv1['id'], $pv2['id']);

		$state = nc_random_token();
		$sp = $this->ef->newShippingProfile([
			'zones' => [
				['locations' => ['US' => [$state]]]
			],
			'product_variants' => [ $pv1 ]
		]);

		$to =  [
			'address' => "100 N Foo St",
			'city' => 'Rochester',
			'state' => $state,
			'country' => 'US'
		];

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ $pv1, $pv2 ], 10, 10, $to));

		$this->assertCount(0, $available);
	}

	public function testAvailableOptionsMatchesWeight() {
		$state = nc_random_token();
		$min = 7;
		$max = $min * 2;
		$flat_fee = 19.99;

		$sp = $this->ef->newShippingProfile( [
			'zones' => [ [
				'locations' => ['US' => [$state]],
				'rates' => [ [
					'fee_flat' => $flat_fee,
					'conditions' => [ [
						'base_id' => ShippingRateConditionBases::weight()->id,
						'min' => $min,
						'max' => $max
					] ]
				] ]
			] ]
		] );

		$this->ef->newShippingProfile( [
			'zones' => [ [
				'locations' => ['US' => [$state]],
				'rates' => [ [
					'fee_flat' => $flat_fee * 10,
					'conditions' => [ [
						'base_id' => ShippingRateConditionBases::weight()->id,
						'min' => $min * 10,
						'max' => $max * 10
					] ]
				] ]
			] ]
		] );

		$to =  [
			'address' => "100 N Foo St",
			'city' => 'Rochester',
			'state' => $state,
			'country' => 'US'
		];

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], $min + (($max - $min) / 2), 10, $to));
		$this->assertCount(1, $available);
		$this->assertEquals($sp['id'], $available[0]->shipping_profile['id']);
		$this->assertEquals($flat_fee, $available[0]->shipping_rate['fee_flat']);

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], $max + 1, 10, $to));
		$this->assertCount(0, $available);

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], $min - 1, 10, $to));
		$this->assertCount(0, $available);
	}

	public function testAvailableOptionsMatchesComplexWeight()
	{
		$state = nc_random_token();
		$min = 7;
		$max = $min * 2;
		$sp = $this->ef->newShippingProfile([
			'zones' => [
				['locations' => ['US' => [$state]],
				 'rates' => [
					 [ 'conditions_operator' => 'any',
					   'conditions' => [
						   [ 'base_id' => ShippingRateConditionBases::weight()->id,
							 'min' => $min,
							 'max' => $max ],
						   [ 'base_id' => ShippingRateConditionBases::weight()->id,
							 'min' => $min * 10,
							 'max' => $max * 10] ] ]

				 ]
			],
		]]);

		$to =  [
			'address' => "100 N Foo St",
			'city' => 'Rochester',
			'state' => $state,
			'country' => 'US'
		];

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], $min + (($max - $min) / 2), 10, $to));
		$this->assertCount(1, $available);
		$this->assertEquals($sp['id'], $available[0]->shipping_profile['id']);

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], ($min*10), 10, $to));
		$this->assertCount(1, $available);
		$this->assertEquals($sp['id'], $available[0]->shipping_profile['id']);
	}

	public function testAvailableOptionsNoMatchesComplexWeight()
	{
		$state = nc_random_token();
		$min = 7;
		$max = $min * 2;
		$this->ef->newShippingProfile([
			'zones' => [
				['locations' => ['US' => [$state]],
				 'rates' => [
					 [ 'conditions_operator' => 'all',
					   'conditions' => [
						   [ 'base_id' => ShippingRateConditionBases::weight()->id,
							 'min' => $min,
						   'max' => $max ],
						   [ 'base_id' => ShippingRateConditionBases::weight()->id,
							 'min' => $min * 10,
							 'max' => $max * 10] ] ]

				 ]
			],
		]]);

		$to =  [
			'address' => "100 N Foo St",
			'city' => 'Rochester',
			'state' => $state,
			'country' => 'US'
		];

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], $min + (($max - $min) / 2), 10, $to));
		$this->assertCount(0, $available);

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], ($min*10), 10, $to));
		$this->assertCount(0, $available);
	}

	public function testAvailableOptionsMatchesComplexWeightAndPrice()
	{
		$state = nc_random_token();
		$min = 7;
		$max = $min * 2;
		$sp = $this->ef->newShippingProfile([
			'zones' => [
				['locations' => ['US' => [$state]],
				 'rates' => [
					 [ 'conditions_operator' => 'all',
					   'conditions' => [
						   [ 'base_id' => ShippingRateConditionBases::weight()->id,
							 'min' => $min,
							 'max' => $max ],
						   [ 'base_id' => ShippingRateConditionBases::price()->id,
							 'min' => $min,
							 'max' => $max] ] ]

				 ]
			],
		]]);

		$to =  [
			'address' => "100 N Foo St",
			'city' => 'Rochester',
			'state' => $state,
			'country' => 'US'
		];

		$mid = $min + (($max - $min) / 2);
		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], $mid, $mid, $to));
		$this->assertCount(1, $available);
		$this->assertEquals($sp['id'], $available[0]->shipping_profile['id']);

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], $mid, $max + 1, $to));
		$this->assertCount(0, $available);
		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], $mid, $min - 1, $to));
		$this->assertCount(0, $available);
		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], $max + 1, $mid, $to));
		$this->assertCount(0, $available);
		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([ ], $min - 1, $mid, $to));
		$this->assertCount(0, $available);
	}

	public function testAvailableOptionsNoConditionsAny()
	{
		$state = nc_random_token();
		$sp = $this->ef->newShippingProfile([
			'zones' => [
				['name' => "Test $state Zone",
				 'locations' => ['US' => [$state]],
				 'rates' => [
					 ['name' => "Test Rate $state",
					  'conditions_operator' => 'any',
					  'conditions' => [],
					  'fee_flat' => 19.99]
				 ]]
			]
		]);

		$to =  [
			'address' => "100 N Foo St",
			'city' => 'Rochester',
			'state' => $state,
			'country' => 'US'
		];

		$available = $this->shipping_manager->availableOptions(new Shipping_Criteria([], 10, 10, $to));
		$this->assertCount(1, $available);
		$this->assertEquals($sp['id'], $available[0]->shipping_profile['id']);

		$zones = $this->ea->list('shipping_zones', ['shipping_profile_id' => $sp['id']]);
		$this->assertGreaterThan(0, count($zones));
		foreach($zones as $z) {
			$rates = $this->ea->list('shipping_rates_internal', ['shipping_zone_id' => $z['id']]);
			$this->assertGreaterThan(0, count($rates));
			foreach($rates as $r) {
				$conditions = $this->ea->list('shipping_rate_conditions', ['shipping_rate_internal_id' => $r['id']]);
				$this->assertEmpty($conditions);
			}
		}
	}

	public function testAvailableOptionsEasypost()
	{
		$services = ['Expedited', 'Ground'];

		$sp = $this->ef->newShippingProfile([
			'zones' => [
				['name' => "Test AK Zone",
				 'locations' => ['US' => ["AK"]],
				 'rates' => [
					 ['type' => "easypost",
					  'services' => $services]
				 ]]
			]
		]);

		$to =  [
			'address' => "103 Monastery St",
			'city' => 'Sitka',
			'state' => 'AK',
			'zip' => 99735,
			'country' => 'US'
		];

		$available = array_filter($this->shipping_manager->availableOptions(new Shipping_Criteria([], 10, 10, $to)),
								  function($so) use($sp) {
									  return $sp['id'] == $so->shipping_profile['id'];
								  });

		$this->assertGreaterThan(0, count($available));
		foreach($available as $opt) {
			$this->assertContains($opt->easypost_details['service'], $services);
		}
	}


	/**
	 * @dataProvider isAddressCompleteProvider
	 */
	public function testIsAddressComplete($address, $expected)
	{
		$this->assertEquals($expected,
							$this->shipping_manager->isAddressComplete($address));

	}

	public function isAddressCompleteProvider()
	{
		return [
			[['street' => 'A'], false],
			[['street' => 'A', 'city' => 'B'], false],
			[['street' => 'A', 'city' => 'B', 'state' => 'C'], false],
			[['street' => 'A', 'city' => 'B', 'state' => 'C', 'zip' => 'D',], false],
			[['street' => 'A', 'city' => 'B', 'state' => 'C', 'zip' => 'D', 'country' => 'E'], true],
			[['street' => 'A', 'city' => 'B', 'state' => '', 'zip' => 'D', 'country' => 'E'], false],
			[['street' => 'A', 'city' => 'B', 'state' => '   ', 'zip' => 'D', 'country' => 'E'], false],
			[['street1' => 'A', 'city' => 'B', 'state' => 'C', 'zip' => 'D', 'country' => 'E'], true],
			[['address' => 'A', 'city' => 'B', 'state' => 'C', 'zip_code' => 'D', 'country' => 'E'], true],
			[['address' => 'A', 'city' => 'B', 'state' => 'C', 'zipper' => 'D', 'country' => 'E'], false],
		];
	}

	public function testShippingCriteriaByOrder()
	{
		Shipping_Manager_Fixture::use(function(Shipping_Manager_Fixture $f) {
			$criteria = $this->shipping_manager->shippingCriteriaByOrder($f->order);
			$f->assertCriteriaMatches($criteria);
		});
	}


	public function testShippingCriteriaByCart()
	{
		Shipping_Manager_Fixture::use(function(Shipping_Manager_Fixture $f) {
			$criteria = $this->shipping_manager->shippingCriteriaByCart($f->to_address,
																		$f->cart);
			$f->assertCriteriaMatches($criteria);
		});
	}

	public function testShippingCriteriaByLineItems()
	{
		Shipping_Manager_Fixture::use(function(Shipping_Manager_Fixture $f) {
			$criteria = $this->shipping_manager->shippingCriteriaByLineItems($f->to_address,
																			 $f->line_items);
			$f->assertCriteriaMatches($criteria);
		});
	}

	public function testNormalizeAddress()
	{
		$c = $this->ef->newCustomer();
		$addr = $this->ef->newAddress(['customer' => $c]);
		$fixed = $this->shipping_manager->normalizeAddress($addr);
		$this->assertEquals($addr['addressline1'], $fixed['street1']);

		$country = $this->ea->get('countries', ['id' => $addr['country_id']]);
		$this->assertEquals($country['abbreviation'], $fixed['country']);

		$this->assertEquals($addr['zipcode'], $fixed['zip']);
		$this->assertEquals($addr['city'], $fixed['city']);
		$this->assertEquals($addr['state'], $fixed['state']);
	}
}
