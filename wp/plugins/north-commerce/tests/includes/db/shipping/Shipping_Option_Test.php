<?php
/*
 * A PHP file for testing out Shipping_Option
 */

use NorthCommerce\Db\Collections\RateTypes;
use NorthCommerce\Db\Shipping\Shipping_Option;

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class Shipping_Option_Test extends North_Commerce_Test_case
{

	private Shipping_Option $internal_option;
	private Shipping_Option $easypost_option;

	private $shipping_profile;
	private $shipping_rate;
	private $shipping_zone;
	private $easypost_details;

	public function setUp(): void
	{
		parent::setUp();

		$this->shipping_profile = [];

		$this->shipping_rate = [
			'name' => 'Bob',
			'id' => nc_random_token(),
			'price' => rand(2, 100),
			'fee_flat' => 2.00,
			'fee_percent' => 3
		];

		$this->shipping_zone = [];

		$days = 3;
		$this->easypost_details = [
			'rate' => rand(2, 100),
			'id' => nc_random_token(),
			'carrier' => "USPS",
			'carrier_id' => nc_random_token(),
			'service' => nc_random_token(),
			'delivery_days' => $days,
			'delivery_date' => date('c', time() + (60 * 60 *24 * $days)),
			'delivery_date_guaranteed' => 'nope'
		];

		$this->internal_option = new Shipping_Option($this->shipping_profile,
													 $this->shipping_zone,
													 $this->shipping_rate,
													 RateTypes::flatRate(),
													 null);

		$this->easypost_option = new Shipping_Option($this->shipping_profile,
													 $this->shipping_zone,
													 $this->shipping_rate,
													 RateTypes::calculatedRate(),
													 $this->easypost_details);

	}


	public function testSummaryInternalRate()
	{
		$summary = $this->internal_option->summary();
		$this->assertEquals('internal', $summary['rate_type']);
		$this->assertEquals($this->shipping_rate['name'], $summary['rate_name']);
		$this->assertEquals($this->shipping_rate['id'], $summary['id']);
		$this->assertEquals($this->internal_option->cost($this->shipping_rate['price']),
							$summary['rate']);
		$this->assertEquals($this->internal_option->icon(),
							$summary['rate_icon']);
	}

	public function testSummaryEasypostRate()
	{
		$summary = $this->easypost_option->summary();
		$this->assertEquals('easypost', $summary['rate_type']);
		$this->assertEquals($this->shipping_rate['id'], $summary['id']);
		$this->assertEquals($this->easypost_option->cost($this->easypost_details['rate']),
							$summary['rate']);
		$this->assertEquals($this->easypost_option->icon(),
							$summary['rate_icon']);
		$this->assertEquals($this->easypost_details['id'],
							$summary['easypost_rate_id']);
	}

	/**
	 * @dataProvider costProvider
	 */
	public function testCost($base, $fee_flat, $fee_percent, $expected)
	{
		$this->internal_option->shipping_rate['price'] = $base;
		$this->internal_option->shipping_rate['fee_flat'] = $fee_flat;
		$this->internal_option->shipping_rate['fee_percent'] = $fee_percent;

		$this->assertEquals($expected, $this->internal_option->cost($base));
	}

	public function costProvider()
	{
		return [
			[5, 0, 0, 5],
			[5, 2, 0, 7],
			[5, 0, 10, 5.50],
			[5, 5, 10, 10.50],
		];
	}

	public function testIconInternalRate() {
		$this->assertStringContainsString("public/images/shipping-rates/Flat_Rate.svg",
										  $this->internal_option->icon());
	}

	/**
	 * @dataProvider iconEasypostRateProvider
	 */
	public function testIconEasypostRate($carrier, $expected_icon_name) {
		$this->easypost_option->easypost_details['carrier'] = $carrier;

		$this->assertStringContainsString("public/images/shipping-rates/$expected_icon_name.svg",
										  $this->easypost_option->icon());
	}

	public function iconEasypostRateProvider()
	{
		return [
			['UPS', 'ups'],
			['DHLExpress', 'DHL'],
			['DHL', 'DHL'],
			['UPSDAP', 'ups'],
			['aaa', 'aaa']
		];
	}

	/**
	 * @dataProvider normalizedCarrierProvider
	 */
	public function testNormalizedCarrier($carrier, $expected) {
		$this->easypost_option->easypost_details['carrier'] = $carrier;

		$this->assertStringContainsString($expected,
										  $this->easypost_option->normalizedCarrier());
	}

	public function normalizedCarrierProvider()
	{
		return [
			['UPS', 'UPS'],
			['DHLExpress', 'DHL'],
			['DHL', 'DHL'],
			['UPSDAP', 'UPS']
		];
	}
}
