<?php
/*
 * A PHP file for testing out generic expressions
 */

use NorthCommerce\Db\Sql\BinaryOperator;
use NorthCommerce\Db\Sql\ColumnReference;

require_once(__DIR__ . '/../../../north-commerce-test-case.php');

class ExpressionTest extends North_Commerce_Db_Test_Case
{


	public function testReduce() {
		$parser = $this->agent->parser();

		$criteria = [
			'id' => 100,
			'customer.id' => 200
		];

		$expr = $parser->parseFilter('orders', $criteria);
		$sources = $expr->reduce(function($carry, $expr) {
			if($expr instanceof ColumnReference) {
				$carry[] = $expr->table();
			}
			return $carry;
		}, []);

		$this->assertEquals(2, count($sources));
		$this->assertContains('orders', $sources);
		$this->assertContains('customers', $sources);
	}

	public function testReduceOr() {
		$parser = $this->agent->parser();

		$tax_amount = $this->ef->randomDollarAmount(10, 20);
		$criteria = ['or',
					 [ 'id' => 100,
					   'customer.id' => 200 ],
					 ['and',
					  ['>', 'tax', $tax_amount]]];

		$expr = $parser->parseFilter('orders', $criteria);
		$sources = $expr->reduce(function($carry, $expr) {
			if($expr instanceof ColumnReference) {
				$carry[] = $expr->table();
			}
			return $carry;
		}, []);

		$this->assertEquals(3, count($sources));
		$this->assertContains('orders', $sources);
		$this->assertContains('customers', $sources);

		$found = $expr->reduce(function($carry, $expr) {

			if($expr instanceof BinaryOperator) {
				if($expr->lhs() instanceof ColumnReference &&
				   $expr->lhs()->table() == 'orders' &&
				   $expr->lhs()->column() == 'tax') {
					return $expr->rhs()->value();
				}
			}

			return $carry;

		}, false);
		$this->assertEquals($tax_amount, $found);
	}
}
