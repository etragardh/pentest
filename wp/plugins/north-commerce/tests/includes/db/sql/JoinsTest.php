<?php
/*
 * A PHP file for testing Joins - that is a collection of Join objects
 */
require_once(__DIR__ . '/../../../north-commerce-test-case.php');

use NorthCommerce\Db\Sql\ColumnReference;
use NorthCommerce\Db\Sql\Join;
use NorthCommerce\Db\Sql\Joins;

class JoinsTest extends North_Commerce_Db_Test_Case
{

	public function testToSql()
	{
		$prefix = $this->tablePrefix();
		$j1 = new Join("", "customer", "id",  "", "orders", "customer_id",true, true);
		$j2 = new Join("", "orders", "billing_address_id",  "", "addresses", "id",true, true);

		$joins = new Joins();
		for($i = 0; $i < 3; $i++) {
			$joins->add($j1);
		}
		$joins->add($j2);
		$this->assertEquals("JOIN {$prefix}orders orders ON (customer.id = orders.customer_id) " .
							"JOIN {$prefix}addresses addresses ON (orders.billing_address_id = addresses.id)",
							$joins->toSql());

	}

	public function testAllOneToOne()
	{
		$tests = [
			['table' => 'customers',
			 'refs' => [ 'email'],
			 'expected' => true],

			['table' => 'customer_payment_methods',
			 'refs' => [ 'customer.email', 'payment_provider.slug'],
			 'expected' => true],

			['table' => 'customers',
			 'refs' => [ 'orders.line_items.product_variant.product.slug', 'orders.billing_address.addressline1' ],
			 'expected' => false],

			['table' => 'customers',
			 'refs' => [ 'email', 'orders.line_items.product_variant.slug' ],
			 'expected' => false],
		];

		foreach($tests as $t) {
			$joins = new Joins();
			foreach($t['refs'] as $expr) {
				$joins->add((new ColumnReference($t['table'], $expr))->joins());
			}
			$this->assertEquals($t['expected'],	$joins->allOneToOne(), $joins->toSql());
		}
	}

	public function testAdd()
	{
		$j1 = new Joins();
		$j1->add(new Join("", "x", "y",  "", "a", "b",true, true));
		$j1->add(new Join("", "a", "b",  "", "c", "d",true, true));
		$this->assertEquals(2, count($j1->toArray()));

		$j2 = new Joins();
		$j2->add(new Join("", "x", "y",  "", "a", "b",true, true));
		$j2->add(new Join("", "x", "y",  "", "a", "b",true, true));
		$j2->add(new Join("", "x", "y",  "", "a", "b",true, true));
		$this->assertEquals(1, count($j2->toArray()));

		$j3 = new Joins();
		$j3->add(new Join("", "c", "d",  "", "e", "f",true, true));
		$j3->add(new Join("", "e", "f",  "", "h", "i",true, true));
		$this->assertEquals(2, count($j3->toArray()));

		$j4 = new Joins();
		$j4->add($j1);
		$this->assertEquals(2, count($j4->toArray()));
		$j4->add($j2);
		$this->assertEquals(2, count($j4->toArray()));
		$j4->add($j3);
		$this->assertEquals(4, count($j4->toArray()));


	}
}
