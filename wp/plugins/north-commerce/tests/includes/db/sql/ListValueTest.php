<?php
/*
 * A PHP file for testing out the ListValue object
 */

use NorthCommerce\Db\Sql\ListValue;
use NorthCommerce\Db\Sql\LiteralValue;

require_once(__DIR__ . '/../../../north-commerce-test-case.php');

class ListValueTest extends North_Commerce_Db_Test_Case {

	function testToSql()
	{
		$tests = [
			['input' => [1,2,3],
			 'expected' => "(1,2,3)"],

			['input' => ['a', 'b', 'c'],
			 'expected' => "('a','b','c')"],

			['input' => ['a', -77, 'c'],
			 'expected' => "('a',-77,'c')"]
		];

		foreach($tests as $t) {
			$expr = new ListValue(array_map(function($v) {
				return new LiteralValue($v);
			}, $t['input']));
			$this->assertEquals($t['expected'], $expr->toSql());
		}
	}

	function testMalformed()
	{
		$tests = [
			100,
			['a' => 'b'],
			[['a']],
		];

		foreach($tests as $t) {
			try {
				new	ListValue($t);
				$this->assertFalse(true);
			} catch(Exception $ex) {
				$this->assertInstanceOf(Exception::class, $ex);
			}
		}
	}

}
