<?php
/*
 * A PHP file for testing out binary operators in SQL
 */
require_once(__DIR__ . '/../../../north-commerce-test-case.php');

use \NorthCommerce\Db\Sql\BinaryOperator;
use \NorthCommerce\Db\Sql\LiteralValue;
use \NorthCommerce\Db\Sql\ColumnReference;
use NorthCommerce\Db\Sql\Joins;
use NorthCommerce\Db\Sql\NullValue;

class BinaryOperatorTest extends North_Commerce_Db_Test_Case
{

	function testToSql()
	{
		$tests = [
			['lhs' => new LiteralValue(7),
			 'rhs' => new LiteralValue(100),
			 'op' => '<>',
			 'expected' => "7 <> 100"],

			['lhs' => new ColumnReference('product_variants', 'price'),
			 'rhs' => new LiteralValue(100),
			 'op' => '>',
			 'expected' => "product_variants.price > 100"],

			['lhs' => new ColumnReference('products', 'sku'),
			 'rhs' => new LiteralValue('abc'),
			 'op' => '=',
			 'expected' => "products.sku = 'abc'"],

			['lhs' => new ColumnReference('products', 'sku'),
			 'rhs' => new NullValue(),
			 'op' => 'is',
			 'expected' => "products.sku IS NULL"]
		];

		foreach($tests as $t) {
			$op = new BinaryOperator($t['op'], $t['lhs'], $t['rhs']);
			$this->assertEquals($t['expected'], $op->toSql());
		}
	}

	function testAccumulateJoinsEmpty()
	{
		$op = new BinaryOperator('=',
								 new ColumnReference('products', 'sku'),
								 new LiteralValue('abc'));
		$joins = $op->joins();
		$this->assertEquals(0, count($joins->toArray()));
	}

	function testAccumulateJoinsNonEmpty()
	{
		$op = new BinaryOperator('=',
								 new ColumnReference('products', 'product_variants.product_variant_type.slug'),
								 new LiteralValue('abc'));
		$joins = $op->joins();
		$this->assertEquals(2, count($joins->toArray()));
		$this->assertFalse($joins->allOneToOne());
	}
}
