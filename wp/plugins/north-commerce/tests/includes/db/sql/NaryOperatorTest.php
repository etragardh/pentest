<?php
/*
 * A PHP file for testing out NaryOperator sql expressions
 */

use NorthCommerce\Db\Sql\BinaryOperator;
use NorthCommerce\Db\Sql\ColumnReference;
use NorthCommerce\Db\Sql\LiteralValue;
use NorthCommerce\Db\Sql\NaryOperator;
use NorthCommerce\Db\Sql\NullValue;

require_once(__DIR__ . '/../../../north-commerce-test-case.php');

class NaryOperatorTest extends North_Commerce_Db_Test_Case
{

	function testToSql()
	{
		$op = new NaryOperator('or', [
			new NaryOperator('and', [
				new BinaryOperator('>', new ColumnReference('customers', 'created'), new LiteralValue('2022-01-01')),
				new BinaryOperator('<', new ColumnReference('customers', 'created'), new LiteralValue('2022-01-02'))
			]),
			new BinaryOperator('is', new ColumnReference('product_variants', 'deleted'), new NullValue())
		]);

		$this->assertEquals("((customers.created > '2022-01-01') AND (customers.created < '2022-01-02')) OR (product_variants.deleted IS NULL)",
							$op->toSql());
	}

	function testJoins()
	{
		$op1 = new BinaryOperator('=',
								 new ColumnReference('product_variants', 'product_variant_type.slug'),
								  new LiteralValue('abc'));

		$op2 = new BinaryOperator('=',
								  new ColumnReference('product_variants', 'line_items.order.customer.email'),
								  new LiteralValue('bob@nowhere.com'));

		$op3 = new BinaryOperator('is',
								  new ColumnReference('product_variants', 'deleted'),
								  new NullValue());

		$and = new NaryOperator('and', [$op1, $op2, $op3]);

		$joins = $and->joins();
		$this->assertEquals(4, count($joins->toArray()));
		$this->assertFalse($joins->allOneToOne());
		$prefix = $this->tablePrefix();

		$expected = [
			"JOIN {$prefix}product_variant_types product_variant_types ON (product_variants.product_variant_type_id = product_variant_types.id) ",
			"JOIN {$prefix}line_items line_items ON (product_variants.id = line_items.product_variant_id) ",
			"JOIN {$prefix}orders orders ON (line_items.order_id = orders.id) ",
			"JOIN {$prefix}customers customers ON (orders.customer_id = customers.id)"
		];
		$this->assertEquals(implode('', $expected), $joins->toSql());
	}
}
