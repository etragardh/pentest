<?php
/**
 * Autogenerated unit test for collections object. Do not edit.
 */

require_once __DIR__ . '/../North_Commerce_Db_Test_Case.php';

use NorthCommerce\Db\Collections\Notifications;

class NotificationsTest extends North_Commerce_Db_Test_Case {

	public function testOrderConfirmation() {
		$found = $this->ea->get('notifications', [ 'slug' => 'order_confirmation' ]);
		$c = Notifications::orderConfirmation();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testOrderEdited() {
		$found = $this->ea->get('notifications', [ 'slug' => 'order_edited' ]);
		$c = Notifications::orderEdited();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testOrderCanceled() {
		$found = $this->ea->get('notifications', [ 'slug' => 'order_canceled' ]);
		$c = Notifications::orderCanceled();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testOrderRefund() {
		$found = $this->ea->get('notifications', [ 'slug' => 'order_refund' ]);
		$c = Notifications::orderRefund();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testAbandonedCommerce() {
		$found = $this->ea->get('notifications', [ 'slug' => 'abandoned_commerce' ]);
		$c = Notifications::abandonedCommerce();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testPosAndMobile() {
		$found = $this->ea->get('notifications', [ 'slug' => 'pos_and_mobile' ]);
		$c = Notifications::posAndMobile();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testPaymentError() {
		$found = $this->ea->get('notifications', [ 'slug' => 'payment_error' ]);
		$c = Notifications::paymentError();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testOrderOutForDelivery() {
		$found = $this->ea->get('notifications', [ 'slug' => 'order_out_for_delivery' ]);
		$c = Notifications::orderOutForDelivery();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testOrderReadyForPickup() {
		$found = $this->ea->get('notifications', [ 'slug' => 'order_ready_for_pickup' ]);
		$c = Notifications::orderReadyForPickup();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testShippingConfirmation() {
		$found = $this->ea->get('notifications', [ 'slug' => 'shipping_confirmation' ]);
		$c = Notifications::shippingConfirmation();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testCustomerAccountInvite() {
		$found = $this->ea->get('notifications', [ 'slug' => 'customer_account_invite' ]);
		$c = Notifications::customerAccountInvite();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testCustomerAccountWelcome() {
		$found = $this->ea->get('notifications', [ 'slug' => 'customer_account_welcome' ]);
		$c = Notifications::customerAccountWelcome();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testCustomerAccountPasswordReset() {
		$found = $this->ea->get('notifications', [ 'slug' => 'customer_account_password_reset' ]);
		$c = Notifications::customerAccountPasswordReset();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testContactCustomer() {
		$found = $this->ea->get('notifications', [ 'slug' => 'contact_customer' ]);
		$c = Notifications::contactCustomer();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testConfirmationEmail() {
		$found = $this->ea->get('notifications', [ 'slug' => 'confirmation_email' ]);
		$c = Notifications::confirmationEmail();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testReturnInstructions() {
		$found = $this->ea->get('notifications', [ 'slug' => 'return_instructions' ]);
		$c = Notifications::returnInstructions();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testNewOrder() {
		$found = $this->ea->get('notifications', [ 'slug' => 'new_order' ]);
		$c = Notifications::newOrder();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testCancelledOrder() {
		$found = $this->ea->get('notifications', [ 'slug' => 'cancelled_order' ]);
		$c = Notifications::cancelledOrder();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testFailedOrder() {
		$found = $this->ea->get('notifications', [ 'slug' => 'failed_order' ]);
		$c = Notifications::failedOrder();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}


}
