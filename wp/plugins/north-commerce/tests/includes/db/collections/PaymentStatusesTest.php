<?php
/**
 * Autogenerated unit test for collections object. Do not edit.
 */

require_once __DIR__ . '/../North_Commerce_Db_Test_Case.php';

use NorthCommerce\Db\Collections\PaymentStatuses;

class PaymentStatusesTest extends North_Commerce_Db_Test_Case {

	public function testPaid() {
		$found = $this->ea->get('payment_statuses', [ 'slug' => 'paid' ]);
		$c = PaymentStatuses::paid();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testFailed() {
		$found = $this->ea->get('payment_statuses', [ 'slug' => 'failed' ]);
		$c = PaymentStatuses::failed();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testPending() {
		$found = $this->ea->get('payment_statuses', [ 'slug' => 'pending' ]);
		$c = PaymentStatuses::pending();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testVoid() {
		$found = $this->ea->get('payment_statuses', [ 'slug' => 'void' ]);
		$c = PaymentStatuses::void();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testUnpaid() {
		$found = $this->ea->get('payment_statuses', [ 'slug' => 'unpaid' ]);
		$c = PaymentStatuses::unpaid();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testRefunded() {
		$found = $this->ea->get('payment_statuses', [ 'slug' => 'refunded' ]);
		$c = PaymentStatuses::refunded();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testPartiallyRefunded() {
		$found = $this->ea->get('payment_statuses', [ 'slug' => 'partially-refunded' ]);
		$c = PaymentStatuses::partiallyRefunded();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testPartiallyPaid() {
		$found = $this->ea->get('payment_statuses', [ 'slug' => 'partially-paid' ]);
		$c = PaymentStatuses::partiallyPaid();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}


}
