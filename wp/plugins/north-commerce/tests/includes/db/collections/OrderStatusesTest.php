<?php
/**
 * Autogenerated unit test for collections object. Do not edit.
 */

require_once __DIR__ . '/../North_Commerce_Db_Test_Case.php';

use NorthCommerce\Db\Collections\OrderStatuses;

class OrderStatusesTest extends North_Commerce_Db_Test_Case {

	public function testCreated() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'created' ]);
		$c = OrderStatuses::created();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testFulfilled() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'fulfilled' ]);
		$c = OrderStatuses::fulfilled();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testPartiallyFulfilled() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'partially-fulfilled' ]);
		$c = OrderStatuses::partiallyFulfilled();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testScheduled() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'scheduled' ]);
		$c = OrderStatuses::scheduled();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testOnHold() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'on-hold' ]);
		$c = OrderStatuses::onHold();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testUnfulfilled() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'unfulfilled' ]);
		$c = OrderStatuses::unfulfilled();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testReadyForPickup() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'ready-for-pickup' ]);
		$c = OrderStatuses::readyForPickup();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testPickedUp() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'picked-up' ]);
		$c = OrderStatuses::pickedUp();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testOutForDelivery() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'out-for-delivery' ]);
		$c = OrderStatuses::outForDelivery();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testDelivered() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'delivered' ]);
		$c = OrderStatuses::delivered();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testAbandoned() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'abandoned' ]);
		$c = OrderStatuses::abandoned();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testDraft() {
		$found = $this->ea->get('order_statuses', [ 'slug' => 'draft' ]);
		$c = OrderStatuses::draft();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}


}
