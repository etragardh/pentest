<?php
/**
 * Autogenerated unit test for collections object. Do not edit.
 */

require_once __DIR__ . '/../North_Commerce_Db_Test_Case.php';

use NorthCommerce\Db\Collections\ProductStatuses;

class ProductStatusesTest extends North_Commerce_Db_Test_Case {

	public function testPublished() {
		$found = $this->ea->get('product_statuses', [ 'slug' => 'published' ]);
		$c = ProductStatuses::published();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testDraft() {
		$found = $this->ea->get('product_statuses', [ 'slug' => 'draft' ]);
		$c = ProductStatuses::draft();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testArchive() {
		$found = $this->ea->get('product_statuses', [ 'slug' => 'archive' ]);
		$c = ProductStatuses::archive();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testSchedule() {
		$found = $this->ea->get('product_statuses', [ 'slug' => 'schedule' ]);
		$c = ProductStatuses::schedule();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}

	public function testTrashed() {
		$found = $this->ea->get('product_statuses', [ 'slug' => 'trashed' ]);
		$c = ProductStatuses::trashed();
		$this->assertEquals( $found['id'], $c->id );
		$this->assertEquals( $found['slug'], $c->slug );
	}


}
