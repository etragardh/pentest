<?php
/*
 * A PHP file for testing out parsing stuff for our database
 */
require_once(__DIR__ . '/../../north-commerce-test-case.php');

use NorthCommerce\Db\Schema;
use \NorthCommerce\Db\Sql\Expression;

class North_Commerce_Db_Parser_Test extends North_Commerce_Db_Test_Case
{

	public function testParseFilter()
	{
		$tests = [
			['input' => null, 'output' => "NULL"],
			['input' => true, 'output' => "TRUE"],
			['input' => false, 'output' => "FALSE"],
			['input' => ['=', 1, 1], 'output' => "1 = 1"],

			['input' => ['=', 'slug', 'bob'],
			 'output' => "product_variants.slug = 'bob'"],

			['input' =>  "slug:eq:bob",
			 'output' => "(product_variants.slug = 'bob')"],

			['input' => ['slug' => 'bob'],
			 'output' =>  "(product_variants.slug = 'bob')"],

			['input' => ['slug' => 'bob', 'deleted' => null],
			 'output' => "(product_variants.slug = 'bob') AND (product_variants.deleted IS NULL)"],

			['input' => ['and',
						 ['=', 'slug', 'bob'],
						 ['is', 'deleted', null]],
			 'output' => "(product_variants.slug = 'bob') AND (product_variants.deleted IS NULL)"],

			['input' => ['and',
						 ['or',
						  ['>', 'price', '100'],
						  ['>', 'price', '100']],
						 ['not',
						  ['<>', 'quantity', '99']]],
			 'output' =>  "((product_variants.price > 100) OR (product_variants.price > 100)) " .
					   "AND (NOT product_variants.quantity <> 99)"],

			['input' => ['or',
						 ['sku' => ['=', 'abc'],
						  'price' => ['<', 200]],
						 ['deleted' => null]],
			 'output' => "((product_variants.sku = 'abc') AND (product_variants.price < 200)) OR ((product_variants.deleted IS NULL))"],
			['input' => ['in', 'sku', ['abc', 123]],
			 'output' => "product_variants.sku IN ('abc',123)"],
			['input' => ['and', ['deleted' => null], ['in', 'sku', ['abc', 123]]],
			 'output' => "((product_variants.deleted IS NULL)) AND (product_variants.sku IN ('abc',123))"],
			['input' => ['and', [ [ '=', 'price', 100 ], ['=', 'sku', 'abc']]],
			 'output' => "(product_variants.price = 100) AND (product_variants.sku = 'abc')"],
			['input' => ['deleted' => ['any'],
						 'product.deleted' => ['any'],
						 'product.base_price' => ['>', 100]],
			 'output' => "(((product_variants.deleted IS NULL) OR (product_variants.deleted IS NOT NULL))) AND " .
					   "(((products.deleted IS NULL) OR (products.deleted IS NOT NULL))) AND " .
					   "(products.base_price > 100)" ]
		];

		$parser = new North_Commerce_Db_Parser();

		foreach($tests as $t) {
			$filter = $parser->parseFilter('product_variants', $t['input']);
			$this->assertInstanceOf(Expression::class, $filter);
			$this->assertEquals($t['output'], $filter->toSql(), "Input: " . print_r($t['input'], true));
		}
	}


	public function testParseFilterByEmail()
	{
		$parser = new North_Commerce_Db_Parser();
		$input = ['email' => ['like', 'foo@bar.com']];
		$output = $parser->parseFilter('customers', $input);
		$this->assertEquals("(customers.email LIKE 'foo@bar.com')", $output->toSql());
	}

	public function testColumnList()
	{
		$schema = new Schema();
		$parser = new North_Commerce_Db_Parser();
		$col_list  = $parser->columnList('orders');
		$sql = $col_list->toSql();
		$columns = $schema->getColumns('orders');
		foreach(array_keys($columns) as $col) {
			$this->assertTrue(strpos($sql, "orders.$col") !== false);
		}


		$col_list  = $parser->columnList('orders', ['id', 'created']);
		$this->assertEquals('orders.id, orders.created', $col_list->toSql());

		try {
			$parser->columnList('x-orders');
			$this->assertTrue(false);
		} catch(Exception $ex) {
			$this->assertInstanceOf(Exception::class, $ex);
		}

	}

	public function testVerifyTable()
	{
		$parser = new North_Commerce_Db_Parser();
		$this->assertTrue($parser->verifyTable('orders'));
		$this->assertFalse($parser->verifyTable('x-orders', ['not_found' => false]));
		try {
			$parser->verifyTable('x-orders');
			$this->assertTrue(false);
		} catch(Exception $ex) {
			$this->assertInstanceOf(Exception::class, $ex);
		}
	}

}
