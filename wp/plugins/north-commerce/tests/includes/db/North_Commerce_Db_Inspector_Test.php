<?php
/*
 * A PHP file for testing out our inspector
 */

use NorthCommerce\Testing\EntityFactory;

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class North_Commerce_Db_Inspector_Test extends North_Commerce_Db_Test_Case
{

	public function testTablesWithPrefix()
	{
		$agent = North_Commerce_Db_Agent::instance();
		$tables = $agent->introspector()->tablesWithPrefix("wp_");
		$this->assertContains("wp_posts", $tables);
		$this->assertContains("wp_options", $tables);
		$this->assertContains("wp_users", $tables);
	}

	public function testTableColumns()
	{
		$agent = North_Commerce_Db_Agent::instance();
		$cols = $agent->introspector()->tableColumns('wp_posts', ['as' => 'type_map']);
		$this->assertEquals($cols['post_password'], "VARCHAR(255)");
		$this->assertEquals($cols['post_status'], "VARCHAR(20)");
		$this->assertEquals($cols['ID'], "BIGINT UNSIGNED");

		$cols = $agent->introspector()->tableColumns('wp_posts', ['as'=> 'index_map']);
		$this->assertEquals($cols['post_password'], false);
		$this->assertEquals($cols['post_author'], "MUL");
		$this->assertEquals($cols['ID'], "PRI");

		$cols = $agent->introspector()->tableColumns('wp_posts', ['as'=> 'default_map']);
		$this->assertEquals(null, $cols['ID']);
		$this->assertEquals('0000-00-00 00:00:00', $cols['post_date']);
		$this->assertEquals('', $cols['post_password']);

	}

	public function testCurrentDatabase()
	{
		$inspector = North_Commerce_Db_Agent::instance()->introspector();
		$this->assertEquals($inspector->currentDatabase(), "wp");
	}

	public function testTableReferences()
	{
		$inspector = North_Commerce_Db_Agent::instance()->introspector();
		$refs = $inspector->tableReferences('orders');

		$should_refs = [
			'payment_statuses', 'addresses', 'order_statuses'
		];

		$ref_bys = [
			'line_items', 'order_changes', 'shipping_details'

		];

		foreach($should_refs as $should_ref) {
			$found = false;
			foreach($refs as $ref) {
				if($ref['ref_table_name'] == $should_ref && $ref['table_name'] == 'orders') {
					$found = true;
				}
			}
			$this->assertTrue($found);
		}

		foreach($ref_bys as $ref_by) {
			$found = false;
			foreach($refs as $ref) {
				if($ref['ref_table_name'] == 'orders' && $ref['table_name'] == $ref_by) {
					$found = true;
				}
			}
			$this->assertTrue($found);
		}
	}

	public function testReduceForeignKeys() {
		$inspector = North_Commerce_Db_Agent::instance()->introspector();
		$ef = EntityFactory::instance();
		$order = $ef->newOrder();

		$matches = $inspector->reduceForeignKeys('orders', $order, function($carry, $table) {
			$carry[] = $table;
			return $carry;
		}, []);

		$this->assertContains('orders', $matches);
		$this->assertContains('line_items', $matches);

		$line_items = array_filter($matches, function($m) { return $m == 'line_items'; });
		$this->assertEquals(2, count($line_items));
	}

	public function testForeignKeyConstraintName()
	{
		$inspector = North_Commerce_Db_Agent::instance()->introspector();
		$fk_quantity = $inspector->foreignKeyConstraintName('line_items', 'quantity');
		$this->assertFalse($fk_quantity);

		$fk_order_id = $inspector->foreignKeyConstraintName('line_items', 'order_id');
		$this->assertEquals('wp_nc_line_items_ibfk_1', $fk_order_id);

	}
}
