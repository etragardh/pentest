<?php
/*
 * A PHP file for testing out our addreses write policy
 */

use NorthCommerce\Db\Security\Pub\AddressesWritePolicy;

require_once(__DIR__ . '/../../North_Commerce_Db_Test_Case.php');

class AddressesWritePolicyTest extends North_Commerce_Db_Test_Case
{

	public function testCreateColumnRules()
	{
		$awp = new AddressesWritePolicy();
		$rules = $awp->createColumnRules(null);
		$this->assertContains('customer_id', $rules->required);
		$this->assertCount(1, $rules->required);

		$this->assertContains('first_name', $rules->optional);
	}

	public function testUpdateColumnRules()
	{
		$awp = new AddressesWritePolicy();
		$rules = $awp->updateColumnRules(null, null);
		$this->assertEmpty($rules->required);
		$this->assertContains('first_name', $rules->optional);
	}

	public function testEntityCreated()
	{
		$awp = new AddressesWritePolicy();

		$c = $this->ea->create('customers', [
			'email' => $this->ef->newEmailAddress(),
			'marketing_optin' => true
		]);

		$this->assertNull($c['first_name']);
		$this->assertNull($c['last_name']);
		$this->assertNull($c['phone']);

		$address = $this->ef->newAddress(['customer' => $c]);
		$address = $awp->entityCreated($address);

		$c_updated = $this->ea->ref($c['id']);

		$this->assertEquals($address['first_name'], $c_updated['first_name']);
		$this->assertEquals($address['last_name'], $c_updated['last_name']);
		$this->assertEquals($address['phone'], $c_updated['phone']);
	}

	public function testEntityUpdated()
	{
		$awp = new AddressesWritePolicy();

		$c = $this->ea->create('customers', [
			'email' => $this->ef->newEmailAddress(),
			'marketing_optin' => true
		]);

		$this->assertNull($c['first_name']);
		$this->assertNull($c['last_name']);
		$this->assertNull($c['phone']);

		$address = $this->ef->newAddress(['customer' => $c]);
		$address = $awp->entityCreated($address);

		$address_updated = $this->ea->update('addresses', $address, [
			'first_name' => $address['first_name'] . '-X',
			'last_name' => $address['last_name'] . '-X',
			'phone' => $address['phone'] . '-X',
		]);
		$address_updated = $awp->entityUpdated($address_updated);

		$c_updated = $this->ea->ref($c['id']);

		$this->assertEquals($address['first_name'], $c_updated['first_name']);
		$this->assertEquals($address['last_name'], $c_updated['last_name']);
		$this->assertEquals($address['phone'], $c_updated['phone']);

		$this->assertNotEquals($address['first_name'], $address_updated['first_name']);
		$this->assertNotEquals($address['last_name'], $address_updated['last_name']);
		$this->assertNotEquals($address['phone'], $address_updated['phone']);

	}
}
