<?php
/*
 * A PHP file for testing out our line_items write policy
 */

use NorthCommerce\Db\Collections\OrderStatuses;
use NorthCommerce\Db\Effects\FillInLineItemEffect;
use NorthCommerce\Db\Security\Pub\LineItemsWritePolicy;

require_once(__DIR__ . '/../../North_Commerce_Db_Test_Case.php');

class LineItemsWritePolicyTest extends North_Commerce_Db_Test_Case
{

	public function testCreateColumnRules()
	{
		$liwp = new LineItemsWritePolicy();
		$col_rules = $liwp->createColumnRules(null);
		$this->assertContains('order_id', $col_rules->required);
		$this->assertContains('quantity', $col_rules->required);
		$this->assertContains('product_variant_id', $col_rules->required);
		$this->assertEquals(3, count($col_rules->allowed()));
		$this->assertEmpty($col_rules->optional);
	}

	public function testUpdateColumnRules() {
		$liwp = new LineItemsWritePolicy();
		$o = $this->ef->newOrder();
		$li = $this->ea->get('line_items', ['order_id' => $o['id']]);

		$col_rules = $liwp->updateColumnRules($li, $li);
		$this->assertContains('quantity', $col_rules->optional);
		$this->assertContains('product_variant_id', $col_rules->optional);
		$this->assertEmpty($col_rules->required);

		$o = $this->ea->update('orders', $o, ['order_status_id' => OrderStatuses::unfulfilled()->id]);
		$col_rules = $liwp->updateColumnRules($li, $li);
		$this->assertEmpty($col_rules->required);
		$this->assertEmpty($col_rules->optional);
	}

	public function testPrepareForCreate()
	{
		$liwp = new LineItemsWritePolicy();
		$pv = $this->ef->randomProductVariant();
		$p = $this->ea->get('products', ['id' => $pv['product_id']]);

		$qty = rand(1, 100);

		$li = $liwp->prepareForCreate(['product_variant_id' => $pv['id'],
									   'quantity' => $qty]);

		$amount = $qty * ($pv['price'] == null ? $p['base_price'] : $pv['price']);

		$this->assertEquals($amount, $li['amount']);
		$this->assertStringContainsString($p['name'], $li['description']);
		$this->assertStringContainsString($pv['sku'], $li['description']);
	}

	public function testPrepareForUpdate()
	{
		$liwp = new LineItemsWritePolicy();
		$pv = $this->ef->randomProductVariant();
		$p = $this->ea->get('products', ['id' => $pv['product_id']]);

		$qty = rand(1, 100);

		$o = $this->ef->newOrder();
		$li = $this->ea->get('line_items', ['order_id' => $o['id']]);

		$updated = $liwp->prepareForUpdate($li, [
			'product_variant_id' => $pv['id'],
			'quantity' => $qty
		]);

		$amount = $qty * ($pv['price'] == null ? $p['base_price'] : $pv['price']);

		$this->assertEquals($amount, $updated['amount']);
		$this->assertStringContainsString($p['name'], $updated['description']);
		$this->assertStringContainsString($pv['sku'], $updated['description']);
	}

	public function	testEntityUpdated()
	{
		$liwp = new LineItemsWritePolicy();
		$o_before = $this->ef->newOrder();

		$li_before = $this->ea->get('line_items', ['order_id' => $o_before['id']]);
		$li_after = $this->ea->update('line_items', $li_before,
									  FillInLineItemEffect::run([
										  'product_variant_id' => $li_before['product_variant_id'],
										  'quantity' => $li_before['quantity'] + 3
		]));

		$li_after = $liwp->entityUpdated($li_after);
		$this->assertGreaterThan($li_before['amount'], $li_after['amount']);

		$o_after = $this->ea->ref($o_before['id']);

		$price_diff = round($li_after['amount'] - $li_before['amount'], 2);

		$this->assertEquals($price_diff, $o_after['total'] - $o_before['total']);
		$this->assertEquals($price_diff, $o_after['subtotal'] - $o_before['subtotal'], print_r([
			$o_before, $o_after
		], true));
		$this->assertEquals($o_after['shipping'], $o_before['shipping']);
		$this->assertEquals($o_after['tax'], $o_before['tax']);
	}

	public function testEntityCreated()
	{
		$liwp = new LineItemsWritePolicy();
		$o_before = $this->ef->randomOrder(['line_items.quantity' => ['>', 0],
											'order_status_id' => OrderStatuses::created()->id]);

		$pv = $this->ef->randomProductVariant();

		$li_new = $this->ea->create('line_items',
									['order_id' => $o_before['id']] +
									FillInLineItemEffect::run(['quantity' => 3,
														 'product_variant_id' => $pv['id']]));
		$li_new = $liwp->entityCreated($li_new);
		$o_after = $this->ea->ref($o_before['id']);

		$price_diff = $li_new['amount'];

		$this->assertEquals($price_diff, $o_after['total'] - $o_before['total']);
		$this->assertEquals($price_diff, $o_after['subtotal'] - $o_before['subtotal'], print_r([
			$o_before, $o_after
		], true));
		$this->assertEquals($o_after['shipping'], $o_before['shipping']);
		$this->assertEquals($o_after['tax'], $o_before['tax']);

	}
}
