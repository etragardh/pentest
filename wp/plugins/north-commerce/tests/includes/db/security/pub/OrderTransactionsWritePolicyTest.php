<?php
/*
 * A PHP file for testing out our OrderTransactionsWritePolicy.
 */

use NorthCommerce\Db\Collections\OrderTransactionStatuses;
use NorthCommerce\Db\Security\Pub\OrderTransactionsWritePolicy;

require_once(__DIR__ . '/../../North_Commerce_Db_Test_Case.php');

class OrderTransactionsWritePolicyTest extends North_Commerce_Db_Test_Case
{

	public function testCreateColumnRules()
	{
		$tests = [
			'order_id' => true,
			'identity_token' => true,
			'order_transaction_status_id' => false
		];

		$otwp = new OrderTransactionsWritePolicy();
		$rules = $otwp->createColumnRules(null);

		$this->assertContains('order_id', $rules->required);
		$this->assertCount(1, $rules->required);

		foreach($tests as $col => $expected) {
			$this->assertEquals($expected, in_array($col, $rules->allowed()));
		}
	}

	public function testUpdateColumnRules()
	{
		$otwp = new OrderTransactionsWritePolicy();
		$building_ot = [
			'order_transaction_status_id' => OrderTransactionStatuses::building()->id
		];

		$rules = $otwp->updateColumnRules($building_ot,null);
		$this->assertContains('order_transaction_status_id', $rules->allowed());
		$this->assertContains('identity_token', $rules->allowed());
		$this->assertNotContains('order_id', $rules->allowed());

		$successful_ot = [
			'order_transaction_status_id' => OrderTransactionStatuses::successful()->id
		];

		$rules = $otwp->updateColumnRules($successful_ot, null);
		$this->assertEmpty($rules->allowed());
	}

	public function	testPrepareForCreate()
	{
		$o = $this->ef->randomOrder();
		$otwp = new OrderTransactionsWritePolicy();
		$values = $otwp->prepareForCreate(['order_id' => $o['id']]);
		$this->assertEquals($values['order_transaction_status_id'], OrderTransactionStatuses::building()->id);
		$this->assertEquals($o['total'], $values['amount']);
	}
}
