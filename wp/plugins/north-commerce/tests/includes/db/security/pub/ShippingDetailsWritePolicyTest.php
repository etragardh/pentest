<?php
/*
 * A PHP file for testing out ShippingDetailsWritePolicy
 */

use NorthCommerce\Db\Collections\ShippingDetailTypes;
use NorthCommerce\Testing\Fixtures\Includes\Db\Security\Pub\Shipping_Details_Write_Policy_Fixture;
use PHPUnit\Framework\Assert;

require_once(__DIR__ . '/../../../../north-commerce-test-case.php');

class ShippingDetailsWritePolicyTest extends North_Commerce_Test_case
{
	function setUp(): void
	{
		parent::setUp();
	}

	public function testCreateColumnRulesValid()
	{
		Shipping_Details_Write_Policy_Fixture::use(function(Shipping_Details_Write_Policy_Fixture $f) {
			$cols = $f->sdwp->createColumnRules(['shipping_detail_type_id' => ShippingDetailTypes::planned()->id]);
			Assert::assertContains('order_id', $cols->required);
			Assert::assertContains('shipping_detail_type_id', $cols->required);

			Assert::assertContains('shipping_rates_internal_id', $cols->optional);
			Assert::assertContains('shipping_rates_easypost_id', $cols->optional);
			Assert::assertContains('carrier', $cols->optional);
			Assert::assertContains('service', $cols->optional);
		});

	}

	public function testCreateColumnRulesInvalid()
	{
		Shipping_Details_Write_Policy_Fixture::use(function(Shipping_Details_Write_Policy_Fixture $f) {
			$cols = $f->sdwp->createColumnRules(['shipping_detail_type_id' => ShippingDetailTypes::actual()->id]);
			Assert::assertEmpty($cols->required);
			Assert::assertEmpty($cols->optional);
		});
	}

	public function testCreateUpdateColumnRules()
	{
		Shipping_Details_Write_Policy_Fixture::use(function(Shipping_Details_Write_Policy_Fixture $f) {
			$cols = $f->sdwp->updateColumnRules(null, ['shipping_detail_type_id' => ShippingDetailTypes::planned()->id]);
			Assert::assertContains('order_id', $cols->required);
			Assert::assertNotContains('shipping_detail_type_id', $cols->required);

			Assert::assertContains('shipping_rates_internal_id', $cols->optional);
			Assert::assertContains('shipping_rates_easypost_id', $cols->optional);
			Assert::assertContains('carrier', $cols->optional);
			Assert::assertContains('service', $cols->optional);
		});
	}

	public function testPrepareForCreate()
	{
		Shipping_Details_Write_Policy_Fixture::use(function(Shipping_Details_Write_Policy_Fixture $f) {
			$values = $f->sdwp->prepareForCreate([
				'order_id' => $f->order['id'],
				'shipping_detail_type_id' => ShippingDetailTypes::planned()->id,
				'shipping_rates_internal_id' => $f->internal_rate['id']
			]);

			Assert::assertEquals($f->internal_rate['id'], $values['shipping_rates_internal_id']);
			Assert::assertEquals($f->internal_rate['price'], $values['shipping_cost']);
			Assert::assertNull($values['shipping_rates_easypost_id']);
		});

	}

	public function testPrepareForUpdateInternalToEasypost()
	{
		Shipping_Details_Write_Policy_Fixture::use(function(Shipping_Details_Write_Policy_Fixture $f) {
			$values_initial = $f->sdwp->prepareForCreate([
				'order_id' => $f->order['id'],
				'shipping_detail_type_id' => ShippingDetailTypes::planned()->id,
				'shipping_rates_internal_id' => $f->internal_rate['id']
			]);

			$f->saveShippingDetail($values_initial);

			$values = $f->sdwp->prepareForUpdate($f->sd, [
				'order_id' => $f->order['id'],
				'shipping_rates_easypost_id' => $f->easypost_rate['id'],
				'carrier' => $f->easypost_carrier,
				'service' => $f->easypost_service
			]);

			Assert::assertEquals($f->easypost_rate['id'], $values['shipping_rates_easypost_id']);
			Assert::assertNull($values['shipping_rates_internal_id']);
			Assert::assertNotContains('order_id', $values);
			Assert::assertNotContains('shipping_detail_type_id', $values);
		});
	}

	public function testEntityCreated()
	{
		Shipping_Details_Write_Policy_Fixture::use(function(Shipping_Details_Write_Policy_Fixture $f) {
			$values_initial = $f->sdwp->prepareForCreate([
				'order_id' => $f->order['id'],
				'shipping_detail_type_id' => ShippingDetailTypes::planned()->id,
				'shipping_rates_internal_id' => $f->internal_rate['id']
			]);

			$f->saveShippingDetail($values_initial);
			$f->sdwp->entityCreated($f->sd);

			$o = $this->ea->ref($f->order['id']);
			Assert::assertGreaterThanOrEqual($f->sd['shipping_cost'], $o['shipping']);
		});
	}

	public function testEntityCreatedOrderTransactionUpdate()
	{
		Shipping_Details_Write_Policy_Fixture::use(function(Shipping_Details_Write_Policy_Fixture $f) {
			$ot_before = $this->ea->get('order_transactions', ['order_id' => $f->order['id']]);
			Assert::assertEquals($f->order['total'], $ot_before['amount']);

			$values_initial = $f->sdwp->prepareForCreate([
				'order_id' => $f->order['id'],
				'shipping_detail_type_id' => ShippingDetailTypes::planned()->id,
				'shipping_rates_internal_id' => $f->internal_rate['id']
			]);

			$f->saveShippingDetail($values_initial);
			$f->sdwp->entityCreated($f->sd);

			$o = $this->ea->ref($f->order['id']);

			$ot_after = $this->ea->get('order_transactions', ['order_id' => $f->order['id']]);

			Assert::assertEquals($o['total'], $ot_after['amount']);
			Assert::assertEquals($o['total'], $f->order['subtotal'] + $o['shipping']);
		});
	}

}
