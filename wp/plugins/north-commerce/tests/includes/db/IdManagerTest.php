<?php
/*
 * A PHP file for testing our IdManager test to confirm
 * it can figure out what ids should be generated for
 * which tables and that those id's are valid
 */

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class IdManagerTest extends North_Commerce_Db_Test_Case
{

	public function testIdStyle() {
		$tests = [
			'customers' => NC_DB_ID_PUBID_STYLE,
			'orders' => NC_DB_ID_PUBID_STYLE,
			'products' => NC_DB_ID_NUMERIC_STYLE
		];

		$mgr = $this->agent->idManager();

		foreach($tests as $table => $expected) {
			$this->assertEquals($expected, $mgr->idStyle($table));
		}
	}

	public function testFreshId() {
		$mgr = $this->agent->idManager();
		$id = $mgr->freshId('products');
		$this->assertEquals(null, $id);

		$generated = [];
		for($i = 0; $i < 100; $i++) {
			$id = $mgr->freshId('customers');
			$this->assertEquals(NC_DB_PUBID_LENGTH, strlen($id));
			$this->assertStringStartsWith('cu', $id);
			$this->assertEquals(0, nc_g($generated, $id, 0));
			$generated[$id] = 1;
		}
	}

	public function testIdRegexp() {
		$mgr = $this->agent->idManager();
		$tests = [
			['id' => $mgr->freshId('orders'), 'table' => 'orders', 'expected' => true],
			['id' => substr($mgr->freshId('orders'), 1), 'table' => 'orders', 'expected' => false],
			['id' => 8844844, 'table' => 'products', 'expected' => true],
			['id' => '08844844', 'table' => 'products', 'expected' => false],
			['id' => $mgr->freshId('orders'), 'table' => 'products', 'expected' => false],
		];

		foreach($tests as $t) {
			$regexp = $mgr->idRegexp($t['table']);
			$outcome = preg_match("/^{$regexp}$/", $t['id']);
			$this->assertEquals($t['expected'], $outcome);
		}
	}

	public function testIsWellFormedId() {
		$tests = [
			['id' => 'cu1rzjcfkm8rbq33k9yf2pjr94xz',
			 'table' => 'customers',
			 'expected' => true],

			['id' => 'cx1rzjcfkm8rbq33k9yf2pjr94xz',
			 'table' => 'customers',
			 'expected' => false],

			['id' => 'cx1rzjcfkm8rbq33k9yf2pjr94x',
			 'table' => 'customers',
			 'expected' => false],

			['id' => 'cu1rzjcfkm8rbq33k9yf2pj-94xz',
			 'table' => 'customers',
			 'expected' => false],

			['id' => 'ore49591qw8h800j03b19hjw8m5a',
			 'table' => 'orders',
			 'expected' => true],

			['id' => '93838484',
			 'table' => 'products',
			 'expected' => true],

			['id' => 'a93838484',
			 'table' => 'products',
			 'expected' => false],

			['id' => '-93838484',
			 'table' => 'products',
			 'expected' => false],

			['id' => '100',
			 'table' => 'products',
			 'expected' => true]
		];

		$mgr = $this->agent->idManager();
		foreach($tests as $t) {
			$this->assertEquals($t['expected'],
								$mgr->isWellFormedId($t['table'], $t['id']),
								print_r($t, true));
		}
	}

	public function tableFromId() {
		$tests = [
			'cuxbg9134pgn1x76n3vap4c9jcwx' => 'customers',
			'cpm204vng1cv2m14bk5c34prkywq' => 'customer_payment_methods',
			'10828' => false
		];

		$mgr = $this->agent->idManager();
		foreach($tests as $id => $expected) {
			$outcome = $mgr->tableFromId($id);
			$this->assertEquals($expected, $outcome, $id);
		}
	}

}
