<?php
/*
 * A PHP file for testing out our db schema code
 */

use NorthCommerce\Db\Schema;

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class SchemaTest extends North_Commerce_Db_Test_Case
{

    public function testSchemaVersion()
    {
        $db_schema = new Schema();
        $this->assertGreaterThan(0, $db_schema->currentVersion());
    }

    public function testGetTablePrefix()
    {
        $db_schema = new Schema();
        $this->assertEquals("wp_nc_", $db_schema->getTablePrefix());
    }

    public function testCreateTables()
    {
        global $wpdb;

        $prefix = "unit_test_" . nc_random_token() . "_";

        $db_schema = new Schema();
        $db_schema->createTables(['prefix' => $prefix]);

        foreach ($db_schema->getTables() as $table_name => $table_info) {
            $rows = $wpdb->get_var("SELECT COUNT(*) FROM {$prefix}{$table_name}");
            $values = nc_g($table_info, 'values', []);
            $this->assertEquals(count($values), $rows, "$prefix$table_name: " . print_r($table_info, true));
        }

        $db_schema->nukeTables($prefix);
    }

	public function testUpdateTables()
	{
		$update_prefix = "unit_test_" . nc_random_token() . "_";
		$agent = North_Commerce_Db_Agent::instance();
		$schema = $agent->schema();
		$schema->updateTables(['prefix' => $update_prefix, 'installed_version' => 0]);

		$a_countries = $agent->withDb(function($wpdb) use($update_prefix) {
			return $wpdb->get_var("SELECT COUNT(*) FROM {$update_prefix}countries WHERE name like 'A%'");
		});
		$this->assertEquals($a_countries, 15);

		$create_prefix = "unit_test_" . nc_random_token() . "_";
		$schema->createTables(['prefix' => $create_prefix]);
		$introspector = $agent->introspector();

		$strip_prefix = function($prefix) {
			return function($table) use($prefix) {
				return substr($table, strlen($prefix));
			};
		};

		$create_tables = array_map($strip_prefix($create_prefix), $introspector->tablesWithPrefix($create_prefix));
		$update_tables = array_map($strip_prefix($update_prefix), $introspector->tablesWithPrefix($update_prefix));


		foreach($create_tables as $t) {
			$this->assertContains($t, $update_tables, "$t not found in updated schema");
		}

		foreach($update_tables as $t) {
			$this->assertContains($t, $create_tables, "$t not found in created schema");
		}

		foreach($update_tables as $t) {
			foreach(['type', 'index', 'default'] as $type) {
				$create_cols = $introspector->tableColumns("$create_prefix$t", ['as' => "{$type}_map"]);
				$update_cols = $introspector->tableColumns("$update_prefix$t", ['as' => "{$type}_map"]);

				$this->assertGreaterThan(2, count($create_cols));
				$this->assertEquals(count($create_cols), count($update_cols),
									"Table: $t: " .
									"created=" . print_r($create_cols, true) . "\n" .
									"updated=" . print_r($update_cols, true));

				$this->assertEquals($create_cols, $update_cols, "$t: created vs. updated");

			}
		}



		$schema->nukeTables($update_prefix);
		$schema->nukeTables($create_prefix);
	}

	public function testTableCols()
	{
		$schema = new Schema();
		$this->assertIsArray($schema->tableCols('line_items'));
		$caught_ex = false;

		try {
			$schema->tableCols('lineitems');
		} catch(Exception $ex) {
			$caught_ex = $ex;
		}

		$this->assertInstanceOf(Exception::class, $caught_ex);
	}

	public function testTableDefn()
	{
		$schema = new Schema();
		$defn = $schema->tableDefn('line_items');
		$this->assertIsArray($defn);
		$this->assertIsArray($defn['cols']);
		$this->assertIsArray($defn['meta']);
		$this->assertIsString($defn['meta']['belongs_to']);
		$caught_ex = false;

		try {
			$schema->tableDefn('lineitems');
		} catch(Exception $ex) {
			$caught_ex = $ex;
		}

		$this->assertInstanceOf(Exception::class, $caught_ex);
	}


	public function testTableExists()
	{
		$schema = new Schema();
		$tests = [
			'orders' => true,
			'line_items' => true,
			' orders ' => false,
			'ORDERS' => false,
			'Orders' => false,
			'line-items' => false
		];

		foreach($tests as $input => $expected) {
			$result = $schema->tableExists($input);
			$this->assertEquals($result, $expected);
		}
	}

	public function testTableRefColumn()
	{
		$schema = new Schema();

		$tests = [
			['line_items', 'orders', 'order_id'],
			['customs_details', 'countries', 'country_id'],
			['products', 'product_types', 'product_type_id'],
			['order_changes', 'order_change_types', 'order_change_type_id'],
			['order_changes', 'orders', 'order_id'],
			['orders', 'line_items', false],
			['orders', 'line_items', false],
			['products', 'orders', false],
			['line-items', 'orders', false]
		];

		foreach($tests as $t) {
			[$source, $dest, $expected] = $t;
			$result = $schema->tableRefColumn($source, $dest, ['not_found' => false]);
			$this->assertEquals($expected, $result, "$source -> $dest, $result != $expected");
		}
	}

	public function testIdRefTable()
	{
		$schema = new Schema();
		$tests = [
			['shipping_details', 'order_id', 'orders'],
			['order_changes', 'order_change_type_id', 'order_change_types'],
			['line_items', 'orders', false]
		];

		foreach($tests as $t) {
			[$source, $dest, $expected] = $t;
			$result = $schema->idRefTable($source, $dest, ['not_found' => false]);
			$this->assertEquals($expected, $result, "$source -> $dest, $result != $expected");
		}

	}

	public function testGetColumns() {
		$schema = new Schema();
		$cols = $schema->getColumns('orders');
		$this->assertIsArray($cols);
		$this->assertTrue(nc_is_assoc_array($cols));

		$nope = nc_random_token();
		$cols = $schema->getColumns('x-orders', ['not_found' => $nope]);
		$this->assertEquals($nope, $cols);

		try {
			$schema->getColumns('x-orders');
			$this->assertFalse(true);
		} catch(Exception $ex) {
			$this->assertInstanceOf(Exception::class, $ex);
		}
	}

	public function testUniquePubidPrefixes() {
		$schema = new Schema();
		$tables = $schema->getTables();
		$prefixes = [];
		foreach($tables as $t_name => $t_data) {
			$cols = $schema->tableCols($t_name);
			if($cols['id']['type'] == 'PUBID') {
				$prefix = $cols['id']['pubid_prefix'];
				$this->assertFalse(isset($prefixes[$prefix]));
				$prefixes[$prefix] = true;
			}
		}
		$this->assertGreaterThan(0, count(array_keys($prefixes)));
	}
}
