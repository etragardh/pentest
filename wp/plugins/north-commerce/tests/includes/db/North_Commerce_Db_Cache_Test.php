<?php
/*
 * A PHP file for testing out the caching facility that that the DB
 * uses to make analysis faster
 */

use NorthCommerce\Testing\EntityFactory;

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class North_Commerce_Db_Cache_Test extends North_Commerce_Db_Test_Case
{
	private $cache;

	public function setUp() : void
	{
		parent::setUp();

		$this->cache = North_Commerce_Db_Agent::instance()->cache();
	}


	public function testGet()
	{
		$key = "db.unit_test." . nc_random_token();
		$value = nc_random_token();
		$this->cache->set($key, $value);
		$this->assertEquals($value, $this->cache->get($key));
		$this->assertFalse($this->cache->get("{$key}X"));
	}

	public function testValueExists()
	{
		$key = "db.unit_test." . nc_random_token();
		$value = nc_random_token();
		$this->cache->set($key, $value);

		$found = $this->cache->value($key,
									 function() {
										 return nc_random_token();
									 });
		$this->assertEquals($value, $found);
	}

	public function testValueDoesNotExist()
	{
		$key = "db.unit_test." . nc_random_token();
		$value = nc_random_token();

		for($i = 0; $i < 5; $i++) {
			if($i == 0) {
				$this->assertFalse($this->cache->get($key));
			}
			$found = $this->cache->value($key,
										 function() use($value)  {
											 return $value;
			});
			$this->assertEquals($value, $found);
		}
	}

	public function testGetRespectsPerspective()
	{
		$ef = EntityFactory::instance();
		$key = nc_random_token();

		$tokens = [
			'administrator' => [
				'user' => $ef->newWpAdminUser(),
				'value' => nc_random_token()
			],
			'customer' => [
				'user' => $ef->newWpUser(),
				'value' => nc_random_token()
			],
			'public' => [
				'user' => false,
				'value' => nc_random_token()
			]
		];

		foreach($tokens as $t) {
			nc_with_current_user($t['user'], function() use($t, $key) {
				$this->cache->set($key, $t['value']);
				$this->assertEquals($t['value'], $this->cache->get($key));
			});
		}

		foreach($tokens as $t) {
			nc_with_current_user($t['user'], function() use($t, $key) {
				$this->assertEquals($t['value'], $this->cache->get($key));
			});
		}
	}

	public function testFlush()
	{
		$key = "db.unit_test." . nc_random_token();
		$val1 = nc_random_token();
		$val2 = nc_random_token();

		$found = $this->cache->value($key, function() use($val1) { return $val1; });
		$this->assertEquals($val1, $found);

		$found = $this->cache->value($key, function() use($val2) { return $val2; });
		$this->assertEquals($val1, $found);

		$this->cache->flush();

		$found = $this->cache->value($key, function() use($val2) { return $val2; });
		$this->assertEquals($val2, $found);
	}

	/**
	 * @dataProvider valueWithScopeProvider
	 */
	public function testValueWithScope($key, $scope, $value, $was_generated)
	{
		$generated = false;
		$result = $this->cache->value($key, function() use($value, &$generated) {
			$generated = true;
			return $value;
		}, [North_Commerce_Db_Cache::SCOPE_OPTION => $scope]);

		$this->assertEquals($value, $result);
		$this->assertEquals($was_generated, $generated);
	}

	public function valueWithScopeProvider()
	{
		$key = 'db.unit_test.' . nc_random_token();
		$scope_1_name = 'foo';
		$scope_1_value = nc_random_token();
		$scope_2_name = 'bar';
		$scope_2_value = nc_random_token();


		return [
			[ $key, $scope_1_name, $scope_1_value, true ],
			[ $key, $scope_2_name, $scope_2_value, true ],
			[ $key, $scope_1_name, $scope_1_value, false ],
			[ $key, $scope_2_name, $scope_2_value, false ],
		];
	}
}
