<?php
/*
 * A PHP file for testing out CustomerPaymentMethodStripeToken
 */

use NorthCommerce\Db\Effects\UpdateOrderTransactionStripeSuccessEffect;
use NorthCommerce\Services\CustomerPaymentMethodStripeToken;

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class CustomerPaymentMethodStripeTokenTest extends North_Commerce_Test_case
{
	public function testFromCustomer()
	{
		$c = $this->ef->newCustomer();
		$t = CustomerPaymentMethodStripeToken::fromCustomer($c);
		$this->assertStringStartsWith('cus_', $t->toString());
		$this->assertNull($t->brand());
		$this->assertEquals($c['email'], $t->stripeCustomer()->email);
	}

	public function testFromOrderTransactionBeforePayment()
	{
		$ot = $this->ef->newOrderTransaction();
		$this->assertStringStartsWith('pi_', $ot['identity_token']);
		$token = CustomerPaymentMethodStripeToken::fromOrderTransaction($ot);
		$o = $this->ea->ref($ot['order_id']);
		$c = $this->ea->ref($o['customer_id']);
		$this->assertEquals($c['email'], $token->stripeCustomer()->email);
		$this->assertNull($token->brand());
	}

	public function testFromOrderTransactionAfterPayment()
	{
		$ot = $this->ef->newOrderTransaction();
		$ot = $this->ef->excecuteStripeOrderTransaction($ot);
		$ot = UpdateOrderTransactionStripeSuccessEffect::run($ot);
		$this->assertStringStartsWith('pi_', $ot['identity_token']);
		$token = CustomerPaymentMethodStripeToken::fromOrderTransaction($ot);

		$o = $this->ea->ref($ot['order_id']);
		$c = $this->ea->ref($o['customer_id']);
		$this->assertEquals($c['email'], $token->stripeCustomer()->email);
		$this->assertEquals('visa', $token->brand());
		$this->assertEquals('1111', $token->last4());
	}

	public function testFromCustomerPaymentMethod()
	{
		$cpm = $this->ef->newCustomerPaymentMethod();
		$t = CustomerPaymentMethodStripeToken::fromCustomerPaymentMethod($cpm);
		$c = $this->ea->ref($cpm['customer_id']);
		$this->assertEquals($c['email'], $t->stripeCustomer()->email);
	}

	public function testBrand()
	{
		$ot = $this->ef->newOrderTransaction();
		$ot = $this->ef->excecuteStripeOrderTransaction($ot);
		$ot = UpdateOrderTransactionStripeSuccessEffect::run($ot);
		$t = CustomerPaymentMethodStripeToken::fromOrderTransaction($ot);
		$this->assertEquals('visa', $t->brand());
	}

	public function testLast4()
	{
		$ot = $this->ef->newOrderTransaction();
		$ot = $this->ef->excecuteStripeOrderTransaction($ot);
		$ot = UpdateOrderTransactionStripeSuccessEffect::run($ot);
		$t = CustomerPaymentMethodStripeToken::fromOrderTransaction($ot);
		$this->assertEquals('1111', $t->last4());
	}


	public function testExpirationMonth()
	{
		$ot = $this->ef->newOrderTransaction();
		$ot = $this->ef->excecuteStripeOrderTransaction($ot);
		$ot = UpdateOrderTransactionStripeSuccessEffect::run($ot);
		$t = CustomerPaymentMethodStripeToken::fromOrderTransaction($ot);
		$this->assertIsNumeric($t->expirationMonth());
		$this->assertTrue($t->expirationMonth() > 0 && $t->expirationMonth() < 13);
	}

	public function testExpirationYear()
	{
		$ot = $this->ef->newOrderTransaction();
		$ot = $this->ef->excecuteStripeOrderTransaction($ot);
		$ot = UpdateOrderTransactionStripeSuccessEffect::run($ot);
		$t = CustomerPaymentMethodStripeToken::fromOrderTransaction($ot);
		$this->assertIsNumeric($t->expirationYear());
		$this->assertTrue($t->expirationYear() > date('Y'));
	}

	public function testStripeCustomer()
	{
		$ot = $this->ef->newOrderTransaction();
		$token = CustomerPaymentMethodStripeToken::fromOrderTransaction($ot);
		$o = $this->ea->ref($ot['order_id']);
		$c = $this->ea->ref($o['customer_id']);
		$this->assertEquals($c['email'], $token->stripeCustomer()->email);

	}
}
