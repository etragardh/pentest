<?php
/*
 * A PHP file for testing out our rewrites behavior
 */

use NorthCommerce\Testing\EntityFactory;

require_once(__DIR__ . '/../north-commerce-test-case.php');

class North_Commerce_Rewrites_Test extends North_Commerce_Test_Case {

	public function testRegisterPageWithParams() {
		$rewrites = new North_Commerce_Rewrites();
		$ef = new EntityFactory();
		$token = strtolower(nc_random_token());
		$parent = $ef->newWpPage(['post_name' => "parent-$token"]);
		$child  = $ef->newWpPage(['post_parent' => $parent->ID,
								  'post_name' => "child-$token"]);

		$prefix = substr(parse_url(get_permalink($child), PHP_URL_PATH), 1);

		$params = ['width', 'height', 'length'];

		$info = $rewrites->registerPageWithParams($child->ID, $params);

		$tests = [
			"$prefix/10/5/19.2" => true,
			"$prefix/10/5/19.2/" => true,
			"$prefix/10/somerandom-value/19.2/" => true,
			"$prefix" => false,
			"$prefix/10" => false,
			"$prefix/10/5/10/10" => false
		];

		foreach($tests as $input => $expected) {
			if($expected) {
				$this->assertMatchesRegularExpression('~' . $info['source_regexp'] . '~', $input);
			} else {
				$this->assertDoesNotMatchRegularExpression('~' . $info['source_regexp'] . '~', $input);
			}
		}

		$this->assertStringContainsString('index.php?', $info['dest_uri']);
		$this->assertStringContainsString("page_id={$child->ID}", $info['dest_uri']);
		foreach($params as $i => $p) {
			$needle = $p . '=$matches[' . ($i + 1) . ']';
			$this->assertStringContainsString($needle, $info['dest_uri']);
		}

	}

}
