<?php
/*
 * A PHP file for testing out our API pager
 */
require_once(__DIR__ . '/../../north-commerce-test-case.php');

class North_Commerce_Api_Pager_Test extends North_Commerce_Db_Test_Case
{
	public function testLimit()
	{
		$pager = new North_Commerce_Api_Pager();
		
		$tests = [
			['params' => [ 'limit' => 3 ], 'expected' => 3],
			['params' => [ 'foo' => 'bob' ], 'expected' => NORTH_COMMERCE_REST_DATA_API_DEFAULT_LIMIT ],
		];

		foreach($tests as $t) {
			$req = new WP_REST_Request();
			$req->set_url_params($t['params']);
			$result = $pager->limit($req);
			$this->assertEquals($t['expected'], $result);
		}
	}

	public function testPage()
	{
		$pager = new North_Commerce_Api_Pager();
		
		$tests = [
			['params' => [ 'page' => 3 ], 'expected' => 3],
			['params' => [ 'foo' => 'bob' ], 'expected' => 1 ]
		];

		foreach($tests as $t) {
			$req = new WP_REST_Request();
			$req->set_url_params($t['params']);
			$result = $pager->page($req);
			$this->assertEquals($t['expected'], $result);
		}
	}
	
	public function testOffset()
	{
		$pager = new North_Commerce_Api_Pager();
		
		$tests = [
			['params' => [ 'limit' => 3 ], 'expected' => 0],
			['params' => [ 'foo' => 'bob' ], 'expected' => 0],
			['params' => [ 'page' => '19' ], 'expected' => (18 * NORTH_COMMERCE_REST_DATA_API_DEFAULT_LIMIT)],
			['params' => [ 'limit' => 2, 'page' => '19' ], 'expected' => (18 * 2)]
		];

		foreach($tests as $t) {
			$req = new WP_REST_Request();
			$req->set_url_params($t['params']);
			$result = $pager->offset($req);
			$this->assertEquals($t['expected'], $result);
		}
	}

	public function testNextUrl()
	{
		$pager = new North_Commerce_Api_Pager();

		$route = "nc-data/v1/" . nc_random_token();
		$req = new WP_REST_Request('GET', $route);
		$params = [
			'page' => 3,
			'limit' => 4,
			'xx' => $route
		];
		$req->set_query_params($params);

		$next_params = ['page' => 4, 'limit' => 4, 'xx' => $route];
		$next_url = $pager->nextUrl($req);
		$this->assertEquals(rest_url() . $route . '?' . http_build_query($next_params),
						   $next_url);
	}

	public function testPrevUrl()
	{
		$pager = new North_Commerce_Api_Pager();

		$route = "nc-data/v1/" . nc_random_token();
		$req = new WP_REST_Request('GET', $route);
		$params = [
			'page' => 3,
			'limit' => 4,
			'xx' => $route
		];
		$req->set_query_params($params);

		$prev_params = ['page' => 2, 'limit' => 4, 'xx' => $route];
		$prev_url = $pager->prevUrl($req);
		$this->assertEquals(rest_url() . $route . '?' . http_build_query($prev_params),
						   $prev_url);
	}

	public function testAddPaging()
	{
		$pager = new North_Commerce_Api_Pager();
		
		$route = "nc-data/v1/" . nc_random_token();
		$req = new WP_REST_Request('GET', $route);
		$params = [
			'page' => 3,
			'limit' => 4,
			'xx' => $route
		];
		$req->set_query_params($params);
		$marker = nc_random_token();
		
		$res = [
			'data' => array_fill(0, 11, "X"),
			'meta' => [
				'marker' => $marker
			]
		];

		$paged_res = $pager->addPaging($req, $res);

		$this->assertEquals(4, count($paged_res['data']));
		$this->assertEquals(rest_url() . $route . '?' . http_build_query(['page' => 4] + $params),
							$paged_res['meta']['next_page_link']);
		$this->assertEquals(rest_url() . $route . '?' . http_build_query(['page' => 2] + $params),
							$paged_res['meta']['prev_page_link']);		
	}

	public function testAddPagingNoPagingNeeded()
	{
		$pager = new North_Commerce_Api_Pager();
		
		$route = "nc-data/v1/" . nc_random_token();
		$req = new WP_REST_Request('GET', $route);
		$params = [
			'page' => 3,
			'limit' => 200,
			'xx' => $route
		];
		$req->set_query_params($params);
		$marker = nc_random_token();
		
		$res = [
			'data' => array_fill(0, 11, "X"),
			'meta' => [
				'marker' => $marker
			]
		];

		$paged_res = $pager->addPaging($req, $res);

		$this->assertEquals(11, count($paged_res['data']));
		$this->assertFalse(false, $paged_res['meta']['next_page_link']);
		$this->assertFalse(false, $paged_res['meta']['prev_page_link']);
	}

	public function testAddPagingNoPrev()
	{
		$pager = new North_Commerce_Api_Pager();
		
		$route = "nc-data/v1/" . nc_random_token();
		$req = new WP_REST_Request('GET', $route);
		$params = [
			'page' => 1,
			'limit' => 4,
			'xx' => $route
		];
		$req->set_query_params($params);
		$marker = nc_random_token();
		
		$res = [
			'data' => array_fill(0, 11, "X"),
			'meta' => [
				'marker' => $marker
			]
		];

		$paged_res = $pager->addPaging($req, $res);

		$this->assertEquals(4, count($paged_res['data']));
		$this->assertEquals(rest_url() . $route . '?' . http_build_query(['page' => 2] + $params),
							$paged_res['meta']['next_page_link']);
		$this->assertFalse($paged_res['meta']['prev_page_link']);
	}

	public function testAddPageingFarOffPage()
	{
		$pager = new North_Commerce_Api_Pager();
		
		$route = "nc-data/v1/" . nc_random_token();
		$req = new WP_REST_Request('GET', $route);
		$params = [
			'page' => 70,
			'limit' => 4,
		];
		$req->set_query_params($params);
		
		$res = [
			'data' => [],
			'meta' => []
		];

		$paged_res = $pager->addPaging($req, $res);
		$this->assertFalse($paged_res['meta']['next_page_link']);
		$this->assertIsString($paged_res['meta']['prev_page_link']);
	}
	
}
