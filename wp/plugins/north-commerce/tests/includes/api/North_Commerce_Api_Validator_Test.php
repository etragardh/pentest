<?php
/*
 * A PHP file for testing out our API validator
 */
require_once(__DIR__ . '/../../north-commerce-test-case.php');

class North_Commerce_Api_Validator_Test extends North_Commerce_Db_Test_Case
{
	public function testValidateEntity()
	{
		$validator = new North_Commerce_Api_Validator();
		$this->assertTrue($validator->validateEntity('line_items'));
		$this->assertTrue($validator->validateEntity('orders'));
		$this->assertFalse($validator->validateEntity('ordersx'));
		$this->assertFalse($validator->validateEntity(' asfasf9pauasfdas '));
		$this->assertFalse($validator->validateEntity(' line_items '));
	}

	public function testValidateId() {
		$validator = new North_Commerce_Api_Validator();

		$products_req = new WP_Rest_Request();
		$products_req->set_url_params([
			'entity' => 'products',
		]);

		$this->assertTrue($validator->validateId('100', $products_req));
		$this->assertFalse($validator->validateId('0100', $products_req));
		$this->assertFalse($validator->validateId('-1', $products_req));
		$this->assertFalse($validator->validateId('adam', $products_req));
		$this->assertFalse($validator->validateId('  0', $products_req));

		$id_mgr = $this->agent->idManager();

		$line_items_req = new WP_Rest_Request();
		$line_items_req->set_url_params([
			'parent' => 'orders',
			'id' => $id_mgr->freshId('orders'),
			'child' => 'line-items'
		]);
		$this->assertFalse($validator->validateId('100', $line_items_req));
		$this->assertFalse($validator->validateId('0100', $line_items_req));
		$this->assertFalse($validator->validateId('afasfdsafa', $line_items_req));

		$this->assertFalse($validator->validateId($id_mgr->freshId('line_items'), $line_items_req));
		$this->assertTrue($validator->validateId($id_mgr->freshId('orders'), $line_items_req));

		$order_req = new WP_Rest_Request();
		$order_req->set_url_params([
			'entity' => 'orders',
			'id' => $id_mgr->freshId('orders'),
		]);
		$this->assertFalse($validator->validateId($id_mgr->freshId('line_items'), $order_req));
		$this->assertTrue($validator->validateId($id_mgr->freshId('orders'), $order_req));
	}

	public function testValidateParent()
	{
		$validator = new North_Commerce_Api_Validator();
		$this->assertTrue($validator->validateParent('line_items'));
		$this->assertTrue($validator->validateParent('orders'));
		$this->assertFalse($validator->validateParent('order'));
		$this->assertFalse($validator->validateParent('foo'));
	}

	public function testValidateChild()
	{
		$validator = new North_Commerce_Api_Validator();
		$req = new WP_Rest_Request();
		$req->set_url_params([
			'parent' => 'orders',
			'id' => 10,
			'child' => 'line-items'
		]);
		$this->assertTrue($validator->validateChild('line_items', $req));

		$req = new WP_Rest_Request();
		$req->set_url_params([
			'parent' => 'product_types',
			'id' => 10,
			'child' => 'products'
		]);
		$this->assertTrue($validator->validateChild('products', $req));

		
		$req = new WP_Rest_Request();
		$req->set_url_params([
			'parent' => 'customers',
			'id' => 10,
			'child' => 'line-items'
		]);
		$this->assertFalse($validator->validateChild('line_items', $req));

		
		$req = new WP_Rest_Request();
		$req->set_url_params([
			'parent' => 'orders',
			'id' => 10,
			'child' => 'shipping-details'
		]);
		$this->assertTrue($validator->validateChild('shipping-details', $req));

		$req = new WP_Rest_Request();
		$req->set_url_params([
			'parent' => 'orders',
			'id' => 10,
			'child' => 'shipping-details'
		]);
		$this->assertTrue($validator->validateChild('shipping-details', $req));

		$req = new WP_Rest_Request();
		$req->set_url_params([
			'parent' => 'orders',
			'id' => 10,
			'child' => 'shipping-detail'
		]);
		$this->assertFalse($validator->validateChild('shipping-detail', $req));
		
	}

	public function testValidateSort()
	{
		$validator = new North_Commerce_Api_Validator();
		$req = new WP_Rest_Request();
		$req->set_url_params([
			'parent' => 'orders',
			'id' => 10,
			'child' => 'line-items'
		]);
		$tests = [
			'id:desc' => true,
			'id:desc,created:asc' => true,
			'quantity:desc,created:asc' => true,
			'foo' => false,
			'!@QFAWER' => false,
			'product_id' => false
		];

		foreach($tests as $input => $expected) {
			$this->assertEquals($expected, $validator->validateSort($input, $req));
		}
	}

	public function testValidateFilter()
	{
		$validator = new North_Commerce_Api_Validator();
		$req = new WP_Rest_Request();
		$req->set_url_params([
			'parent' => 'orders',
			'id' => 10,
			'child' => 'line-items'
		]);
		$tests = [
			'id:eq:100' => true,
			'id:gt:100,amount:eq:100' => true,
			'quantity:like:4%' => true,
			'quantity:=:49' => false,
			'line-item-id:eq:10' => true,
			'price:100' => false
		];

		foreach($tests as $input => $expected) {
			$this->assertEquals($expected, $validator->validateFilter($input, $req), "$input");
		}
	}


	public function testValidExpand()
	{
		$validator = new North_Commerce_Api_Validator();
		$req = new WP_Rest_Request();
		$req->set_url_params([
			'parent' => 'orders',
			'id' => 10,
			'child' => 'line-items'
		]);
		$tests = [
			'product_variant.product_variant_type' => true,
			'product_variant' => true,
			'products_variants' => false,
			'order.billing_address.country' => true
		];

		foreach($tests as $input => $expected) {
			$this->assertEquals($expected, $validator->validateExpand($input, $req), "$input");
		}

	}

	public function testValidateBody()
	{
		$validator = new North_Commerce_Api_Validator();

		$tests = [
			['entity' => 'line-items',
			 'body' => [],
			 'expected' => false],

			['entity' => 'line-items',
			 'body' => [
				 'amount' => true,
				 'quantity' => true,
				 'description' => true
			 ],
			 'expected' => true],

			['entity' => 'orders',
			 'body' => [
				 'id' => 1,
				 'shipping' => 1,
				 'line_items' => [
					 ['amount' => 1, 'description' => 'x'],
					 ['amount' => 1, 'description' => 'x'],
					 ['amount' => 1, 'description' => 'x']
				 ]
			 ],
			 'expected' => true],

			['entity' => 'orders',
			 'body' => [
				 'id' => 1,
				 'unknown' => 1,
				 'shipping' => 1,
				 'line_items' => [
					 ['amount' => 1, 'description' => 'x'],
					 ['amount' => 1, 'description' => 'x'],
					 ['amount' => 1, 'description' => 'x']
				 ]
			 ],
			 'expected' => false],

			['entity' => 'orders',
			 'body' => [
				 'id' => 1,
				 'shipping' => 1,
				 'line_items' => [
					 ['amount' => 1, 'description' => 'x'],
					 ['amount' => 1, 'description' => 'x'],
					 ['amount' => 1, 'broken-description' => 'x']
				 ]
			 ],
			 'expected' => false],


			['entity' => 'orders',
			 'body' => [
				 'id' => 1,
				 'shipping' => 1,
				 'payment_status' => [
					 'name' => 'x',
					 'id' => 'x'
				 ],
				 'line_items' => [
					 ['amount' => 1, 'description' => 'x'],
					 ['amount' => 1, 'description' => 'x'],
					 ['amount' => 1, 'description' => 'x']
				 ]
			 ],
			 'expected' => true],
			
			['entity' => 'orders',
			 'body' => [
				 'id' => 1,
				 'shipping' => 1,
				 'payment_status' => [
					 'name' => 'x',
					 'broken' => '100',
					 'id' => 'x'
				 ],
				 'line_items' => [
					 ['amount' => 1, 'description' => 'x'],
					 ['amount' => 1, 'description' => 'x'],
					 ['amount' => 1, 'description' => 'x']
				 ]
			 ],
			 'expected' => false],			
		];

		foreach($tests as $t) {
			$req = new WP_Rest_Request();
			$req->set_url_params([
				'entity' => $t['entity']
			]);
			$ok = $validator->validateBody($t['body'], $req);
			$this->assertEquals($t['expected'], $ok);
		}
	}

}
