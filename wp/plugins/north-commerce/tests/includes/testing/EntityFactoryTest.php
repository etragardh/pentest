<?php
/*
 * A PHP file for testing out our DB Agent
 */

use NorthCommerce\Testing\EntityFactory;

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class EntityFactoryTest extends North_Commerce_Test_Case
{

	public function testNewWpUser()
	{
		$email = "test-user-" . nc_random_token() . '@' . NORTH_COMMERCE_TEST_DOMAIN;
		$entity_factory = EntityFactory::instance();
		$c = $entity_factory->newWpUser([
			'user_email' => $email
		]);
		$this->assertInstanceOf(WP_User::class, $c);
		$this->assertEquals($c->user_email, $email);

		$password = get_user_meta($c->ID, NORTH_COMMERCE_APP_PASSWORD_META, true);
		$this->assertEquals(24, strlen($password), $password);
	}

	public function testNewCustomer()
	{
		$email = "test-user-" . nc_random_token() . '@' . NORTH_COMMERCE_TEST_DOMAIN;
		$first_name = nc_random_token();
		$ef = EntityFactory::instance();
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		$c = $ef->newCustomer([
			'email' => $email,
			'first_name' => $first_name
		]);

		$this->assertEquals($email, $c['email']);
		$this->assertEquals($first_name, $c['first_name']);

		$addresses = $ea->list('addresses', ['customer_id' => $c['id']]);
		$this->assertEquals(2, count($addresses));

		$ship_to = $ea->get('addresses', ['customer_id' => $c['id'],
										  'is_default_shipping' => true]);
		$this->assertIsString($ship_to['addressline1']);
		$this->assertIsNumeric($ship_to['country_id']);
		$country = $ea->get('countries', ['id' => $ship_to['country_id']]);
		$this->assertIsArray($country);
	}

	public function testPickBySlug()
	{
		$ef = EntityFactory::instance();
		$found =$ef->pickBySlug('product_types', 'payment-plan');
		$this->assertEquals($found['slug'], 'payment-plan');
	}

	public function testNewProduct()
	{
		$name = "Test Product " . nc_random_token();
		$sku = "T-" . nc_random_token();
		$price = rand(1000, 99999) / 100;

		$entity_factory = EntityFactory::instance();
		$p = $entity_factory->newProduct([
			'name' => $name,
			'base_price' => $price,
			'sku' => $sku
		]);
		$this->assertMatchesRegularExpression('/^[a-z0-9-]+$/', $p['slug']);
		$this->assertEquals($sku, $p['sku']);
		$this->assertEquals($name, $p['name']);
		$this->assertEquals($price, $p['base_price']);
		$this->assertEquals(1, $p['has_product_variants']);

		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();
		$pt = $ea->get('product_statuses', ['id' => $p['product_status_id']]);
		$this->assertEquals($pt['id'], $p['product_status_id']);

		$num_variants = $ea->count('product_variants', ['product_id' => $p['id']]);
		$this->assertEquals(240, $num_variants);

		$product_option_names = ['Size', 'Text', 'Color', 'Image'];
		$found = $ea->count('product_options', [
			'product_id' => $p['id']
		]);
		$this->assertEquals(count($product_option_names), $found);

		$option_count = $ea->count('product_options', ['product_id' => $p['id']]);
		$this->assertEquals(4, $option_count);
		foreach($product_option_names as $name) {
			$found = $ea->get('product_options', [
				'name' => $name,
				'product_id' => $p['id']
			]);
			$this->assertEquals($name, $found['name']);
		}

		$found = $ea->list('product_images', ['product_id' => $p['id']]);
		$this->assertEquals(4, count($found));
		$urls = [];
		foreach($found as $img) {
			$urls[$img['image_url']] = true;
		}
		$this->assertEquals(4, count(array_keys($urls)));


		$num_zero_quantity_variants = $ea->count('product_variants', [
			'product_id' => $p['id'],
			'quantity' => 0,
		]);
		$this->assertEquals(68, $num_zero_quantity_variants);

	}

	public function testNewProductVariant()
	{
		$ef = EntityFactory::instance();
		$pv = $ef->newProductVariant();
		$this->assertIsString($pv['sku']);
	}

	public function testNewOrder()
	{
		$ef = EntityFactory::instance();
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();
		$line_items = array_map(function($pv) use($ea) {
			$p = $ea->get('products', ['id' => $pv['product_id']]);
			return [
				'product' => $p,
				'product_variant' => $pv,
				'quantity' => rand(1, 50)
			];
		}, $ef->randomProductVariants(3));

		$customer = $ef->newCustomer();

		$shipping = round(rand(1000, 9000) / 100, 2);

		$o = $ef->newOrder([
			'line_items' => $line_items,
			'customer' => $customer,
			'shipping' => $shipping
		]);

		$this->assertEquals($o['shipping'], $shipping);

		$subtotal = array_reduce($line_items, function($carry, $li)  {
			$price = $li['product_variant']['price'] ?: $li['product']['base_price'];
			return $carry + ($price * $li['quantity']);
		}, 0);

		$this->assertEquals($o['total'], $subtotal + $shipping, "$subtotal + $shipping != ${o['total']}");

		$agent = North_Commerce_Db_Agent::instance();
		$saved_line_items = $agent->entityAccess()->list('line_items', ['order_id' => $o['id']]);
		$this->assertEquals(count($saved_line_items), count($line_items));

		foreach($line_items as $li) {
			$pv = $li['product_variant'];
			$p = $li['product'];
			$found = $ea->get('line_items', [
				'order_id' => $o['id'],
				'product_variant_id' => $pv['id']
			]);
			if($pv['price'] == null) {
				$this->assertEquals($p['base_price'] * $li['quantity'], $found['amount']);
			} else {
				$this->assertEquals($pv['price'] * $li['quantity'], $found['amount']);
			}
			$this->assertEquals($li['quantity'], $found['quantity']);
		}

		$shipping_detail = $agent->entityAccess()->get('shipping_details', ['order_id' => $o['id']]);
		$this->assertEquals(32, strlen(nc_g($shipping_detail, 'tracking_number')));


		$ea = $agent->entityAccess();
		$order_change_types = $ea->list('order_change_types', [1 => 1]);
		$order_changes = $ea->list('order_changes', ['order_id' => $o['id']]);
		$this->assertEquals(count($order_change_types), count($order_changes));
	}

	public function testRandomDollarAmount()
	{
		$ef = EntityFactory::instance();
		for($i = 0; $i < 10; $i++) {
			$amount = $ef->randomDollarAmount(20, 30);
			$this->assertGreaterThan(19, $amount);
			$this->assertLessThan(31, $amount);
			$this->assertMatchesRegularExpression('/^[0-9][0-9][.]?[0-9]?[0-9]?$/', $amount);
		}
	}

	public function testPickRandom()
	{
		$ef = EntityFactory::instance();
		for($i = 0; $i < 10; $i++) {
			$pt = $ef->pickRandom('product_types');
			$this->assertIsNumeric($pt['id']);
			$this->assertIsString($pt['slug']);
			$this->assertIsString($pt['name']);
		}
	}

	public function testNewWpPage() {
		$ef = EntityFactory::instance();
		$token = nc_random_token();
		$page = $ef->newWpPage(['post_name' => $token]);
		$this->assertIsNumeric($page->ID);
		$this->assertStringContainsString("/" . strtolower($token), get_permalink($page->ID));
	}

	public function testNewWpPageWithParent() {
		$ef = EntityFactory::instance();
		$parent_token = nc_random_token();
		$parent = $ef->newWpPage(['post_name' => $parent_token]);

		$child_token = nc_random_token();
		$child = $ef->newWpPage([
			'post_name' => $child_token,
			'post_parent' => $parent->ID
		]);

		$this->assertIsNumeric($child->ID);
		$this->assertEquals($parent->ID, $child->post_parent);
		$this->assertStringContainsString(strtolower("/$parent_token/$child_token"),
										  get_permalink($child->ID));
	}

	public function testNewWpUserWithRole()
	{
		$ef = EntityFactory::instance();

		$prefix = nc_random_token() . "-";
		$subscriber = $ef->newWpUser(['prefix' => $prefix]);
		$admin = $ef->newWpUser(['prefix' => $prefix, 'role' => 'administrator']);

		$this->assertFalse($subscriber->has_cap('edit_posts'));
		$this->assertTrue($admin->has_cap('edit_posts'));
		$this->assertContains('administrator', $admin->roles);
		$this->assertContains('subscriber', $subscriber->roles);

		foreach([$admin, $subscriber] as $user) {
			$this->assertStringStartsWith($prefix, $user->user_login);
			$this->assertStringStartsWith($prefix, $user->user_email);
		}
	}

	public function testNewWpAdminUser()
	{
		$ef = EntityFactory::instance();
		$admin = $ef->newWpAdminUser();
		$this->assertTrue($admin->has_cap('activate_plugins'));
		$this->assertTrue($admin->has_cap('edit_themes'));
		$this->assertContains('administrator', $admin->roles);
	}

	public function testRandomWpUser()
	{
		$ef = EntityFactory::instance();
		$u1 = $ef->randomWpUser();
		$this->assertIsNumeric($u1->ID);
		$u2 = $ef->randomWpUser(['ID' => $u1->ID]);
		$this->assertEquals($u1->ID, $u2->ID);
	}

	public function testRandomWpPage()
	{
		$ef = EntityFactory::instance();
		$p = $ef->randomWpPage();
		$this->assertIsDbId('products', $p->ID);

	}

	public function testRandomOrder()
	{
		$ef = EntityFactory::instance();
		$o1 = $ef->randomOrder();
		$this->assertIsDbId('orders', $o1['id']);

		$o2 = $ef->randomOrder(['id' => $o1['id']]);
		$this->assertEquals($o1['id'], $o2['id']);
	}

	public function testRandomProductVariant()
	{
		$ef = EntityFactory::instance();

		$found = $ef->randomProductVariant(['price' => 99.99], ['price' => 99.99]);
		$this->assertEquals(99.99, $found['price']);
	}

	public function testRandomProductNoVariants() {
		$ef = EntityFactory::instance();
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		$p = $ef->randomProduct([
			'base_price' => 103.22
		], [
			'variants' => false,
			'base_price' => 103.22
		]);

		$variants = $ea->list('product_variants', ['product_id' => $p['id']]);
		$this->assertEquals(1, count($variants));
		$pv = $variants[0];

		$solo_pvt = $ef->pickBySlug('product_variant_types', 'solo');
		$this->assertEquals($solo_pvt['id'], $pv['product_variant_type_id']);
		$this->assertEquals($p['quantity'], $pv['quantity']);
		$this->assertEquals($p['base_price'], $pv['price']);
		$this->assertEquals(0, $p['has_product_variants']);
	}

	public function testNewCustomerPaymentMethod()
	{
		$cpm = $this->ef->newCustomerPaymentMethod(['provider' => 'stripe']);

		$stripe_pp = $this->ea->get('payment_providers', ['slug' => 'stripe']);
		$this->assertEquals($stripe_pp['id'], $cpm['payment_provider_id']);
		$this->assertStringContainsString("cus_", $cpm['token']);
		$this->assertEquals('Visa', $cpm['brand']);
	}

	public function testNewCustomerPaymentMethodPayPal()
	{
		$cpm = $this->ef->newCustomerPaymentMethod(['provider' => 'paypal']);

		$paypal_pp = $this->ea->get('payment_providers', ['slug' => 'paypal']);
		$this->assertEquals($paypal_pp['id'], $cpm['payment_provider_id']);
	}

	public function testNewOrderTransaction() {
		$amount = $this->ef->randomDollarAmount(10, 100);
		$ot = $this->ef->newOrderTransaction(['amount' => $amount]);
		$this->assertEquals($amount, $ot['amount']);
		$this->assertEquals($this->ef->pickBySlug('order_transaction_statuses', 'building', ['as' => 'id']),
							$ot['order_transaction_status_id']);
	}

	public function testRandomProductVariantWithNull()
	{
		$quantity = rand(17, 100);
		$pv = $this->ef->randomProductVariant([
			'price' => null,
			'quantity' => $quantity
		], [
			'price' => null,
			'quantity' => $quantity
		]);
		$this->assertNull($pv['price']);
		$this->assertEquals($quantity, $pv['quantity']);
	}
}
