<?php
/*
 * A PHP file for testing out array functions
 */
require_once(__DIR__ . '/../../north-commerce-test-case.php');

class North_Commerce_Array_Functions_Test extends North_Commerce_Test_Case
{


    public function testNcG()
    {
        $array = [
            'foo' => 100,
            'bar' => 200
        ];

        $this->assertEquals(nc_g($array, 'foo'), 100);
        $this->assertEquals(nc_g($array, 'baz'), false);
        $this->assertEquals(nc_g($array, 'zing', 999), 999);
    }

	public function testNcArrayKReduce() {
		$array = [
			'foo' => 100,
			'bar' => 200,
			'zap' => 300
		];
		$shmooshed = nc_array_kreduce($array, function($carry, $k, $v) {
			$carry .= "$k:$v,";
			return $carry;
		}, '');
		$this->assertEquals($shmooshed, "foo:100,bar:200,zap:300,");
	}

	public function testNcArrayKexpand()
	{
		$before = [
			'a' => 100,
			'b' => 200
		];

		$after = nc_array_kexpand($before, [
			'b' => function($value) {
				return $value + 3;
			},
			'c' => function($value) {
				return $value ? $value : -77;
			}
		]);

		$this->assertEquals($after['a'], 100);
		$this->assertEquals($after['b'], 203);
		$this->assertEquals($after['c'], -77);
	}

	public function testNcArrayPluck()
	{
		$array = [ 'a' => 100, 'b' => 200];
		[ $a_val, $array ] = nc_array_pluck($array, 'a', null);
		[ $b_val, $array ] = nc_array_pluck($array, 'b', null);
		[ $c_val, $array ] = nc_array_pluck($array, 'c', null);

		$this->assertEmpty($array);
		$this->assertEquals($a_val, 100);
		$this->assertEquals($b_val, 200);
		$this->assertEquals($c_val, null);
	}

	public function testNcOptEx() {
		$this->assertEquals(nc_opt_ex("not actually thrown", ['not_found' => 100]), 100);

		$not_found_ex = false;
		try {
			nc_opt_ex("Thrown ex", ['foo' => 100]);
		} catch(Exception $ex) {
			$not_found_ex = $ex;
		}
		$this->assertInstanceOf(NcNotFoundException::class, $not_found_ex);
	}

	public function testNcIsSeqArray()
	{
		$tests = [
			[ 'input' => [ 1, 2, 3 ], 'expected' => true],
			['input' => [ "a", 1, "b" ], 'expected' => true],
			['input' => [ ], 'expected' => true],
			['input' => [ [ 1 ] ], 'expected' => true],
			['input' => [ "foo", 'x' => 100 ], 'expected' => true],
			['input' => ['x' => 100, 'y' => 0], 'expected' => false],
			['input' => [0 => 100, 1 => 0], 'expected' => true],
			['input' => [1 => 100, 0 => 0], 'expected' => true],
			['input' => ['x' => 100, 'y' => 0, 100], 'expected' => true],
			['input' => ['0' => 'a', '1' => 'b'], 'expected' => true]
		];

		foreach($tests as $t) {
			$result = nc_is_seq_array($t['input']);
			$this->assertEquals($t['expected'], $result, "input=" . print_r($t['input'], true));
		}
	}

	public function testNcIsAssocArray()
	{
		$tests = [
			[ 'input' => [ 1, 2, 3 ], 'expected' => false],
			['input' => [ "a", 1, "b" ], 'expected' => false],
			['input' => [ ], 'expected' => false],
			['input' => [ [ 1 ] ], 'expected' => false],
			['input' => [ "foo", 'x' => 100 ], 'expected' => false],
			['input' => ['x' => 100, 'y' => 0], 'expected' => true],
			['input' => [0 => 100, 1 => 0], 'expected' => false],
			['input' => [1 => 100, 0 => 0], 'expected' => false],
			['input' => ['x' => 100, 'y' => 0, 100], 'expected' => false],
			['input' => ['0' => 'a', '1' => 'b'], 'expected' => false],
			['input' => [ 'a' => [1,2,3] ], 'expected' =>true]
		];

		foreach($tests as $t) {
			$result = nc_is_assoc_array($t['input']);
			$this->assertEquals($t['expected'], $result, "input=" . print_r($t['input'], true));
		}
	}

	public function testNcArrayRandValue()
	{
		$array = [ 'a', 'b', 'c', 'd' ];

		$counts = [];
		foreach($array as $value) {
			$counts[$value] = 0;
		}

		for($i = 0; $i < 100; $i++) {
			$elt = nc_array_rand_value($array);
			$this->assertContains($elt, $array);
			$counts[$elt]++;
		}

		foreach($array as $value) {
			$this->assertGreaterThan(10, $counts[$value]);
		}
	}

	public function testNcPermute()
	{
		$arrays = [
			['a', 'b', 'c'],
			[],
			[1, 2, 3, 4]
		];
		$callback = function($carry, $args) {
			return $carry . ":" . implode('!', $args);
		};

		$result = nc_permute($arrays, $callback, '');

		$this->assertEquals(':a!1:a!2:a!3:a!4' .
							':b!1:b!2:b!3:b!4' .
							':c!1:c!2:c!3:c!4', $result);

	}
}
