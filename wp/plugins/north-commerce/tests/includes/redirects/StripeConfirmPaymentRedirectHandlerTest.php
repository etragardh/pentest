<?php
/*
 * A PHP file for testing out StripeConfirmPaymentRedirectHandler
 */

use NorthCommerce\Db\Collections\OrderStatuses;
use NorthCommerce\Db\Collections\OrderTransactionStatuses;
use NorthCommerce\Db\Collections\PaymentStatuses;
use NorthCommerce\Redirects\StripeConfirmPaymentRedirectHandler;

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class StripeConfirmPaymentRedirectHandlerTest extends North_Commerce_Test_case
{
	private StripeConfirmPaymentRedirectHandler $h;
	private $ot;
	private $params;
	private $thank_you;
	private $customer;

	public function testSlug()
	{
		$this->assertEquals($this->h->slug(), 'stripe_confirm_payment');
	}

	public function testOnErrorUrl()
	{
		$ex = new Exception("Some dummy ex");
		$url = $this->h->onErrorUrl($ex);
		$this->assertStringContainsString("/checkout", $url);
	}

	public function testHandleAsPublic()
	{
		$url = $this->agent->perspectiveManager()->asPublic(function() {
			return $this->h->handle($this->params);
		});
		$this->assertStringContainsString($this->thank_you, $url);
		$this->assertStringContainsString("order={$this->ot['order_url']}", $url);

		$ot_updated = $this->ea->ref($this->ot['id']);

		$this->assertEquals(OrderTransactionStatuses::successful()->id, $ot_updated['order_transaction_status_id']);

		$o = $this->ea->ref($this->ot['order_id']);
		$this->assertEquals(PaymentStatuses::paid()->id, $o['payment_status_id']);
		$this->assertEquals(OrderStatuses::unfulfilled()->id, $o['order_status_id']);

	}

	public function testHandleAsAdministrator()
	{
		$url = $this->agent->perspectiveManager()->asAdministrator(function() {
			return $this->h->handle($this->params);
		});
		$this->assertStringContainsString($this->thank_you, $url);
		$this->assertStringContainsString("order={$this->ot['order_url']}", $url);

		$ot_updated = $this->ea->ref($this->ot['id']);
		$this->assertEquals(OrderTransactionStatuses::successful()->id, $ot_updated['order_transaction_status_id']);
		$o = $this->ea->ref($this->ot['order_id']);
		$this->assertEquals(PaymentStatuses::paid()->id, $o['payment_status_id']);
		$this->assertEquals(OrderStatuses::unfulfilled()->id, $o['order_status_id']);

	}


	public function setUp(): void
	{
		parent::setUp();
		$this->h = new StripeConfirmPaymentRedirectHandler();
		$wp_user = $this->ef->newWpAdminUser();
		$this->customer = $this->ef->newCustomer(['wp_user_id' => $wp_user->ID]);
		$this->ot = $this->ef->newOrderTransaction();
		$this->ot = $this->ef->excecuteStripeOrderTransaction($this->ot);
		$this->ot = $this->ea->update('order_transactions', $this->ot, [
			'order_transaction_status_id' => OrderTransactionStatuses::building()->id
		]);

		$this->assertEquals(OrderTransactionStatuses::building()->id,
							$this->ot['order_transaction_status_id']);
		$this->assertStringStartsWith('pi_', $this->ot['identity_token']);

		$this->params = [
			'payment_intent' => $this->ot['identity_token']
		];

		$this->thank_you = North_Commerce_Settings::nc_get_page_url('checkout_thank_you');
		$this->assertStringStartsWith('https://', $this->thank_you);
		$this->assertStringContainsString('thank', $this->thank_you);

	}
}
