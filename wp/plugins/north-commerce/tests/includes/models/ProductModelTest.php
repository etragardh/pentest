<?php
/*
 * A PHP file for testing out the ProductModel
 */

use NorthCommerce\Models\ProductModel;
use NorthCommerce\Testing\EntityFactory;

require_once __DIR__ . '/../../north-commerce-test-case.php';

class ProductModelTest extends North_Commerce_Test_Case
{

	public function testGetProductVariantsByProductAndOptionValues()
	{
		$ea = North_Commerce_Db_Agent::instance()->entityAccess();
		$ef = EntityFactory::instance();
		$pm = new ProductModel();

		$product = $ef->newProduct();
		$options  = $ea->list('product_options', [
			'product_id' => $product['id']
		]);

		$this->assertGreaterThan(3, count($options));

		for($i = 1; $i <= count($options); $i++) {
			$opts = array_slice($options, 0, $i);
			$value_ids = array_map(function($opt) use($ea) {
				$opt_value = $ea->get('product_option_values', [
					'product_option_id' => $opt['id']
				], ['order_by' => 'RAND()']);
				return $opt_value['id'];
			}, $opts);

			$product_variants = $pm->getProductVariantsByProductAndOptionValues($product['id'],
																				$value_ids);

			$this->assertIsArray($product_variants);
			$this->assertGreaterThan(0, count($product_variants));

			foreach($product_variants as $pv) {
				foreach($opts as $opt) {
					$pv_opt_values = $ea->list('product_variant_option_values', [
						'product_variant_id' => $pv['id'],
						'product_option_value.product_option_id' => $opt['id']
					]);
					$this->assertEquals(1, count($pv_opt_values));
				}
			}
		}
	}

	public function testGetAvailableProductVariantOptionValues() {
		$pm = new ProductModel();

		$p = $this->ef->newProduct([
		]);

		$set_quantity = function($p_q, $pv_q) use($p) {
			$this->ea->update('products', $p, ['quantity' => $p_q]);
			$pvs = $this->ea->list('product_variants', ['product_id' => $p['id']]);
			foreach($pvs as $pv) {
				$this->ea->update('product_variants', $pv, ['quantity' => $pv_q]);
			}
		};

		$pvov_count = $this->ea->count('product_variant_option_values', [
			'product_variant.product.id' => $p['id']
		]);

		$set_quantity(null, null);
		$found = $pm->getAvailableProductVariantOptionValues($p['id']);
		$this->assertEquals($pvov_count, count($found));

		$set_quantity(null, 10);
		$found = $pm->getAvailableProductVariantOptionValues($p['id']);
		$this->assertEquals($pvov_count, count($found));

		$set_quantity(10, null);
		$found = $pm->getAvailableProductVariantOptionValues($p['id']);
		$this->assertEquals($pvov_count, count($found));

		$set_quantity(null, 0);
		$found = $pm->getAvailableProductVariantOptionValues($p['id']);
		$this->assertEquals(0, count($found));

		$set_quantity(0, null);
		$found = $pm->getAvailableProductVariantOptionValues($p['id']);
		$this->assertEquals(0, count($found));
	}
}
