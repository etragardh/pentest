<?php
/*
 * A PHP file for being a base test case for all North Commerce plugin code.
 */

use NorthCommerce\Testing\EntityFactory;
use PHPUnit\Framework\TestCase;

require_once('/var/www/html/wp-load.php');

class North_Commerce_Test_Case extends TestCase {

	private $current_user = null;

	protected EntityFactory $ef;
	protected North_Commerce_Db_Entity_Access $ea;
	protected North_Commerce_Db_Agent $agent;

	public function setUp() : void
	{
		$this->ef = EntityFactory::instance();
		$this->ea = North_Commerce_Db_Agent::instance()->entityAccess();
		$this->agent = North_Commerce_Db_Agent::instance();
		if(!defined('NORTH_COMMERCE_UNIT_TESTING')) {
			define('NORTH_COMMERCE_UNIT_TESTING', true);
		}
		wp_set_current_user($this->currentUser());
		parent::setUp();
	}

	/*
	 * What user should be set up as the current user?
	 */
	public function	currentUser() {
		if(!$this->current_user) {
			$ef = EntityFactory::instance();
			$this->current_user = $ef->anyWpAdmin();
		}
		return $this->current_user;
	}

	public static function assertIsDbId($table, $id) {
		$id_mgr = North_Commerce_Db_Agent::instance()->idManager();
		$style = $id_mgr->idStyle($table);
		parent::assertTrue($id_mgr->isWellFormedId($table, $id),
						   "$table expected $style found $id");
	}

	public static function assertException($fn, $exception_class = Exception::class, string $message = '') : void {
		$the_ex = false;
		try {
			$fn();
		} catch(Exception $ex) {
			$the_ex = $ex;
		}
		North_Commerce_Test_Case::assertInstanceOf($exception_class, $the_ex, "Expected exception to be thrown. $message");
	}
}

require_once(__DIR__ . '/includes/db/North_Commerce_Db_Test_Case.php');
