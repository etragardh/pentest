<?php
/*
 * A PHP file for tesing out our API requests
 */

use NorthCommerce\Db\Collections\RateTypes;
use NorthCommerce\Db\Collections\ShippingDetailTypes;
use NorthCommerce\Testing\EntityFactory;

require_once(__DIR__ . '/../../north-commerce-test-case.php');

class North_Commerce_Rest_Data_Api_Test extends North_Commerce_Db_Test_Case
{
	public function testListAll() {
		$ef = EntityFactory::instance();
		$orders = [];
		for($i = 0; $i < 5; $i++) {
			$orders[] = $ef->newOrder();
		}

		$data = $this->makeRequest("/orders", ['sort' => 'created:desc']);
		$this->assertGreaterThanOrEqual(5, count($data));

		$searcher = function($needle) use($data) {
			foreach($data as $o) {
				if($o['id'] == $needle['id']) {
					return true;
				}
			}
			return false;
		};

		foreach($orders as $o) {
			$this->assertTrue($searcher($o));
		}

		$data = $this->makeRequest("/orders", ['limit' => 2]);
		$this->assertEquals(count($data), 2);

		$invalid = [ ['limit' => 'bob' ],
					 ['limit' => -1 ],
					 ['page' => 0 ],
					 ['limit' => 20000 ],
					 ['limit' => 10, 'page' => 0 ] ];
		foreach($invalid as $params ) {
			$res = $this->makeRequest("/orders", $params, ['code' => 400]);
			$this->assertEquals(400, $res['status']);
		}

		$data = $this->makeRequest("/orders", [
			'sort' => 'total:desc',
			'limit' => 2
		]);
		$this->assertEquals(2, count($data));
		$this->assertLessThan($data[0]['total'], $data[1]['total']);

		$data = $this->makeRequest("/orders", [
			'sort' => 'total:asc',
			'limit' => 2,
			'filter' => 'total:gt:0'
		]);
		$this->assertEquals(2, count($data));
		$this->assertGreaterThanOrEqual($data[0]['total'], $data[1]['total']);
	}

	public function testGet() {
		$ef = EntityFactory::instance();
		$orders = [];
		for($i = 0; $i < 3; $i++) {
			$orders[] = $ef->newOrder();
		}

		foreach($orders as $o) {
			$data = $this->makeRequest("/orders/{$o['id']}");
			foreach($data as $k => $v) {
				$this->assertEquals($v, $o[$k]);
			}
		}

	}

	public function testListBy() {
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();
		$ef = EntityFactory::instance();
		$line_items = $this->lineItems(7);
		$order = $ef->newOrder(['line_items' => $line_items]);

		$db_line_items = $ea->list('line_items', ['order_id' => $order['id']]);
		$remote_line_items = $this->makeRequest("/orders/{$order['id']}/line-items");

		$this->assertEquals(count($db_line_items), count($remote_line_items));

		$searcher = function($li) use($remote_line_items) {
			foreach($remote_line_items as $r_li) {
				if($r_li['id'] == $li['id']) {
					return true;
				}
			}
			return false;
		};

		foreach($db_line_items as $li) {
			$this->assertTrue($searcher($li));
		}

		$r_li1 = $this->makeRequest("/orders/{$order['id']}/line-items", [
			'limit' => 1, 'page' => 1
		]);
		$r_li2 = $this->makeRequest("/orders/{$order['id']}/line-items", [
			'limit' => 1, 'page' => 7
		]);
		$r_li3 = $this->makeRequest("/orders/{$order['id']}/line-items", [
			'limit' => 1, 'page' => 8
		]);

		$this->assertEquals(1, count($r_li1));
		$this->assertEquals(1, count($r_li2));
		$this->assertEquals(0, count($r_li3));

		$this->assertEquals($remote_line_items[0]['id'], $r_li1[0]['id']);
		$this->assertEquals($remote_line_items[6]['id'], $r_li2[0]['id']);

		$sd = $ea->get('shipping_details', ['order_id' => $order['id']]);
		$r_sd = $this->makeRequest("/orders/{$order['id']}/shipping-details", []);
		$this->assertEquals($sd['id'], $r_sd[0]['id']);

	}

	public function testListByFilter() {
		$ef = EntityFactory::instance();
		$line_items = $this->lineItems(7);
		$order = $ef->newOrder(['line_items' => $line_items]);

		$remote_line_items = $this->makeRequest("/orders/{$order['id']}/line-items", [
			'filter' => 'amount:lt:300',
		]);
		$this->assertEquals(3, (count($remote_line_items)));
		foreach($remote_line_items as $r_li) {
			$this->assertLessThan(300, $r_li['amount']);
		}

		$remote_line_items = $this->makeRequest("/orders/{$order['id']}/line-items", [
			'filter' => 'amount:lt:300,quantity:gt:1',
		]);
		$this->assertEquals(2, (count($remote_line_items)));
		foreach($remote_line_items as $r_li) {
			$this->assertLessThan(300, $r_li['amount']);
			$this->assertGreaterThan(1, $r_li['quantity']);
		}
	}


	public function testListAllExpand()
	{
		$ef = EntityFactory::instance();
		$orders = [ $ef->newOrder(), $ef->newOrder() ];

		$remote_orders = $this->makeRequest('/orders', ['expand' => 'order-status,payment-status,line-items,order-changes.order-change-type']);

		$this->assertGreaterThanOrEqual(count($orders), count($remote_orders));

		foreach($remote_orders as $r_o) {
			$this->assertIsDbId('orders', $r_o['id']);
			$this->assertIsArray($r_o['line_items']);
			$this->assertIsArray($r_o['order_status']);
			$this->assertIsNumeric($r_o['order_status']['id']);
			$this->assertIsArray($r_o['order_changes']);
			foreach($r_o['order_changes'] as $r_oc) {
				$this->assertIsArray($r_oc['order_change_type']);
				$this->assertIsDbId('order_change_types', $r_oc['order_change_type']['id']);
			}
		}
	}

	public function testGetExpand()
	{
		$ef = EntityFactory::instance();
		$o = $ef->newOrder();
		$r_o = $this->makeRequest("/orders/{$o['id']}", [
			'expand' => 'order-status,payment-status,line-items,order-changes.order-change-type'
		]);

		$this->assertEquals($o['id'], $r_o['id']);
		$this->assertIsDbId('orders', $r_o['id']);
		$this->assertIsArray($r_o['line_items']);
		$this->assertIsArray($r_o['order_status']);
		$this->assertIsNumeric($r_o['order_status']['id']);
		$this->assertIsArray($r_o['order_changes']);
		foreach($r_o['order_changes'] as $r_oc) {
			$this->assertIsArray($r_oc['order_change_type']);
			$this->assertIsDbId('order_change_types', $r_oc['order_change_type']['id']);
		}
	}

	public function testListByExpand()
	{
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();
		$ef = EntityFactory::instance();
		$o = $ef->newOrder();
		$order_changes = $ea->list('order_changes', ['order_id' => $o['id']]);
		$r_order_changes = $this->makeRequest("/orders/{$o['id']}/order-changes", [
			'expand' => 'order-change-type'
		]);

		$this->assertEquals(count($order_changes), count($r_order_changes));

		foreach($r_order_changes as $r_oc) {
			$this->assertIsArray($r_oc['order_change_type']);
			$this->assertIsDbId('order_change_types', $r_oc['order_change_type']['id']);
		}
	}

	public function testListAllPaging()
	{
		$ef = EntityFactory::instance();
		$line_items = $this->lineItems(5);
		$o = $ef->newOrder(['line_items' => $line_items]);

		$meta_p1 = $this->makeRequest("/line-items", [
			'filter' => "order_id:eq:{$o['id']}",
			'limit' => 2
		], ['as' => 'meta']);

		$this->assertFalse($meta_p1['prev_page_link']);
		parse_str(parse_url($meta_p1['next_page_link'], PHP_URL_QUERY), $next_url_qs);
		$this->assertEquals($next_url_qs['page'], 2);
		$this->assertEquals($next_url_qs['limit'], 2);
		$this->assertEquals($next_url_qs['filter'], "order_id:eq:{$o['id']}");

		$meta_p2 = $this->makeRequest("/line-items", [
			'filter' => "order_id:eq:{$o['id']}",
			'limit' => 2,
			'page' => 2
		], ['as' => 'meta']);
		$this->assertIsString($meta_p2['prev_page_link']);
		$this->assertIsString($meta_p2['next_page_link']);

		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		$p3_line_items = $ea->list('line_items', [
			'order_id' => $o['id']
		], [
			'limit' => 3,
			'offset' => 4
		]);
		$this->assertEquals(count($p3_line_items), 1);

		$meta_p3 = $this->makeRequest("/line-items", [
			'filter' => "order_id:eq:{$o['id']}",
			'limit' => 2,
			'page' => 3
		], ['as' => 'meta']);
		$this->assertIsString($meta_p3['prev_page_link'], print_r($meta_p3, true));
		$this->assertFalse($meta_p3['next_page_link'], print_r($meta_p3, true));
	}

	public function testListByPaging()
	{
		$ef = EntityFactory::instance();
		$line_items = $this->lineItems(5);
		$o = $ef->newOrder(['line_items' => $line_items]);

		$tests = [
			['page' => 1, 'len' => 2, 'next_link' => 'is_string', 'prev_link' => 'is_bool',
			 'next_count' => 2, 'prev_count' => 0],
			['page' => 2, 'len' => 2, 'next_link' => 'is_string', 'prev_link' => 'is_string',
			 'next_count' => 1, 'prev_count' => 2 ],
			['page' => 3, 'len' => 1, 'next_link' => 'is_bool', 'prev_link' => 'is_string',
			 'next_count' => 0, 'prev_count' => 2],
		];

		foreach($tests as $t) {
			$res = $this->makeRequest("/orders/{$o['id']}/line-items", [
				'page' => $t['page'],
				'limit' => 2
			], ['as' => 'res']);
			$next_link_ok = $t['next_link']($res['meta']['next_page_link']);
			$prev_link_ok = $t['prev_link']($res['meta']['prev_page_link']);
			$this->assertTrue($next_link_ok, "page = {$t['page']}, npl = {$res['meta']['next_page_link']}");
			$this->assertTrue($prev_link_ok, "page = {$t['page']}, ppl = {$res['meta']['prev_page_link']}");
			$this->assertEquals($t['len'], count($res['data']));

			if($t['next_count'] == 0) {
				$this->assertFalse($res['meta']['next_page_link']);
			} else {
				$next_res_full = nc_wp_ok($this->wpRemoteGet($res['meta']['next_page_link']));
				$this->assertEquals(200, $next_res_full['response']['code']);
				$next_res = json_decode($next_res_full['body'], true);
				$this->assertEquals($t['next_count'], count($next_res['data']));
			}

			if($t['prev_count'] == 0) {
				$this->assertFalse($res['meta']['prev_page_link']);
			} else {
				$prev_res_full = nc_wp_ok($this->wpRemoteGet($res['meta']['prev_page_link']));
				$this->assertEquals(200, $prev_res_full['response']['code']);
				$prev_res = json_decode($prev_res_full['body'], true);
				$this->assertEquals($t['prev_count'], count($prev_res['data']), print_r($t, true));
			}
		}

	}

	public function testListAllRandomPage()
	{
		$ef = EntityFactory::instance();
		$o = $ef->newOrder(['line_items' => $this->lineItems(5)]);

		$res = $this->makeRequest("/orders/{$o['id']}/line-items", [
			'limit' => 2,
			'page' => rand(10, 20)
		], ['as' => 'res']);

		$this->assertEmpty($res['data']);
		$this->assertFalse($res['meta']['next_page_link']);
		$this->assertIsString($res['meta']['prev_page_link']);
	}

	public function testCreateFail() {
		$tests = [
			['entity' => 'orders', 'body' => [] ],
			['entity' => 'orders', 'body' => [
				'id' => 100,
				'shipping' => 100
			]],
			['entity' => 'orders', 'body' => [
				'tax' => 100,
				'shipping' => 100,
				'line_items' => [
					[ 'x' => 100],
				]
			]],
			['entity' => 'orders', 'body' => [
				'tax' => 100,
				'payment_status' => [
					'x' => 100,
				],
				'line_items' => [
					['quantity' => 10]
				]
			]]
		];

		foreach($tests as $t) {
			$this->makePost("/{$t['entity']}", $t['body'], [
				'as' => 'res',
				'code' => 400,
				'res_code' => 'rest_invalid_param'
			]);
		}
	}

	public function testCreate()
	{
		$ef = EntityFactory::instance();
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();
		$validator = new North_Commerce_Api_Validator();

		$customer = $ef->newCustomer();
		$total = rand(10, 20);
		$paid = round($total / 2, 2);
		[$pv1, $pv2] = $ef->randomProductVariants(2);
		$p1 = $this->ea->get('products', ['id' => $pv1['product_id']]);
		$p2 = $this->ea->get('products', ['id' => $pv2['product_id']]);
		$q1 = rand(1, 10);
		$q2 = rand(1, 10);
		$amt1 = $pv1['price'] ?? $p1['base_price'];
		$amt2 = $pv2['price'] ?? $p2['base_price'];
		$os = $ea->get('order_statuses', ['name' => "On Hold"]);
		$ps = $ea->get('payment_statuses', ['name' => "Unpaid"]);
		$tracking = nc_random_token();
		$wp_req = new WP_REST_Request();
		$wp_req->set_url_params(['entity' => 'orders']);

		$payload = [
			'customer_id' => $customer['id'],
			'total' => $total,
			'paid' => $paid,
			'order_status_id' => $os['id'],
			'payment_status_id' => $ps['id'],
			'shipping_details' => [
				['tracking_number' => $tracking,
				 'rate_type_id' => RateTypes::flatRate()->id,
				 'shipping_detail_type_id' => ShippingDetailTypes::planned()->id]
			],
			'line_items' => [
				['product_variant_id' => $pv1['id'],
				 'amount' => $amt1,
				 'quantity' => $q1],
				['product_variant_id' => $pv2['id'],
				 'amount' => $amt2,
				 'quantity' => $q2],
			]
		];
		$this->assertTrue($validator->validateBody($payload, $wp_req));

		$remote_order = $this->makePost('/orders', $payload);

		$order = $ea->get('orders', ['id' => $remote_order['id']]);
		$this->assertEquals($total, $order['total']);
		$this->assertEquals($total, $remote_order['total']);
		$this->assertEquals($paid, $order['paid']);
		$this->assertEquals($paid, $remote_order['paid']);
		$this->assertEquals($os['id'], $order['order_status_id']);
		$this->assertEquals($os['id'], $remote_order['order_status_id']);

		$shipping_detail = $ea->get('shipping_details', [
			'order_id' => $order['id']
		]);
		$this->assertEquals($tracking, $shipping_detail['tracking_number']);

		$line_items = $ea->list('line_items', [
			'order_id' => $order['id']
		], ['order_by' => 'amount ASC']);

		if($amt2 > $amt1) {
			$this->assertEquals($amt1, $line_items[0]['amount']);
			$this->assertEquals($q1, $line_items[0]['quantity']);

			$this->assertEquals($amt2, $line_items[1]['amount']);
			$this->assertEquals($q2, $line_items[1]['quantity']);
		} else {
			$this->assertEquals($amt2, $line_items[0]['amount']);
			$this->assertEquals($q2, $line_items[0]['quantity']);

			$this->assertEquals($amt1, $line_items[1]['amount']);
			$this->assertEquals($q1, $line_items[1]['quantity']);
		}

		$amount  = round(rand(1,1000) / 100, 2);
		$pv = $ef->randomProductVariant();
		$li = $this->makePost("/line-items", [
			'order_id' => $order['id'],
			'amount' => $amount,
			'description' => nc_random_token(),
			'quantity' => rand(1,10),
			'product_variant_id' => $pv['id']
		], ['qs' => ['expand' => 'order']]);

		$this->assertEquals($amount, $li['amount']);
		$this->assertEquals($total, $li['order']['total']);
	}

	public function testUpdate()
	{
		$ef = EntityFactory::instance();
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		$order = $ef->newOrder();
		$new_tax = rand(1, 100);
		$new_tracking_number = nc_random_token();
		$new_qty = rand(1,100);
		$line_item = $ea->get('line_items', ['order_id' => $order['id']],
							  ['order_by' => 'id asc']);

		$sd = $ea->get('shipping_details', ['order_id' => $order['id']]);

		$updated = $this->makePost("/orders/{$order['id']}", [
			'tax' => $new_tax,
			'shipping_details' => [
				[ 'id' => $sd['id'],
				  'tracking_number' => $new_tracking_number]
			],
			'line_items' => [
				[ 'id' => $line_item['id'],
				  'quantity' => $new_qty ]
			]
		], ['qs' => ['expand' => 'none']]);

		$this->assertEquals($updated, $order['id']);

		$order_updated = $ea->get('orders', ['id' => $order['id']]);
		$this->assertEquals($new_tax, $order_updated['tax']);

		$shipping_detail_updated = $ea->get('shipping_details', ['order_id' => $order['id']]);
		$this->assertEquals($new_tracking_number, $shipping_detail_updated['tracking_number']);

		$line_item_updated = $ea->get('line_items', ['id' => $line_item['id']]);
		$this->assertEquals($new_qty, $line_item_updated['quantity']);
	}

	public function testUpdateNotFound()
	{
		$missing_id = $this->agent->idManager()->freshId('orders');
		$this->makePost("/orders/$missing_id", [
			'total' => 100,
		], [
			'code' => 400,
			'res_code' => 'rest_invalid_storage_request'
		]);
	}

	public function testCreateOnlyChildren()
	{
		$ef = EntityFactory::instance();
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		$order = $ef->newOrder();
		$amount = 1012;
		$product_variant = $ef->randomProductVariant(['price' => $amount], ['base_price' => $amount]);
		$description = nc_random_token();

		$updated = $this->makePost("/orders/{$order['id']}", [
			'line_items' => [
				[ 'product_variant_id' => $product_variant['id'],
				  'quantity' => 4,
				  'amount' => $amount,
				  'description' => $description]
			]
		], [
			'qs' => ['expand' => 'line-items']
		]);

		$this->assertEquals(3, count($updated['line_items']));

		$found = $ea->get('line_items', [
			'order_id' => $order['id'],
			'description' => $description,
			'amount' => $amount
		]);
		$this->assertEquals($amount, $found['amount']);
		$this->assertEquals($description, $found['description']);
	}

	public function testDeleteRealDelete()
	{
		$sp = $this->ef->newShippingProfile(['zones' => []]);

		$this->assertIsArray($this->ea->get('shipping_profiles', ['id' => $sp['id']]));

		$this->makeRequest("/shipping-profiles/{$sp['id']}", [], [
			'method' => 'DELETE',
			'authenticated' => true
		]);

		$this->assertFalse($this->ea->get('shipping_profiles', ['id' => $sp['id']], ['not_found' => false]));
	}

	public function testDeleteMarkDeleted()
	{
		$p = $this->ef->newProduct(['variants' => false]);

		$this->makeRequest("/products/{$p['id']}", [], [
			'method' => 'DELETE',
			'authenticated' => true
		]);

		$found = $this->ea->get('products', [
			'and',
			[ 'id' => $p['id'] ],
			[ 'not', [ 'is', 'deleted', null ] ]
		] );
		$this->assertEquals( $p['id'], $found['id'] );
	}

	public function testDeletePublicDenied()
	{
		$o = $this->ef->newOrder();
		$this->makeRequest("/orders/{$o['id']}", [], [
			'method' => 'DELETE',
			'authenticated' => false,
			'code' => 400
		]);
	}

	public function testDeletePublicSuccess()
	{
		$o = $this->ef->newOrder();
		$li = $this->ea->get('line_items', ['order_id' => $o['id']]);
		$this->makeRequest("/line-items/{$li['id']}", [], [
			'method' => 'DELETE',
			'authenticated' => false,
		]);

		$found = $this->ea->get('line_items', ['id' => $li['id']], ['not_found' => null]);
		$this->assertNull($found);
	}



	private function makeRequest($path, $params = [], $options = []) {
		$expected_code = nc_g($options, 'code', 200);
		$url = str_replace('http:', 'https:',
						   get_rest_url() . NORTH_COMMERCE_REST_DATA_API_NAMESPACE  . $path .
						   ($params ? '?' . http_build_query($params) : ''));
		$method = $options['method'] ?? 'GET';
		$http = new WP_Http();
		$http_options = ['method' => $method];
		if($options['authenticated'] ?? false) {
			$http_options = $this->addAuthHeader($http_options);
		}
		$res = $http->request($url, $http_options);
		$this->assertIsArray($res, $url . "\n" . $res['body']);
		$this->assertEquals($expected_code, $res['response']['code'],
							"$url: ". print_r($params, true) . ": " . $res['body']);
		try {
			$body = json_decode($res['body'], true, 512, JSON_THROW_ON_ERROR);
		} catch(Exception $ex) {
			$this->assertTrue(false, "Invalid JSON: " . $res['body']);
		}
		switch(nc_g($options, 'as')) {
			case 'res':
				return $body;
			case 'meta':
				return $body['meta'];
			default:
				return $body['data'];
		}
	}

	private function wpRemoteGet($url, $args = []) {
		return wp_remote_get($url, $this->addAuthHeader($args));
	}

	private function wpRemotePost($url, $args = []) {
		return wp_remote_post($url, $this->addAuthHeader($args));
	}

	private function addAuthHeader($args) {
		$user = $this->currentUser();
		$password = get_user_meta($user->ID, NORTH_COMMERCE_APP_PASSWORD_META, true);
		$headers = nc_g($args, 'headers', []);
		$headers +=  [ 'Authorization' => "Basic " . base64_encode($user->user_login . ":" .
																   $password) ];
		$args['headers'] = $headers;
		return $args;
	}

	private function makePost($path, $body, $options = [])
	{
		$qs = nc_g($options, 'qs', []);
		$expected_code = nc_g($options, 'code', 200);
		$url = str_replace('http:', 'https:',
						   get_rest_url() . NORTH_COMMERCE_REST_DATA_API_NAMESPACE  . $path .
						   ($qs ? '?' . http_build_query($qs) : ''));

		$res = nc_wp_ok($this->wpRemotePost($url, [
			'headers' => [
				'content-type' => 'application/json'
			],
			'body' => json_encode($body),
			'method' => 'POST'
		]));

		$this->assertEquals($expected_code, $res['response']['code'],
							"$path: ". print_r($qs, true) . ": " . print_r($res,true));
		$body = json_decode($res['body'], true);
		$expected_res_code = nc_g($options, 'res_code', 'ok');
		$this->assertEquals($expected_res_code, $body['code'], print_r($body, true));

		switch(nc_g($options, 'as')) {
			case 'res':
				return $body;
			case 'meta':
				return $body['meta'];
			default:
				return $body['data'];
		}
	}

	private function lineItems($count) {
		$ef = EntityFactory::instance();

		return array_map(function($i) use($ef) {
			$total = ($i * 100) + 7;
			$quantity = $i + 1;
			$pv = $ef->randomProductVariant(['price' => $total / $quantity],
											['price' => $total / $quantity]);
			return [
				'product_variant' => $pv,
				'quantity' => $quantity,
			];
		}, range(0, $count - 1));
	}
}
