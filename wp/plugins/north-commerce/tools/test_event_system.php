<?php
/**
 * A PHP file for testing our Queueable in a sandbox environment.
 */


use NorthCommerce\Db\PerspectiveManager;

require_once(__DIR__ . '/wp_load.php');

(php_sapi_name() == 'cli') || die("Must be run from the command line\n");
parse_str(implode('&', array_slice($argv, 1)), $args);

($event = nc_g($args, 'event')) || die("Specify an event to trigger e.g. `updated` or `order.created`\n");

($order_id = nc_g($args, 'order_id')) || die("Specify an order_id=or13bthq3668sbwb33dff9hxv646\n");

$triggerEventsAutomation = new NorthCommerce\Db\Automations\TriggerEventsAutomation;

$order = new NorthCommerce\Models\OrderModel;

$orderData = $order->get(['id' => $order_id], ['expand' => ['order_status']]);

PerspectiveManager::instance()->asAdministrator( function () use ( $order, $order_id ) {
    // reset order to null status
    $order->update_order_status($order_id, 5);
    $order->update_payment_status($order_id, 5);  
});

if ( $orderData ) {

    
    if($event == 'order.purchase') {
        // Simulate an order purchase
        PerspectiveManager::instance()->asAdministrator( function () use ( $order, $order_id ) {
            $order->update_order_status($order_id, NorthCommerce\Db\Collections\OrderStatuses::fulfilled()->id);
            $order->update_payment_status($order_id, NorthCommerce\Db\Collections\PaymentStatuses::paid()->id);        
        } );
    }

}