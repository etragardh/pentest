<?php
/**
 * A PHP file for populating the database with test data
 *
 * @version 0.1.13
 */

use NorthCommerce\Db\PerspectiveManager;
use NorthCommerce\Db\Automations\WebhookInvocationAutomation;
use NorthCommerce\Models\OrderModel;

require_once(__DIR__ . '/wp_load.php');
(php_sapi_name() == 'cli') || die("Must be run from the command line\n");
parse_str(implode('&', array_slice($argv, 1)), $args);

//($action = nc_g($args, 'action')) || die("Please specify an action to run webhooks against\n");
//($entity = nc_g($args, 'table')) || die("Please specify a table to run webhooks against\n");
($order_id = nc_g($args, 'order_id')) || die("Specify an order ID to simulate a `created` action with. Use the numeric order_id, the order must be in status order_status_id = 5, payment_Status_id = 1\n");


$pm = PerspectiveManager::instance();
		
$pm->asAdministrator(function() use($order_id) {
    
    $orderModel = new OrderModel();
    $order = $orderModel->get([ 'order_number' => $order_id ]);

    if(!$order) {
        die("Order not found\n");
    } else {

        $wia = new WebhookInvocationAutomation();

        $wia->onEntityAccessUpdated($order, 'orders', []);

        if($wia->last_action === 'trigger_webhooks') {
            echo "Webhook queued using Action Scheduler\n";
            $details = $wia->get_last_action_details();
            var_dump($details);
        } else {
            echo "Webhook sent directly via system\n";
        }

    }

});
