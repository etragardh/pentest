<?php
/*
 * A PHP file for testing our Queueable in a sandbox environment.
 */


require_once(__DIR__ . '/wp_load.php');
require_once(__DIR__ . '/../tests/includes/traits/TestClassWithQueue.php');

(php_sapi_name() == 'cli') || die("Must be run from the command line\n");

// Instantiate a class that uses Queueable.
$testClassWithQueue = new NorthCommerce\Traits\TestClassWithQueue();

// NOTE: For testing purposes, whatever hook is used here would need to be registered somewhere
// within the plugin itself. The Action Scheduler will test whether or not any callbacks are registered
// These callbacks can't be registered in this file as this file is not loaded in the normal wp-load cycle.

// Schedule a single action and get the action ID.
$action_id = $testClassWithQueue->schedule_single_action('example_action', ['test_param']);
var_dump($action_id); // Show action ID.

// Get the next scheduled action.
$next_scheduled_action = $testClassWithQueue->next_scheduled_action('example_action', ['test_param']);
var_dump($next_scheduled_action); // Show next scheduled action.

// Perform some action immediately.
$testClassWithQueue->dispatch_ammediately( 'example_action', [ 'test_param' ] );

// Get the next scheduled action again.
$next_scheduled_action_after_dispatch = $testClassWithQueue->next_scheduled_action('example_action', ['test_param']);
var_dump($next_scheduled_action_after_dispatch); // Show next scheduled action after dispatch.

// Fetch and output data from the Action Scheduler tables.
global $wpdb;
$table_name = $wpdb->prefix . 'actionscheduler_actions'; // Replace with your Action Scheduler table name.
$results = $wpdb->get_results("SELECT * FROM {$table_name}", ARRAY_A);
if($results) {
    foreach($results as $row) {
        var_dump($row); // Output each row of the table.
    }
} else {
    echo "No records found in the Action Scheduler table.\n";
}