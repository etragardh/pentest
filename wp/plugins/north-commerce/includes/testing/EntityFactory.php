<?php
namespace NorthCommerce\Testing;

use DomainException;
use North_Commerce_Db_Agent;
use North_Commerce_Stripe;
use NorthCommerce\Db\Collections\{
	CouponDiscountTypes,
	CouponModes,
	CouponRequirements,
	CouponStatuses,
	OrderTransactionStatuses,
	ProductTypes,
	ShippingDetailTypes,
	ShippingRateConditionBases,
    ShippingZoneTypes
};
use WP_Application_Passwords;
use NorthCommerce\Db\Effects\FillInLineItemEffect;
use NorthCommerce\Models\CouponModel;

define('NORTH_COMMERCE_SOURCE_META', 'north-commerce-source');
define('NORTH_COMMERCE_SOURCE_UNIT_TEST_VALUE', 'unit-test');
define('NORTH_COMMERCE_TEST_DOMAIN', 'testing.northplugins.com');
define('NORTH_COMMERCE_APP_PASSWORD_META', 'north-commerce-pass-password');

/**
 * A PHP file for generating test data used by our unit tests
 *
 * @version 0.1.24
 */
class EntityFactory {

	private static $instance = [];

	public static function instance() : EntityFactory {
		if(self::$instance == null) {
			self::$instance = new EntityFactory();
		}
		return self::$instance;
	}

	private $ea;

	function __construct() {
		$this->ea = North_Commerce_Db_Agent::instance()->entityAccess();
	}

	public function randomWpUser($criteria = [], $create_params = []) {
		$users = get_users(['number' => 1,
							'meta_key' => NORTH_COMMERCE_SOURCE_META,
							'meta_value' => NORTH_COMMERCE_SOURCE_UNIT_TEST_VALUE] + $criteria);
		if($users) {
			return $users[0];
		} else {
			return $this->newWpUser($create_params);
		}
	}

	public function randomWpCustomer($criteria = [], $create_params = []) {
		return $this->randomWpUser($criteria + ['role' => 'subscriber'],
								   $create_params + ['role' => 'subscriber']);
	}

	public function anyWpAdmin() {
		$users = get_users(['number' => 1,
							'role' => 'administrator']);
		$admin = $users ? $users[0] : $this->newWpAdminUser();

		if(!get_user_meta($admin->ID, NORTH_COMMERCE_APP_PASSWORD_META, true)) {
			[$password, $details ] =
				WP_Application_Passwords::create_new_application_password($admin->ID, [
					'name' => "Test User Access"
				]);
			unset($details);
			update_user_meta($admin->ID, NORTH_COMMERCE_APP_PASSWORD_META, $password);
		}

		return $admin;
	}

	public function newEmailAddress($params = []) {
		[$prefix, $params] = nc_array_pluck($params, 'prefix', 'nc-test-');
		[$token, $params] = nc_array_pluck($params, 'token', nc_random_token());
		return "$prefix$token@" . NORTH_COMMERCE_TEST_DOMAIN;
	}

	/**
	 * @version 0.1.13
	 */
	public function newWpUser( $params = [] ) {
		list( $prefix, $params ) = nc_array_pluck( $params, 'prefix', 'nc-test-' );
		list( $token, $params ) = nc_array_pluck( $params, 'token', nc_random_token() );
		$data = nc_array_kexpand($params, [
			'user_login' => function($value) use ($token, $prefix) {
				return $value ? $value : "$prefix$token";
			},
			'user_email' => function($value) use ($token, $prefix) {
				return $value ? $value : $this->newEmailAddress(['prefix' => $prefix, 'token' => $token]);
			},
			'role' => function($value) {
				return $value ? $value : "subscriber";
			}
		]);

		$data['user_pass'] = wp_generate_password(5);

		$wp_user_id = nc_wp_ok(wp_insert_user($data));
		update_user_meta($wp_user_id, NORTH_COMMERCE_SOURCE_META, NORTH_COMMERCE_SOURCE_UNIT_TEST_VALUE);

		[$password, $details ] =
			WP_Application_Passwords::create_new_application_password($wp_user_id, [
				'name' => "Test User Access"
			]);
		unset($details);
		update_user_meta($wp_user_id, NORTH_COMMERCE_APP_PASSWORD_META, $password);

		return nc_wp_ok(get_user_by('ID', $wp_user_id));
	}

	public function newWpAdminUser($params = []) {
		return $this->newWpUser(['role' => 'administrator'] + $params);
	}


	public function newWpCustomerUser($params = []) {
		return $this->newWpUser(['role' => 'subscriber'] + $params);
	}

	public function randomWpPage($criteria = [], $create_params = []) {
		$posts = get_posts(['numberposts' => 1,
							'post_type' => 'page',
							'meta_key' => NORTH_COMMERCE_SOURCE_META,
							'meta_value' => NORTH_COMMERCE_SOURCE_UNIT_TEST_VALUE] + $criteria);
		if($posts) {
			return $posts[0];
		} else {
			return $this->newWpPage($create_params);
		}
	}

	public function newWpPage($params = []) {
		$token = nc_random_token();
		$data = nc_array_kexpand($params, [
			'post_title' => function($value) use($token) {
				return $value ? $value : "All About $token";
			},
			'post_content' => function($value) use($token) {
				return $value ? $value : "Content all about $token.";
			},
			'post_name' => function($value) use($token) {
				return $value ? $value : $token;
			},
			'post_type' => function($value) {
				return $value ? $value : 'page';
			},
			'post_status' => function($value) {
				return $value ?: 'publish';
			}
		]);

		$post_id = nc_wp_ok(wp_insert_post($data, true));
		update_post_meta($post_id, NORTH_COMMERCE_SOURCE_META, NORTH_COMMERCE_SOURCE_UNIT_TEST_VALUE);

		return get_post($post_id);
	}


	public function randomCustomer($criteria = true, $create_params = []) {
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		$found = $ea->get('customers', $criteria, ['limit' => 1, 'order_by' => 'RAND()']);
		return $found ?: $this->newCustomer($create_params);
	}

	public function newCustomer($params = [])
	{
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		$token = nc_random_token();
		[ $wp_user_id, $params ] = nc_array_pluck( $params, 'wp_user_id', false );
		if ( $wp_user_id ) {
			$wp_user = get_user_by( 'ID', $wp_user_id );
		} else {
			$wp_user = $this->newWpUser( [
				'token' => $token,
				'user_email' => nc_g( $params, 'email' )
			] );
		}

		$data = nc_array_kexpand($params, [
			'first_name' => function($value) {
				$name = $this->randomFirstName();
				return $value ? $value : $name;
			},
			'last_name' => function($value) use($token) {
				return $value ? $value  : $token;
			},
			'email' => function($value) use($wp_user) {
				return $value ? $value : $wp_user->user_email;
			},
			'phone' => function($value) {
				return $value ? $value : rand(200, 700) . '-' . '555' . '-' . rand(1000, 9999);
			},
			'country_code' => function($value) {
				return $value ? $value : '+1';
			},
			'wp_user_id' => function( $value ) use( $wp_user ) {
				return $wp_user->ID;
			},
			'marketing_optin' => function($value) {
				return $value ? $value : rand(0, 1000) > 600;
			}
		]);

		$customer = $ea->create('customers', $data);
		$this->newAddress([
			'customer' => $customer,
			'is_default_shipping' => true
		]);

		$this->newAddress([
			'customer' => $customer,
			'is_default_billing' => true
		]);

		return $customer;
	}

	public function newAddress($params = [])
	{
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		[$customer, $params] = nc_array_pluck($params, 'customer', false);

		if(!$customer && nc_g($params, 'customer_id')) {
			$customer = $ea->get('customers', ['id' => $params['customer_id']]);
		}



		if($customer) {
			$params['customer_id'] = $customer['id'];
		} else {
			throw new \NcNotFoundException("No customer provided");
		}

		$data = nc_array_kexpand($params, [
			'first_name' => function($value) use($customer) {
				return $value ? $value : ($customer['first_name'] ?: $this->randomFirstName());
			},
			'last_name' => function($value) use($customer) {
				return $value ? $value : ($customer['last_name'] ?: nc_random_token());
			},
			'phone' => function($value) use($customer) {
				return $value ? $value : $customer['phone'];
			},
			'addressline1' => function($value) {
				$num = rand(1, 100);
				$street = nc_array_rand_value(['Main', 'South', 'Spring', 'Wilson', 'Queen' ]);
				return $value ? $value : "$num $street St.";
			},
			'addressline2' => function($value) {
				$num = rand(1, 1000);
				return $value ? $value : ($num > 500 ? "Suite #$num" : null);
			},
			'city' => function($value) {
				$city = nc_array_rand_value(['Springfield', 'Franklin', 'Madison', 'Greenville', 'Arlington']);
				return $value ? $value : $city;
			},
			'country_id' => function( $value ) use( $ea ) {
				$all = [ 'US', 'CA',	'AU' ];
				$random_country_abbreviation = nc_array_rand_value( $all );
				$country = $ea->get( 'countries', [ 'abbreviation' => $random_country_abbreviation ] );
				return $value ?: $country['id'];
			},
			'state' => function( $value, $data ) use( $ea ) {
				$all = nc_get_countries_subunits_map();
				$country = $ea->get( 'countries', [ 'id' => $data['country_id'] ] );

				$random_subunit_abbreviation = $all[ $country['abbreviation'] ]['subunits'] ?
											   array_rand( $all[ $country['abbreviation'] ]['subunits'] ) :
											   false;

				return $value ?: ($random_subunit_abbreviation ? $all[ $country['abbreviation'] ]['subunits'][ $random_subunit_abbreviation ] : null);
			},
			'zipcode' => function($value) {
				return $value ? $value : rand(11111, 77777);
			}
		]);

		return $ea->create('addresses', $data);

	}

	public function randomProduct($criteria = true, $create_params = []) {
		return nc_g($this->randomProducts(1, $criteria, $create_params), 0);
	}

	public function randomProducts($count, $criteria = true, $create_params = []) {
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		$found = $ea->list('products', $criteria, ['limit' => $count, 'order_by' => 'RAND()']);
		for($i = count($found); $i < $count; $i++) {
			$found[] =  $this->newProduct($create_params);
		}
		return $found;
	}

	public function newProduct( $params = [] ) {
		$default_images = [
			'https://northcommerce.com/app-commerce/sample/product/product-1.jpg',
			'https://northcommerce.com/app-commerce/sample/product/product-2.jpg',
			'https://northcommerce.com/app-commerce/sample/product/product-3.jpg',
			'https://northcommerce.com/app-commerce/sample/product/product-4.jpg'
		];
		$token = nc_random_token();
		[$variants, $params] = nc_array_pluck($params, 'variants', 'auto');
		[$images, $params] = nc_array_pluck($params, 'images', $default_images);
		[$product_variant_hints, $params] = nc_array_pluck($params, 'product_variant_hints', []);

		$descriptors = [ 'Super', 'Mega', 'Ultra', 'Uber', 'Wonder', 'Micro', 'Nano' ];
		$descriptor = $descriptors[array_rand($descriptors)];
		$nouns = [ 'Deck', 'Box', 'Book', 'Pod', 'Grid' ];
		$noun = $nouns[ array_rand( $nouns ) ];
		$variant_label = $variants == false ? "" : " (with options)";

		$data = nc_array_kexpand($params, [
			'created_by_wp_user_id' => function($value) {
				return $value ? $value : $this->newWpUser()->ID;
			},
			'sku' => function($value) use($token) {
				return $value ? $value : "$token-001";
			},
			'product_type' => function($value) {
				return ['product_type_id' => $value ? $value['id'] : ProductTypes::oneTime()->id ];
			},
			'description' => function($value) use($token, $noun, $descriptor) {
				return $value ? $value : "This is your chance to own a genuine, one of a kind $descriptor $noun $token.";
			},
			'slug' => function($value) use($token){
				return $value ? $value : strtolower($token);
			},
			'published' => function($value) {
				return $value ? $value : date('Y-m-d H:i:00', time() + (60*60*24* rand(1, 10)));
			},
			'product_status_id' => function($value) {
				$ps = $this->pickRandom('product_statuses');
				return $value ? $value : $ps['id'];
			},
			'base_price' => function($value) {
				return $value ? $value : $this->randomDollarAmount(10, 100);
			},
			'compare_price' => function($value) {
				return $value ? $value : $this->randomDollarAmount(10, 100);
			},
			'cost_of_goods_price' => function($value) {
				return $value ? $value : $this->randomDollarAmount(10, 100);
			},
			'profit' => function($value) {
				return $value ? $value : $this->randomDollarAmount(10, 100);
			},
			'quantity' => function($value) {
				return $value ? $value : rand(1, 100);
			},
			'weight' => function($value) {
				return $value ? $value : rand(1, 100);
			},
			'is_physical_product' => function($value) {
				return $value ? $value : 1;
			},
			'has_product_variants' => function($value) use ($variants) {
				return $value ? $value : ($variants ? 1 : 0);
			},
			'name' => function($value, $data) use ($token, $noun, $descriptor, $variant_label) {
				$type = $data['is_physical_product'] ? 'physical'  : 'virtual';
				return $value ? $value : "$descriptor $noun $token $variant_label [$type]";
			},
		]);

		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		$product = $ea->create('products', $data);

		if ( $variants == false ) {
			$variants = [];
		} elseif($variants == 'auto') {
			$variants = [
				['type' => 'size',
				 'values' => ["X-Small", "Small", "Medium", "Large", "X-Large"],
				 'name' => "Size"],
				['type' => 'text',
				 'values' => ["30 Day Supply", "60 Day Supply", "90 Day Supply"],
				 'name' => "Text"],
				['type' => 'color',
				 'values' => ["#D3BAA1", "#8B6658", "#49352E", "#2D2D2F"],
				 'name' => "Color"],
				['type' => 'image',
				 'values' => $default_images,
				 'name' => "Image"]
			];
		}

		if ( empty( $variants ) ) {
			$ea->create('product_variants', [
				'product_id' => $product['id'],
				'product_variant_type_id' => $this->pickBySlug('product_variant_types', 'solo', ['as' =>'id']),
				'price' => $product['base_price'],
				'quantity' => $product['quantity'],
				'visible' => true,
				'slug' => 'solo',
				'sku' => 'solo',
				'image_url' => $images ? $images[0] : null
			]);
		} else {
			$all_values = [];
			foreach($variants as $v) {
				$o = $ea->create('product_options', [
					'product_id' => $product['id'],
					'name' => ucfirst($v['name']),
					'product_option_type_id' => nc_g($this->pickBySlug('product_option_types', $v['type']), 'id')
				]);
				$values = [];
				foreach($v['values'] as $i => $t) {
					$values[] = $ea->create('product_option_values', [
						'product_option_id' => $o['id'],
						'value' => $t,
						'display_value' => $t,
						'price_offset' => 0,
						'sequence' => $i
					]);
				}
				$all_values[] = $values;
			}

			$zero_quantity_scenarios = [
			  ['Small'],
			  ['Medium', '90 Day Supply'],
			  ['Large', '30 Day Supply', '#8B6658']
			];

			$this->createProductVariants(
				$zero_quantity_scenarios,
				$product_variant_hints,
				$product,
				$all_values,
				[],
				0
			);

		}

		foreach ( $images as $i => $img_url ) {
			$ea->create( 'product_images', [
				'product_id' =>  $product['id'],
				'image_url' => $img_url,
				'sequence' => $i
			] );
		}

		$pd = $this->newPaymentDetail();
		$ea->update( 'products', $product, [
			'payment_detail_id' => $pd['id']
		] );

		return $product;

	}

	public function newPaymentDetail( $params = [] ) {

		$data = nc_array_kexpand( $params, [
			'payment_frequency_id' => function( $v ) {
				return $v ?: $this->pickRandom('payment_frequencies', true, ['as' => 'id']);
			},
			'has_free_trial' => function( $v ) {
				return $v ?: rand(1, 100) > 80;
			},
			'free_trial_frequency' => function( $v, $data ) {
				return $data['has_free_trial'] ? ( $v ?: rand(1, 4)) : null;
			},
			'free_trial_type_id' => function($v, $data) {
				return $data['has_free_trial'] ?
					   ( $v ?: $this->pickRandom('free_trial_types', true, ['as' => 'id'])) :
					   null;
			},
			'has_first_period_payment' => function( $v ) {
				return $v ?: rand(1, 100) > 80;
			},
			'first_period_payment' => function( $v, $data ) {
				return $data['has_first_period_payment'] ? $this->randomDollarAmount(1, 20) : null;
			},
			'first_payment' => function($v, $data) {
				return $data['has_first_period_payment'] ? $this->randomDollarAmount(1, 20) : null;
			},
			'num_payments' => function($v) {
				return $v ?: (rand(1, 100) > 80 ? null : rand(1,5));
			}
		]);

		return $this->ea->create('payment_details', $data);
	}

	private function productVariantQuantity($zero_quantity_scenarios, $values) {
		$should_be_zero = false;
		foreach($zero_quantity_scenarios as $scenario) {
			$matches = true;
			foreach($scenario as $needle) {
				$found = array_filter($values, function($option_value) use($needle) {
					return $option_value['value'] == $needle;
				});
				$matches = $matches && $found;
			}
			$should_be_zero = $should_be_zero || $matches;
		}

		return $should_be_zero ? 0 : rand(1, 100);
	}

	private function createProductVariants($zero_quantity_scenarios, $product_variant_hints, $product, $all_values, $accumulator, $depth) {
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();
		if(empty($all_values)) {
			$unique = nc_random_token();

			$quantity_hint = $this->productVariantQuantity($zero_quantity_scenarios, $accumulator);
			$fallback_quantity = $quantity_hint == 0 ? $quantity_hint : (rand(1, 100) > 50 ? $quantity_hint : null);
			$fallback_price = rand(1, 100) > 50 ? $product['base_price']  + (rand(-200, 200) / 100) : null;

			$pv = $ea->create('product_variants', [
				'product_id' => $product['id'],
				'product_variant_type_id' =>
					nc_g($this->pickBySlug('product_variant_types', 'standard'), 'id'),
				'sku' => "{$product['sku']}-$depth",
				'slug' => strtolower("{$product['sku']}-$depth-$unique"),
				'price' => nc_g($product_variant_hints, 'price', $fallback_price),
				'quantity' => nc_g($product_variant_hints, 'quantity', $fallback_quantity),
				'visible' => nc_g($product_variant_hints, 'visible', true),
				'sequence' => $depth
			]);

			foreach($accumulator as $option_value) {
				$ea->create('product_variant_option_values', [
					'product_variant_id' => $pv['id'],
					'product_option_value_id' => $option_value['id']
				]);
			}
		} else {
			$option_values = array_shift($all_values);
			foreach($option_values as $ov) {
				$this->createProductVariants($zero_quantity_scenarios, $product_variant_hints, $product,
											 $all_values, array_merge([$ov], $accumulator), $depth + 1);
			}
		}
	}

	public function randomProductVariant($criteria = true, $create_params = []) {
		$found = $this->randomProductVariants(1, $criteria, $create_params);
		return $found[0];
	}

	public function randomProductVariants($count, $criteria = true, $create_params = []) {
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		$found = $ea->list('product_variants', $criteria, ['limit' => $count, 'order_by' => 'RAND()']);
		for($i = count($found); $i < $count; $i++) {
			$p = $this->newProduct(['product_variant_hints' => $create_params]);
			$found[] = $this->pickRandom('product_variants', ['product_id' => $p['id']]);
		}

		return $found;
	}


	public function newProductVariant($params = []) {
		$p = $this->newProduct($params);
		return $this->pickRandom('product_variants', ['product_id' => $p['id']]);
	}

	public function resetProductVariantInventory($pv, $pv_quantity, $p_quantity)
	{
		$pv = $this->ea->update('product_variants', $pv, [
			'quantity' => $pv_quantity
		]);

		$p = $this->ea->get('products', ['id' => $pv['product_id']]);
		$p = $this->ea->update('products', $p, [
			'quantity' => $p_quantity
		]);

		return [$pv, $p];
	}

	public function randomOrder($criteria = true, $create_params = []) {
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();

		$found = $ea->get('orders', $criteria, ['limit' => 1, 'order_by' => 'RAND()']);
		return $found ?: $this->newOrder($create_params);
	}

	public function newOrder($params = []) {
		$ea = North_Commerce_Db_Agent::instance()->entityAccess();

		[ $line_items, $params ] = nc_array_pluck($params, 'line_items', []);
		[ $reset_inventory, $params ] = nc_array_pluck($params, 'reset_inventory', true);

		if($line_items === null) {
			$line_items = [];
		} elseif(empty($line_items)) {
			$pvs = $this->randomProductVariants(2, [
				'deleted' => null,
				'product.deleted' => null
			]);
			$line_items = [
				['product_variant' => $pvs[0], 'quantity' => rand(1, 50)],
				['product_variant' => $pvs[1], 'quantity' => rand(1, 50)],
			];
		}


		$prepared_line_items = [];
		foreach($line_items as $li) {
			$pv = $li['product_variant'];
			$prepared_line_items[] = FillInLineItemEffect::run([
				'quantity' => $li['quantity'],
				'product_variant_id' => $pv['id']
			]);

			if($reset_inventory) {
				$this->resetProductVariantInventory($pv, $li['quantity'] + 10, null);
			}
		}

		[ $customer, $params ] = nc_array_pluck($params, 'customer', false);
		if(!$customer) {
			$customer = $this->newCustomer();
		}

		$data = nc_array_kexpand($params, [
			'customer' => function($value) use($customer) {
				$c = $value ? $value : $customer;
				return [ 'customer_id' => $c['id'] ];
			},

			'order_status' => function($value) use($ea) {
				$status = $ea->get('order_statuses', [
					'slug' => $value ? $value : 'created'
				]);
				return [ 'order_status_id' => $status['id'] ];
			},

			'customer_payment_method_id' => function($value) {
				return $value ?: null;
			},

			'payment_status' => function($value) use($ea) {
				$status = $ea->get('payment_statuses', [
					'name' => $value ? $value : "Unpaid"
				]);
				return [ 'payment_status_id' => $status['id'] ];
			},

			'shipping' => function($value) {
				return $value ?: round(rand(1000, 10000) / 100, 2);
			},

			'subtotal' => function($value) use($prepared_line_items) {
				return array_reduce($prepared_line_items, function($carry, $li) {
					return $carry + ($li['amount']);
				});
			},

			'total' => function($value, $data) {
				$shipping = nc_g($data, 'shipping');
				$subtotal = nc_g($data, 'subtotal');
				return $shipping + $subtotal;
			},

			'shipping_address_id' => function($value) use($customer) {
				return $value ? $value : nc_g($this->newAddress(['customer' => $customer]), 'id');
			},

			'billing_address_id' => function($value) use($customer) {
				return $value ? $value : nc_g($this->newAddress(['customer' => $customer]), 'id');
			},

		]);

		$order = $ea->create('orders', $data);

		foreach($prepared_line_items as $li) {
			$ea->create('line_items', ['order_id' => $order['id']] + $li);
		}


		$ea->create('shipping_details', [
			'order_id' => $order['id'],
			'shipping_detail_type_id' => ShippingDetailTypes::planned()->id,
			'tracking_number' => md5(nc_random_token()),
			'rate_type_id' => nc_g($this->pickBySlug('rate_types', 'flat-rate'), 'id'),
			'estimated_delivery' => date('Y-m-d 07:00:00', time() + (60*60*23 * rand(5,10)))
		]);

		foreach($ea->list('order_change_types', [1 => 1]) as $oct) {
			$ea->create('order_changes', [
				'order_id' => $order['id'],
				'order_change_type_id' => $oct['id'],
				'description' => "Good news, we {$oct['name']}",
				'value' => rand(5000, 10000) / 100
			]);
		}

		return $order;
	}

	public function randomCustomerPaymentMethod($criteria = true, $create_params = []) {
		if($criteria == true) {
			$criteria = [
				'brand' => 'Visa',
				'last4' => '1111',
				'token' => ['LIKE', 'cus_%']
			];
		}
		$found = $this->ea->get('customer_payment_methods', $criteria, ['order_by' => 'RAND()']);
		return $found ? $found : $this->newCustomerPaymentMethod($create_params);
	}

	public function newCustomerPaymentMethod($params = []) {
		[ $customer, $params ] = nc_array_pluck($params, 'customer', false);
		[ $provider, $params ] = nc_array_pluck($params, 'provider', 'stripe');

		if(!$customer) {
			$customer = $this->randomCustomer();
		}
		if($provider == 'stripe') {
			$stripe = (new North_Commerce_Stripe())->stripe_client();

			$s_token = $stripe->tokens->create([
				'card' => [
					'number' => '4' . str_repeat('1', 15),
					'exp_month' => rand(1, 12),
					'exp_year' => date('Y') + rand(1, 4),
					'cvc' => rand(100, 999)
				]
			]);

			$s_customer = $stripe->customers->create([
				'email' => $customer['email'],
				'name' => "{$customer['first_name']} {$customer['last_name']}",
				'source' => $s_token->id
			]);
			$details = [
				'token' => $s_customer->id,
				'brand' => $s_token->card->brand,
				'expiration_month' => $s_token->card->exp_month,
				'expiration_year' => $s_token->card->exp_year
			];
		} else {
			$details = [];
		}

		return $this->ea->create('customer_payment_methods', [
			'customer_id' => $customer['id'],
			'payment_provider_id' => $this->pickBySlug('payment_providers', $provider, ['as' => 'id']),
		] + $details);
	}

	public function newOrderTransaction($params = []) {
		[$provider, $params] = nc_array_pluck($params, 'provider', 'stripe');

		$data = nc_array_kexpand($params, [
			'order_transaction_status_id' => function($value) {
				return $value ?: OrderTransactionStatuses::building()->id;
			},
			'customer_payment_method_id' => function($value) use($provider, $params) {
				if($value) {
					return $value;
				} else {
					$cpm = $this->newCustomerPaymentMethod(['provider' => $provider,
															'customer' => nc_g($params, 'customer')]);
					return $cpm['id'];
				}
			},
			'order_id' => function($value, $data) {
				if($value) {
					return $value;
				} else {
					$cpm = $this->ea->get('customer_payment_methods', ['id' => $data['customer_payment_method_id']]);
					$c = $this->ea->get('customers', ['id' => $cpm['customer_id']]);
					$o = $this->newOrder(['customer' => $c,
										  'customer_payment_method_id' => $cpm['id']]);
					return $o['id'];
				}
			},
			'amount' => function($value, $data) {
				$order = $this->ea->get('orders', ['id' => $data['order_id']]);
				return $value ?: $order['total'];
			},
			'identity_token' => function($value) {
				return $value ?: null;
			}
		]);

		return $this->ea->create('order_transactions', $data);
	}

	public function excecuteStripeOrderTransaction($order_transaction)
	{
		$cpm = $this->ea->get('customer_payment_methods', [
			'id' => $order_transaction['customer_payment_method_id']
		]);

		$stripe = new North_Commerce_Stripe();
		$stripe_client = $stripe->stripe_client();
		$methods = $stripe_client->paymentMethods->all([
			'customer' => $cpm['token'],
			'type' => 'card'
		]);
		$method = array_shift($methods->data);

		$stripe_client->paymentIntents->confirm($order_transaction['identity_token'], [
			'payment_method' => $method->id,
			'return_url' => "https://fakeurl.com"
		]);

		return $this->ea->update('order_transactions', $order_transaction, [
			'order_transaction_status_id' => OrderTransactionStatuses::successful()->id
		]);
	}

	public function pickBySlug($table, $slug, $options = [])
	{
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();
		$entity = $ea->get($table, [ 'slug' => $slug ]);
		switch(nc_g($options, 'as')) {
			case 'id':
				return $entity['id'];
			default:
				return $entity;
		}
	}

	public function pickRandom($table, $criteria = [], $options = [])
	{
		$criteria = $criteria ? $criteria : [1 => 1];
		$agent = North_Commerce_Db_Agent::instance();
		$ea = $agent->entityAccess();
		$found = $ea->get($table, $criteria, ['order_by' => 'RAND()']);
		switch(nc_g($options, 'as')) {
			case 'id':
				return $found['id'];
			default:
				return $found;
		}
	}

	public function randomDollarAmount($low, $high) {
		return round(rand($low * 100, $high * 100) / 100, 2);
	}

	public function randomFirstName() {
		return nc_array_rand_value([
			'James', 'Robert', 'John', 'Michael',
			'Mary', 'Patricia', 'Jennifer', 'Linda'
		]);
	}

	public function newShippingProfile($params = [])
	{
		$token = nc_random_token();
		$product_variants = $params['product_variants'] ?? [];
		$data = [
			'name' => $params['name'] ?? esc_html__( 'Test Shipping Profile ', 'north-commerce' ) . $token,
			'is_default' =>	$params['is_default'] ?? 0,
			'shipping_address_id' => $params['shipping_address_id'] ?? $this->newShippingAddress()['id'],
			'all_variants_included' =>  count($product_variants) == 0 ? 1 : 0,
		];

		$sp = $this->ea->create('shipping_profiles', $data);

		foreach($product_variants as $pv) {
			$this->ea->create('shipping_profile_product_variants', [
				'product_variant_id' => $pv['id'],
				'shipping_profile_id' => $sp['id']
			]);
		}

		$zones = $params['zones'] ?? [
			['name' => "Test Zone $token",
			 'locations' => ['US' => [ $token ] ]]
		];

		foreach($zones as $z) {
			$z['shipping_profile_id'] = $sp['id'];
			$this->newShippingZone($z);
		}

		return $sp;
	}

	/**
	 * @version 0.1.24
	 */
	public function newShippingZone( $params = [] ) {
		$token = nc_random_token();

		$sz_type = $params['shipping_zone_type'] ?? ShippingZoneTypes::regional();
		$sz = $this->ea->create('shipping_zones', [
			'shipping_profile_id' => $params['shipping_profile_id'] ??
								   $this->newShippingProfile(['zones' => []])['id'],
			'name' => $params['name'] ?? "Test Zone $token",
			'slug' => $params['slug'] ?? "test-zone-$token",
			'shipping_zone_type_id' => ((array)$sz_type)['id']
		]);

		$locations = $params['locations'] ?? ['US' => ['NM', 'AZ', 'AL']];

		update_option( "north-commerce/shipping_zone_{$sz['id']}", $locations );

		$rates = $params['rates'] ?? [
			['name' => esc_html__( 'Shipping Rate ', 'north-commerce' ) . $token,
			'conditions' => [],
			'conditions_operator' => 'all',
			'fee_flat' => 2.00,
			'fee_percent' => 7.00,
			'price' => rand(2, 100)]
		];

		foreach($rates as $r) {
			$type = $r['type'] ?? 'internal';
			$r['shipping_zone_id'] = $sz['id'];
			switch($type) {
				case 'internal':
					$this->newShippingRateInternal($r);
					break;
				case 'easypost':
					$this->newShippingRateEasypost($r);
					break;
				default:
					throw new DomainException("Unknown type: $type");
			}
		}

		return $sz;
	}

	public function newShippingRateEasypost($params = []) {
		return $this->ea->create('shipping_rates_easypost', [
			'carrier_id' => $params['carrier_id'] ?? 'ca_224d2d1d669a4431a32bd44d67bbb01c',
			'carrier_label' => $params['carrier_label'] ?? 'USPS',
			'services' => json_encode($params['services'] ??
									  ["UPSStandard","UPSSaver","Expedited","Ground"]),
			'future_services' => $params['future_services'] ?? 0,
			'fee_flat' => $params['fee_flat'] ?? 0,
			'fee_percent' => $params['fee_percent'] ?? 0,
			'shipping_zone_id' => $params['shipping_zone_id'] ?? $this->newShippingZone(['rates' => []])['id']
		]);
	}

	public function newShippingRateInternal($params = []) {
		$token = nc_random_token();
		$conditions = $params['conditions'] ?? [];

		$sri = $this->ea->create('shipping_rates_internal', [
			'name' => $params['name'] ?? esc_html__( 'Test Shipping Rate ', 'north-commerce' ) . $token,
			'slug' => $params['name'] ?? "test-shipping-rate-$token",
			'has_conditions' => count($conditions) > 0,
			'conditions_operator' => $params['conditions_operator'] ?? 'all',
			'fee_flat' => $params['fee_flat'] ?? 0,
			'fee_percent' => $params['fee_percent'] ?? 0,
			'price' => $params['price'] ?? rand(2, 100),
			'shipping_zone_id' => $params['shipping_zone_id'] ?? $this->newShippingZone(['rates' => []])['id']
		]);

		foreach($conditions as $c) {
			$this->newShippingRateCondition(['shipping_rate_internal_id' => $sri['id']] + $c);
		}
		return $sri;
	}

	public function newShippingRateCondition($params = []) {
		return $this->ea->create('shipping_rate_conditions', [
			'shipping_rate_internal_id' => $params['shipping_rate_internal_id'] ??
										 $this->newShippingRateInternal(['conditions' =>[]])['id'],
			'shipping_rate_condition_base_id' => $params['base_id'] ??
											   ShippingRateConditionBases::weight()['id'],
			'value_min' => $params['min'] ?? 0,
			'value_max' => $params['max'] ?? 100,
			'value_roles' => $params['roles'] ?? null,
		]);
	}

	public function newShippingAddress($params = []) {
		$street = rand(10,1000) . " " . nc_array_rand_value(['N', 'S', 'E', 'W']) . " " .
				  nc_array_rand_value(['Main', 'Broad', 'Front', 'River']) . " " .
				  nc_array_rand_value(['St', 'Ave', 'Blvd', 'Way']);

		$city = nc_array_rand_value(['Rochester', 'Albany', 'Buffalo', 'Rome', 'Greece',
									 'Westchester']);

		$zips = [
			'Rochester' => 14618,
			'Buffalo' => 14202,
			'Albany' => 12201,
			'Rome' => 13319,
			'Greece' => 14626,
			'Westchester' => 10705
		];

		return $this->ea->create('shipping_addresses', [
			'is_default' => $params['is_default'] ?? 0,
			'address' => $params['address'] ?? $street,
			'city' => $params['city'] ?? $city,
			'state' => $params['state'] ?? 'NY',
			'zipcode'  => $params['zip'] ?? $zips[$city],
			'country_id' => $params['country_id'] ?? $this->ea->get('countries', [
				'abbreviation' => 'US'
		])['id']
		]);
	}

	public function newCoupon($params = []) {
		$type = $params['coupon_discount_type'] ?? CouponDiscountTypes::percent();
		$name = $params['name'] ?? "TC-" . strtoupper($type->slug) . '-' . nc_random_token();
		$slug = $params['slug'] ?? $name;

		return $this->ea->create('coupons', [
			'name' => $name,
			'slug' => $slug,
			'coupon_mode_id' => $params['coupon_mode_id'] ?? CouponModes::manual()->id,
			'coupon_status_id' => $params['coupon_status_id'] ?? CouponStatuses::published()->id,
			'usage_limit' => $params['usage_limit'] ?? null,
			'coupon_discount_type_id' => $type->id,
			'discount_amount' => $params['discount_amount'] ?? 10,
			'requirement_amount' => $params['requirement_amount'] ?? 0,
			'coupon_requirement_id' => $params['coupon_requirement_id'] ?? CouponRequirements::none()->id,
			'any_product' => 1,
			'any_country' => 1,
			'any_customer' => 1,
			'time_start' =>  $params['time_start'] ?? null,
			'time_end' => $params['time_end'] ?? null,
		]);
	}

	public function newPercentOffCoupon($params = []) {
		return $this->newCoupon(['coupon_discount_type' => CouponDiscountTypes::percent()] + $params);
	}

	public function newAmountOffCoupon($params = []) {
		return $this->newCoupon(['coupon_discount_type' => CouponDiscountTypes::percent()] + $params);
	}

	public function newFreeShippingCoupon($params = []) {
		return $this->newCoupon(['coupon_discount_type' => CouponDiscountTypes::freeShipping()] + $params);
	}
}
