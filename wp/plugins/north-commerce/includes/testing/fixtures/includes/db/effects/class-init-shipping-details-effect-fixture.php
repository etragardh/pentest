<?php
/*
 * A PHP file for implementing the fixture to test out our InitShippingDetailsEffect
 */

namespace NorthCommerce\Testing\Fixtures\Includes\Db\Effects;

use NorthCommerce\Db\Collections\OrderTransactionStatuses;
use NorthCommerce\Db\Collections\RateTypes;
use NorthCommerce\Db\Shipping\Shipping_Manager;
use NorthCommerce\Testing\Cleanup;
use NorthCommerce\Testing\Fixture;
use PHPUnit\Framework\Assert;

class Init_Shipping_Details_Effect_Fixture extends Fixture
{

	public $order;
	public $customer;
	public $ship_to;
	public $internal_rate;
	public $easypost_rate;
	public $easypost_service;
	public $easypost_carrier;
	public $ot;

	public function setUp()
	{
		add_filter(Shipping_Manager::EASYPOST_PANIC_HOOK, function($panic) {
			unset($panic);
			return true;
		});

		parent::setUp();

		$p = $this->ef->newProduct([
			'weight' => 5,
			'variants' => []
		]);
		$pv = $this->ea->get('product_variants', ['product_id' => $p['id']]);
		$line_items = [
			['product_variant' => $pv, 'quantity' => 2]
		];

		$this->customer = $this->ef->newCustomer();
		$this->ship_to = $this->ef->newAddress([
			'customer' => $this->customer,
			'addressline1' => "3716 N Virginia Dare Trail",
			'city' => "Kitty Hawk",
			'state' => 'NC',
			'zipcode' => '27949',
			'country_id' => $this->ea->get( 'countries', [ 'abbreviation' => 'US' ] )['id']
		]);

		$this->order = $this->ef->newOrder([
			'shipping_address_id' => $this->ship_to['id'],
			'customer' => $this->customer,
			'line_items' => $line_items
		]);

		$this->ot = $this->ea->create('order_transactions', [
			'order_id' => $this->order['id'],
			'order_transaction_status_id' => OrderTransactionStatuses::building()->id,
			'amount' => $this->order['total']
		]);

		$sp = $this->ef->newShippingProfile(['zones' => []]);
		$sz = $this->ef->newShippingZone([
			'shipping_profile_id' => $sp['id'],
			'locations' => [
				'US' => [ $this->ship_to['state'] ]
			]
		]);

		$this->internal_rate = $this->ef->newShippingRateInternal([
			'shipping_zone_id' => $sz['id']
		]);

		$this->easypost_carrier = 'UPS';
		$this->easypost_service = 'Ground';

		$this->easypost_rate = $this->ef->newShippingRateEasypost([
			'service' => ['Expedited', $this->easypost_service],
			'carrier' => $this->easypost_carrier,
			'shipping_zone_id' => $sz['id']
		]);
	}

	public function tearDown()
	{
		parent::tearDown();
		$test_cleanup = new Cleanup();
		$test_cleanup->scrubShippingProfiles();
	}

	public function assertInternalRateMatches($shipping_details, $internal_rate)
	{
		Assert::assertEquals(RateTypes::flatRate()->id, $shipping_details['rate_type_id']);
		Assert::assertEquals($internal_rate['id'], $shipping_details['shipping_rates_internal_id']);
		Assert::assertNull($shipping_details['shipping_rates_easypost_id']);
		Assert::assertEquals($internal_rate['fee_flat'], $shipping_details['handling_fee']);
		Assert::assertEquals($internal_rate['fee_percent'], $shipping_details['handling_percentage']);
		Assert::assertEquals($internal_rate['price'], $shipping_details['shipping_cost']);
	}

	public function assertEasypostRateMatches($shipping_details, $easypost_rate)
	{
		Assert::assertEquals(RateTypes::calculatedRate()->id, $shipping_details['rate_type_id']);
		Assert::assertEquals($easypost_rate['id'], $shipping_details['shipping_rates_easypost_id']);
		Assert::assertNull($shipping_details['shipping_rates_internal_id']);
		Assert::assertEquals($easypost_rate['fee_flat'], $shipping_details['handling_fee']);
		Assert::assertEquals($easypost_rate['fee_percent'], $shipping_details['handling_percentage']);
		Assert::assertEquals($shipping_details['carrier'], $this->easypost_carrier);
		Assert::assertEquals($shipping_details['service'], $this->easypost_service);
		Assert::assertGreaterThan(0, $shipping_details['shipping_cost']);
	}
}
