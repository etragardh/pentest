<?php
/*
 * A PHP file for being a fixture to test out shipping tests
 */

namespace NorthCommerce\Testing\Fixtures\Includes\Db;

use NorthCommerce\Testing\Fixture;
use PHPUnit\Framework\Assert;

class Shipping_Manager_Fixture extends Fixture
{

	public $token;
	public $product;
	public $product_variant;
	public $order;
	public $line_items;
	public $quantity;
	public $cart;
	public $to_address;

	public function __construct() {
		parent::__construct();
	}

	public function setUp()
	{
		parent::setUp();

		$this->token = nc_random_token();
		$this->quantity = 27;
		$this->product = $this->ef->newProduct([
			'variants' => false,
			'quantity' => $this->quantity + 20
		]);

		$pv = $this->ea->get('product_variants', [
			'product_id' => $this->product['id']
		]);

		$this->order = $this->ef->newOrder([
			'line_items' => [
				['product_variant' => $pv,
				 'quantity' => $this->quantity ]
			]
		]);

		$this->line_items = $this->ea->list('line_items', [
			'order_id' => $this->order['id']
		]);

		$this->product_variant = $this->ea->get('product_variants', [
			'id' => $pv['id']
		]);

		$this->cart = [
			['qty' => $this->quantity,
			 'product_variant_id' => $this->product_variant['id']
			]
		];

		$this->to_address = $this->ea->ref($this->order['shipping_address_id']);
	}

	public function assertCriteriaMatches($criteria)
	{
		Assert::assertEquals($this->product['base_price'] * $this->quantity,
							$criteria->cart_price);

		Assert::assertEquals($this->product['weight'] * $this->quantity,
							$criteria->cart_weight);

		Assert::assertEquals([$this->product_variant],
							 $criteria->product_variants);

		$ship_to = $this->ea->ref($this->order['shipping_address_id']);
		$country = $this->ea->get('countries', ['id' => $ship_to['country_id']]);
		Assert::assertEquals($country['abbreviation'], $criteria->to_address['country']);
	}

}
