<?php
/*
 * A PHP file for cleaning up our tests after they have finished
 * running
 */

namespace NorthCommerce\Testing;

use North_Commerce_Db_Agent;
use WP_Query;

class Cleanup
{

	public function scrubWpUsers()
	{
		require_once(ABSPATH . "./wp-admin/includes/user.php");
		$all = get_users([
			'meta_key' => NORTH_COMMERCE_SOURCE_META,
			'meta_value' => NORTH_COMMERCE_SOURCE_UNIT_TEST_VALUE,
			'role' => 'Subscriber'
		]);

		foreach($all as $u) {
			wp_delete_user($u->ID);
		}
	}

	public function scrubWpPages() {
		$q = new WP_Query([
			'numberposts' => -1,
			'post_type' => 'page',
			'meta_key' => NORTH_COMMERCE_SOURCE_META,
			'meta_value' => NORTH_COMMERCE_SOURCE_UNIT_TEST_VALUE
		]);
		foreach($q->posts as $p) {
			wp_delete_post($p->ID, true);
		}
	}

	public function scrubProducts()
	{
		$cleanup_orphaned_products = false;
		$agent = North_Commerce_Db_Agent::instance();
		$ea    = $agent->entityAccess();

		$users = get_users([
			'meta_key' => NORTH_COMMERCE_SOURCE_META,
			'meta_value' => NORTH_COMMERCE_SOURCE_UNIT_TEST_VALUE,
			'role' => 'Subscriber'
		]);

		foreach($users as $u) {
			$ea->delete('products', [
				'created_by_wp_user_id' => $u->ID
			], ['recursive' => true]);
		}

		if($cleanup_orphaned_products) {
			$all_products = $ea->list('products', [1 => 1]);
			foreach($all_products as $p) {
				$u = get_user_by('ID', $p['created_by_wp_user_id']);
				if(!$u) {
					$ea->delete('products', ['id' => $p['id']], ['recursive' => true]);
				}
			}
		}

	}

	public function scrubCustomers()
	{
		$agent = North_Commerce_Db_Agent::instance();
		$ea    = $agent->entityAccess();
		$ea->delete('customers', [
			'email' => ['LIKE', "%@" . NORTH_COMMERCE_TEST_DOMAIN]
		], ['recursive' => true]);
	}


	public function scrubShippingProfiles()
	{
		$agent = North_Commerce_Db_Agent::instance();
		$ea    = $agent->entityAccess();
		$ea->delete('shipping_profiles', [
			'name' => ['LIKE', "Test Shipping Profile %"]
		], ['recursive' => true]);
	}

}
