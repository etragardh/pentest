<?php

use NorthCommerce\Db\{
	AutomationManager,
	WebhookManager
};
use NorthCommerce\Api\Coupon_Helper;
use NorthCommerce\RedirectHandlerManager;

/**
 * The core plugin class.
 *
 * This is used to define internationalization, admin-specific hooks, and
 * public-facing site hooks.
 *
 * Also maintains the unique identifier of this plugin as well as the current
 * version of the plugin.
 *
 * @package north-commerce/includes
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.0
 * @version 0.1.25
 */
class North_Commerce {

	/** @var North_Commerce_Loader $loader Maintains and registers all hooks for the plugin. */
	protected $loader;

	/** @var string $plugin_name The Unique identifier of this plugin. */
	protected $plugin_name;

	/** @var string $version The current version of the plugin. */
	protected $version;

	/**
	 * Define the core functionality of the plugin.
	 */
	public function __construct() {
		$this->plugin_name = 'north-commerce';
		$this->version = defined( 'NORTH_COMMERCE_VERSION' ) ? NORTH_COMMERCE_VERSION : '0.1.0';

		$this->load_dependencies();
		do_action( 'north-commerce/dependencies/loaded' );

		$this->set_locale();
		$this->define_admin_hooks();
		$this->define_public_hooks();
	}

	/**
	 * Load the required dependencies for this plugin.
	 *
	 * @version 0.1.24
	 */
	private function load_dependencies() {

		$dir_path = plugin_dir_path( dirname( __FILE__ ) );

		/**
		 * The class settings utils functions
		 */
		require_once $dir_path . 'admin/core/utils/north-setting-utils-functions.php';

		/**
		 * The file where we define utils functions
		 */
		require_once $dir_path . 'admin/core/utils/north-extending-wp-features.php';

		/**
		 * The class responsible for orchestrating the actions and filters of the
		 * core plugin.
		 */
		require_once $dir_path . 'includes/class-north-commerce-loader.php';

		/**
		 * The class responsible for handling template includes for the core plugin.
		 */
		require_once $dir_path . 'includes/class-north-commerce-template-loader.php';

		/**
		 * The class responsible for defining internationalization functionality
		 * of the plugin.
		 */
		require_once $dir_path . 'includes/class-north-commerce-i18n.php';

		/**
		 * The class responsible for defining setting up permalinks for our site
		 */
		require_once $dir_path . 'includes/class-north-commerce-permalinks.php';

		/**
		 * Library functions
		 */
		require_once $dir_path . 'includes/lib/north-commerce-array-functions.php';
		require_once $dir_path . 'includes/lib/north-commerce-string-functions.php';
		require_once $dir_path . 'includes/lib/north-commerce-wp-functions.php';

		/** Models for DB data manipulation. */
		$this->_require_models( $dir_path );

		/**
		 * The classes responsible for working with the database
		 */
		require_once $dir_path . 'includes/db/class-north-commerce-db-generator.php';
		require_once $dir_path . 'includes/db/class-north-commerce-db-cache.php';
		require_once $dir_path . 'includes/db/class-north-commerce-db-agent.php';
		require_once $dir_path . 'includes/db/class-north-commerce-db-updater.php';
		require_once $dir_path . 'includes/db/class-north-commerce-db-introspector.php';
		require_once $dir_path . 'includes/db/class-north-commerce-db-entity-access.php';
		require_once $dir_path . 'includes/db/class-north-commerce-db-expander.php';
		require_once $dir_path . 'includes/db/class-north-commerce-db-parser.php';


		require_once $dir_path . '/includes/resources/order/class-order-single-admin-resource.php';

        /**
         * The class use for setting up rewrites / permalinks
         */
        require_once $dir_path . 'includes/class-north-commerce-rewrites.php';

		require_once $dir_path . 'admin/class-north-commerce-admin-base.php';

		/**
		 * The class responsible for defining public functionality
		 */
		require_once $dir_path . 'public/class-north-commerce-public.php';

        /** Order controller class. */
        require_once $dir_path . 'admin/class-north-commerce-order.php';

		/** Orders controller class. */
        require_once $dir_path . 'admin/class-north-commerce-orders.php';

        /** Product controller class. */
        require_once $dir_path . 'admin/class-north-commerce-product.php';

        /** Customer controller class. */
        require_once $dir_path . 'admin/class-north-commerce-customer.php';

		/** User class. */
        require_once $dir_path . 'admin/class-north-commerce-user.php';

		/** Action Scheduler class */
		require_once $dir_path . 'admin/class-north-commerce-event-log.php';

		/** Webhook class */
		require_once $dir_path . 'admin/class-north-commerce-webhooks.php';

		/** Shipping Profile controller class. */
		require_once $dir_path . 'admin/class-north-commerce-shipping-profile.php';

		/** Coupon controller class. */
        require_once $dir_path . 'admin/class-north-commerce-coupon.php';

        /** The class responsible for adding deactivating popup feedback. */
        require_once $dir_path . 'admin/class-north-commerce-deactivate-popup.php';

		/**
		 * The class responsible for defining all actions that occur in the admin area.
		 */
		require_once $dir_path . 'admin/class-north-commerce-admin.php';

		/** The class responsible for overview */
		require_once $dir_path . 'admin/class-north-commerce-overview.php';

		/** The class responsible for overview model */
		require_once $dir_path . 'admin/core/models/overview-model.php';

		/** The class responsible for integrations */
		require_once $dir_path . 'admin/class-north-commerce-integration.php';

		/** The class responsible for defining north forms. */
		require_once $dir_path . 'admin/class-north-commerce-forms.php';

		/** Notification template variables class. */
		require_once $dir_path . 'admin/class-north-commerce-notification-template-variables.php';

		/** Notifications controller class. */
		require_once $dir_path . 'admin/class-north-commerce-notification.php';

		/** Notification Events controller class. */
		require_once $dir_path . 'admin/class-north-commerce-notification-event.php';

		/** The class responsible for integrations */
		require_once $dir_path . 'admin/core/integration/class-north-integration-factory.php';

		/** Integrations interface */
		require_once $dir_path . 'admin/core/integration/interface-north-integration.php';

		/** Mailchimp integration */
		require_once $dir_path . 'admin/core/integration/services/class-north-mailchimp.php';

		/** PayPal integration */
		require_once $dir_path . 'admin/core/integration/services/class-north-paypal.php';

		/** Stripe integration */
		require_once $dir_path . 'admin/core/integration/services/class-north-stripe.php';

		/** Twilio integration */
		require_once $dir_path . 'admin/core/integration/services/class-north-twilio.php';

		/** Mollie integration */
		require_once $dir_path . 'admin/core/integration/services/class-north-mollie.php';

		/** EasyPost integration */
		require_once $dir_path . 'admin/core/integration/services/class-north-easypost.php';

		/** Google Place Autocomplete integration */
		require_once $dir_path . 'admin/core/integration/services/class-north-google-place-autocomplete.php';

		/** Integration addons palceholders */
		$this->_require_addon_placeholder_classes( $dir_path );

		/** Settings controller class. */
		require_once $dir_path . 'admin/class-north-commerce-settings.php';

		/** The class query utils functions */
		require_once $dir_path . 'admin/core/utils/north-query-utils.php';

		/** The class wp_image_editor */
		require_once $dir_path . 'admin/core/utils/north-image-editor.php';

		/** North form db controller class. */
		require_once $dir_path . 'rest/data/north-db-form-controller.php';

		/** REST controller. */
		require_once $dir_path . 'rest/api/north-rest-controller.php';

		/**
		 * Pull in rest data api
		 */
		require_once $dir_path . 'includes/api/class-north-commerce-api-validator.php';
		require_once $dir_path . 'includes/api/class-north-commerce-api-parser.php';
		require_once $dir_path . 'includes/api/class-north-commerce-api-db-helper.php';
		require_once $dir_path . 'includes/api/class-north-commerce-api-pager.php';
		require_once $dir_path . 'includes/api/class-north-commerce-api-responder.php';
		require_once $dir_path . 'rest/api/class-north-commerce-rest-data-api.php';

        /** Including stripe */
        require_once $dir_path . 'libs/Stripe/init.php';

		/** Including Twilio Autoload */
        require_once $dir_path . 'libs/Twilio/src/Twilio/autoload.php';

	    /** Including Mollie Autoload */
        require_once $dir_path . 'libs/Mollie/vendor/autoload.php';

		/** Including easypost */
        require_once $dir_path . 'libs/EasyPost/lib/easypost.php';

		/** Including action-scheduler */
		require_once $dir_path . 'libs/ActionScheduler/action-scheduler.php';

		$this->loader = new North_Commerce_Loader();

		AutomationManager::instance()->setup();
		RedirectHandlerManager::instance()->setup();
		WebhookManager::instance()->setup();

	}

	/**
	 * Models for DB data manipulation.
	 *
	 * @since 0.1.13
	 */
	private function _require_models( $dir_path ) {
		$models = glob( $dir_path . 'includes/models/class-*.php' );
		foreach ( $models as $model ) {
			require_once $model;
		}
	}

	/**
	 * Integration addons palceholders.
	 *
	 * @since 0.1.24
	 */
	private function _require_addon_placeholder_classes( $dir_path ) {
		$placeholders = glob( $dir_path . 'admin/core/integration/placeholders/class-*.php' );
		foreach ( $placeholders as $placeholder ) {
			require_once $placeholder;
		}
	}

	/**
	 * Define the locale for this plugin for internationalization.
	 *
	 * @since 0.1.0
	 */
	private function set_locale() {
		$plugin_i18n = new North_Commerce_i18n();
		$this->loader->add_action( 'plugins_loaded', $plugin_i18n, 'load_plugin_textdomain' );
	}

	/**
	 * Register all of the hooks related to admin area functionality.
	 *
	 * @version 0.1.25
	 */
	private function define_admin_hooks() {
		$plugin_admin = new North_Commerce_Admin( $this->get_plugin_name(), $this->get_version() );
		$this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_styles' );
		$this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_scripts' );
		$this->loader->add_action( 'admin_menu', $plugin_admin, 'admin_menu' );
        $this->loader->add_filter( 'plugins_api', $plugin_admin, 'north_plugin_info', 20, 3 );
        $this->loader->add_filter( 'site_transient_update_plugins', $plugin_admin, 'north_push_update' );
        $this->loader->add_action( 'upgrader_process_complete', $plugin_admin, 'north_after_update', 10, 2 );
		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_install_addon', $plugin_admin, 'install_addon' );
		}

		$paypal = new North_Commerce_Paypal();
		$stripe = new North_Commerce_Stripe();
		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_stripe_disconnect', $stripe, 'disconnect' );
			$this->loader->add_action( 'wp_ajax_paypal_disconnect', $paypal, 'disconnect' );
		}

		// Overview
		$overview = new North_Commerce_Overview();
		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_get_overview_info', $overview, 'get_overview_info' );
		}

		// Integration
		$integration = new North_Commerce_Integration();
		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_enable_integration', $integration, 'enable_integration' );
			$this->loader->add_action( 'wp_ajax_disable_integration', $integration, 'disable_integration' );
			$this->loader->add_action( 'wp_ajax_get_integration_form_fields', $integration, 'get_integration_form_fields' );
			$this->loader->add_action( 'wp_ajax_toggle_integration', $integration, 'toggle_integration' );
		}

		// Query Utils
		$query_utils = new North_Query_Utils();
		$this->loader->add_action( 'pre_get_posts', $query_utils, 'search_on_title_or_meta' );

		// Settings
		$settings = new North_Commerce_Settings();
		$this->loader->add_action( 'init', $settings, 'maybe_create_pages' );
		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_upload_cart_icon_svg', $settings, 'upload_cart_icon_svg' );
			$this->loader->add_action( 'wp_ajax_upload_company_logo_image', $settings, 'upload_company_logo_image' );
			$this->loader->add_action( 'wp_ajax_delete_company_logo_image', $settings, 'delete_company_logo_image' );
		}

		// Permalinks
		$permalinks = new North_Commerce_Permalinks();
		$this->loader->add_action( 'init', $permalinks, 'on_init' );

		// REST API
		$rest = new North_Rest_Conrtoller();
		$this->loader->add_action( 'rest_api_init', new North_Commerce_Rest_Data_Api(), 'registerRoutes' );
		$this->loader->add_action( 'rest_api_init', $rest, 'register_routes' );
		$this->loader->add_action( 'rest_api_init', $rest, 'disable_cors' );

		// Products
		$product = new North_Commerce_Product();
		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_create_product', $product, 'create_product' );
			$this->loader->add_action( 'wp_ajax_update_product', $product, 'update_product' );
			$this->loader->add_action( 'wp_ajax_delete_product', $product, 'delete_product' );
			$this->loader->add_action( 'wp_ajax_delete_products', $product, 'delete_products' );
			$this->loader->add_action( 'wp_ajax_duplicate_product', $product, 'duplicate_product' );
			$this->loader->add_action( 'wp_ajax_update_product_permalink', $product, 'update_permalink' );
			$this->loader->add_action( 'wp_ajax_get_products', $product, 'get_products' );
			$this->loader->add_action( 'wp_ajax_update_product_status', $product, 'update_status' );
			$this->loader->add_action( 'wp_ajax_update_products_statuses', $product, 'update_statuses' );
			$this->loader->add_action( 'wp_ajax_synchronize_payments_plans', $product, 'synchronize_payments_plans' );
		}
		$this->loader->add_action( 'wp_delayed_publishing', $product, 'scheduled_publishing' );

		// Orders
		$order = new North_Commerce_Order();
		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_get_orders', $order, 'get_orders' );
			$this->loader->add_action( 'wp_ajax_update_orders_status', $order, 'update_orders_status' );
			$this->loader->add_action( 'wp_ajax_update_customer_name', $order, 'update_customer_name' );
			$this->loader->add_action( 'wp_ajax_update_customer_information', $order, 'update_customer_information' );
			$this->loader->add_action( 'wp_ajax_refund_order', $order, 'refund_order' );
		}

		// Notifications
		$notification = new North_Commerce_Notification();
		new North_Commerce_Notification_Event();
		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_toggle_notification_email', $notification, 'toggle_notification_email' );
			$this->loader->add_action( 'wp_ajax_toggle_notification_sms', $notification, 'toggle_notification_sms' );
			$this->loader->add_action( 'wp_ajax_toggle_desktop_notifications', $notification, 'toggle_desktop_notifications' );
			$this->loader->add_action( 'wp_ajax_update_notification', $notification, 'update_notification' );
			$this->loader->add_action( 'wp_ajax_build_test_email', $notification, 'build_test_email' );
			$this->loader->add_action( 'wp_ajax_build_test_sms', $notification, 'build_test_sms' );
			$this->loader->add_action( 'wp_ajax_send_test_email', $notification, 'send_test_email' );
			$this->loader->add_action( 'wp_ajax_send_test_sms', $notification, 'send_test_sms' );
		}
		$this->loader->add_action( 'send_notifications', $notification, 'send_notifications' );

		// Coupons
		if ( wp_doing_cron() || wp_doing_ajax() || ( isset( $_GET['page'] ) && 'action-scheduler' === $_GET['page'] ) ) {
			$this->loader->add_action( 'nc_coupon_status_change', Coupon_Helper::instance(), 'change_coupon_status' );
		}

		$forms = new North_Commerce_Forms();
		$this->loader->add_action( 'init', $forms, 'register_shortcode' );
		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_get_forms_by_params', $forms, 'get_forms_by_params' );
			$this->loader->add_action( 'wp_ajax_delete_form', $forms, 'delete_form' );
			$this->loader->add_action( 'wp_ajax_duplicate_form', $forms, 'duplicate_form' );
		}

		// Shipping Profile
		$shipping_profile = new North_Commerce_Shipping_Profile();
		$this->loader->add_action( 'init', $shipping_profile, 'ensure_default_shipping_profile' );

		// Customers
		$customer = new North_Commerce_Customer();
		$this->loader->add_action( 'wp_ajax_get_customers_admin_ui', $customer, 'get_customers_admin_ui' );

		// Users
		$user = new North_Commerce_User();
		// $this->loader->add_action( 'wp_ajax_get_customers', $customer, 'get_customers' );
		// $this->loader->add_action( 'wp_ajax_get_customers_admin_ui', $customer, 'get_customers_admin_ui' );

		// Action Scheduler
		$event_log = new North_Commerce_Event_Log();
		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_north_actions_pagination', $event_log, 'pagination_callback' );
			$this->loader->add_action( 'wp_ajax_nopriv_north_actions_pagination', $event_log, 'pagination_callback' );
		}

		// Webhooks
		$webhooks = new North_Commerce_Webhooks();
		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_load_webhooks', $webhooks, 'load_webhooks_ajax' );
			$this->loader->add_action( 'wp_ajax_nopriv_load_webhooks', $webhooks, 'load_webhooks_ajax' );
			$this->loader->add_action( 'wp_ajax_delete_webhook', $webhooks, 'delete_webhook_ajax' );
			$this->loader->add_action( 'wp_ajax_nopriv_delete_webhook', $webhooks, 'delete_webhook_ajax' );
		}

		add_action(
			AutomationManager::AUTOMATION_PERFORMED_ACTION,
			function ( $automation, $method, $duration, $args ) {
				$uri = $_SERVER['REQUEST_URI'];
				if ( $duration > .25 ) {
					$friendly_args = [];
					foreach ( $args as $k => $v ) {
						$friendly_args[] = is_array( $v ) ? ('[' . implode( ',', $v ) . ']') : $v;
					}
					$friendly_args_str = implode(', ',  $friendly_args);
					$class_name = basename(str_replace('\\', '/', $automation));
					error_log("{$duration} sec  $uri $class_name.$method($friendly_args_str)");
				}
			},
			10,
			4
		);
	}

	/**
	 * Register all of the hooks related to the plugin public-facing functionality.
	 *
	 * @version 0.1.24
	 */
	private function define_public_hooks() {

		$plugin_public = new North_Commerce_Public( $this->get_plugin_name(), $this->get_version() );
		$product_obj = new North_Commerce_Product();
		$user_obj = new North_Commerce_User();

		$this->loader->add_action( 'init', $plugin_public, 'register_public_shortcodes' );
		$this->loader->add_action( 'wp_enqueue_scripts', $plugin_public, 'enqueue_styles' );
		$this->loader->add_action( 'wp_enqueue_scripts', $plugin_public, 'enqueue_scripts' );

		if ( wp_doing_ajax() ) {
			$this->loader->add_action( 'wp_ajax_get_product', $plugin_public, 'get_product' );
			$this->loader->add_action( 'wp_ajax_nopriv_get_product', $plugin_public, 'get_product' );
			$this->loader->add_action( 'wp_ajax_paypal_payment_process', $plugin_public, 'paypal_payment_process' );
			$this->loader->add_action( 'wp_ajax_nopriv_paypal_payment_process', $plugin_public, 'paypal_payment_process' );
			$this->loader->add_action( 'wp_ajax_paypal_order_create', $plugin_public, 'paypal_order_create' );
			$this->loader->add_action( 'wp_ajax_nopriv_paypal_order_create', $plugin_public, 'paypal_order_create' );
			$this->loader->add_action( 'wp_ajax_stripe_payment_process', $plugin_public, 'stripe_payment_process' );
			$this->loader->add_action( 'wp_ajax_nopriv_stripe_payment_process', $plugin_public, 'stripe_payment_process' );
			$this->loader->add_action( 'wp_ajax_payment_buttons', $plugin_public, 'payment_buttons' );
			$this->loader->add_action( 'wp_ajax_nopriv_payment_buttons', $plugin_public, 'payment_buttons' );
			$this->loader->add_action( 'wp_ajax_mollie_payment_process', $plugin_public, 'mollie_payment_process' );
			$this->loader->add_action( 'wp_ajax_nopriv_mollie_payment_process', $plugin_public, 'mollie_payment_process' );
			$this->loader->add_action( 'wp_ajax_zero_price_payment_process', $plugin_public, 'zero_price_payment_process' );
			$this->loader->add_action( 'wp_ajax_nopriv_zero_price_payment_process', $plugin_public, 'zero_price_payment_process' );

			$this->loader->add_action( 'wp_ajax_get_more_products', $product_obj, 'get_more_products' );
			$this->loader->add_action( 'wp_ajax_nopriv_get_more_products', $product_obj, 'get_more_products' );
			$this->loader->add_action( 'wp_ajax_get_variant_options_map', $product_obj, 'get_variant_options_map' );
			$this->loader->add_action( 'wp_ajax_nopriv_get_variant_options_map', $product_obj, 'get_variant_options_map' );

			$this->loader->add_action( 'wp_ajax_get_public_current_user_addresses', $user_obj, 'get_public_current_user_addresses' );
		}

		$this->loader->add_action( 'wp_footer', $plugin_public, 'handle_showing_cart_drawer' );

		$this->loader->add_action( 'wp_nav_menu_objects', $plugin_public, 'add_menu_cart_icon' );
		$this->loader->add_action( 'render_block_core/navigation-link', $plugin_public, 'add_menu_cart_icon_for_gutenberg', 10, 3 );

	}

	/**
	 * Run the loader to execute all of the hooks with WordPress.
	 *
	 * @since 0.1.0
	 */
	public function run() {
		$this->loader->run();
	}

	/**
	 * The name of the plugin used to uniquely identify it within the context of
	 * WordPress and to define internationalization functionality.
	 *
	 * @since   0.1.0
	 * @return  string  The name of the plugin.
	 */
	public function get_plugin_name() {
		return $this->plugin_name;
	}

	/**
	 * The reference to the class that orchestrates the hooks with the plugin.
	 *
	 * @since   0.1.0
	 * @return  North_Commerce_Loader  Orchestrates the hooks of the plugin.
	 */
	public function get_loader() {
		return $this->loader;
	}

	/**
	 * Retrieve the version number of the plugin.
	 *
	 * @since   0.1.0
	 * @return  string  The version number of the plugin.
	 */
	public function get_version() {
		return $this->version;
	}

}
