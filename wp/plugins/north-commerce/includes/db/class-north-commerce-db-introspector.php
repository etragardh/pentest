<?php
/*
 * A PHP file for introspecting our database. That is, looking
 * at our database from the code perspective to see what
 * tables, columns, etc. exist
 */

class North_Commerce_Db_Introspector
{
	public function tablesWithPrefix($prefix)
	{
		$agent = North_Commerce_Db_Agent::instance();
		return $agent->withDb(function($wpdb) use($prefix) {
			return $wpdb->get_col($wpdb->prepare("show tables like %s", "{$prefix}%"));
		});
	}

	public function tableColumns($table_name, $options = [])
	{
		$agent = North_Commerce_Db_Agent::instance();
		$data = $agent->withDb(function($wpdb) use($table_name) {
			return $wpdb->get_results("explain $table_name",
									  ARRAY_A);
		});

		$cols = array_map(function($row) {
			$index = $row['Key'];
			$default = $row['Default'];
			return [
				'name' => $row['Field'],
				'type' => strtoupper($row['Type']),
				'index' => $index ? $index : false,
				'default' => $default
			];
		}, $data);

		switch(($as = nc_g($options, 'as'))) {
			case 'type_map':
			case 'index_map':
			case 'default_map':
				$type = str_replace('_map', '', $as);
				return array_reduce($cols, function($carry, $col) use($type) {
					$carry[$col['name']] = $col[$type];
					return $carry;
				}, []);
				break;

			default:
				return $cols;
		}
	}

	public function currentDatabase()
	{
		$agent = North_Commerce_Db_Agent::instance();
		return $agent->getVar("SELECT DATABASE();");
	}

	public function foreignKeyConstraintName($table, $column, $options = [])
	{
		$refs = $this->tableReferences($table, $options);
		foreach($refs as $ref) {
			if($ref['table_name'] == $table && $ref['col_name'] == $column) {
				return $ref['constraint_name'];
			}
		}
		return false;
	}

	public function tableReferences($table, $options =[])
	{
		$agent = North_Commerce_Db_Agent::instance();
		$cache = $agent->cache();
		return $cache->value("db.introspector.tableReferences.$table", function() use($table, $agent, $options) {
			$db  = $this->currentDatabase();
			$prefix = nc_g($options, 'prefix', $agent->schema()->getTablePrefix());

			$sql = <<<EOF
		  SELECT
			  REFERENCED_TABLE_NAME AS ref_table_name,
			  REFERENCED_COLUMN_NAME AS ref_col_name,
			  TABLE_NAME AS table_name,
			  COLUMN_NAME AS col_name,
              CONSTRAINT_NAME as constraint_name
		  FROM
			  INFORMATION_SCHEMA.KEY_COLUMN_USAGE
		  WHERE
			  REFERENCED_TABLE_SCHEMA = %s
			  AND (REFERENCED_TABLE_NAME = %s OR TABLE_NAME = %s)
EOF;
			$rows = $agent->getResults($sql, [$db, "$prefix$table", "$prefix$table"]);
			foreach($rows as $i => $row) {
				$rows[$i]['ref_table_name'] = preg_replace("/^$prefix/", "", $row['ref_table_name']);
				$rows[$i]['table_name'] = preg_replace("/^$prefix/", "", $row['table_name']);
			}
			return $rows;
		});
	}

	public function reduceForeignKeys($table, $entity, $callback, $init, $options = [])
	{
		$agent = North_Commerce_Db_Agent::instance();
		$ea    = $agent->entityAccess();
		$carry = $init;

		if ( $entity ) {
			$refs = array_filter(
				$this->tableReferences( $table ),
				function( $ref ) use ( $table ) {
					return $ref['ref_table_name'] == $table;
				}
			);

			foreach ( $refs as $ref ) {
				$ref_entities = $ea->list( $ref['table_name'], [
					$ref['col_name'] => $entity['id']
				] );

				foreach( $ref_entities as $ref_entity ) {
					$carry = $this->reduceForeignKeys( $ref['table_name'], $ref_entity, $callback, $carry, $options );
				}
			}

			return $callback( $carry, $table, $entity );
		} else {
			return $carry;
		}
	}
}
