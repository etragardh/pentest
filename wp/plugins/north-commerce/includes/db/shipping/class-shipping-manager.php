<?php
namespace NorthCommerce\Db\Shipping;

use NorthCommerce\Db\Collections\{
	ShippingRateConditionBases,
	ShippingDetailTypes,
	OrderStatuses,
	RateTypes
};
use NorthCommerce\Models\ShippingProfileModel;
use North_Commerce_Db_Agent;
use North_Commerce_Db_Cache;
use North_Commerce_Easypost;
use NcNotFoundException;
use UnexpectedValueException;

/**
 * Shipping manager for working with shipping related tables
 *
 *
 * @package north-commerce/admin/core/integrations
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @version 0.1.24
 */
class Shipping_Manager {

	const EASYPOST_PANIC_HOOK = 'nc_shipping_manager_easypost_panic';
	const CACHE_TTL = 60 * 3;

	private static $me;
	private $ea;
	private $cache;
	private $sz_helper;

	public static function instance(): Shipping_Manager {
		if ( ! self::$me ) {
			self::$me = new Shipping_Manager();
		}
		return self::$me;
	}

	private function __construct() {
		$agent = North_Commerce_Db_Agent::instance();
		$this->ea = $agent->entityAccess();
		$this->cache = $agent->cache();
		$this->sz_helper = new Shipping_Zone_Helper();
	}

	public function isAddressComplete( $address ) {
		$required = [
			['address', 'street1', 'street'],
			['city'],
			['state'],
			['zip', 'zip_code'],
			['country']
		];

		foreach ( $required as $one_of ) {
			$found = array_reduce(
				$one_of,
				function ( $carry, $key ) use ( $address ) {
					return $carry || ( trim( $address[ $key ] ?? '' ) );
				},
				false
			);

			if ( ! $found ) {
				return false;
			}
		}

		return true;
	}

	public function shippingCriteriaByOrder($order) {
		$line_items = $this->ea->list('line_items', [
			'order_id' => $order['id']
		]);

		$to_address = $this->ea->ref($order['shipping_address_id']);
		return $this->shippingCriteriaByLineItems($to_address, $line_items);
	}

	public function shippingCriteriaByCart( $to_address, $cart_items ) {
		$line_items = array_map(
			function( $cart_item ) {
				return [
					'product_variant_id' => $cart_item['product_variant_id'],
					'quantity' => $cart_item['qty']
				];
			},
			$cart_items
		);

		return $this->shippingCriteriaByLineItems( $to_address, $line_items );
	}

	/**
	 * @version 0.1.24
	 */
	public function shippingCriteriaByLineItems( $to_address, $line_items ) {
		$cart_price = 0;
		$cart_weight = 0;
		$product_variants = [];

		foreach( $line_items as $li ) {
			$pv = $this->ea->get( 'product_variants', [ 'id' => $li['product_variant_id' ] ] );
			$qty = $li['quantity'];
			$product = $this->ea->get( 'products', [ 'id' => $pv['product_id' ] ] );

			if ( $product['has_product_variants'] ) {
				$cart_price += ( $pv['price'] === null ? $product['base_price'] : $pv['price'] ) * $qty;
			} else {
				$cart_price += $product['base_price'] * $qty;
			}

			if ( $product['is_physical_product'] ) {
				$cart_weight += $product['weight'] * $qty;
				$product_variants[] = $pv;
			}
		}

		$to_address = $this->normalizeAddress( $to_address );

		return new Shipping_Criteria( $product_variants, $cart_weight, $cart_price, $to_address );
	}

	public function normalizeAddress( $to_address ) {
		if ( $to_address['country_id'] ?? false ) {
			$country = $this->ea->get( 'countries', [
				'id' => $to_address['country_id']
			] );

			return [
				'street1' => $to_address['addressline1'],
				'city' => $to_address['city'],
				'state' => $to_address['state'],
				'zip' => $to_address['zipcode'],
				'country' => $country['abbreviation']
			];
		} else {
			return $to_address;
		}
	}

	public function purchaseShippingLabel( $order_id, $rate_id, $shipment_id ) {
		$easypost_shipment = $this->createEasypostLabel( $rate_id, $shipment_id );
		$shipping_details = $this->ea->create( 'shipping_details', [
			'order_id' => $order_id,
			'rate_type_id' => RateTypes::calculatedRate()->id,
			'tracking_number' => $easypost_shipment['tracker']['public_url'],
			'estimated_delivery' => $easypost_shipment['selected_rate']['delivery_days'],
			'shipping_cost' => $easypost_shipment['selected_rate']['rate'],
			'carrier' => $easypost_shipment['selected_rate']['carrier'],
			'shipping_label_url' => $easypost_shipment['postage_label']['label_url'],
			'shipping_detail_type_id' => ShippingDetailTypes::actual()->id,
		] );

		$order = $this->ea->ref( $order_id );
		$order = $this->ea->update( 'orders', $order, [
			'order_status_id' => OrderStatuses::fulfilled()->id
		] );

		return $shipping_details;
	}

	private function createEasypostLabel($rate_id, $shipment_id) {
		$easyPostIntegration = new North_Commerce_Easypost();
		$easyPostKey = $easyPostIntegration->get_api_key();

		$request_data = array(
			'rate'=> array(
				'id' => $rate_id
			)
		);

		$url = 'https://api.easypost.com/v2/shipments/' . $shipment_id . '/buy';
		$body = wp_json_encode( $request_data );
		$headers = array(
			'Content-Type' => 'application/json',
		);

		$username = $easyPostKey;
		$password = '';
		$auth = base64_encode($username . ':' . $password);
		$headers['Authorization'] = 'Basic ' . $auth;

		$response = wp_remote_post( $url, array(
			'headers' => $headers,
			'body'    => $body,
		));

		if (is_wp_error( $response )) {
			throw new UnexpectedValueException("Internal Error. Try again (" . $response->get_error_message() . ")");
		}

		$response_code = wp_remote_retrieve_response_code( $response );
		$doc = json_decode(wp_remote_retrieve_body( $response ), true);

		if ($response_code != 200) {
			$message = $doc['error']['message'] ?? "Unknown Error: $response_code";
			throw new UnexpectedValueException($message);
		}
		return $doc;
	}

	/**
	 * Given criteria, what are the shipping options?
	 *
	 * @version 0.1.24
	 * @return Shipping_Option[]
	 */
	public function availableOptions( Shipping_Criteria $shipping_criteria ): array {
		return $this->cache->value(
			$shipping_criteria->cacheKey(),
			function() use ( $shipping_criteria ) {
				$options = [];
				$shipping_profile_model = new ShippingProfileModel();
				$shipping_profiles = $shipping_profile_model->list();

				$to_address = $shipping_criteria->to_address;
				$cart_weight = $shipping_criteria->cart_weight;
				$cart_price = $shipping_criteria->cart_price;
				$product_variants = $shipping_criteria->product_variants;

				foreach ( $shipping_profiles as $sp ) {
					foreach ( $sp['shipping_zones'] as $sz ) {
						if ( ! $this->sz_helper->is_address_in_zone( $sz, $to_address ) ) {
							continue;
						}

						if ( ! $this->allows_product_variants( $sp, $product_variants ) ) {
							continue;
						}

						$internal_rates = $this->ea->list( 'shipping_rates_internal', [
							'shipping_zone_id' => $sz['id'],
						] );
						foreach ( $internal_rates as $ir ) {
							if ( $this->internal_rate_applies( $ir, $cart_weight, $cart_price ) ) {
								$options[] = new Shipping_Option( $sp, $sz, $ir, RateTypes::flatRate() );
							}
						}

						$easypost_rates = $this->ea->list( 'shipping_rates_easypost', [
							'shipping_zone_id' => $sz['id']
						] );
						foreach ( $easypost_rates as $er ) {
							$easypost_details = $this->easypost_rate_applies( $sp, $er, $to_address, $cart_weight );
							foreach ( $easypost_details as $epd ) {
								$options[] = new Shipping_Option( $sp, $sz, $er, RateTypes::calculatedRate(), $epd );
							}
						}
					}
				}

				return $options;
			},
			[
				North_Commerce_Db_Cache::EXPIRES_OPTION => self::CACHE_TTL,
				North_Commerce_Db_Cache::SCOPE_OPTION => 'shipping'
			]
		);
	}

	private function allows_product_variants($shipping_profile, $product_variants) : bool {
		if($shipping_profile['all_variants_included']) {
			return true;
		}

		$cond = ['and', [
			'id' => $shipping_profile['id']
		]];
		foreach($product_variants as $i => $pv) {
			$cond[] = ["pv$i:shipping_profile_product_variants.product_variant_id" => $pv['id']];
		}

		$found = $this->ea->get('shipping_profiles', $cond);

		return $found ? true : false;
	}

	/**
	 * @version 0.1.24
	 */
	private function internal_rate_applies( $shipping_rate_internal, $cart_weight, $cart_price ) {
		$conditions = $this->ea->list( 'shipping_rate_conditions', [
			'shipping_rate_internal_id' => $shipping_rate_internal['id']
		] );

		$is_value_within_tolerances = function ( $value, $tolerances ) {
			list(
				'value_min' => $min,
				'value_max' => $max
			) = $tolerances;

			return $value >= $min
				&& ( ! $max || $value <= $max );
		};

		$outcomes = [];
		foreach ( $conditions as $cond ) {
			switch ( $cond['shipping_rate_condition_base_id'] ) {
				case ShippingRateConditionBases::weight()->id:
					$outcomes[] = $is_value_within_tolerances( $cart_weight, $cond );
					break;

				case ShippingRateConditionBases::price()->id:
					$outcomes[] = $is_value_within_tolerances( $cart_price, $cond );
					break;

				case ShippingRateConditionBases::userRole()->id:
					$expected = $cond['value_roles'] ? json_decode( $cond['value_roles'], true ) : [];
					$current = is_user_logged_in() ? wp_get_current_user()->roles : [];
					$found = false;
					foreach ( $current as $c ) {
						$found = in_array( $c, $expected ) || $found;
					}
					$outcomes[] = $found;
					break;

				default:
					throw new NcNotFoundException( "Unknown condition: {$cond['shipping_rate_condition_base_id']}" );
			}
		}

		if ( empty( $outcomes ) ) {
			return true;
		}

		switch ( $shipping_rate_internal['conditions_operator'] ) {
			case 'any':
				return array_reduce( $outcomes, function( $carry, $outcome ) { return $carry || $outcome; }, false );

			case 'all':
				return array_reduce( $outcomes, function( $carry, $outcome ) { return $carry && $outcome; }, true );

			default:
				throw new NcNotFoundException( "Unknown cond operator: {$shipping_rate_internal['conditions_operator']}" );
		}
	}

	private function easypost_rate_applies( $shipping_profile, $shipping_rate_easypost, $to_address, $cart_weight ) {
		$easyPostIntegration = new North_Commerce_Easypost();
		$from_address = $this->from_address( $shipping_profile );

		$easypost_rates = $easyPostIntegration->get_shipment_rates( $from_address, $to_address, $cart_weight, [
			'panic' => apply_filters( self::EASYPOST_PANIC_HOOK, false )
		] );

		$allowed_services = $shipping_rate_easypost['services'] ? json_decode( $shipping_rate_easypost['services'], true ) : [];
		$easypost_details = [];

		foreach ( $easypost_rates as $easypost_rate ) {
			if ( in_array( $easypost_rate['service'], $allowed_services ) ) {
				$easypost_details[] = $easypost_rate;
			}
		}

		return $easypost_details;
	}

	private function from_address($shipping_profile) {
		$shipping_address = $this->ea->get('shipping_addresses', [
			'id' => $shipping_profile['shipping_address_id']
		], ['expand' => 'country']);

		return [
			'street1' => $shipping_address['address'],
			'city' => $shipping_address['city'],
			'state' => $shipping_address['state'],
			'zip' => $shipping_address['zipcode'],
			'country' => $shipping_address['country']['abbreviation'],
		];
	}
}
