<?php
namespace NorthCommerce\Db\Shipping;

use NorthCommerce\Db\Collections\ShippingZoneTypes;

/**
 * Shipping Zones Helper.
 *
 *
 * @package north-commerce/includes/db/shipping
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.23
 * @version 0.1.24
 */
class Shipping_Zone_Helper {

	private $shipping_zone;
	private $to_address;
	private $country_has_known_subunits;

	public function is_address_in_zone( $shipping_zone, $to_address ) {
		$this->shipping_zone = $shipping_zone;
		$this->to_address = $to_address;

		switch ( $shipping_zone['shipping_zone_type_id'] ) {
			case ShippingZoneTypes::pickup()->id:
 				return $this->is_country_matches();

			case ShippingZoneTypes::local()->id:
				return $this->is_zipcode_matches();

			case ShippingZoneTypes::regional()->id:
				return ( $this->is_country_has_subunits() && $this->is_subunit_matches() )
					|| ( ! $this->is_country_has_subunits() && $this->is_country_matches() ) ;
		}
	}

	private function is_zipcode_matches() {
		if (
			! $this->to_address['zip']
			|| ! $this->is_country_matches()
		) {
			return false;
		}

		$shipable_subunits = $this->shipping_zone['shipping_countries'][ $this->to_address['country'] ];

		if ( in_array( $this->to_address['zip'], $shipable_subunits ) ) {
			return true;
		}

		foreach ( $shipable_subunits as $subunit ) {
			if (
				strpos( $subunit, '*' ) !== false
				&& strpos( $this->to_address['zip'], trim( $subunit, '*' ) ) === 0
			) {
				return true;
			}
		}

		return false;
	}

	private function is_country_has_subunits() {
		if ( isset( $this->country_has_known_subunits ) ) {
			return $this->country_has_known_subunits; // cached
		}

		$subunits_map = nc_get_countries_subunits_map();
		$country_has_known_subunits = $subunits_map[ $this->to_address['country'] ][ 'subunits' ] ?? [];
		return $this->country_has_known_subunits = (bool) $country_has_known_subunits;
	}

	private function is_subunit_matches() {
		if ( ! $this->is_country_matches() ) {
			return false;
		}

		return ! empty( $this->to_address['state'] )
			&& in_array( $this->to_address['state'], $this->shipping_zone['shipping_countries'][ $this->to_address['country'] ] );
	}

	private function is_country_matches() {
		return isset( $this->shipping_zone['shipping_countries'][ $this->to_address['country'] ] );
	}

	private function is_zipcode_wildcard_matches() {
		if ( ! $this->to_address['zip'] ) {
			return false;
		}

		foreach ( $this->shipping_zone['shipping_countries'] as $zipcode_wildcard => $pickup_addresses ) {
			$zipcode_region = str_replace( '*', '', $zipcode_wildcard );
			if ( 0 === strpos( $this->to_address['zip'], $zipcode_region ) ) {
				return true;
			}
		}

		return false;
	}

}
