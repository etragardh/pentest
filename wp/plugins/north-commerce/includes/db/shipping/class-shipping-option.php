<?php
namespace NorthCommerce\Db\Shipping;

use NorthCommerce\Db\Collections\RateTypes;
use DomainException;

/**
 * Shipping Option.
 *
 * Reprenents one shipping option a user can select from.
 *
 * A shipping option is made up of a profile, zone and rate.
 * This object allows easy access to any one of those values.
 *
 * @version 0.1.24
 */
class Shipping_Option {

	public $shipping_profile;
	public $shipping_zone;
	public $shipping_rate;
	public $rate_type;
	public $easypost_details;
	public $shipping_cost;

	public function __construct(
		$profile,
		$zone,
		$rate,
		$rate_type,
		$easypost_details = null
	) {
		$this->shipping_profile = $profile;
		$this->shipping_zone = $zone;
		$this->shipping_rate = $rate;
		$this->rate_type = $rate_type;
		$this->easypost_details = $easypost_details;

		$this->shipping_cost = $this->rate_type->id == RateTypes::flatRate()->id
			? $this->shipping_rate['price']
			: $this->easypost_details['rate'];
	}

	/**
	 * @version 0.1.24
	 */
	public function summary() {
		switch ( $this->rate_type->id ) {
			case RateTypes::flatRate()->id:
				return [
					'id'        => $this->shipping_rate['id'],
					'rate_type' => 'internal',
					'rate'      => $this->cost( $this->shipping_rate['price'] ),
					'rate_name' => $this->shipping_rate['name'],
					'rate_icon' => $this->icon(),
					'zone_type_slug' => $this->shipping_zone['shipping_zone_type']['slug'],
					'zone_instructions' => $this->shipping_zone['instructions'],
				];

			case RateTypes::calculatedRate()->id:
				return [
					'id'               => $this->shipping_rate['id'],
					'rate_type'        => 'easypost',
					'rate'             => $this->cost($this->easypost_details['rate']),
					'rate_icon'        => $this->icon(),
					'easypost_rate_id' => $this->easypost_details['id'],
					'carrier'          => $this->normalizedCarrier(),
					'carrier_id'       => $this->shipping_rate['carrier_id'],
					'service'          => $this->easypost_details['service'],
					'delivery_days'    => $this->easypost_details['delivery_days'],
					'delivery_date'    => $this->easypost_details['delivery_date'],
					'delivery_date_guaranteed' => $this->easypost_details['delivery_date_guaranteed'],
					'shipment_id'      => $this->easypost_details['shipment_id'],
				];

			default:
				throw new DomainException( "Unknown rate type: {$this->rate_type}" );
		}
	}

	public function cost( $base_rate ) {
		$amount = $base_rate;
		if ( $this->shipping_rate['fee_flat'] ) {
			$amount += $this->shipping_rate['fee_flat'];
		}

		if ( $this->shipping_rate['fee_percent'] ) {
			$amount += round($base_rate * ($this->shipping_rate['fee_percent'] / 100), 2);
		}

		return $amount;
	}

	public function icon() {
		$carrier= strtolower(
			$this->rate_type->id == RateTypes::flatRate()->id
			? 'internal'
			: $this->easypost_details['carrier']
		);

		$special_icons_names = [
			'dhlexpress' => 'DHL',
			'internal' => 'Flat_Rate',
			'upsdap' => 'ups',
			'dhl' => "DHL"
		];

		$icon_name = nc_g($special_icons_names, $carrier, $carrier);

		return NORTH_COMMERCE_PLUGIN_DIR_URL . 'public/images/shipping-rates/' . $icon_name . '.svg';
	}

	public function carrier() {
		if ( $this->rate_type->id == RateTypes::flatRate()->id ) {
			return null;
		}

		return $this->easypost_details['carrier'];
	}

	public function service() {
		if ( $this->rate_type->id == RateTypes::flatRate()->id ) {
			return $this->shipping_rate['name'];
		}

		return $this->easypost_details['service'];
	}

	public function normalizedCarrier() {
		$special = [
			'UPSDAP' => 'UPS',
			'DHLExpress' => 'DHL'
		];

		if ( $this->rate_type->id == RateTypes::flatRate()->id ) {
			return 'Flat Rate';
		}

		return nc_g(
			$special,
			$this->easypost_details['carrier'],
			$this->easypost_details['carrier']
		);
	}
}
