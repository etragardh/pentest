<?php
namespace NorthCommerce\Db;

use NorthCommerce\Db\Security\{
	AdministratorPerspective,
	CustomerPerspective,
    EditorPerspective,
    PublicPerspective
};

/**
 * Class for managing the perspective of the
 * database schema that users see.
 *
 * @see security/Perspective.php for more info
 *
 * Use this code versus access perspectives directly.
 *
 * @version 0.1.19
 */
class PerspectiveManager {
	private $all_perspectives;
	private $active;
	private static $me;

	public static function instance() : PerspectiveManager {
		if ( ! self::$me ) {
			self::$me = new PerspectiveManager();
		}
		return self::$me;
	}

	private function __construct() {
		$this->all_perspectives = [
			new AdministratorPerspective(),
			new CustomerPerspective(),
			new PublicPerspective(),
			new EditorPerspective()
		];
		$this->active = [];
	}

	public function withPerspective( $p, $callback ) {
		array_unshift($this->active, $p);
		try {
			return $callback();
		} finally {
			array_shift( $this->active );
		}
	}

	public function asAdministrator( $callback ) {
		return $this->withPerspective( new AdministratorPerspective(), $callback );
	}

	public function asCustomer( $callback ) {
		return $this->withPerspective( new CustomerPerspective(), $callback );
	}

	public function asPublic( $callback ) {
		return $this->withPerspective( new PublicPerspective(), $callback );
	}

	public function asNonAdministrator( $callback ) {
		$p = $this->currentPerspective();

		if ( $p instanceof AdministratorPerspective ) {
			return $this->asCustomer( $callback );
		}

		return $this->withPerspective( $p, $callback );
	}

	/**
	 * use wp_get_current_user to determine what our current perspective is
	 */
	public function currentPerspective() {
		if ( $this->active ) {
			return $this->active[0];
		}

		if ( ! function_exists( 'wp_get_current_user' ) ) {
			include_once ABSPATH . 'wp-includes/pluggable.php';
		}

		$u = wp_get_current_user();
		return $this->perspectiveByUser($u);
	}

	/**
	 * @version 0.1.19
	 */
	public function perspectiveByUser( $user ) {
		foreach ( $this->all_perspectives as $p ) {
			if ( $p->appliesTo( $user ) ) {
				return $p;
			}
		}
		throw new \Exception("No perspective found for: {$user->ID}");
	}
}
