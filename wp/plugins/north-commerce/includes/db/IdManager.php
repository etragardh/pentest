<?php
/*
 * A PHP file for working generating and working witih
 * database IDs.
 *
 * Some of our tables make use of numeric ids and others
 * use pubids.
 */
namespace NorthCommerce\Db;

define('NC_DB_PUBID_LENGTH', 28);
define('NC_DB_ID_PUBID_STYLE', 'pubid');
define('NC_DB_ID_NUMERIC_STYLE', 'numeric');

use North_Commerce_Db_Agent;

class IdManager {

	private $schema;

	public function	__construct()
	{
		$this->schema = North_Commerce_Db_Agent::instance()->schema();
	}

	public function idStyle($table) {
		$cols = $this->schema->tableCols($table);

		$id_col = nc_g($cols, 'id');
		if($id_col['type'] == 'PUBID') {
			return NC_DB_ID_PUBID_STYLE;
		} else if($id_col['type'] == 'BIGINT') {
			return NC_DB_ID_NUMERIC_STYLE;
		} else {
			throw new \Exception("Can't determine id style for $table: " . print_r($id_col, true));
		}
	}

	public function idRegexp($table) {
		$style = $this->idStyle($table);
		switch($style) {
			case NC_DB_ID_PUBID_STYLE:
				return '[a-z]{2}[0-9abcdefghjkmnpqrstvwxyz]{26}';
			case NC_DB_ID_NUMERIC_STYLE:
				return '[1-9][0-9]*';
			default:
				throw new \Exception("Unknown id style: $style");
		}
	}

	public function freshId($table) {
		switch($style = $this->idStyle($table)) {
			case NC_DB_ID_PUBID_STYLE:
				$prefix = $this->pubidTablePrefix($table);
				$suffix = $this->pubidRand();
				return "$prefix$suffix";
			case NC_DB_ID_NUMERIC_STYLE:
				return null;
			default:
				throw new \Exception("Unknown id style: $style");
		}
	}

	public function isWellFormedId($table, $id) {
		$style = $this->idStyle($table);
		$regexp = $this->idRegexp($table);
		switch($style) {
			case NC_DB_ID_PUBID_STYLE:
				return strlen($id) == NC_DB_PUBID_LENGTH &&
					   substr($id, 0, 2) == $this->pubidTablePrefix($table) &&
					   preg_match("/^{$regexp}$/", $id);
			case NC_DB_ID_NUMERIC_STYLE:
				return preg_match("/^{$regexp}$/", $id) == 1;
			default:
				throw new \Exception("Unknown id style: $style");
		}
	}

	public function tableFromId($id) {
		$pubid_regexp = $this->idRegexp('orders');
		if(preg_match("/$pubid_regexp/", $id)) {
			$prefix = substr($id, 0, 2);
			foreach($this->schema->getTables() as $t_name => $t_info) {
				$id_col = $t_info['cols']['id'];
				if(nc_g($id_col, 'pubid_prefix') == $prefix) {
					return $t_name;
				}
			}
		}

		return false;
	}

	private function pubidTablePrefix($table) {
		$cols = $this->schema->tableCols($table);
		return $cols['id']['pubid_prefix'];
	}

	/*
	 * Generate 128 bits of random data.
	 * Inspired by: https://www.uuidgenerator.net/dev-corner/php
	 */
	private function pubidRand()
	{
		$data = random_bytes(16);
		$hex  = bin2hex($data);
		$chunks = str_split($hex, 16);
		return implode('', array_map(function($chunk) {
			$value = str_replace(['o', 'i', 'l', 'u'],
								 ['w', 'x', 'y', 'z'],
								 base_convert($chunk, 16, 32));
			$target = (NC_DB_PUBID_LENGTH - 2) / 2;
			return str_pad($value, $target,  rand(0, 9));
		}, $chunks));
	}

}
