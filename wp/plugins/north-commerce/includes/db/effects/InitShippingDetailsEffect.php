<?php
/*
 * A PHP file for preparing a shipping_details row given
 * some basic inputs.
 */

namespace NorthCommerce\Db\Effects;

use InvalidArgumentException;
use NorthCommerce\Db\Collections\RateTypes;
use NorthCommerce\Db\Shipping\Shipping_Manager;
use NorthCommerce\Db\Shipping\Shipping_Option;

class InitShippingDetailsEffect extends PreEffect {

	protected static function behavior( $values ) {
		$shipping_option = self::lookupShippingOption( $values );

		if ( ! $shipping_option ) {
			throw new InvalidArgumentException("No shipping option matches: " . print_r( $values, true));
		}

		$is_easypost = $shipping_option->rate_type->id == RateTypes::calculatedRate()->id;

		return [
			'rate_type_id' => $shipping_option->rate_type->id,
			'handling_fee' => $shipping_option->shipping_rate['fee_flat'],
			'handling_percentage' => $shipping_option->shipping_rate['fee_percent'],
			'shipping_cost' => $shipping_option->shipping_cost,
			'carrier' => $shipping_option->normalizedCarrier(),
			'service' => $shipping_option->service(),
			'easypost_rate_id' => $is_easypost
				? $shipping_option->easypost_details['id']
				: null,
			'easypost_shipment_id' => $is_easypost
				? $shipping_option->easypost_details['shipment_id']
				: null,
			'shipping_rates_internal_id' => $is_easypost
				? null :
				$shipping_option->shipping_rate['id'],
			'shipping_rates_easypost_id' => $is_easypost
				? $shipping_option->shipping_rate['id']
				: null,
		] + $values;
	}

	private static function lookupShippingOption( $values ): ?Shipping_Option {
		$order = self::lookupOrder( $values );
		$mgr = Shipping_Manager::instance();
		$criteria = $mgr->shippingCriteriaByOrder( $order );
		$options = $mgr->availableOptions( $criteria );

		foreach ( $options as $opt ) {
			if ( $opt->rate_type->id == RateTypes::calculatedRate()->id ) {
				if (
					$opt->shipping_rate['id'] == $values['shipping_rates_easypost_id']
					&& $opt->service() == $values['service']
					&& $opt->normalizedCarrier() == $values['carrier']
				) {
					return $opt;
				}
			} else {
				if ( $opt->shipping_rate['id'] == $values['shipping_rates_internal_id'] ) {
					return $opt;
				}
			}
		}

		return null;
	}

	private static function lookupOrder( $values ) {
		list( $order_id, $values ) = nc_array_pluck( $values, 'order_id', false );

		if ( ! $order_id ) {
			throw new InvalidArgumentException( 'order_id not provided: ' . print_r( $values, true ) );
		}

		return Effect::$ea->ref ( $order_id, ['not_found' => NC_DB_PANIC] );
	}

}
