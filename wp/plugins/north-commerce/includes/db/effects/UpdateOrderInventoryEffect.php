<?php
/*
 * A PHP file for updating the inventory of a product and product_variants
 * based on an order being marked as completed
 */

namespace NorthCommerce\Db\Effects;

use Exception;

class UpdateOrderInventoryEffect extends PostEffect {

	protected static function behavior($order) {
		$line_items = Effect::$ea->list(
			'line_items',
			[ 'order_id' => $order['id'] ]
		);

		foreach ( $line_items as $li ) {
			UpdateOrderInventoryEffect::updateByLineItem( $li );
		}

		return $order;
	}

	private static function updateByLineItem( $line_item ) {
		$pv = Effect::$ea->get( 'product_variants',
			[ 'id' => $line_item['product_variant_id'] ],
			[ 'not_found' => NC_DB_PANIC ]
		);

		if ( $pv['quantity'] !== null ) {
			if ( $line_item['quantity'] > $pv['quantity'] ) {
				throw new ProductInventoryException( $line_item, $pv, 'product_variant' );
			}

			Effect::$ea->update( 'product_variants', $pv, [
				'quantity' => $pv['quantity'] - $line_item['quantity']
			] );
		}

		$p = Effect::$ea->get(
			'products',
			[ 'id' => $pv['product_id'] ],
			[ 'not_found' => NC_DB_PANIC ]
		);

		if ( $p['quantity'] !== null ) {
			if ( $line_item['quantity'] > $p['quantity']) {
				throw new ProductInventoryException( $line_item, $p, 'product' );
			}

			Effect::$ea->update( 'products', $p, [
				'quantity' => $p['quantity'] - $line_item['quantity']
			] );
		}
	}

}

class ProductInventoryException extends Exception {
	public function __construct($line_item, $inventory_source, $inventory_source_type) {
		$message = "We've sold {$line_item['quantity']} ({$line_item['id']}) " .
				   "but only have {$inventory_source['quantity']} ($inventory_source_type: {$inventory_source['id']}) " .
				   "in stock";
		parent::__construct($message);
	}
}
