<?php
namespace NorthCommerce\Db\Effects;

use NorthCommerce\Db\Collections\{
	CouponDiscountTypes as DiscountTypes,
	ShippingDetailTypes
};

/**
 * Update Order Shipping Effect class.
 *
 * Recalculates the shipping for an order based on the
 * shipping details that have been stored for this order
 *
 *
 * @package north-commerce/includes/df/effects
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.3
 * @version 0.1.25
 */
class UpdateOrderShippingEffect extends	PostEffect {

	/**
	 * @version 0.1.25
	 */
	protected static function behavior( $order ): void {
		$planned = Effect::$ea->list( 'shipping_details', [
			'order_id' => $order['id'],
			'shipping_detail_type_id' => ShippingDetailTypes::planned()->id
		] );

		$actual = Effect::$ea->list( 'shipping_details', [
			'order_id' => $order['id'],
			'shipping_detail_type_id' => ShippingDetailTypes::actual()->id
		] );

		$shipping_details = $actual ?: $planned;

		$order_shipping = 0;
		foreach ( $shipping_details as $sd ) {
			$order_shipping +=
				$sd['shipping_cost']
				+ $sd['handling_fee']
				+ round( ( $sd['handling_percentage'] / 100 ) * $sd['shipping_cost'], 2 );
		}

		$shipping = $order_shipping - self::shipping_discount( $order, $order_shipping );
		$order = Effect::$ea->update( 'orders', $order, compact( 'shipping' ) );
		UpdateOrderTotalsEffect::run( $order );
	}

	/**
	 * @since 0.1.25
	 */
	protected static function shipping_discount( $order, $order_shipping ): float {
		if ( $order_shipping <= 0 ) {
			return 0;
		}

		$coupon_order = Effect::$ea->list(
			'coupon_orders',
			[ 'order_id' => $order['id'] ],
			[ 'expand' => [ 'coupon' ] ]
		);
		$coupon = $coupon_order[0]['coupon'] ?? null;

		if ( ! $coupon ) {
			return 0;
		}

		$shipping_discount = 0;

		switch ( $coupon['coupon_discount_type_id'] ) {
			case DiscountTypes::freeShipping()->id:
				$shipping_discount = $order_shipping;
				break;

			case DiscountTypes::fixed()->id:
			case DiscountTypes::percent()->id:
				// do nothinig
				break;

			default:
				throw new \Exception( "Unknown discount type: {$coupon['coupon_discount_type_id']}" );
		}

		return round( $shipping_discount, 2 );
	}

}
