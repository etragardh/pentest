<?php
namespace NorthCommerce\Db\Effects;

use NorthCommerce\Db\Collections\CouponDiscountTypes as DiscountTypes;
use North_Commerce_Settings as Settings;

/**
 * Update Order Totals Effect class.
 *
 * Keep Order totals up to date when a line item is changed.
 *
 * Note: this class provides no security or verification. That is
 * expected to be handled outside this class.
 *
 * This object only worries about keeping an order's totals up to date,
 * it doesn't care if it's actually smart to do this.
 *
 * @see LineItemsWritePolicy
 * @see OrdersWritePolicy
 *
 * for code that does verify / control access to this event.
 *
 *
 * @package north-commerce/includes/df/effects
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.3
 * @version 0.1.25
 */
class UpdateOrderTotalsEffect extends PostEffect {

	/**
	 * @version 0.1.25
	 */
	protected static function behavior( $order ): array {
		if ( $order['paid'] > 0 ) {
			throw new \Exception( "Refusing to recalculate a paid order ({$order['id']})" );
		}

		$line_items = Effect::$ea->list( 'line_items', [ 'order_id' => $order['id'] ] );

		$order_subtotal = array_reduce( $line_items, function ( $carry, $li ) {
			return $carry + $li['amount'];
		}, 0 );

		$subtotal = $order_subtotal - self::subtotal_discount( $order, $order_subtotal );
		$tax = ( $order['shipping'] + $subtotal ) * floatval( Settings::get_tax_percentage() ) / 100;
		$total = $subtotal + $order['shipping'] + $tax;

		return Effect::$ea->update( 'orders', $order, compact(
			'subtotal',
			'tax',
			'total'
		) );
	}

	/**
	 * @since   0.1.21
	 * @version 0.1.25
	 */
	protected static function subtotal_discount( $order, $order_subtotal ):float {
		if ( $order_subtotal <= 0 ) {
			return 0;
		}

		$coupon_order = Effect::$ea->list(
			'coupon_orders',
			[ 'order_id' => $order['id'] ],
			[ 'expand' => [ 'coupon' ] ]
		);
		$coupon = $coupon_order[0]['coupon'] ?? null;

		if ( ! $coupon ) {
			return 0;
		}

		$coupon_discount = floatval( $coupon['discount_amount'] );
		$subtotal_discount = 0;

		switch ( $coupon['coupon_discount_type_id'] ) {
			case DiscountTypes::fixed()->id:
				$subtotal_discount = $coupon_discount <= $order_subtotal ? $coupon_discount : $order_subtotal;
				break;

			case DiscountTypes::percent()->id:
				$discount = round( $order_subtotal * ( $coupon_discount / 100 ), 2 );
				$subtotal_discount = $discount <= $order_subtotal ? $discount : $order_subtotal;
				break;

			case DiscountTypes::freeShipping()->id:
				// do nothing
				break;

			default:
				throw new \Exception( "Unknown discount type: {$coupon['coupon_discount_type_id']}" );
		}

		return round( $subtotal_discount, 2 );
	}

}
