<?php
namespace NorthCommerce\Db;

use InvalidArgumentException;
use NcDbAgentException;
use North_Commerce_Db_Agent;
use North_Commerce_Db_Generator;

define( 'NORTH_COMMERCE_DB_SCHEMA_VERSION', 44 );

/**
 * Database schema that powers the entire plugin.
 *
 *
 * @package north-commerce/includes/db/schema
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.3
 * @version 0.1.25
 */
class Schema {

	private $agent;
	private $cache;

	const SCHEMA_VERSION_OPTION_KEY = 'north-commerce-schema-version';

	public function __construct() {
		$this->agent = North_Commerce_Db_Agent::instance();
		$this->cache = $this->agent->cache();
	}

	public function currentVersion() {
		return NORTH_COMMERCE_DB_SCHEMA_VERSION;
	}

	/**
	 * @version 0.1.24
	 */
	public function installedVersion() {
		return get_option( self::SCHEMA_VERSION_OPTION_KEY );
	}

	/**
	 * @since   0.1.3
	 * @version 0.1.13
	 */
	public static function getTablePrefix() {
		global $wpdb;
		return $wpdb->prefix . 'nc_';
	}

	public function getTables() {
		return $this->cache->value( "schema-tables", function() {
			return $this->schemaTables();
		} );
	}

	/**
	 * @since   0.1.3
	 * @version 0.1.21
	 */
	private function schemaTables() {

		$name_and_slug_cols = [
			'name' => [ 'type' => 'VARCHAR(128)', 'index' => true ],
			'slug' => [ 'type' => 'VARCHAR(128)', 'unique' => true ]
		];

		$name_and_slug_values = function( $names ) {
			return array_map(
				function( $name, $extras = [] ) {
					return [
						'name' => $name,
						'slug' => str_replace(' ', '-', strtolower($name))
					] + $extras;
				},
				$names
			);
		};

		$has_col = [ 'type' => 'BOOLEAN', 'null' => false, 'index' => true ];

		$timestamp_col = [ 'type' => 'TIMESTAMP', 'null' => true, 'index' => true ];

		$ref = function ( $table ) {
			return [ 'type' => 'REF', 'ref_table' => $table ];
		};

		$pubid = function( $prefix ) {
			return [ 'type' => 'PUBID', 'pubid_prefix' => $prefix, 'null' => false ];
		};

		$is_product_visible = function( $product_prefix ) {
			return [
				'and',
				[ 'is', "{$product_prefix}deleted", null ],
				[ 'is', "{$product_prefix}published", [ 'not', null ] ]
			];
		};

		$tables = [
			'product_types' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values([
					'One Time',
					'Subscription',
					'Payment Plan'
				])
			],

			'categories' => [
				'cols' => $name_and_slug_cols
			],

			'tags' => [
				'cols' => $name_and_slug_cols
			],

			'product_statuses' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values( [
					'Published',
					'Draft',
					'Archive',
					'Schedule',
					'Trashed'
				] )
			],

			'payment_frequencies' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values([
					'Weekly',
					'Monthly',
					'Yearly'
				])
			],

			'free_trial_types' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values([
					'Days',
					'Months',
					'Years'
				])
			],

			'payment_details' => [
				'cols' => [
					'payment_frequency_id' => $ref( 'payment_frequencies' ),
					'has_free_trial' => $has_col,
					'free_trial_frequency' => [ 'type' => 'INT', 'null' => true ],
					'free_trial_type_id' => $ref( 'free_trial_types' ) + [ 'null' => true ],
					'has_first_period_payment' => $has_col,
					'first_period_payment' => [ 'type' => 'MONEY', 'null' => true ],
					'has_first_payment' => $has_col,
					'first_payment' => [ 'type' => 'MONEY', 'null' => true ],
					'num_payments' => [ 'type' => 'INT', 'null' => true ],
				],
				'meta' => [
					'visible_if' => $is_product_visible('products.')
				]
			],

			'countries' => [
				'cols' => [
					'name' => [ 'type' => 'VARCHAR(128)', 'unique' => true ],
					'abbreviation' => [ 'type' => 'VARCHAR(2)', 'unique' => true ],
				],
				'values' => nc_array_kreduce( nc_list_countries(), function ( $carry, $k, $v ) {
					$carry[] = [
						'name' => $v,
						'abbreviation' => $k
					];
					return $carry;
				}, [] )
			],

			'customs_content_types' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values([
					'Merchandise',
					'Documents',
					'Gift',
					'Returned Goods',
					'Sample'
				])
			],

			'customs_details' => [
				'cols' => [
					'content_type_id' => $ref( 'customs_content_types' ),
					'country_id' => $ref( 'countries' ),
					'hs_code' => [ 'type' => 'VARCHAR(128)' ],
				],
				'meta' => [
					'visible_if' => $is_product_visible('products.')
				]
			],

			'products' => [
				'cols' => [
					'created_by_wp_user_id' => [ 'type' => 'BIGINT UNSIGNED', 'null' => true, 'index' => true ],
					'sku' => [ 'type' => 'VARCHAR(128)', 'index' => true ],
					'product_type_id' => $ref( 'product_types' ),
					'name' => [ 'type' => 'VARCHAR(255)', 'index' => true ],
					'description' => [ 'type' => 'TEXT', 'null' => true ],
					'slug' => [ 'type' => 'VARCHAR(255)', 'index' => true, 'required' => true ],
					'scheduled' => $timestamp_col,
					'published' => $timestamp_col,
					'deleted' => $timestamp_col,
					'product_status_id' => $ref( 'product_statuses' ),
					'has_customs_details' => $has_col,
					'customs_detail_id' => $ref( 'customs_details' ) + [ 'null' => true ],
					'payment_detail_id' => $ref( 'payment_details' ) + [ 'null' => true ],
					'base_price' => [ 'type' => 'MONEY', 'null' => true, 'index' => true ],
					'compare_price' => [ 'type' => 'MONEY', 'null' => true, 'index' => true ],
					'cost_of_goods_price' => [ 'type' => 'MONEY', 'null' => true ],
					'profit' => [ 'type' => 'MONEY', 'null' => true, 'index' => true ],
					'cost_margin' => [ 'type' => 'MONEY',  'null' => true, 'index' => true ],
					'quantity' => [ 'type' => 'INT', 'null' => true, 'index' => true ],
					'weight' => [ 'type' => 'WEIGHT', 'null' => true, 'index' => true ],
					'is_physical_product' => $has_col,
					'has_product_variants' => $has_col,
					'id_salt' => [ 'type' => 'VARCHAR(4)', 'null' => false ]
				],
				'meta' => [
					'visible_if' => $is_product_visible('')
				]
			],

			'product_images' => [
				'cols' => [
					'product_id' => $ref( 'products' ),
					'image_url' => ['type' => 'VARCHAR(255)'],
					'sequence' => ['type' => 'INT', 'index' => true]
				],
				'meta' => [
					'visible_if' => $is_product_visible('product.')
				]
			],

			'product_option_types' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values([
					'Text',
					'Size',
					'Color',
					'Image'
				])
			],

			'product_options' => [
				'cols' => [
					'deleted' => $timestamp_col,
					'product_id' => $ref( 'products' ),
					'name' => [ 'type' => 'VARCHAR(128)', 'index' => true ],
					'product_option_type_id' => $ref( 'product_option_types' ),
					'sequence' => ['type' => 'INT', 'index' => true]
				],
				'meta' => [
					'visible_if' => $is_product_visible('product.')
				]
			],

			'product_option_values' => [
				'cols' => [
					'deleted' => $timestamp_col,
					'product_option_id' => $ref( 'product_options' ),
					'display_value' => [ 'type' => 'VARCHAR(255)', 'index' => true ],
					'value' => [ 'type' => 'VARCHAR(128)', 'index' => true ],
					'price_offset' => [ 'type' => 'MONEY' ],
					'is_price_offset_percent' => [ 'type' => 'BOOLEAN' ],
					'weight' => [ 'type' => 'WEIGHT', 'null' => true ],
					'sequence' => [ 'type' => 'INT','index' => true ]
				],
				'meta' => [
					'visible_if' => $is_product_visible( 'product_option.product.' )
				]
			],

			'product_variant_types' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values([
					'Standard',
					'Bump',
					'Solo'
				])
			],

			'product_variants' => [
				'cols' => [
					'slug' => [ 'type' => 'VARCHAR(255)', 'index' => true, 'required' => true ],
					'deleted' => [ 'type' => 'TIMESTAMP', 'null' => true ],
					'visible' => [ 'type' => 'BOOLEAN' ],
					'product_variant_type_id' => $ref( 'product_variant_types' ),
					'product_id' => $ref( 'products' ),
					'sku' => [ 'type' => 'VARCHAR(128)','index' => true, 'null' => true ],
					'price' => [ 'type' => 'MONEY', 'null' => true, 'index' => true ],
					'quantity' => [ 'type' => 'INT', 'null' => true, 'index' => true ],
					'image_url' => [ 'type' => 'VARCHAR(128)', 'null' => true ],
					'sequence' => [ 'type' => 'INT', 'index' => true ]
				],
				'meta' => [
					'visible_if' => [
						'and',
						[ 'is', 'deleted', null ],
						[ '=', 'visible', 1 ],
						$is_product_visible( 'product.' )
					]
				]
			],

			'product_variant_option_values' => [
				'cols' => [
					'product_variant_id' => $ref( 'product_variants' ),
					'product_option_value_id' => $ref( 'product_option_values' ),
					'deleted' => $timestamp_col,
				],
				'meta' => [
					'visible_if' => [
						'and',
						[ 'is', 'product_variant.deleted', null ],
						[ '=', 'product_variant.visible', 1 ],
						$is_product_visible( 'product_variant.product.' )
					]
				]
			],

			'product_categories' => [
				'cols' => [
					'product_id' => $ref( 'products' ),
					'category_id' => $ref( 'categories' ),
				]
			],

			'product_tags' => [
				'cols' => [
					'product_id' => $ref( 'products' ),
					'tag_id' => $ref( 'tags' ),
				]
			],

			'product_attributes' => [
				'cols' => $name_and_slug_cols,
			],

			'product_attribute_values' => [
				'cols' => [
					'product_id' => $ref( 'products' ),
					'product_attribute_id' => $ref( 'product_attributes' ),
					'value' => ['type' => 'VARCHAR(255)', 'index' => true]
				],
				'meta' => [
					'visible_if' => $is_product_visible('product.')
				]
			],

			'payment_providers' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values([
					'PayPal',
					'Stripe',
					'Mollie',
					'Square',
					'None'
				])
			],

			'customers' => [
				'cols' => [
					'id' => $pubid( 'cu' ),
					'customer_number' => [ 'type' => 'INT', 'null' => false, 'index' => true ],
					'first_name' => [ 'type' => 'VARCHAR(128)', 'index' => true, 'null' => true ],
					'last_name' => [ 'type' => 'VARCHAR(128)', 'index' => true, 'null' => true ],
					'email' => [ 'type' => 'VARCHAR(128)', 'unique' => true ],
					'phone' => [ 'type' => 'VARCHAR(128)', 'null' => true, 'index' => true ],
					'country_code' => [ 'type' => 'VARCHAR(10)', 'null' => true, 'index' => true ],
					'wp_user_id' => [ 'type' => 'BIGINT UNSIGNED', 'null' => true, 'index' => true ],
					'total_amount_spent' => [ 'type' => 'MONEY', 'null' => true, 'index' => true ],
					'total_number_of_orders' => [ 'type' => 'INT', 'null' => true, 'index' => true ],
					'has_active_subscription' => [ 'type' => 'BOOLEAN', 'null' => true, 'index' => true ],
					'marketing_optin' => [ 'type' => 'BOOLEAN', 'index' => true ]
				],
				'meta' => [
					'belongs_to' => 'wp_user_id'
				]
			],

			'customer_payment_methods' => [
				'cols' => [
					'id' => $pubid( 'cp' ),
					'customer_id' => $ref( 'customers' ),
					'payment_provider_id' => $ref( 'payment_providers' ),
					'token' => [ 'type' => 'VARCHAR(255)', 'null' => true ],
					'last4' => [ 'type' => 'VARCHAR(4)', 'null' => true ],
					'brand' => [ 'type' => 'VARCHAR(128)', 'null' => true, 'index' => true ],
					'expiration_month' => [ 'type' => 'INT', 'null' => true, 'index' => true ],
					'expiration_year' => [ 'type' => 'INT', 'null' => true, 'index' => true ],
				],
				'meta' => [
					'belongs_to' => 'customer.wp_user_id'
				]
			],

			'customer_tags' => [
				'cols' => [
					'customer_id' => $ref( 'customers' ),
					'tag_id' => $ref( 'tags' ),
				],
				'meta' => [
					'belongs_to' => 'customer.wp_user_id'
				]
			],

			'customer_change_types' => [
				'cols' => $name_and_slug_cols + [
					'admin_editable' => [ 'type' =>'BOOLEAN' ]
				],
				'values' => $name_and_slug_values([
					"Customer Note"
				], [
					['admin_editable' => true]
				])
			],

			'customer_changes' => [
				'cols' => [
					'id' => $pubid( 'cc' ),
					'customer_id' => $ref( 'customers' ),
					'customer_change_type_id' => $ref( 'customer_change_types' ),
					'description' => [ 'type' => 'VARCHAR(1024)', 'index' => true ],
				],
				'meta' => [
					'belongs_to' => 'customer.wp_user_id'
				]
			],

			'addresses' => [
				'cols' => [
					'id' => $pubid( 'ad' ),
					'is_default_shipping' => [ 'type' => 'BOOLEAN', 'index' => true ],
					'customer_id' => $ref( 'customers' ),
					'is_default_billing' => [ 'type' => 'BOOLEAN', 'index' => true ],
					'first_name' => [ 'type' => 'VARCHAR(128)', 'index' => true ],
					'last_name' => [ 'type' => 'VARCHAR(128)', 'index' => true ],
					'phone' => [ 'type' => 'VARCHAR(20)', 'null' => true, 'index' => true ],
					'addressline1' => [ 'type' => 'VARCHAR(255)', 'null' => true, 'index' => true ],
					'addressline2' => [ 'type' => 'VARCHAR(255)', 'null' => true ],
					'city' => [ 'type' => 'VARCHAR(128)', 'null' => true, 'index' => true ],
					'state' => [ 'type' => 'VARCHAR(128)', 'null' => true, 'index' => true ],
					'zipcode' => [ 'type' => 'VARCHAR(20)', 'null' => true, 'index' => true ],
					'country_id' => $ref( 'countries' ),
				],
				'meta' => [
					'belongs_to' => 'customer.wp_user_id'
				]
			],

			'order_statuses' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values( [
					'Created',
					'Fulfilled',
					'Partially Fulfilled',
					'Scheduled',
					'On Hold',
					'Unfulfilled',
					'Ready for pickup',
					'Picked Up',
					'Out For Delivery',
					'Delivered',
					'Abandoned',
					'Draft'
				] )
			],

			'payment_statuses' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values( [
					'Paid',
					'Failed',
					'Pending',
					'Void',
					'Unpaid',
					'Refunded',
					'Partially Refunded',
					'Partially Paid',
				] )
			],

			'rate_types' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values( [
					'Flat Rate',
					'Calculated Rate',
				] )
			],

			'shipping_detail_types' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values([
					'Planned',
					'Actual'
				])
			],

			'shipping_details' => [
				'cols' => [
					'id' => $pubid( 'sd' ),
					'deleted' => $timestamp_col,
					'order_id' => $ref( 'orders' ),
					'shipping_detail_type_id' => $ref('shipping_detail_types'),
					'rate_type_id' => $ref( 'rate_types' ),
					'shipping_rates_internal_id' => $ref( 'shipping_rates_internal' ) + [ 'null' => true ],
					'shipping_rates_easypost_id' => $ref( 'shipping_rates_easypost' ) + [ 'null' => true ],
					'tracking_number' => ['type' => 'VARCHAR(255)', 'null' => true, 'index' => true],
					'estimated_delivery' => [ 'type' => 'TIMESTAMP', 'null' => true ],
					'carrier' => [ 'type' => 'VARCHAR(128)', 'null' => true ],
					'service' => [ 'type' => 'VARCHAR(128)', 'null' => true ],
					'handling_fee'=> [ 'type' => 'MONEY', 'null' => true, 'index' => true],
					'handling_percentage' => ['type' => 'NUMERIC(4,2)', 'null' => true],
					'shipping_cost' => [ 'type' => 'MONEY', 'null' => true, 'index' => true ],
					'easypost_rate_id' => [ 'type' => 'VARCHAR(128)', 'null' => true ],
					'easypost_shipment_id' => [ 'type' => 'VARCHAR(128)', 'null' => true ],
					'shipping_label_url' => [ 'type' => 'VARCHAR(255)', 'null' => true ],
				],
				'meta' => [
					'belongs_to' => 'order.customer.wp_user_id',
					'alt_pubid' => 'order_id'
				]

			],

			'orders' => [
				'cols' => [
					'id' => $pubid( 'or' ),
					'order_number' => [ 'type' => 'INT', 'null' => false, 'index' => true ],
					'customer_id' => $ref( 'customers' ) + [ 'null' => true ],
					'shipping_address_id' => $ref( 'addresses' ) + [ 'null' => true ],
					'billing_address_id' => $ref( 'addresses' ) + [ 'null' => true ],
					'order_status_id' => $ref( 'order_statuses' ),
					'payment_status_id' => $ref( 'payment_statuses' ),
					'customer_payment_method_id' => $ref( 'customer_payment_methods' ) + [ 'null' => true ],
					'shipping' => [ 'type' => 'MONEY', 'index' => true ],
					'tax' => [ 'type' => 'MONEY', 'index' => true ],
					'subtotal' => [ 'type' => 'MONEY', 'index' => true ],
					'total' => [ 'type' => 'MONEY', 'index' => true ],
					'paid' => [ 'type' => 'MONEY', 'index' => true ],
				],
				'meta' => [
					'belongs_to' => 'customer.wp_user_id',
				]
			],

			'order_transaction_statuses' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values([
					'Building',
					'Processing',
					'Successful',
					'Failed'
				])
			],

			'order_transactions' => [
				'cols' => [
					'id' => $pubid( 'ot' ),
					'order_id' => $ref( 'orders' ),
					'order_transaction_status_id' => $ref( 'order_transaction_statuses' ),
					'customer_payment_method_id' => $ref( 'customer_payment_methods' ) + [ 'null' => true ],
					'amount' => [ 'type' => 'MONEY', 'null' => false, 'index' => true ],
					'identity_token' => [ 'type' => 'VARCHAR(255)', 'null' => true, 'index' => true ],
				],
				'meta' => [
					'belongs_to' => 'order.customer.wp_user_id',
				]
			],

			'line_items' => [
				'cols' => [
					'id' => $pubid( 'li' ),
					'order_id' => $ref( 'orders' ),
					'product_variant_id' => $ref( 'product_variants' ),
					'description' => [ 'type' => 'VARCHAR(255)', 'index' => true ],
					'amount' => [ 'type' => 'MONEY', 'index' => true ],
					'quantity' => [ 'type' => 'INT', 'index' => true ],
				],
				'meta' => [
					'belongs_to' => 'order.customer.wp_user_id',
					'alt_pubid' => 'order_id'
				]
			],

			'order_change_types' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values([
					'Order Placed',
					'Payment Processed',
					'Shipping Rate Calculated'
				])
			],

			'order_changes' => [
				'cols' => [
					'id' => $pubid( 'oc' ),
					'order_id' => $ref( 'orders' ),
					'order_change_type_id' => $ref( 'order_change_types' ),
					'value' => [ 'type' => 'MONEY', 'index' => true ],
					'description' => [ 'type' => 'VARCHAR(1024)', 'index' => true ],
				],
				'meta' => [
					'belongs_to' => 'order.customer.wp_user_id',
					'alt_pubid' => 'order_id'
				]
			],

			'sequence_numbers' => [
				'cols' => [
					'slug' => [ 'type' => 'VARCHAR(64)', 'null' => false, 'index' => true ],
					'value' => [ 'type' => 'INT', 'null' => false, 'index' => true ],
				]
			],

			'shipping_addresses' => [
				'cols' => [
					'is_default' => $has_col,
					'address' => [ 'type' => 'VARCHAR(255)', 'null' => false, 'index' => true ],
					'city' => [ 'type' => 'VARCHAR(128)', 'null' => false, 'index' => true ],
					'state' => [ 'type' => 'VARCHAR(128)', 'null' => true, 'index' => true ],
					'zipcode' => [ 'type' => 'VARCHAR(20)', 'null' => true, 'index' => true ],
					'country_id' => $ref( 'countries' ),
				],
			],

			'shipping_profiles' => [
				'cols' => [
					'name' => [ 'type' => 'VARCHAR(128)', 'null' => false, 'index' => true ],
					'is_default' => $has_col,
					'shipping_address_id' => $ref( 'shipping_addresses' ) + [ 'null' => true ],
					'all_variants_included' => $has_col,
				],
			],

			'shipping_profile_product_variants' => [
				'cols' => [
					'shipping_profile_id' => $ref( 'shipping_profiles' ),
					'product_variant_id' => $ref( 'product_variants' )
				]
			],

			'shipping_zone_types' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values( [
					'Regional',
					'Local',
					'Pickup',
				] )
			],

			'shipping_zones' => [
				'cols' => [
					'shipping_profile_id' => $ref( 'shipping_profiles' ),
					'shipping_zone_type_id' => $ref('shipping_zone_types'),
					'name' => [ 'type' => 'VARCHAR(64)', 'null' => false, 'index' => true ],
					'slug' => [ 'type' => 'VARCHAR(64)', 'null' => false, 'index' => true ],
					'instructions' => [ 'type' => 'VARCHAR(1024)', 'null' => true ],
				],
			],

			'shipping_rates_internal' => [
				'cols' => [
					'shipping_zone_id' => $ref( 'shipping_zones' ),
					'name' => [ 'type' => 'VARCHAR(64)', 'null' => false, 'index' => true ],
					'slug' => [ 'type' => 'VARCHAR(64)', 'null' => false, 'index' => true ],
					'has_conditions' => [ 'type' => 'BOOLEAN', 'null' => false ],
					'conditions_operator' => [ 'type' => 'VARCHAR(5)', 'null' => false ],
					'fee_flat' => [ 'type' => 'MONEY', 'null' => true ],
					'fee_percent' => [ 'type' => 'MONEY', 'null' => true ],
					'price' => [ 'type' => 'MONEY', 'null' => true ],
				],
			],

			'shipping_rates_easypost' => [
				'cols' => [
					'shipping_zone_id' => $ref( 'shipping_zones' ),
					'carrier_id' => [ 'type' => 'VARCHAR(128)', 'null' => false, 'index' => true ],
					'carrier_label' => [ 'type' => 'VARCHAR(64)', 'null' => false, 'index' => true ],
					'services' => [ 'type' => 'VARCHAR(1024)', 'null' => true ],
					'future_services' => [ 'type' => 'BOOLEAN', 'null' => false ],
					'fee_flat' => [ 'type' => 'MONEY', 'null' => true ],
					'fee_percent' => [ 'type' => 'MONEY', 'null' => true ],
				],
			],

			'shipping_rate_condition_bases' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values( [
					'Weight',
					'Price',
					'User Role'
				] )
			],

			'shipping_rate_conditions' => [
				'cols' => [
					'shipping_rate_internal_id' => $ref( 'shipping_rates_internal' ),
					'shipping_rate_condition_base_id' => $ref( 'shipping_rate_condition_bases' ),
					'value_min' => [ 'type' => 'INT', 'null' => true ], // TODO: update to FLOAT, to support `0.001 Kg`
					'value_max' => [ 'type' => 'INT', 'null' => true ],
					'value_roles' => [ 'type' => 'VARCHAR(1024)', 'null' => true ],
				],
			],

			'notification_types' => [
				'cols' => [
					'slug' => [ 'type' => 'VARCHAR(128)', 'null' => false, 'index' => true, 'unique' => true ],
					'title' => [ 'type' => 'VARCHAR(512)', 'null' => false ],
					'description' => [ 'type' => 'VARCHAR(1024)', 'null' => true ],
					'desktop_enabled' => [ 'type' => 'BOOLEAN', 'null' => false ],
				],
				'values' => $this->_get_notifications_types_table_values(),
			],

			'notifications' => [
				'cols' => [
					'slug' => [ 'type' => 'VARCHAR(128)', 'null' => false, 'index' => true, 'unique' => true ],
					'title' => [ 'type' => 'VARCHAR(255)', 'null' => false ],
					'description' => [ 'type' => 'VARCHAR(1024)', 'null' => true ],
					'trigger_event' => [ 'type' => 'VARCHAR(255)', 'null' => true ],
					'email_enabled' => [ 'type' => 'BOOLEAN', 'null' => false ],
					'email_subject' => [ 'type' => 'VARCHAR(512)', 'null' => true ],
					'email_body' => [ 'type' => 'MEDIUMTEXT', 'null' => true ],
					'recipients_list' => [ 'type' => 'TEXT', 'null' => true ],
					'sms_enabled' => [ 'type' => 'BOOLEAN', 'null' => false ],
					'sms_body' => [ 'type' => 'VARCHAR(1024)', 'null' => true ],
					'notification_type_id' => $ref( 'notification_types' ),
				],
				'values' => $this->_get_notifications_table_values(),
			],

			'webhooks' => [
				'cols' => [
					'service' => ['type' => 'VARCHAR(255)', 'null' => true],
					'url' => ['type' => 'VARCHAR(255)', 'null' => true],
					'uid' => ['type' => 'VARCHAR(255)', 'null' => true],
					'last_triggered' => ['type' => 'TIMESTAMP', 'null' => false],
				],
			],

			'webhook_triggers' => [
				'cols' => [
					'webhook_id' => ['type' => 'BIGINT', 'null' => false, 'index' => true, 'ref' => 'webhooks'],
					'table_name' => ['type' => 'VARCHAR(255)', 'null' => true],
					'webhook_trigger_type_id' => ['type' => 'BIGINT', 'null' => false, 'index' => true, 'ref' => 'webhook_trigger_types'],
				],
			],

			'webhook_events' => [
				'cols' => [
					'webhook_id' => ['type' => 'BIGINT', 'null' => false, 'index' => true, 'ref' => 'webhooks'],
					'event' => ['type' => 'VARCHAR(255)', 'null' => false],
					'created' => ['type' => 'TIMESTAMP', 'null' => false],
				],
			],

			'webhook_trigger_types' => [
				'cols' => [
					'slug' => ['type' => 'VARCHAR(255)', 'null' => true],
					'label' => ['type' => 'VARCHAR(255)', 'null' => true],
				],
				'values' => [
					['id' => 1, 'slug' => 'created', 'label' => 'Created'],
					['id' => 2, 'slug' => 'updated', 'label' => 'Updated']
				],
			],

			'coupon_statuses' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values( [
					'Published',
					'Scheduled',
					'Expired',
					'Disabled',
				] )
			],

			'coupon_discount_types' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values( [
					'Percent',
					'Fixed',
					'Free Shipping',
				] )
			],

			'coupon_modes' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values( [
					'Manual',
					'Automatic',
				] )
			],

			'coupon_requirements' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values( [
					'None',
					'Minimum Purchase Amount',
					'Minimum Quantity',
				] )
			],

			'coupons' => [
				'cols' => [
					'name' => [ 'type' => 'VARCHAR(255)', 'null' => false, 'index' => true ],
					'slug' => [ 'type' => 'VARCHAR(255)', 'null' => false, 'index' => true ],
					'coupon_status_id' => $ref( 'coupon_statuses' ),
					'usage_counter' => [ 'type' => 'INT' ],
					'usage_limit' => [ 'type' => 'INT', 'null' => true ],
					'coupon_mode_id' => $ref( 'coupon_modes' ),
					'coupon_discount_type_id' => $ref( 'coupon_discount_types' ),
					'discount_amount' => [ 'type' => 'MONEY', 'null' => true ],
					'coupon_requirement_id' => $ref( 'coupon_requirements' ),
					'requirement_amount' => [ 'type' => 'MONEY', 'null' => true ],
					'any_product' => [ 'type' => 'BOOLEAN', 'null' => false ],
					'any_country' => [ 'type' => 'BOOLEAN', 'null' => false ],
					'any_customer' => [ 'type' => 'BOOLEAN', 'null' => false ],
					'time_start' => [ 'type' => 'TIMESTAMP', 'null' => true ],
					'time_end' => [ 'type' => 'TIMESTAMP', 'null' => true ],
					'deleted' => $timestamp_col,
				],
			],

			'coupon_product_variants' => [
				'cols' => [
					'coupon_id' => $ref( 'coupons' ),
					'product_variant_id' => $ref( 'product_variants' ),
				]
			],

			'coupon_countries' => [
				'cols' => [
					'coupon_id' => $ref( 'coupons' ),
					'country_id' => $ref( 'countries' ),
				]
			],

			'coupon_customer_eligibilities' => [
				'cols' => $name_and_slug_cols,
				'values' => $name_and_slug_values( [
					'New Customer', // first order (based on email and phone?)
					'Customer Emails',
					'North Commerce Customer IDs',
					'North Commerce Customer Tags',
					'Wordpress Users',
					'Wordpress Roles',
				] )
			],

			'coupon_customers' => [
				'cols' => [
					'coupon_id' => $ref( 'coupons' ),
					'customer_new' => [ 'type' => 'BOOLEAN', 'null' => true ],
					'customer_id' => $ref( 'customers' ) + [ 'null' => true ],
					'customer_email' => [ 'type' => 'VARCHAR(255)', 'null' => true ],
					'customer_tag_id' => $ref( 'tags' ) + [ 'null' => true ],
					'wp_user_id' => [ 'type' => 'BIGINT UNSIGNED', 'null' => true ],
					'wp_role' => [ 'type' => 'VARCHAR(255)', 'null' => true ],
				]
			],

			'coupon_orders' => [
				'cols' => [
					'coupon_id' => $ref( 'coupons' ),
					'order_id' => $ref( 'orders' ),
				]
			],

		];

		foreach ( $tables as $name => $defn ) {
			if ( ! isset( $tables[ $name ]['cols']['id'] ) ) {
				$tables[ $name ]['cols']['id'] = [
					'type' => 'BIGINT',
					'null' => false,
					'extra' => 'AUTO_INCREMENT'
				];
			}

			$tables[ $name ]['cols']['created'] = [
				'type' => 'TIMESTAMP',
				'null' => false,
				'extra' => 'DEFAULT CURRENT_TIMESTAMP'
			];
		}

		$pm = $this->agent->perspectiveManager();
		$p = $pm->currentPerspective();

		return $p->customizeSchema( $tables );
	}

	/**
	 * @since   0.1.3
	 * @version 0.1.24
	 */
	public static function install() {
		$schema = new Schema();
		$schema->agent->perspectiveManager()->asAdministrator( function() use ( $schema ) {
			$installed = $schema->installedVersion();
			$current   = $schema->currentVersion();

			if ( $installed == $current ) {
				// Bailout.
				return;
			}

			if ( false === $installed ) {
				$schema->createTables();
			} else {
				$schema->updateTables();
			}

			update_option( self::SCHEMA_VERSION_OPTION_KEY, $current );
		} );
	}

	/**
	 * @since   0.1.2
	 * @version 0.1.5
	 */
	public function createTables($options = []) {

		$agent = North_Commerce_Db_Agent::instance();
		$sql_gen = new North_Commerce_Db_Generator();
		$prefix = nc_g($options, 'prefix', $this->getTablePrefix());

		$finalize_sql = [];
		foreach ( $this->getTables() as $table_name => $t ) {
			$sql = $sql_gen->createTableSql(
				$prefix,
				$table_name,
				$t['cols']
			);
			$agent->query($sql);
			$finalize_sql = array_merge(
				$finalize_sql,
				$sql_gen->finalizeTableSql( $prefix, $table_name, $t['cols'] )
			);
		}

		foreach( $finalize_sql as $sql ) {
			$agent->query( $sql );
		}

		foreach( $this->getTables() as $table_name => $t ) {
			if ( ! empty( $t['values'] ) ) {
				$this->loadTable( $prefix, $table_name, $t['values'] );
			}
		}

	}

	public function updateTables( $options = [] ) {
		$agent = North_Commerce_Db_Agent::instance();
		$cache = $agent->cache();
		$prefix = nc_g($options, 'prefix', $this->getTablePrefix());
		$installed_version = nc_g($options, 'installed_version', $this->installedVersion());

		$agent->withTx( function ( $wpdb ) use ( $agent, $prefix, $installed_version, $cache ) {
			for ( $version = $installed_version + 1; $version <= $this->currentVersion(); $version++ ) {
				try {
					$cache->flush();
					$statements = $agent->updater()->updateSqlStatements( $prefix, $version );
					foreach ( $statements as $stmt ) {
						$agent->query( $stmt );
					}
				} catch(NcDbAgentException $ex) {
					throw new InvalidArgumentException("Update $version failed", 0, $ex);
				}
			}
		});
	}

	protected function loadTable($prefix, $table, $values) {
		$db = North_Commerce_Db_Agent::instance();
		$db->withDb(function ($wpdb) use ($prefix, $table, $values) {
			foreach ($values as $row) {
				$wpdb->insert("$prefix$table", $row);
			}
		});
	}

	/**
	 * This deletes all the database tables.
	 * Used only for test environments.
	 */
	public function nukeTables( $table_prefix ) {
		$wpdb = North_Commerce_Db_Agent::instance();

		if ($table_prefix == $this->getTablePrefix()) {
			throw new \Exception("Refusing to remove real tables.");
		}

		$tables = $this->getTables();
		$to_remove = array_reverse($tables);
		foreach ($to_remove as $table_name => $table_info) {
			$wpdb->query("SET foreign_key_checks = 0");
			$wpdb->query("DROP TABLE {$table_prefix}{$table_name}");
			$wpdb->query("SET foreign_key_checks = 1");
		}
	}

	/**
	 * @version 0.1.6
	 */
	public function tableCols($table_name, $options = []) {
		$table = $this->tableDefn($table_name, $options);
		return $table['cols'] ?? false;
	}

	public function tableDefn($table_name, $options = []) {
		return $this->cache->value(
			"schema.table.$table_name",
			function() use($table_name, $options) {
				$tables = $this->getTables();
				if($tables && ($table = nc_g($tables, $table_name))) {
					return $table;
				} else {
					return nc_opt_ex("Can't find $table_name", $options);
				}
			}
		);
	}

	public function tableExists($table_name) {
		$tables = $this->getTables();
		return nc_g($tables, $table_name) ? true : false;
	}

	public function getColumns($table_name, $options = []) {
		$tables = $this->getTables();
		$table = nc_g($tables, $table_name);
		return $table ? $table['cols'] : nc_opt_ex("$table_name does not exist", $options);
	}

	public function tableRefColumn( $source_table, $dest_table, $options = [] ) {
		return $this->cache->value(
			"schema.tableRefColumn.$source_table.$dest_table",
			function() use($source_table, $dest_table, $options) {
				$source_cols = $this->tableCols($source_table, $options);

				if ( $source_cols ) {
					foreach ( $source_cols as $source_name => $source_defn ) {
						if (
							$source_defn['type'] == 'REF'
							&& $source_defn['ref_table'] == $dest_table
						) {
							return $source_name;
						}
					}
				}

				return nc_opt_ex( "No ref found between $source_table and $dest_table", $options );
			}
		);
	}

	public function idRefTable( $source_table, $dest_table_id, $options = [] ) {
		return $this->cache->value(
			"schema.idRefTable.$source_table.$dest_table_id",
			function() use($source_table, $dest_table_id, $options) {
				$source_cols = $this->tableCols($source_table, $options);
				if ( $source_cols ) {
					$source_col = nc_g($source_cols, $dest_table_id);
					if ( $source_col && $source_col['type'] == 'REF' ) {
						return $source_col['ref_table'];
					}
				}

				return nc_opt_ex( "No ref found using $source_table.$dest_table_id", $options );
			}
		);
	}

	// Notifications

	/**
	 * @since 0.1.24
	 */
	private $db_notification_types;

	/**
	 * @since 0.1.24
	 */
	const SCHEMA_VERSION_WITH_NOTIFICATIONS = 25;

	/**
	 * @since 0.1.19
	 */
	private function _get_notifications_types_table_values(): array {
		return [
			[
				'slug' => 'customer',
				'title' => 'Customer notifications',
				'description' => 'Customize the look of your email notifications templates, or edit the content of your SMS notifications individually.'
			],
			[
				'slug' => 'admin',
				'title' => 'Admin notifications',
				'description' => 'Choose how you want to be notified.'
			],
		];
	}

	/**
	 * Predefined values for `notifications` table.
	 *
	 * @since 0.1.24
	 */
	private function _get_notifications_table_values():array {

		global $wpdb;

		if ( $this->installedVersion() < self::SCHEMA_VERSION_WITH_NOTIFICATIONS ) {
			// Prevent querying empty Table during plugin installation
			$db_types = $this->_get_notifications_types_table_values();
			foreach ( $db_types as $key => $values ) {
				$db_types[ $key ] = (object) [
					'id' => intval( $key + 1 ),
					'slug' => $values['slug']
				];
			}
		}

		$notification_types_table = $this->getTablePrefix() . 'notification_types';

		try {

			$this->db_notification_types = $db_types ?? $wpdb->get_results( "SELECT id, slug FROM $notification_types_table;" );

		} catch ( \Exception $e ) {
			error_log( '_get_notifications_table_value: current action = ' . current_action() . '; installed Schema version = ' . intval( $this->installedVersion() ) . ';' );
			return [];
		}

		return array_merge(
			$this->_notifications_type_customer(),
			$this->_notifications_type_admin()
		);
	}

	/**
	 * @since 0.1.24
	 */
	private function _notifications_type_customer():array {
		$customer_type_notifications = [
			[
				'slug' => 'order_confirmation',
				'title' => 'Order confirmation',
				'description' => 'Notification about placed order.',
				'email_subject' => $this->_get_notification_email_subject( 'order_confirmation' ),
				'email_body' => $this->_get_notification_email_body( 'order_confirmation' ),
				'trigger_event' => 'order.purchase',
				'email_enabled' => 1,
			],
			[
				'slug' => 'order_edited',
				'title' => 'Order edited',
				'description' => 'Notifications about edited order.',
			],
			[
				'slug' => 'order_canceled',
				'title' => 'Order canceled',
				'description' => 'Notification about canceled order.',
			],
			[
				'slug' => 'order_refund',
				'title' => 'Order refund',
				'description' => 'Notification about refunded order.',
			],
			[
				'slug' => 'abandoned_commerce',
				'title' => 'Abandoned commerce',
				'description' => 'Notification about the unfinished commerce process.',
			],
			[
				'slug' => 'pos_and_mobile',
				'title' => 'POS and mobile receipt',
				'description' => 'Notification about an order receipt.',
			],
			[
				'slug' => 'payment_error',
				'title' => 'Payment error',
				'description' => 'Notification about the payment that cannot be processed.',
				'email_subject' => $this->_get_notification_email_subject( 'payment_error' ),
				'email_body' => $this->_get_notification_email_body( 'payment_error' ),
				'trigger_event' => 'order.payment_failed',
				'email_enabled' => 1,
			],
			[
				'slug' => 'order_out_for_delivery',
				'title' => 'Order is out for delivery',
				'description' => 'Notification about order that is out for delivery.',
				'email_subject' => $this->_get_notification_email_subject( 'order_out_for_delivery' ),
				'email_body' => $this->_get_notification_email_body( 'order_out_for_delivery' ),
				'trigger_event' => 'order.outForDelivery',
				'email_enabled' => 1,
			],
			[
				'slug' => 'order_ready_for_pickup',
				'title' => 'Order is ready for pickup',
				'description' => 'Notification about order that is ready for pickup.',
				'email_subject' => $this->_get_notification_email_subject( 'order_ready_for_pickup' ),
				'email_body' => $this->_get_notification_email_body( 'order_ready_for_pickup' ),
				'trigger_event' => 'order.readyForPickup',
				'email_enabled' => 1,
			],
			[
				'slug' => 'shipping_confirmation',
				'title' => 'Shipping confirmation',
				'description' => 'Notification about fulfilled order.',
				'email_subject' => $this->_get_notification_email_subject( 'shipping_confirmation' ),
				'email_body' => $this->_get_notification_email_body( 'shipping_confirmation' ),
				'trigger_event' => 'order.shipped',
				'email_enabled' => 1,
			],
			[
				'slug' => 'customer_account_invite',
				'title' => 'Customer account invite',
				'description' => 'Notifications with account activation instructions.',
			],
			[
				'slug' => 'customer_account_welcome',
				'title' => 'Customer account welcome',
				'description' => 'Notification about completed account activation.',
			],
			[
				'slug' => 'customer_account_password_reset',
				'title' => 'Customer account password reset',
				'description' => 'Notification with reset account password instructions.',
			],
			[
				'slug' => 'contact_customer',
				'title' => 'Contact customer',
				'description' => 'Sent to the customer when you contact them from the orders or customers page.',
			],
			[
				'slug' => 'confirmation_email',
				'title' => 'Confirmation email',
				'description' => 'Notification about email confirmation (if email double opt-in is enabled).',
			],
			[
				'slug' => 'return_instructions',
				'title' => 'Return instructions',
				'description' => 'Sent automatically to the customer when you create a return.',
			],
		];

		$db_types_by_slug = array_column( $this->db_notification_types , 'slug' );
		$customer_row_key = array_search( 'customer', $db_types_by_slug );
		$type_customer_id = (int) $this->db_notification_types[ $customer_row_key ]->id;
		foreach ( $customer_type_notifications as &$notification ) {
			$notification['notification_type_id'] = $type_customer_id;
		}

		return $customer_type_notifications;
	}

	/**
	 * @since 0.1.24
	 */
	private function _notifications_type_admin():array {
		$admin_type_notifications = [
			[
				'slug' => 'new_order',
				'title' => 'New order',
				'description' => 'Notification about placed order.',
				'email_subject' => $this->_get_notification_email_subject( 'new_order' ),
				'email_body' => $this->_get_notification_email_body( 'new_order' ),
				'trigger_event' => 'order.purchase',
			],
			[
				'slug' => 'cancelled_order',
				'title' => 'Cancelled order',
				'description' => 'Notifications about orders that have been marked cancelled.',
			],
			[
				'slug' => 'failed_order',
				'title' => 'Failed order',
				'description' => 'Notifications about orders that have been marked failed.',
			],
		];

		$db_types_by_slug = array_column( $this->db_notification_types , 'slug' );
		$admin_row_key = array_search( 'admin', $db_types_by_slug );
		$type_admin_id = (int) $this->db_notification_types[ $admin_row_key ]->id;
		foreach ( $admin_type_notifications as &$notification ) {
			$notification['notification_type_id'] = $type_admin_id;
		}

		return $admin_type_notifications;
	}

	/**
	 * Predefined email subject values for `notifications` table.
	 *
	 * @since   0.1.19
	 * @version 0.1.24
	 */
	private function _get_notification_email_subject( $notification_slug ):string {
		if ( $this->installedVersion() >= self::SCHEMA_VERSION_WITH_NOTIFICATIONS ) {
			// Bailout, if not within initial Tables installation process.
			return '';
		}

		switch ( $notification_slug ) {
			case 'order_confirmation':
				$email_subject = 'Your order has been completed - {{order_number}}';
				break;

			case 'payment_error':
				$email_subject = 'Failed Payment - Your payment has failed.';
				break;

			case 'order_out_for_delivery':
				$email_subject = 'Your Order is out for delivery.';
				break;

			case 'order_ready_for_pickup':
				$email_subject = 'Your Order is ready for pickup!';
				break;

			case 'shipping_confirmation':
				$email_subject = 'Shipping Confirmation - Your order has been shipped!';
				break;

			case 'new_order':
				$email_subject = 'You have a new order!';
				break;

			default:
				throw new \InvalidArgumentException( "Uknown notification slug: {$notification_slug}." );
		}

		return $email_subject ?? '';
	}

	/**
	 * Predefined email body values for `notifications` table.
	 *
	 * @since  0.1.19
	 * @return string SQL escaped HTML template
	 */
	private function _get_notification_email_body( $notification_slug ):string {
		if ( $this->installedVersion() >= self::SCHEMA_VERSION_WITH_NOTIFICATIONS ) {
			// Bailout, if not within initial Tables installation process.
			return '';
		}

		$default_notification_file_path = NORTH_COMMERCE_PLUGIN_DIR_PATH . "includes/notifications/$notification_slug.html";

		$html_template = file_get_contents( $default_notification_file_path ) ?: '';
		$html_entities = htmlentities( $html_template, ENT_QUOTES|ENT_SUBSTITUTE|ENT_HTML5 );
		$html_entities_without_doubled_linebreaks = str_replace( "\r&NewLine;", "&NewLine;", $html_entities );

		return $html_entities_without_doubled_linebreaks;
	}
}
