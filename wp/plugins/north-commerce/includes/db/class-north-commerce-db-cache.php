<?php
/*
 * A PHP file for providing caching specific behavior
 * to for database related entities.
 *
 * All caching falls back to the wp caching API.
 */
class North_Commerce_Db_Cache {

	const EXPIRES_OPTION = 'expires';
	const SCOPE_OPTION = 'scope';
	const VALUE_STATUS_ACTION = 'nc-db-cache-value-status';

	public function value( $key, $generator, $options = [] ) {

		$found = false;
		$value = wp_cache_get(
			$this->wpCacheKey($key, $options),
			$this->wpCacheGroup(),
			false,
			$found
		);

		do_action(self::VALUE_STATUS_ACTION, $key, $value ? true : false, $value);

		if ( $found ) {
			return $value;
		}

		$value = $generator();
		$this->set( $key, $value, $options );
		return $value;

	}

	public function get( $key ) {
		return wp_cache_get(
			$this->wpCacheKey($key),
			$this->wpCacheGroup()
		);
	}

	public function set($key, $value, $options = [])
	{
		$expires = nc_g($options, self::EXPIRES_OPTION, 0);
		wp_cache_set($this->wpCacheKey($key, $options), $value,
					 $this->wpCacheGroup(), $expires);

	}

	/**
	 * Empty the cache
	 */
	public function flush() {
		wp_cache_flush();
	}

	private function wpCacheKey($key, $options = [])
	{
		$pm = North_Commerce_Db_Agent::instance()->perspectiveManager();
		$version = NORTH_COMMERCE_DB_SCHEMA_VERSION;
		$perspective = $pm->currentPerspective()->slug();
		$scope = $options[self::SCOPE_OPTION] ?? $perspective;
		return "schema.$version.$scope.$key";
	}

	private function wpCacheGroup()
	{
		return "north_commerce_db";
	}

}
