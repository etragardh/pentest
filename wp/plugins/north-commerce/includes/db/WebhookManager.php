<?php

namespace NorthCommerce\Db;

use NorthCommerce\Models\{
    WebhookModel,
    WebhookEventModel
};

/**
 * Webhook Manager.
 *
 *
 * @package north-commerce/includes/db
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.21
 * @version 0.1.24
 */
class WebhookManager {

    private static $instance;
    protected $webhook_model;
    protected $webhook_event_model;

    const SCHEMA_VERSION_WITH_WEBHOOKS = 33;

	public static function instance(): WebhookManager {
		if ( self::$instance == null ) {
			self::$instance = new WebhookManager();
		}
		return self::$instance;
	}

    public function __construct() {
        $this->webhook_model = new WebhookModel;
        $this->webhook_event_model = new WebhookEventModel;
    }

    /**
     * Register a webhook, this is currently being used by the Zapier integration
     *
     *
     * @param [type] $service
     * @param [type] $entity
     * @param [type] $action
     * @return void
     */
    public function registerWebhook( $url, array $events = [], $service = "north-commerce", $uid = null ) {
        $pm = PerspectiveManager::instance();
		return $pm->asAdministrator( function() use($url, $events, $service, $uid) {

            $webhook = $this->webhook_model->insert( [
                'service' => $service,
                'url' => $url,
                'uid' => $uid
            ] );

            // todo - don't allow duplicate UIDs

            foreach ( $events as $event ) {
                $this->webhook_event_model->register( $webhook['id'], $event );
            }

            return $webhook;

        } );
    }

    public function updateWebhook( $id, $url, array $events = [] ) {
        $pm = PerspectiveManager::instance();
        return $pm->asAdministrator( function() use ( $id, $url, $events ) {

            try {

                $webhook = $this->webhook_model->update( $id, [
                    'url' => $url
                ]);

                // Better way of doing this?
                $this->webhook_event_model->unregisterAll($id);

                foreach ( $events as $event ) {
                    $this->webhook_event_model->register( $webhook['id'], $event );
                }
                /*return $this->webhook_model->setTrigger( $created['id'], $table, $action );*/
            } catch ( \Exception $e ) {
                echo $e->getMessage();
            }

        } );
    }

    /**
     * @param $uid
     *
     * @version 0.1.24
     */
    public function unregisterWebhook( $uid ) {
		$pm = PerspectiveManager::instance();
		return $pm->asAdministrator( function() use( $uid ) {

            try {
                $this->webhook_event_model->unregisterAll( $uid );
                $this->webhook_model->unregister( $uid );
            } catch ( \Exception $e ) {
                return false;
            }

        } );
    }

    /**
     * Expects $criteria to contain 'action' or 'table'
     */
    public function find( $criteria ) {
        $pm = PerspectiveManager::instance();
        return $pm->asAdministrator( function() use( $criteria ) {

            try {
                return $this->webhook_model->findBy( $criteria );
            } catch ( \Exception $e ) {
                return [];
            }

        } );
    }

    /**
     * Set up all the webhook listeners, listens for
     * events being fired by TriggerEventsAutomation
     *
     * @version 0.1.24
     * @return void
     */
    public function setup() {
        $schema = new Schema;

        if ( $schema->installedVersion() < self::SCHEMA_VERSION_WITH_WEBHOOKS ) {
            return;
        }

        $webhooks = $this->webhook_model->list_all( [], [ 'expand' => [] ] );

        foreach ( $webhooks as $webhook ) {
            $events = $this->webhook_event_model->list_all( [ 'webhook_id' => $webhook['id'] ] );

            foreach ( $events as $event ) {

                $trigger_event = $event['event'];
                $action = "nc_db_event/{$trigger_event}";

                add_action( $action, function( $event, $table, $old, $new ) use ( $webhook ) {
                    $new = apply_filters( 'nc_webhook_event_data', $new, $event, $webhook );
                    $this->webhook_model->trigger( $webhook['id'], $event, $new );
                }, 10, 4 );

            }
        }
    }

}