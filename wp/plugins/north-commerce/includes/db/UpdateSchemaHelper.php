<?php
/*
 * A PHP file for implementing code to help execute
 * MySQL Updates.
 */

namespace NorthCommerce\Db;

use North_Commerce_Db_Agent;

class UpdateSchemaHelper {

	private $agent;

	function __construct()
	{
		$this->agent = North_Commerce_Db_Agent::instance();
	}

	public function mergeDuplicates($table, $key_col) {
		$dups = $this->findDuplicates($table, $key_col);

		foreach($dups as $dup) {
			$this->mergeDuplicate($table, $key_col, $dup);
		}
	}

	private function mergeDuplicate($table, $key_col, $dup) {
		$sql = $this->agent->prepare(
			"SELECT id FROM $table " .
			"WHERE " .
			"$key_col = %s AND " .
			"id <> %s",
			[$dup[$key_col], $dup['merge_to_id']]);
		$to_remove = $this->agent->getCol($sql);

		foreach($to_remove as $remove_id) {
			$this->relinkDuplicate($table, $remove_id, $dup['merge_to_id']);
			$sql = $this->agent->prepare("DELETE FROM $table WHERE id = %s", [$remove_id]);
			$this->agent->query($sql);
		}
	}

	private function relinkDuplicate($table, $old_id, $new_id) {
		$insp = $this->agent->introspector();
		$refs = $insp->tableReferences($table, ['prefix' => '']);
		foreach($refs as $ref) {
			if($ref['ref_table_name'] == $table) {
				$sql = $this->agent->prepare("UPDATE {$ref['table_name']} " .
											 "SET {$ref['col_name']} = %s " .
											 "WHERE {$ref['col_name']} = %s",
											 [ $new_id, $old_id ]);
				$this->agent->query($sql);
			}
		}
	}

	public function findDuplicates($table, $key_col) {
		$sql = ("SELECT MIN(id) as merge_to_id, $key_col, count(id) AS count " .
				"FROM $table " .
				"WHERE $key_col IS NOT NULL " .
				"GROUP BY $key_col " .
				"HAVING count(id) > 1");

		return $this->agent->getResults($sql);
	}
}
