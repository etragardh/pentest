<?php
namespace NorthCommerce\Db\Coupons;

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\Collections\CouponCustomerEligibilities as CustomerEligibilities;
use NorthCommerce\Db\PerspectiveManager;
use NorthCommerce\Models\{
	CustomerModel,
	CouponModel
};

/**
 * Applied Customer requirement.
 *
 * @package north-commerce/includes/db/coupons
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.21
 * @version 0.1.21
 */
class Customer_Requirement extends Requirement {

	protected array $coupon;
	protected Coupon_Criteria $criteria;
	protected $customer;
	protected CustomerModel $customer_model;
	protected $applied_customers;

	public function verify( $coupon, Coupon_Criteria $criteria ) {

		if ( boolval( $coupon['any_customer'] ) ) {
			return true;
		}

		$this->coupon = $coupon;
		$this->criteria = $criteria;

		$this->customer_model = new CustomerModel();

		$cart_customer = $this->criteria->get_cart_customer();
		if ( ! empty( $cart_customer['id'] ) ) {
			return $this->validate_checkout_page( $cart_customer['id'] );
		}

		if ( ! empty( $cart_customer['email'] ) ) {
			return $this->validate_single_page_checkout_shortcode( $cart_customer['email'] );
		}

		return $this->error_message( 'empty_customer' );

	}

	protected function validate_single_page_checkout_shortcode( $customer_email ) {
		$this->customer = $this->retrieve_customer( $id = null, $customer_email );
		return $this->validate();
	}

	protected function validate_checkout_page( $customer_id ) {
		$this->customer = $this->retrieve_customer( $customer_id );
		return $this->validate();
	}

	protected function validate() {
		$this->applied_customers = $this->retrieve_applied_customers( $this->coupon['id'] );
		return $this->is_valid() ?: $this->error_message();
	}

	protected function is_valid(): bool {
		if (
			$this->is_new_customer_valid()
			|| $this->is_wordpress_role_valid()
			|| $this->is_customer_tag_valid()
			|| $this->is_customer_id_valid()
			|| $this->is_wordpress_user_valid()
		) {
			return true;
		}

		return false;
	}

	protected function retrieve_customer( $id, string $email = '' ) {
		return PerspectiveManager::instance()->asAdministrator(
			function () use ( $id, $email ) {
				$options = [
					'expand' => [
						'addresses.country',
					]
				];
				if ( $id ) {
					return $this->customer_model->get_by_id( $id, $options );
				}
				if ( $email ) {
					return $this->customer_model->get_by_email( $email, $options );
				}
			}
		);
	}

	protected function retrieve_applied_customers( $coupon_id ) {
		$pm = PerspectiveManager::instance();
		return $pm->asAdministrator( function () use ( $coupon_id ) {
			$coupon_model = new CouponModel();
			return $coupon_model->list_applied_customers_by_id( $coupon_id );
		} );
	}

	protected function is_new_customer_valid(): bool {
		$customer_new_eligibility = CustomerEligibilities::newCustomer()->slug;
		return $this->is_a_new_customer()
			&& ! empty( $this->applied_customers[ $customer_new_eligibility ][0]['customer_new'] );
	}

	protected function is_a_new_customer(): bool {
		return array_key_exists( 'total_number_of_orders', $this->customer )
			&& empty( $this->customer['total_number_of_orders'] );
	}

	protected function is_wordpress_role_valid(): bool {
		if ( ! $this->customer['wp_user_id'] ) {
			// uknown `wp_user_id`
			return false;
		}

		$customer_wp_roles_eligibility = CustomerEligibilities::wordpressRoles()->slug;
		$customer_wp_roles = get_userdata( $this->customer['wp_user_id'] )->roles;

		foreach ( $this->applied_customers[ $customer_wp_roles_eligibility ] as $map_record ) {
			if ( in_array( $map_record['wp_role'], $customer_wp_roles ) ) {
				return true;
			}
		}

		return false;
	}

	protected function is_customer_tag_valid(): bool {
		$pm = PerspectiveManager::instance();
		$customer_id = $this->customer['id'];
		$customer_tags = $pm->asAdministrator( function () use ( $customer_id ) {
			$customer_model = new CustomerModel();
			return $customer_model->list_tags_by_customer_id( $customer_id );
		} );
		$customer_tags_eligibility = CustomerEligibilities::northCommerceCustomerTags()->slug;
		$applied_tags_ids = array_keys( $this->applied_customers[ $customer_tags_eligibility ] );

		foreach ( $customer_tags as $tag ) {
			if ( in_array( $tag['id'], $applied_tags_ids ) ) {
				return true;
			}
		}

		return false;
	}

	protected function is_customer_id_valid(): bool {
		$customer_ids_eligibility = CustomerEligibilities::northCommerceCustomerIds()->slug;

		foreach ( $this->applied_customers[ $customer_ids_eligibility ] as $map_record ) {
			if ( $map_record['customer_id'] === $this->customer['id'] ) {
				return true;
			}
		}

		return false;
	}

	protected function is_wordpress_user_valid(): bool {
		if ( ! $this->customer['wp_user_id'] ) {
			// uknown `wp_user_id`
			return false;
		}

		$customer_wp_users_eligibility = CustomerEligibilities::wordpressUsers()->slug;
		foreach ( $this->applied_customers[ $customer_wp_users_eligibility ] as $map_record ) {
			if ( $map_record['wp_user_id'] == $this->customer['wp_user_id'] ) {
				return true;
			}
		}

		return false;
	}

	public function error_message( $error_slug = null ): string {
		$errors = [
			'empty_customer' => __( 'Fill up the checkout form and try use this promo code again.', 'north-commerce' ),
			'unvalid_coupon' => __( 'Sorry, you are not allowed to use this promo code.', 'north-commerce' ),
		];

		return $errors[ $error_slug ] ?? $errors['unvalid_coupon'];
	}

}
