<?php
namespace NorthCommerce\Db\Coupons;

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Models\{
	CountryModel,
	CouponModel,
	OrderModel
};
use NorthCommerce\Db\PerspectiveManager;

/**
 * Applied country requirement.
 *
 * @package north-commerce/includes/db/coupons
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.21
 * @version 0.1.21
 */
class Country_Requirement extends Requirement {

	protected $coupon;
	protected $criteria;
	protected $coupon_model;

	public function verify( $coupon, Coupon_Criteria $criteria ) {

		if ( boolval( $coupon['any_country'] ) ) {
			return true;
		}

		$this->coupon = $coupon;
		$this->criteria = $criteria;
		$this->coupon_model = new CouponModel();

		$cart_order = $this->criteria->get_cart_order();

		if ( ! empty( $cart_order['shipping_address_id'] ) ) {
			return $this->validate_checkout_page( $cart_order );
		}

		if ( ! empty( $cart_order['country'] ) ) {
			return $this->validate_single_page_checkout_shortcode();
		}

		return $this->error_message( 'uknown_country' );

	}

	protected function validate_checkout_page() {

		$cart_order = $this->criteria->get_cart_order();

		$order = PerspectiveManager::instance()->asAdministrator( function () use ( $cart_order ) {
			$order_model = new OrderModel();
			return $order_model->get_by_id( $cart_order['id'] );
		} );

		$country_abbreviation = $order['shipping_address']['country']['abbreviation'] ?? null;

		return $this->is_country_valid( $country_abbreviation );

	}

	protected function validate_single_page_checkout_shortcode() {

		$cart_order = $this->criteria->get_cart_order();
		$shipping_country_name = strtolower( trim( $cart_order['country'] ) );

		$countries_list = ( new CountryModel() )->get_formated_list();
		foreach ( $countries_list as $country_abbreviation => $country_name ) {
			if ( strtolower( $country_name ) === $shipping_country_name ) {
				$shipping_country_abbreviation = $country_abbreviation;
				break;
			}
		}

		return $this->is_country_valid( $shipping_country_abbreviation ?? null );

	}

	protected function is_country_valid( $country_abbreviation ) {
		$is_valid = $this->coupon_model->is_applied_country_valid( $this->coupon['id'], $country_abbreviation ?? '' );
		return $is_valid ?: $this->error_message();
	}

	protected function error_message( $error_slug = null ): string {
		$errors = [
			'uknown_country' => __( 'Fill up the checkout form and try use this promo code again.', 'north-commerce' ),
			'unvalid_country' => __( 'This promo code cannot be used for your country.', 'north-commerce' ),
		];

		return $errors[ $error_slug ] ?? $errors['unvalid_country'];
	}

}
