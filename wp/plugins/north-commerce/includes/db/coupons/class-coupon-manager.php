<?php
namespace NorthCommerce\Db\Coupons;

use NorthCommerce\Db\Collections\CouponDiscountTypes as DiscountTypes;
use NorthCommerce\Models\ProductModel;
use DomainException;

/**
 * Coupon manager.
 *
 * @package north-commerce/includes/db/coupons
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.21
 * @version 0.1.25
 */
class Coupon_Manager {

	protected Coupon_Criteria $coupon_criteria;

	private static $me;

	public static function instance(): Coupon_Manager {
		if ( ! self::$me ) {
			self::$me = new Coupon_Manager();
		}
		return self::$me;
	}

	private function __construct() {
	}

	public function coupon_criteria( $request ) {
		$this->coupon_criteria = new Coupon_Criteria();

		$this->cart_criteria( $request['cart'] ?? null );
		$this->order_criteria( $request['order'] ?? $request['shipping'] ?? null );
		$this->customer_criteria( $request['customer'] ?? null );

		return $this->coupon_criteria;
	}

	/**
	 * @version 0.1.24
	 */
	protected function cart_criteria( $cart = [] ) {
		if ( ! $this->coupon_criteria ) {
			return;
		}

		$product_model = new ProductModel();

		$quantity = 0;
		$total = 0;
		$product_variants = [];

		foreach ( $cart as $item ) {
			$quantity += $item['qty'];
			$total += ( floatval( $item['price'] ) * intval( $item['qty'] ) );
			$product_variants[] = $product_model->get_variant_by_id( $item['product_variant_id'] ?? null );
		}

		return $this->coupon_criteria->set_cart( $total, $quantity, $product_variants );
	}

	protected function order_criteria( $order = [] ) {
		if ( ! $this->coupon_criteria ) {
			return;
		}

		return $this->coupon_criteria->set_order( $order );
	}

	protected function customer_criteria( $customer = [] ) {
		if ( ! $this->coupon_criteria ) {
			return;
		}

		return $this->coupon_criteria->set_customer( $customer );
	}

	public function apply_coupon( $coupon, $criteria ) {
		$errors = $this->validate( $coupon, $criteria );

		if ( $errors ) {
			return new Coupon_Application( $errors, 0 );
		}

		$discount = $this->calculate_discount( $coupon, $criteria );

		return new Coupon_Application( $errors, $discount );
	}

	private function validate( $coupon, Coupon_Criteria $criteria ) {
		$result = ( new Status_Requirement() )->verify( $coupon, $criteria );

		if ( is_string( $result ) ) {
			return [ $result ];
		}

		$requirements = [
			new Usage_Requirement(),
			new Minimum_Purchase_Requirement(),
			new Country_Requirement(),
			new Product_Variants_Requirement(),
			new Customer_Requirement(),
		];

		$errors = [];
		foreach ( $requirements as $req ) {
			$result = $req->verify( $coupon, $criteria );
			if ( is_string( $result ) ) {
				$error_message = $result . "\n";
				if ( ! in_array( $error_message, $errors ) ) {
					$errors[] = $error_message;
				}
			}
		}

		$last_error = $errors[ count( $errors ) - 1 ] ?? null;
		if ( $last_error ) {
			$errors[ count( $errors ) - 1 ] = trim( $last_error );
		}

		return $errors;
	}

	/**
	 * @version 0.1.25
	 */
	private function calculate_discount( $coupon, Coupon_Criteria $criteria ) {
		$cart_total = $criteria->get_cart_total();

		if ( $cart_total <= 0 ) {
			return 0;
		}

		$coupon_discount = floatval( $coupon['discount_amount'] );

		switch ( $coupon['coupon_discount_type_id'] ) {
			case DiscountTypes::fixed()->id:
				$cart_discount = $coupon_discount;
				break;

			case DiscountTypes::percent()->id:
				$cart_discount = round( $cart_total * ( $coupon_discount / 100 ), 2 );
				break;

			case DiscountTypes::freeShipping()->id:
				$cart_discount = $criteria->get_cart_order()['shipping'] ?? 0;
				break;

			default:
				throw new DomainException( "Unknown discount type: {$coupon['coupon_discount_type_id']}" );
		}

		if ( $cart_discount > $cart_total ) {
			$cart_discount = $cart_total;
		}

		return round( $cart_discount, 2 );
	}

}
