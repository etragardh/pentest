<?php
/*
 * A PHP file for managing our database driven automations
 */

namespace NorthCommerce\Db;

use NorthCommerce\Db\Automations\{
	BelongsToAutomation,
	CustomerStoreAutomation,
	HideDeletedAutomation,
	SequenceNumberAutomation,
	StripePaymentIntentAutomation,
	StripeSuccessAutomation,
	IdentityTokenLookupAutomation,
	PaypalSuccessAutomation,
	TriggerEventsAutomation,
	VisibleIfAutomation,
	WebhookInvocationAutomation,
	WritePolicyAutomation
};

class AutomationManager {

	private static $instance;

	const AUTOMATION_PERFORMED_ACTION = 'nc-automation-performed-action';

	public static function instance() : AutomationManager {
		if ( self::$instance == null ) {
			self::$instance = new AutomationManager();
		}
		return self::$instance;
	}

	private $is_setup = false;

	public function setup() {
		if ( ! $this->is_setup ) {
			$this->is_setup = true;
			$all_automations = [
				new WritePolicyAutomation(),
				new IdentityTokenLookupAutomation(),
				new StripePaymentIntentAutomation(),
				new StripeSuccessAutomation(),
				new PaypalSuccessAutomation(),
				new SequenceNumberAutomation(),
				new VisibleIfAutomation(),
				new BelongsToAutomation(),
				new CustomerStoreAutomation(),
 				new HideDeletedAutomation(),
				//new	WebhookInvocationAutomation()
				new TriggerEventsAutomation(),
			];

			foreach ( $all_automations as $a ) {
				$this->add_filter( NC_DB_ENTITY_ACCESS_CREATED, [ $a, 'onEntityAccessCreated' ], 10, 3 );
				$this->add_filter( NC_DB_ENTITY_ACCESS_UPDATED, [ $a, 'onEntityAccessUpdated' ], 10, 4 );
				$this->add_filter( NC_DB_ENTITY_ACCESS_CREATE_VALUES, [ $a, 'onEntityAccessCreateValues' ], 10, 2 );
				$this->add_filter( NC_DB_ENTITY_ACCESS_STORE_CHANGES, [ $a, 'onEntityAccessStoreChanges' ], 10, 2 );
				$this->add_filter( NC_DB_ENTITY_ACCESS_UPDATE_CHANGES, [ $a, 'onEntityAccessUpdateChanges' ], 10, 3 );
				$this->add_filter( NC_DB_ENTITY_ACCESS_CRITERIA, [ $a, 'onEntityAccessCriteria' ], 10, 2 );
				$this->add_filter( NC_DB_ENTITY_ACCESS_DELETE_CRITERIA, [ $a, 'onEntityAccessDeleteCriteria' ], 10, 2 );
				$this->add_action( NC_DB_ENTITY_ACCESS_DELETED, [ $a, 'onEntityAccessDeleted' ], 10, 3 );
			}

		}
	}

	private function add_filter( $name, $callback, $priority, $num_args ) {
		add_filter( $name, function(...$args) use ( $name, $callback ) {
			$start = microtime( true );
			$result = call_user_func_array( $callback, $args );
			$end = microtime( true );

			do_action(
				self::AUTOMATION_PERFORMED_ACTION,
				get_class( $callback[0] ),
				$name,
				round( $end - $start, 4 ),
				$args,
				$result
			);

			return $result;
		}, $priority, $num_args );
	}

	private function add_action( $name, $callback, $priority, $num_args ) {
		add_action( $name, function(...$args) use ( $name, $callback ) {
			$start = microtime(true);
			call_user_func_array($callback, $args);
			$end = microtime(true);

			do_action(
				self::AUTOMATION_PERFORMED_ACTION,
				get_class( $callback[0] ),
				$name,
				round( $end - $start, 4 ),
				$args,
				null
			);

		}, $priority, $num_args );
	}
}
