<?php
/*
 * A PHP file for working with sequence numbers. Sequence numbers
 * are used to implement values like orders.order_number.
 *
 * We need a separate source for sequence numbers because our IDs
 * for some tables are pubid style.
 */
namespace NorthCommerce\Db;

use North_Commerce_Db_Agent;

define('NC_DB_SEQUENCE_ORDER_NUMBER', 'order-number');
define('NC_DB_SEQUENCE_CUSTOMER_NUMBER', 'customer-number');
define('NC_DB_SEQUENCE_INIT_VALUE', 1000);

class SequenceNumberManager {

	private $agent;
	private $ea;

	public function __construct()
	{
		$this->agent = North_Commerce_Db_Agent::instance();
		$this->ea = $this->agent->entityAccess();
	}

	public function nextOrderNumber() {
		return $this->nextValue(NC_DB_SEQUENCE_ORDER_NUMBER);
	}

	public function nextCustomerNumber() {
		return $this->nextValue(NC_DB_SEQUENCE_CUSTOMER_NUMBER);
	}

	private function nextValue($slug) {
		return $this->agent->withTx(function() use($slug) {
			$found = $this->ea->get('sequence_numbers', [
				'slug' => $slug
			], ['for' => 'UPDATE']);
			$value = $found ? $found['value'] : NC_DB_SEQUENCE_INIT_VALUE;
			$value++;

			if($found) {
				$this->ea->update('sequence_numbers', $found, ['value' => $value]);
			} else {
				$this->ea->create('sequence_numbers', ['slug' => $slug, 'value' => $value]);
			}
			return $value;
		});

	}

}
