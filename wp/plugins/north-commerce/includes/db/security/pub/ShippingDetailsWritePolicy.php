<?php
namespace NorthCommerce\Db\Security\Pub;

use NorthCommerce\Db\Collections\{
	ShippingDetailTypes,
	OrderStatuses
};
use NorthCommerce\Db\Effects\{
	UpdateOrderTransactionAmountEffect,
	InitShippingDetailsEffect,
	UpdateOrderShippingEffect
};
use NorthCommerce\Db\Security\{
	WritePolicy,
	ColumnRules
};
use LogicException;

/**
 * A PHP file for implementing the write policy rules for dealing
 * with shipping details.
 *
 */
class ShippingDetailsWritePolicy extends WritePolicy {

	private $optional_cols = [
		'shipping_rates_internal_id',
		'shipping_rates_easypost_id',
		'carrier',
		'service'
	];

	private $create_required_cols = [
		'order_id',
		'shipping_detail_type_id'
	];

	public function createColumnRules( $values ) {
		$type_id = nc_g( $values, 'shipping_detail_type_id' );

		if ( $type_id == ShippingDetailTypes::planned()->id ) {
			return new ColumnRules( $this->create_required_cols, $this->optional_cols );
		}

		return new ColumnRules( [], [] );
	}

	public function updateColumnRules($shipping_detail, $changes) {
		return new ColumnRules(['order_id'], $this->optional_cols);
	}

	public function prepareForCreate($values) {
		$this->confirmRateSetting($values);
		$this->confirmOrderCreated($values);

		return InitShippingDetailsEffect::run($values);
	}

	public function prepareForUpdate( $entity, $changes ) {
		if ( $entity['order_id'] != $changes['order_id'] ) {
			throw new LogicException(
				"Can't change the order these details are linked"
				. " to: {$entity['order_id']} to {$changes['order_id']}"
			);
		}
		$this->confirmRateSetting($changes);
		$this->confirmOrderCreated($entity);

		return InitShippingDetailsEffect::run($changes);
	}

	public function entityCreated( $sd ) {
		$o = $this->ea->ref( $sd['order_id'] );
		UpdateOrderShippingEffect::run( $o );

		$ot = $this->ea->get( 'order_transactions', [ 'order_id' => $o['id'] ] );
		if( $ot ) {
			UpdateOrderTransactionAmountEffect::run( $ot );
		}

		return $sd;
	}

	public function entityUpdated($sd) {
		return $this->entityCreated($sd);
	}

	private function confirmOrderCreated($payload) {
		$order = $this->ea->ref($payload['order_id']);

		if ( OrderStatuses::created()->id != $order['order_status_id'] ) {
			throw new LogicException("No permission to modify this order");
		}
	}

	private function confirmRateSetting($values) {
		if (
			$values['shipping_rates_easypost_id'] == null
			&& $values['shipping_rates_internal_id'] == null
		) {
			throw new LogicException("Must set internal or easypost rate: " . print_r($values, true));
		}

		if (
			$values['shipping_rates_easypost_id'] != null
			&& $values['shipping_rates_internal_id'] != null
		) {
			throw new LogicException("Can't set both internal and easypost rate");
		}

		if (
			$values['shipping_rates_easypost_id'] != null
			&& (
				!nc_g( $values, 'carrier' )
				|| !nc_g( $values, 'service' )
			)
		) {
			throw new LogicException("Must set carrier and service");
		}
	}

}
