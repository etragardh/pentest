<?php
namespace NorthCommerce\Db\Automations;

use Mollie\Api\Resources\Invoice;
use NorthCommerce\Db\Security\{
	AdministratorPerspective,
	CustomerPerspective,
	NoAccessWritePolicy,
	WritePolicy
};
use NorthCommerce\Db\Sql\{
	ColumnReference,
	BinaryOperator
};
use InvalidArgumentException;
use Exception;

/**
 * Write Policy Automation.
 *
 * Defines what rules / behavior should happen
 * when a customer/public user tries to write to table.
 *
 *
 * @package north-commerce/includes/db/automations
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.21
 * @version 0.1.24
 */
class WritePolicyAutomation	extends BaseAutomation {

	public function onEntityAccessCreateValues( $values, $table ) {
		$wp = $this->writePolicy( $table );
		if ( ! $wp ) {
			return $values;
		}
		$col_rules = $wp->createColumnRules( $values );
		$this->verifyCols( $wp, $table, $col_rules, array_keys( $values ) );

		return $wp->prepareForCreate( $values );
	}

	public function onEntityAccessUpdateChanges( $changes, $table, $existing ) {
		$wp = $this->writePolicy( $table );
		if ( ! $wp ) {
			return $changes;
		}

		$target = $this->perspectiveManager->asAdministrator( function() use ( $table, $existing ) {
			return $this->ea->get( $table, [ 'id' => $existing['id'] ] );
		} );
		$col_rules = $wp->updateColumnRules( $target, $changes );
		$this->verifyCols( $wp, $table, $col_rules, array_keys( $changes ) );

		return $wp->prepareForUpdate( $target, $changes );
	}

	public function onEntityAccessDeleteCriteria( $criteria, $table ) {
		$wp = $this->writePolicy( $table );
		if ( ! $wp ) {
			return $criteria;
		}

		$id = $this->idValue( $criteria, $table );
		if ( ! $id ) {
			throw new InvalidArgumentException(
				"No id column found in: "
				. print_r( $criteria, true )
			);
		}

		$entity = $this->ea->ref( $id);
		if ( ! $entity ) {
			throw new InvalidArgumentException(
				"WritePolicy "
				. get_class( $wp )
				. " invalid id found: [$id]"
			);
		}

		if ( ! $wp->canDelete( $entity ) ) {
			throw new InvalidArgumentException(
				"WritePolicy "
				. get_class( $wp)
				. " doesn't allow delete $table.{$entity['id']}"
			);
		}

		return $criteria;
	}

	private function idValue( $criteria, $table ) {
		$expr = $this->agent->parser()->parseFilter( $table, $criteria );
		$id_value = $expr->reduce(
			function ( $carry, $expr ) use ( $table ) {
				if (
					$expr instanceof BinaryOperator
					&& $expr->operator() == '='
					&& $expr->lhs() instanceof ColumnReference
					&& $expr->lhs()->column() == 'id'
					&& $expr->lhs()->table() == $table
				) {
					return $expr->rhs()->value();
				}
				return $carry;
			},
			false
		);

		if ( $id_value ) {
			return $id_value;
		}

		return false;
	}

	public function verifyCols( $wp, $table, $col_rules, $cols_to_check ) {
		foreach ( $col_rules->required as $key ) {
			if ( ! in_array( $key, $cols_to_check ) ) {
				throw new \Exception( "Required value [$key] not set" );
			}
		}

		foreach ( $cols_to_check as $key ) {
			if ( ! in_array( $key, $col_rules->allowed() ) ) {
				throw new \Exception(
					'WritePolicy: '
					. get_class( $wp )
					. ": not allowed to set [$table].[$key]"
				);
			}
		}
	}

	public function	onEntityAccessCreated( $created, $table, $values ) {
		$wp = $this->writePolicy( $table );
		if ( ! $wp ) {
			return $created;
		}

		return $this->perspectiveManager->asAdministrator( function() use ( $wp, $created ) {
			return $wp->entityCreated( $created );
		} );
	}

	public function onEntityAccessUpdated( $updated, $table, $existing, $changes ) {
		$wp = $this->writePolicy( $table );
		if ( ! $wp ) {
			return $updated;
		}

		return $this->perspectiveManager->asAdministrator( function() use ( $wp, $updated ) {
			return $wp->entityUpdated( $updated);
		} );
	}

	public function onEntityAccessDeleted( $table, $criteria, $deleted ) {
		$wp = $this->writePolicy( $table );
		if ( ! $wp ) {
			return;
		}

		return $this->perspectiveManager->asAdministrator( function() use ( $wp, $deleted) {
			foreach($deleted as $entity) {
				$wp->entityDeleted( $entity );
			}
		});
	}

	/**
	 * Return null if we have no write policy for this table & user's role.
	 *
	 * Otherwise return a WritePolicy object that corresponds to this
	 */
	public function writePolicy( $table ): ?WritePolicy {
		$p = $this->perspectiveManager->currentPerspective();
		$class_template = 'NorthCommerce\\Db\\Security\\%s\\' . nc_class_case( $table ) . 'WritePolicy';

		if ( $p instanceof AdministratorPerspective ) {
			return null;
		}

		if (
			$p instanceof CustomerPerspective
			&& class_exists( sprintf( $class_template, 'Customer' ) )
		) {
			$class_name = sprintf( $class_template, 'Customer' );
			return new $class_name();
		}

		if ( class_exists( sprintf( $class_template, 'Pub' ) ) ) {
			$class_name = sprintf( $class_template, 'Pub');
			return new $class_name();
		}

		return new NoAccessWritePolicy();
	}

}
