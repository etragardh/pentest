<?php
/**
 * A PHP file for handling special behavior when a public user
 * tries to store a customer object
 */

namespace NorthCommerce\Db\Automations;

use NorthCommerce\Db\Security\PublicPerspective;

class CustomerStoreAutomation extends BaseAutomation {

	public function	onEntityAccessStoreChanges( $changes, $table ) {
		if (
			$table == 'customers'
			&& isset( $changes['email'] )
			&& $this->perspectiveManager->currentPerspective() instanceof PublicPerspective
		) {
			$changes = $this->perspectiveManager->asAdministrator( function() use ( $changes ) {
				$found = $this->ea->get( 'customers', [
					'email' => $changes['email']
				] );
				if ( $found ) {
					$changes['id'] = $found['id'];
					unset( $changes['email'] );
				}
				return $changes;
			} );
		}
		return $changes;
	}

}
