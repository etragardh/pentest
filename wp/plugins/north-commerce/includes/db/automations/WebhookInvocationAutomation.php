<?php
/**
 * A PHP file for demonstrating how webhooks can be invoked
 */

namespace NorthCommerce\Db\Automations;

use NorthCommerce\Db\WebhookManager;
use NorthCommerce\Traits\Queueable;
use North_Commerce_Db_Agent;
use North_Commerce_Settings as Settings;


class WebhookInvocationAutomation extends BaseAutomation {

	use Queueable;

	private $db_agent;

	public function __construct() {
		parent::__construct();
		$this->db_agent = North_Commerce_Db_Agent::instance();
		$this->ea = $this->db_agent->entityAccess();

		add_action( 'trigger_webhooks', [ $this, 'invokeWebhookAction' ], 10, 3 );
	}

	public function invokeWebhookAction($action, $payload, $table) {
		$this->invokeWebhook($action, $payload, $table);
	}

	public function maybeScheduleOnEntityAction( $created, $table, $action ) {

		if ( Settings::get_scheduler_status( 'webhook' ) === true ) {
			return $this->schedule_single_action( 'trigger_webhooks', [
				'action' => $action,
				'payload' => $created,
				'table' => $table
			] );
		}

		return $this->invokeWebhook( $action, $created, $table );

	}

	public function onEntityAccessCreated($created, $table, $inputs = []) {
		$this->maybeScheduleOnEntityAction($created, $table, 'created');
		return $created;
	}

	public function onEntityAccessUpdated($updated, $table, $existing, $changes = []) {
		$this->maybeScheduleOnEntityAction($updated, $table, 'updated');
		return $updated;
	}

	private function invokeWebhook($action, $payload, $table) {

		$webhook_manager = new WebhookManager;
		$webhook_triggers = $webhook_manager->find(['action' => $action, 'table' => $table]);

		foreach ( $webhook_triggers as $trigger ) {

			$filters = [
				'north-commerce/webhook',
				"north-commerce/webhook/{$table}",
				"north-commerce/webhook/{$action}",
				"north-commerce/webhook/{$table}/{$action}"
			];

			$hook_payload = $payload;

			foreach($filters as $filter) {
				$hook_payload = apply_filters( $filter, $hook_payload, $trigger );

				if(!$hook_payload) {
					// skip the outer loop, cancelling this webhook
					continue 2;
				}
			}

			$ch = curl_init($trigger['webhook']['url']);
			curl_setopt_array($ch, [
				CURLOPT_TIMEOUT => 4,
				CURLOPT_POSTFIELDS => json_encode($hook_payload),
				CURLOPT_HTTPHEADER => [ 'Content-Type: application/json' ],
				CURLOPT_RETURNTRANSFER => true
			]);

			curl_exec($ch);

		}

		return true;

	}

}
