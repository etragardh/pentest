<?php
/**
 * A PHP file for respecting `belongs_to` meta in our Schema.
 * A table belongs to a specific users if it can be
 * mapped back to a cutomer.wp_user_id reference.
 */
namespace NorthCommerce\Db\Automations;

use NorthCommerce\Db\Security\{
	AdministratorPerspective,
	PublicPerspective
};
use NorthCommerce\Db\Sql\{
	ColumnReference,
	BinaryOperator
};

class BelongsToAutomation extends BaseAutomation {

	public function onEntityAccessCriteria( $criteria, $table ) {
		$bt_col = $this->belongsToColumn( $table );

		if ( ! $bt_col ) {
			return $criteria;
		}

		$pm = $this->agent->perspectiveManager();

		if ( $pm->currentPerspective() instanceof AdministratorPerspective ) {
			return $criteria;
		}

		if ( $pm->currentPerspective() instanceof PublicPerspective ) {
			return $this->mustHaveId( $table, $criteria );
		}

		$u = wp_get_current_user();
		if ( $u->ID == 0 ) {
			throw new \Exception( "No active user found" );
		}

		return [
			'and',
			[ '=', $bt_col, $u->ID ],
			$criteria
		];
	}

	public function	onEntityAccessCreateValues($values, $table)
	{
		return $this->verifyWriteAccess($table, $values);
	}

	public function onEntityAccessUpdateChanges($changes, $table, $existing)
	{
		return $this->verifyWriteAccess($table, $changes);
	}

	public function verifyWriteAccess($table, $return)
	{
		$belongs_to = $this->belongsToColumn($table);

		if($belongs_to) {
			return $return;
		}

		if($this->perspectiveManager->currentPerspective() instanceof AdministratorPerspective) {
			return $return;
		}

		throw new \Exception("You do not have permission to write to $table");
	}

	public function belongsToColumn($table) {
		$schema = $this->agent->schema();
		$table = $schema->tableDefn($table);
		$meta  = nc_g($table, 'meta', []);
		return nc_g($meta, 'belongs_to');
	}

	public function idCols($table) {
		$schema = $this->agent->schema();
		$table = $schema->tableDefn($table);
		$meta  = nc_g($table, 'meta', []);
		$ids = [ 'id' ];
		if($alt_pubid = nc_g($meta, 'alt_pubid')) {
			$ids[] = $alt_pubid;
		}
		return $ids;
	}

	public function mustHaveId( $table, $criteria ) {
		$expr = $this->agent->parser()->parseFilter( $table, $criteria );
		$id_cols = $this->idCols( $table );
		foreach ( $id_cols as $id_col ) {
			$id_eq = $expr->reduce( function( $carry, $expr ) use ( $table, $id_col ) {
				if (
					$expr instanceof BinaryOperator
					&& $expr->operator() == '='
					&& $expr->lhs() instanceof ColumnReference
					&& $expr->lhs()->column() == $id_col
					&& $expr->lhs()->table() == $table
				) {
					return true;
				}
				return $carry;
			}, false);

			if ( $id_eq ) {
				return $criteria;
			}
		}

		$fmt_id_cols = implode( ',', $id_cols );
		throw new \NcNotFoundException( "{$table}.$fmt_id_cols must be found in criteria" );

	}


}
