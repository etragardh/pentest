<?php
namespace NorthCommerce\Db\Automations;

use NorthCommerce\Db\Collections\{
	OrderTransactionStatuses,
	PaymentProviders
};
use NorthCommerce\Services\CustomerPaymentMethodStripeToken;
use North_Commerce_Settings as Settings;

/**
 * Database automations related to Stripe payments.
 *
 * @version 0.1.24
 */
class StripePaymentIntentAutomation extends StripeAutomation {

	public function canAutoCreatePaymentIntent( $order_transaction ) {
		if ( ! $this->stripeClient() ) {
			return false;
		}

		$cpm = $order_transaction['customer_payment_method_id']
			? $this->ea->ref( $order_transaction['customer_payment_method_id'] )
			: false;

		return (
			$cpm
			&& $cpm['payment_provider_id'] == PaymentProviders::stripe()->id
			&& $order_transaction['order_transaction_status_id'] == OrderTransactionStatuses::building()->id
			&& $order_transaction['amount'] > 0
			&& $order_transaction['identity_token'] == null
		);
	}

	public function autoCreatePaymentIntent( $order_transaction ) {
		if ( ! $this->canAutoCreatePaymentIntent( $order_transaction ) ) {
			throw new \Exception( "Can't create a payment intent: " . print_r( $order_transaction, true ) );
		}

		$cpm = $this->ea->ref( $order_transaction['customer_payment_method_id'] );
		$token = CustomerPaymentMethodStripeToken::fromCustomerPaymentMethod( $cpm );

		$pi = $this->stripeClient()->paymentIntents->create( [
			'setup_future_usage' => 'off_session',
			'automatic_payment_methods' => [ 'enabled' => true ],
			'amount' => $order_transaction['amount'] * 100,
			'currency' => strtolower( Settings::get_currency_code() ),
		] + ( $token->stripeCustomer() ? [ 'customer' => $token->stripeCustomer()->id ] : [] ) );

		if ( $pi && nc_g( $order_transaction, 'id' ) ) {
			$this->ea->update( 'order_transactions', $order_transaction, [
				'identity_token' => $pi->id
			] );
		}

		return $pi;
	}

	/**
	 * @version 0.1.24
	 */
	public function maybeAutoCreatePaymentIntent( $table, $entity ) {
		if (
			'order_transactions' === $table
			&& $this->canAutoCreatePaymentIntent( $entity )
		) {
			$pi = $this->autoCreatePaymentIntent( $entity );
			$entity['stripe_client_secret'] = $pi['client_secret'];
			$entity['identity_token'] = $pi['id'];
		}

		return $entity;
	}

	public function maybeAutoUpdatePaymentIntentAmount( $table, $updated, $changes ) {
		$maybe_update = (
			$table == 'order_transactions'
			&& is_numeric(nc_g($changes, 'amount'))
			&& $changes['amount'] > 0
			&& $updated['identity_token']
			&& $updated['customer_payment_method_id']
		);

		if ( $maybe_update ) {
			$cpm = $this->ea->get( 'customer_payment_methods', [
				'id' => $updated['customer_payment_method_id'],
				'payment_provider.slug' => 'stripe'
			] );

			if ( $cpm ) {
				$this->stripeClient()->paymentIntents->update( $updated['identity_token'], [
					'amount' => $updated['amount'] * 100
				] );
			}
		}

		return $updated;
	}

	public function onEntityAccessCreated( $created, $table, $inputs ) {
		return $this->maybeAutoCreatePaymentIntent( $table, $created );
	}

	public function onEntityAccessUpdated( $updated, $table, $existing, $changes ) {
		$updated = $this->maybeAutoCreatePaymentIntent( $table, $updated );
		$updated = $this->maybeAutoUpdatePaymentIntentAmount( $table, $updated, $changes );
		return $updated;
	}

}
