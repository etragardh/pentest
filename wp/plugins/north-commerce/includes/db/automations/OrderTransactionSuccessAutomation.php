<?php
/*
 * A PHP file for being a base class for different payment methods.
 *
 * When an order transaction is marked as being successful, we do
 * two things:
 * 1. Verify with the service that this transaction ID is really valid.
 * 2. Run the Effects to mark the order as paid.
 */

namespace NorthCommerce\Db\Automations;

use NorthCommerce\Db\Collections\{
	OrderStatuses,
	OrderTransactionStatuses,
	PaymentProviders,
	PaymentStatuses
};
use NorthCommerce\Db\Effects\{
	UpdateOrderPaidEffect,
	UpdateOrderTransactionStripeSuccessEffect
};
use NorthCommerce\Db\Security\AdministratorPerspective;
use NcNotFoundException;
use Exception;


abstract class OrderTransactionSuccessAutomation extends BaseAutomation {

	abstract public function paymentProvider();
	abstract public function isSuccessful($transaction_id);

	public function verifyTransaction( $existing, $changes ) {
		$ot = $this->ea->get(
			'order_transactions',
			[ 'id' => $existing['id'] ],
			[ 'not_found' => NC_DB_PANIC ]
		);

		$token = nc_g( $changes, 'identity_token', $ot['identity_token'] );
		if ( ! $token ) {
			throw new NcNotFoundException("Identity token not set, can't verify transaction");
		}

		if ( ! $this->isSuccessful( $token ) ) {
			throw new OrderTransactionUnexpectedStatusException( $token );
		}

		return true;
	}

	public function isSuccessChange( $table, $existing, $changes ) {
		if (
			$table == 'order_transactions'
			&& ( $status_id = nc_g( $changes, 'order_transaction_status_id' ) )
		) {
			$ot = $this->ea->ref( $existing['id'] );
			$cpm = $this->ea->ref( $ot['customer_payment_method_id'] );

			return $this->paymentProvider()->id == $cpm['payment_provider_id']
				&& OrderTransactionStatuses::successful()->id == $status_id;
		}

		return false;
	}

	public function updateCustomerPaymentDetails( $order_transaction ) {
		$o = $this->ea->ref( $order_transaction['order_id'] );

		if (
			in_array(
				$o['payment_status_id'], [
					PaymentStatuses::unpaid()->id,
					PaymentStatuses::pending()->id
				]
			) && $o['order_status_id'] == OrderStatuses::created()->id
		) {
			$o = UpdateOrderPaidEffect::run( $o );
			$cpm = $this->ea->ref( $order_transaction['customer_payment_method_id'] );

			if ( $cpm['payment_provider_id'] == PaymentProviders::stripe()->id ) {
				UpdateOrderTransactionStripeSuccessEffect::run($order_transaction);
			}
		}
	}

	public function onEntityAccessUpdateChanges( $changes, $table, $existing ) {
		$p = $this->perspectiveManager->currentPerspective();

		if ( $p instanceof AdministratorPerspective ) {
			return $changes;
		}

		if ( $this->isSuccessChange( $table, $existing, $changes ) ) {
			$this->verifyTransaction( $existing, $changes );
		}

		return $changes;
	}

	public function	onEntityAccessUpdated($updated, $table, $existing, $changes) {
		$p = $this->perspectiveManager->currentPerspective();

		if ( $p instanceof AdministratorPerspective ) {
			return $updated;
		}

		if ($this->isSuccessChange($table, $existing, $changes)) {
			$this->agent->perspectiveManager()->asAdministrator(function() use ( $updated ) {
				$this->updateCustomerPaymentDetails($updated);
			});
		}

		return $updated;
	}
}

class OrderTransactionUnexpectedStatusException extends Exception {

	public function __construct($tx_id) {
		parent::__construct("$tx_id is not marked as successfully executed");
	}

}
