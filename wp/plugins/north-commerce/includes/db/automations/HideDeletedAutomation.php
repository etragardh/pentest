<?php
/*
 * A PHP file for atomically hiding deleted rows from a table
 */

namespace NorthCommerce\Db\Automations;

use North_Commerce_Db_Agent;
use North_Commerce_Db_Parser;
use NorthCommerce\Db\Sql\ColumnReference;

class HideDeletedAutomation extends BaseAutomation {

	protected $agent;
	private $parser;

	public function __construct() {
		$this->agent = North_Commerce_Db_Agent::instance();
		$this->parser = $this->agent->parser();
	}

	public function onEntityAccessCriteria( $criteria, $table ) {
		$filter = $this->parser->parseFilter( $table, $criteria );
		$scope = $filter->reduce(
			function( $carry, $expr ) {
				if ( ! ( $expr instanceof ColumnReference ) ) {
					return $carry;
				}
				if ( $expr->column() == 'deleted' ) {
					$carry['has_deleted'] = true;
				}
				$table_path = preg_replace( '/[.][^.]+$/', '', $expr->columnExpr() );
				$carry['tables'][ $table_path ] = $expr->table();
				return $carry;
			},
			[
				'tables' => [ '' => $table ],
				'has_deleted' => false
			]
		);

		if ( $scope['has_deleted'] ) {
			return $criteria;
		}

		$updated_criteria = [ 'and', $criteria ];

		foreach ( $scope['tables'] as $table_path => $t ) {
			if ( $this->tableHasDeletedColumn( $t ) ) {
				$clause = $t == $table ? 'deleted' : "$table_path.deleted";
				$updated_criteria[] = [ 'is', $clause, null ];
			}
		}

		return $updated_criteria;
	}

	public function tableHasDeletedColumn($table) {
		return $this->agent->cache()->value(
			"HideDeletedAutomation.tableHasDeletedColumn.$table",
			function() use ( $table ) {
				$schema = $this->agent->schema();
				$cols = $schema->getColumns($table);
				return isset( $cols['deleted'] );
			}
		);
	}
}
