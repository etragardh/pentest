<?php

use NorthCommerce\Db\Shipping\Shipping_Manager;
use NorthCommerce\Db\{
	SequenceNumberManager,
	PerspectiveManager,
	IdManager,
	Schema
};

define( 'NC_DB_AGENT_PREPARE_SQL', 'nc_db_agent_prepare_sql' );

/**
 * Database Agent class.
 *
 * Interacts with db in a more consistent and safe way
 *
 *
 * @package north-commerce/includes/db
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.3
 * @version 0.1.20
 */
class North_Commerce_Db_Agent {

	private static $instance = [];
	private function __construct() {}

	public static function instance() : North_Commerce_Db_Agent {
		if ( self::$instance == null ) {
			self::$instance = new North_Commerce_Db_Agent();
		}
		return self::$instance;
	}

	private $in_tx = false;
	private $schema = null;
	private $generator = null;
	private $updater = null;
	private $introspector = null;
	private $expander = null;
	private $cache = null;
	private $parser = null;
	private $perspective_manager = null;
	private $id_manager = null;
	private $sequence_number_manager = null;
	private $shipping_manager = null;

	/**
	 * Access the system db schema object
	 */
	public function schema(): Schema {
		if ( $this->schema == null ) {
			$this->schema = new Schema();
		}
		return $this->schema;
	}

	/**
	 * Access the system db generator object
	 */
	public function generator() {
		if ( $this->generator == null ) {
			$this->generator = new North_Commerce_Db_Generator();
		}
		return $this->generator;
	}

	public function shipping_manager() {
		if ( $this->shipping_manager == null ) {
			$this->shipping_manager = Shipping_Manager::instance();
		}
		return $this->shipping_manager;
	}

	public function updater() {
		if ( $this->updater == null ) {
			$this->updater = new North_Commerce_Db_Updater();
		}
		return $this->updater;
	}

	public function introspector() {
		if ( $this->introspector == null ) {
			$this->introspector = new North_Commerce_Db_Introspector();
		}
		return $this->introspector;
	}

	public function expander() {
		if ( $this->expander == null ) {
			$this->expander = new North_Commerce_Db_Expander();
		}
		return $this->expander;
	}

	public function cache() : North_Commerce_Db_Cache
	{
		if ( $this->cache == null ) {
			$this->cache = new North_Commerce_Db_Cache();
		}
		return $this->cache;
	}


	public function parser() {
		if ( $this->parser == null ) {
			$this->parser = new North_Commerce_Db_Parser();
		}

		return $this->parser;
	}


	public function entityAccess() : North_Commerce_Db_Entity_Access {
		return North_Commerce_Db_Entity_Access::instance();
	}

	public function perspectiveManager() : PerspectiveManager {
		if($this->perspective_manager == null) {
			$this->perspective_manager = PerspectiveManager::instance();
		}
		return $this->perspective_manager;
	}

	public function idManager() : IdManager {
		if($this->id_manager == null) {
			$this->id_manager = new IdManager();
		}
		return $this->id_manager;
	}

	public function sequenceNumberManager() : SequenceNumberManager {
		if($this->sequence_number_manager == null) {
			$this->sequence_number_manager = new SequenceNumberManager();
		}
		return $this->sequence_number_manager;
	}

	/*
     * Like $wpdb's query, but throws an exception so
     * code can depend on the queries executing.
     */
    public function query($sql)
    {
		return $this->withDb(function($wpdb) use($sql) {
			$sql = apply_filters(NC_DB_AGENT_PREPARE_SQL, $sql);
			return $wpdb->query($sql);
		});
    }

	/*
	 * Expose $wpdb's prepare function
	 */
	public function prepare($sql, $args) {
		return $this->withDb(function($wpdb) use($sql, $args) {
			return $wpdb->prepare($sql, $args);
		});
	}

	/*
	 * Like $wpdb's insert but throw an exception and returns the
	 * ID of the row inserted
	 */
	public function insert($table, $data, $format = null) {
		return $this->withDb(function($wpdb) use($table, $data, $format) {
			$wpdb->insert($table, $data, $format);
			return $wpdb->insert_id;
		});
	}

	/*
	 * like $wpdb->get_var but with error checking
	 */
	public function getVar($sql, $params = [], $options = []) {
		$rows = $this->getResults($sql, $params);
		if($rows) {
			return nc_g(array_values($rows[0]), 0);
		} else {
			return nc_g($options, 'default', null);
		}
	}

	/*
	 * Like get_col from $wpdb,but with error checking
	 */
	public function getCol($sql)
	{
		return $this->withDb(function($wpdb) use($sql) {
			return $wpdb->get_col($sql);
		});
	}


	/*
	 * Like get_results from $wpdb, but with error checking
	 */
	public function getResults( $sql, $params = [], $options = [] ) {
		return $this->withDb( function ( $wpdb ) use ( $sql, $params, $options ) {
			if ( $params ) {
				$sql = $wpdb->prepare($sql, $params);
			}
			$sql = apply_filters('nc_db_agent_prepare_sql', $sql);
			$finalize_sql = nc_g($options, 'finalize_sql', function($sql) { return $sql; });
			$sql = $finalize_sql($sql);
			return $wpdb->get_results($sql, ARRAY_A);
		});
	}

	public function withDb( $callback ) {
        global $wpdb;
        $error_visiblity = $wpdb->hide_errors();
		$result = $callback( $wpdb );
		$wpdb->show_errors($error_visiblity);

		if ($this->isDeadlockError( $wpdb->last_error ) ) {
			$sql = $wpdb->last_query;
			throw new NcDbAgentDeadlockException($wpdb->last_error, $sql);
		} elseif ( $wpdb->last_error ) {
			$sql = $wpdb->last_query;
            throw new NcDbAgentException( $wpdb->last_error, $sql );
        } else {
            return $result;
        }
	}

	public function isDeadlockError($msg) {
		return $msg && stripos($msg,"deadlock") !== false && stripos($msg, "restart") !== false;
	}

	/**
	 * @version 0.1.20
	 */
	public function escSql( $value, $fmt = null ) {
		global $wpdb;

		if ( is_array( $value ) || is_object( $value )) {
			throw new NcDbAgentException("Can't escape: " . print_r($value, true), false);
		}

		if ( null === $value ) {
			return 'NULL';
		}

		if ( false === $value ) {
			return 0;
		}

		if ( ! $fmt ) {

			if ( preg_match('/^[-]?[1-9][0-9]*$/', $value ) ) {
				$fmt = '%d';
			} elseif ( preg_match('/^[-]?[0-9]*[.][0-9]+/', $value ) ) {
				$fmt = '%f';
			} else {
				$fmt = '%s';
			}

		}

		return $wpdb->prepare( $fmt, $value );
	}

	public function withTx($callback) {
		global $wpdb;
		$started_tx = false;
		if ( ! $this->in_tx ) {
			$wpdb->query('START TRANSACTION');
			$this->in_tx = true;
			$started_tx = true;
		}

		$timeout = microtime(true) + 10;

		while ( microtime(true) < $timeout ) {
			try {
				$result = $this->withDb( $callback );
				if ( $started_tx ) {
					$wpdb->query('COMMIT');
				}
				return $result;
			} catch ( NcDbAgentDeadlockException $ex ) {
				if ( $started_tx ) {
					$millis = rand(250, 1000);
					usleep(1000 * $millis);
				} else {
					throw $ex;
				}
			} catch ( Exception $ex ) {
				if ( $started_tx ) {
					$wpdb->query('ROLLBACK');
				}
				throw $ex;
			} finally {
				if ( $started_tx ) {
					$this->in_tx = false;
				}
			}
		}
	}

	public function entityToTableName($entity) {
		return str_replace('-', '_', $entity);
	}

	public function tableToEntityName($table) {
		return str_replace('_', '-', $table);
	}

	public function tableToClassName($table) {
		return str_replace(' ', '', ucwords(str_replace('_', ' ', $table)));
	}

	public function sqlTimestamp( $t ) {
		return date( 'Y-m-d H:i:s', $t );
	}
}

class NcDbAgentException extends Exception {
	function __construct( $error, $sql ) {
		$message = $sql
			? "$error caused by [$sql]"
			: $error;
		parent::__construct( $message );
	}
}

class NcDbAgentDeadlockException extends NcDbAgentException
{
}
