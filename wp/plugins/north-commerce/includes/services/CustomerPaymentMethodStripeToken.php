<?php
/*
 * A PHP file for representing a  customer_payment_method.token where the token is specific to stripe.
 *
 * You can create a token from a variety of source objects, like a customer record or an order
 * transaction.
 *
 * The string value of this object is what's ultimately stored in the customer_payment_methods.token
 * column.
 */

namespace NorthCommerce\Services;

use Exception;

class CustomerPaymentMethodStripeToken
{

	private $stripe_customer;
	private $stripe_payment_method;
	private static $helper;

	public static function fromCustomer($customer) {
		$helper = self::helper();

		$stripe_customer = $helper->stripeCustomerFromCustomer($customer);
		return new CustomerPaymentMethodStripeToken($stripe_customer, null);
	}

	public static function fromOrderTransaction($ot) : CustomerPaymentMethodStripeToken {
		if(!preg_match('/^pi_/', $ot['identity_token'])) {
			throw new Exception("Can't create token from non payment intent looking id: [{$ot['identity_token']}]");
		}

		$sc = self::helper()->stripeClient();
		$payment_intent = $sc->paymentIntents->retrieve($ot['identity_token']);
		$payment_method = $payment_intent->payment_method ?
						  $sc->paymentMethods->retrieve($payment_intent->payment_method) :
						  null;
		$customer       = $sc->customers->retrieve($payment_intent->customer);
		return new CustomerPaymentMethodStripeToken($customer, $payment_method);
	}

	public static function fromCustomerPaymentMethod($cpm) {
		$token = $cpm['token'];
		$sc = self::helper()->stripeClient();
		if (preg_match('/^cus_/', $token)) {
			return new CustomerPaymentMethodStripeToken(
				$sc->customers->retrieve($token),
				null
			);
		}

		if (preg_match('/^pm_/', $token)) {
			$pm = $sc->paymentMethods->retrieve($token);
			$c = $sc->customers->retrieve($pm->customer);
			return new CustomerPaymentMethodStripeToken($c, $pm);
		}

		throw new Exception("Can't parse: [$token]");
	}

	private static function helper() : StripeHelper {
		if (!self::$helper) {
			self::$helper = new StripeHelper();
		}
		return self::$helper;
	}

	private function __construct( $stripe_customer, $stripe_payment_method ) {
		$this->stripe_customer = $stripe_customer;
		$this->stripe_payment_method = $stripe_payment_method;
	}

	public function stripeCustomer() {
		return $this->stripe_customer;
	}

	public function brand() {
		if ( ! $this->stripe_payment_method ) {
			return null;
		}

		switch ( $this->stripe_payment_method->type ) {
			case 'card':
				return $this->stripe_payment_method->card->brand;

			default:
				$this->stripe_payment_method->type;
		}
	}

	public function expirationMonth() {
		if ( ! $this->stripe_payment_method ) {
			return null;
		}

		switch ( $this->stripe_payment_method->type ) {
			case 'card':
				return $this->stripe_payment_method->card->exp_month;

			default:
				return null;
		}
	}

	public function expirationYear() {
		if ( ! $this->stripe_payment_method ) {
			return null;
		}

		switch ( $this->stripe_payment_method->type ) {
			case 'card':
				return $this->stripe_payment_method->card->exp_year;

			default:
				return null;
		}
	}


	public function last4() {
		if ( ! $this->stripe_payment_method ) {
			return null;
		}

		switch ( $this->stripe_payment_method->type ) {
			case 'card':
				return $this->stripe_payment_method->card->last4;

			default:
				return null;
		}
	}

	public function toString() {
		return $this->stripe_payment_method
			? $this->stripe_payment_method->id
			: ( $this->stripe_customer ? $this->stripe_customer->id : '' );
	}
}
