<?php
namespace NorthCommerce\Api;

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\Collections\{
	ShippingDetailTypes,
	PaymentStatuses,
	OrderStatuses,
	RateTypes
};
use NorthCommerce\Models\{
	ShippingProfileModel,
	CustomerModel,
	ProductModel,
	OrderModel
};
use WP_REST_Response;
use WP_REST_Request;
use Exception;

/**
 * Order CRUD manager.
 *
 * @package north-commerce/includes/api
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.24
 * @version 0.1.25
 */
class Order_Helper {

	private static $self;

	protected WP_REST_Request $request;
	protected OrderModel $order_model;
	protected ProductModel $product_model;
	protected CustomerModel $customer_model;
	protected ShippingProfileModel $shipping_profile_model;
	protected array $order_errors_list;

	private $order;

	/**
	 * @version 0.1.25
	 */
	public static function instance( WP_REST_Request &$request ): Order_Helper {
		if (
			! self::$self
			|| $request->get_route() !== self::$self->request->get_route()
			|| $request->get_params() !== self::$self->request->get_params()
		 ) {
			self::$self = new self( $request );
		}

		return self::$self;
	}

	/**
	 * @version 0.1.25
	 */
	private function __construct( WP_REST_Request $request ) {
		$this->request = $request;
		$this->order_model = new OrderModel();
		$this->product_model = new ProductModel();
		$this->customer_model = new CustomerModel();
		$this->shipping_profile_model = new ShippingProfileModel();
	}

	/**
	 * @version 0.1.25
	 */
	public function permission_callback():bool {
		if ( $this->draft_creation()  ) {
			return current_user_can( 'administrator' );
		}

		$nonce_name = 'admin_order_create';
		$_REQUEST[ $nonce_name ] = $this->request->get_header( 'nc_order_nonce' ) ?? null;
		return current_user_can( 'administrator' )
			&& check_ajax_referer( 'order_new', $nonce_name, false );
	}

	/**
	 * @since 0.1.25
	 */
	public function draft_creation(): bool {
		$route_ending = substr( $this->request->get_route(), strlen( '/north-commerce/v1' ) );
		return '/orders/draft' === $route_ending;
	}

	public function create_draft(): WP_REST_Response {
		do_action( 'north-commerce/rest/order/create/before', $this->request );

		$customer_id = $this->request->get_param( 'customerID' );
		$customer = $this->customer( $customer_id );

		if ( empty( $customer['id'] ) ) {
			throw new Exception( "Customer is missing, can't create new Order Draft." );
		}

		$order_draft = [
            'customer_id' => $customer['id'],
            'shipping_address_id' => $customer['addresses'][0]['id'] ?? null,
            'billing_address_id' => null,
            'order_status_id' => OrderStatuses::draft()->id,
            'payment_status_id' => PaymentStatuses::unpaid()->id,
            'shipping' => 0,
            'tax' => 0,
            'subtotal' => 0,
            'total' => 0,
            'paid' => 0,
        ];

		try {
			$new_order = $this->order_model->store( $order_draft );
		} catch ( Exception $e ) {
			$exception_text = $e->getMessage();
		}

		if ( empty( $new_order['id'] ) ) {
			do_action( 'north-commerce/rest/order/create/failed', $new_order ?? null, $e ?? null );

			return isset( $exception_text )
				? $this->notice_response( $exception_text )
				: $this->error_message( 'not_saved' );
		}

		do_action( 'north-commerce/rest/order/create/success', $new_order );

		return new WP_REST_Response( [
			'success' => true,
			'message' => __( 'Order updated successfully.', 'north-commerce' ),
			'redirect' => admin_url( 'admin.php?page=north-commerce-orders&id=' . $new_order['id'] ),
		] );
	}

	/**
	 * @version 0.1.25
	 */
	public function update_order(): WP_REST_Response {
		$order_id = $this->request->get_param( 'id' );

		do_action( 'north-commerce/rest/order/update/before', $this->request );

		$this->order = $this->order_model->get_by_id( $order_id );

		if ( empty( $this->order['id'] ) ) {
			return $this->error_message( 'order_unknown' );
		}

		try {
			$this->update_line_items();
			$this->update_shipping();
			$this->update_taxation();
			$this->update_payment_status();
			$this->update_total();
		} catch( Exception $e ) {
			$exception_text = $e->getMessage();
			return $this->notice_response( $exception_text );
		}

		do_action( 'north-commerce/rest/order/update/success', $this->order );

		return new WP_REST_Response( [
			'success' => true,
			'message' => __( 'Order updated successfully.', 'north-commerce' ),
			'redirect' => admin_url( 'admin.php?page=north-commerce-orders&id=' . $this->order['id'] ),
		] );
	}

	protected function customer( $customer_id = null ): ?array {
		$customer_id = $customer_id ?? $this->order['customer_id'];
		return $this->customer_model->get_by_id( $customer_id, [
			'columns' => [ 'id', 'email' ],
			'expand' => [ 'addresses' ]
		] );
	}

	/**
	 * @since 0.1.25
	 */
	protected function update_line_items(): void {
		if ( ! $this->order_draft() ) {
			throw new Exception( 'Line Items are mutable only for Order with `draft` status.' );
		}

		if ( ! $this->request->get_param( 'line_items' ) ) {
			return;
		}

		$store_new_line_items = function () {
			$products_ref = array();
			$order_data = [
				'_line_items' => array(),
			];

			$ensure_product_ref = function ( $li ) use ( &$products_ref ): array {
				$products_ref[ $li['product_id'] ] = $this->product_model->get_by_id( $li['product_id'], [
					'columns' => [ 'id', 'name', 'base_price', 'has_product_variants' ],
					'expand' => [ 'product_variants' ],
				] );

				$product_variants = $products_ref[ $li['product_id'] ]['product_variants'] ?? [];
				$products_ref[ $li['product_id'] ]['product_variants'] = array();
				foreach ( $product_variants as $variant ) {
					$products_ref[ $li['product_id'] ]['product_variants'][ $variant['id'] ] = $variant;
				}

				return $products_ref[ $li['product_id'] ];
			};

			$new_line_items = $this->request->get_param( 'line_items' );
			foreach ( $new_line_items as $li ) {
				$li_product = $products_ref[ $li['product_id'] ] ?? $ensure_product_ref( $li );
				$li_variant = $li_product['product_variants'][ $li['product_variant_id'] ];

				$li_max_quantity = $li_variant['quantity'];
				$qty = isset( $li_max_quantity )
					? min( $li['qty'], $li_max_quantity )
					: $li['qty'];

				$li_variant_price = $li_variant['price'] ?? $li_product['base_price'];

				$li_variant_description = $li_product['name'];
				if ( $li_variant['slug'] ) {
					$li_variant_description .= ": {$li_variant['slug'] }";
				}

				$order_data['_line_items'][] = [
					'ordered_variant_id' => $li['product_variant_id'],
					'ordered_variant_description' => $li_variant_description,
					'ordered_quantity' => $qty,
					'ordered_amount' => $li_variant_price * $qty,
				];
			}

			$this->store_order( $order_data );
		};

		$initial_line_items = $this->order['line_items'] ?? null;
		$delete_obsolete_line_items = function () use ( $initial_line_items ) {
			if ( ! $initial_line_items ) {
				return;
			}

			$ea = \North_Commerce_Db_Agent::instance()->entityAccess();
			foreach ( $initial_line_items ?? [] as $li ) {
				$ea->delete( 'line_items', [ 'id' => $li['id'] ] );
			}
		};

		$update_subtotal = function () {
			$order = $this->order_model->get_by_id( $this->order['id'], [
				'expand' => [ 'line_items' ]
			] );

			$subtotal = 0;
			foreach ( $order['line_items'] as $li ) {
				$subtotal += $li['amount'];
			}

			$this->store_order( compact( 'subtotal' ) );
		};

		$store_new_line_items();
		$delete_obsolete_line_items();
		$update_subtotal();
	}

	/**
	 * @version 0.1.25
	 */
	protected function update_taxation(): void {
		$tax_data = $this->request->get_param( 'tax' );

		if ( ! isset( $tax_data['charge'] ) || ! isset( $tax_data['rate'] ) ) {
			return;
		}

		$subtotal = floatval( $this->order['subtotal'] );
		$shipping = floatval( $this->order['shipping'] );
		$taxable_amount = $subtotal + $shipping;
		$tax_rate = $tax_data['charge'] ? floatval( $tax_data['rate'] ) : 0;
		$tax = round( $taxable_amount * $tax_rate / 100, 2 );

		$this->store_order( compact( 'tax' ) );
	}

	/**
	 * @version 0.1.25
	 */
	protected function update_shipping(): void {
		$shipping = $this->request->get_param( 'shipping' );

		if ( empty( $shipping['option'] ) ) {
			return;
		}

		$so = $shipping[ $shipping['option'] ] ?? null;

		if ( $so && RateTypes::flatRate()->id === $so['rateTypeId'] ) {
			$shipping['rate'] = $this->shipping_profile_model->get_flat_rate_by_id( $so['rateId'] );
		}

		if ( $so && RateTypes::calculatedRate()->id === $so['rateTypeId'] ) {
			$applicable_rates = $this->shipping_profile_model->list_calculated_rates_by_shipping_option( $so );
			$shipping['rate'] = reset( $applicable_rates );
			$shipping['rate']['price'] = $so['ratePrice'];
		}

		$this->store_order( [
			'shipping' => $this->shipping_cost( $shipping ),
			'shipping_address_id' => $this->customer()['addresses'][0]['id'] ?? null,
		] );

		$this->update_shipping_detail( $shipping );
	}

	private function shipping_cost( array $shipping_data ): float {
		if ( empty( $shipping_data['rate'] ) ) {
			return 0.00;
		}

		$rate = $shipping_data['rate'];

		$shipping_cost = $rate['price'] ?? 0;
		if ( $rate['fee_flat'] ) {
			$shipping_cost += $rate['fee_flat'];
		}
		if ( $rate['fee_percent'] ) {
			$shipping_cost += round( $rate['price'] * ( $rate['fee_percent'] / 100 ), 2 );
		}

		return round( $shipping_cost, 2 );
	}

	/**
	 * @since 0.1.25
	 */
	protected function update_shipping_detail( array $shipping ): void {
		$ea = \North_Commerce_Db_Agent::instance()->entityAccess();
		$order = $this->order_model->get_by_id( $this->order['id'], [
			'columns' => [ 'id', 'shipping' ],
			'expand' => 'shipping_details'
		] );

		$delete_shipping_detail = function() use ( $ea, $order ): void {
			$sd_id = $order['shipping_details'][0]['id'] ?? null;
			if ( ! $sd_id ) {
				return;
			}

			$sd = $ea->delete( 'shipping_details', [ 'id' => $sd_id ] );
		};

		if ( 'free-shipping' === $shipping['option'] ) {
			$delete_shipping_detail();
			return;
		}

		$so = $shipping[ $shipping['option'] ];
		$rate = $shipping['rate'] ?? null;
		$rate_price = $so['ratePrice'] ?? $rate['price'];

		$rate_id = function ( string $type ) use ( $so, $shipping ): ?int {
			switch ( $type ) {
				case 'internal':
					return $so['rateTypeId'] === RateTypes::flatRate()->id && isset( $so['rateId'] )
						? intval( $so['rateId'] )
						: null;

				case 'calculated':
					return $so['rateTypeId'] === RateTypes::calculatedRate()->id && isset( $shipping['rate']['id'] )
						? intval( $shipping['rate']['id'] )
						: null;

				default:
					throw new \InvalidArgumentException( 'Uknown Rate Type alias: ' . $type );
			}
		};

		$shipping_details = [
			'order_id' => $this->order['id'],
			'shipping_detail_type_id' => ShippingDetailTypes::planned()->id,
			'rate_type_id' => $so['rateTypeId'],
			'shipping_cost' => round( $rate_price, 2 ),
			'shipping_rates_internal_id' => $rate_id( 'internal' ),
			'shipping_rates_easypost_id' => $rate_id( 'calculated' ),
			'handling_fee' => $rate['fee_flat'],
			'handling_percentage' => $rate['fee_percent'],
		];

		if ( RateTypes::calculatedRate()->id === $so['rateTypeId'] ) {
			$easypost_details = [
				'carrier' => $so['carrier'],
				'service' => $so['service'],
				'easypost_rate_id' => $so['easyPostRateID'],
			];
			array_merge( $shipping_details, $easypost_details );
		}

		$sd_id = $order['shipping_details'][0]['id'] ?? null;
		if ( $sd_id ) {
			$shipping_details['id'] = $sd_id;
		}

		$sd = $ea->store( 'shipping_details', $shipping_details );
	}

	/**
	 * @version 0.1.25
	 */
	protected function update_payment_status(): void {
		$payment_status = $this->request->get_param( 'payment_status' );

		if (
			! isset( $payment_status )
			|| $payment_status['slug'] !== PaymentStatuses::paid()->slug
		) {
			return;
		}

		$this->store_order( [
			'payment_status_id' => PaymentStatuses::paid()->id,
			'order_status_id' => OrderStatuses::unfulfilled()->id,
			'paid' => $this->order['total'],
		] );
	}

	/**
	 * @since 0.1.25
	 */
	protected function update_total() {
		$total = $this->order['subtotal'] + $this->order['shipping'] + $this->order['tax'];
		$this->store_order( compact( 'total' ) );
	}

	/**
	 * @since 0.1.25
	 */
	private function order_draft(): bool {
		return OrderStatuses::draft()->id === $this->order['order_status_id'];
	}

	/**
	 * @since 0.1.25
	 */
	private function store_order( array $order ): array {
		if ( empty( $order['id'] ) ) {
			$order['id'] = $this->order['id'];
		}
		return $this->order = $this->order_model->store( $order );
	}

	protected function set_errors_list(): void {
		$this->order_errors_list = [
			'default' => __( 'Internal error.', 'north-commerce' ),
			'order_unknown' => __( 'Internal error. Uknown Order ID.', 'north-commerce' ),
			'not_saved' => __( 'Cannot save Order. Please, try again', 'north-commerce' ),
			'cart_empty' => __( 'There is no Products for current Order. Please add some.', 'north-commerce' ),
			'invalid_variant_id' => __( 'There is invalid Product Variant in your Cart. Please try again.', 'north-commerce' ),
		];
	}

	protected function error_message( $error_slug ): WP_REST_Response {
		if ( empty( $this->order_errors_list )  ) {
			$this->set_errors_list();
		}

		$error_text = $this->order_errors_list[ $error_slug ] ?? $this->order_errors_list[ 'default' ];
		return $this->notice_response( $error_text );
	}

	private function notice_response( string $message ): WP_REST_Response {
		return new WP_REST_Response( [
			'success' => false,
			'message' => $message,
		] );
	}

}
