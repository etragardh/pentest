<?php
namespace NorthCommerce\Api;

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Models\CustomerModel;
use WP_REST_Response;
use WP_REST_Request;
use Exception;

/**
 * Customer CRUD manager.
 *
 * @package north-commerce/includes/api
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.24
 * @version 0.1.25
 */
class Customer_Helper {

	private static $self;

	protected WP_REST_Request $request;
	protected CustomerModel $customer_model;
	protected array $customer_errors_list;

	public static function instance(): Customer_Helper {
		if ( ! self::$self ) {
			self::$self = new self();
		}
		return self::$self;
	}

	private function __construct() {
		$this->customer_model = new CustomerModel;
	}

	public function permission_callback( WP_REST_Request &$request ) {
		$form_nonce = $request->get_param( 'customer' )['form_nonce'] ?? null;
		$_REQUEST['form_nonce'] = $_REQUEST['form_nonce'] ?? $form_nonce;

		return current_user_can( 'administrator' )
			&& check_ajax_referer( 'customer_form', 'form_nonce', false );
	}

	/**
	 * @version 0.1.25
	 */
	public function create_customer( WP_REST_Request &$request ): WP_REST_Response {
		$this->request = $request;

		do_action( 'north-commerce/rest/customer/create/before', $this->request );

		$data = $this->get_validated_customer_data();

		if ( $data instanceof WP_REST_Response ) {
			return $data;
		}

		$customer_data = $data['customer'];
		try {
			$new_customer = $this->customer_model->store( $customer_data );
		} catch ( Exception $e ) {
			$exception_text = $e->getMessage();
		}

		if ( empty( $new_customer['id'] ) ) {
			do_action( 'north-commerce/rest/customer/create/failed', $new_customer ?? null, $e ?? null );

			return isset( $exception_text )
				? $this->notice_response( $exception_text )
				: $this->error_message( 'not_saved' );
		}

		try {
			$address_data = $data['shipping_address'];
			if ( $address_data ) {
				$address_data['customer_id'] = $new_customer['id'];
				$new_address = $this->customer_model->store_address( $address_data );
			}
		} catch( Exception $e ) {
			$exception_text = $e->getMessage();
		}

		if (
			$address_data
			&& ! isset( $new_address['id'] )
		) {
			do_action( 'north-commerce/rest/customer/create/failed', $new_customer, $new_address );

			return isset( $exception_text )
				? $this->notice_response( $exception_text )
				: $this->error_message( 'not_saved_address' );
		}

		do_action( 'north-commerce/rest/customer/create/success', $new_customer );

		return new WP_REST_Response( [
			'success' => true,
			'message' => __( 'New Customer created.', 'north-commerce' ),
			'new_customer_id' => $new_customer['id'],
		] );
	}

	/**
	 * Validate Customer before create
	 */
	private function get_validated_customer_data() {
		$data = $this->request->get_param( 'customer' );

		$need_bailout = function ( $data ) {
			return $data instanceof WP_REST_Response;
		};

		$is_valid = function ( $data ) use ( $need_bailout ) {
			return ! $need_bailout( $data );
		};

		$result = $this->validate_customer_name( $data );

		if ( $is_valid( $result ) ) {
			$result = $this->validate_customer_email( $data );
		}

		if ( $is_valid( $result ) ) {
			$result = $this->validate_customer_phone( $data );
		}

		if ( $is_valid( $result ) ) {
			$result = $this->validate_customer_shipping_address( $data );
		}

		if ( $need_bailout( $result ) ) {
			return $result;
		}

		$validated_data = [
			'customer' => [
				'first_name' => $data['first_name'],
				'last_name' => $data['last_name'],
				'email' => $data['email'],
				'country_code' => $data['country_code'],
				'phone' => $data['phone'],
			],
			'shipping_address' => $data['validated_address'],
		];

		return apply_filters( 'north-commerce/rest/customer/create/data', $validated_data );
	}

	protected function validate_customer_name( &$data ) {
		$data['first_name'] = sanitize_text_field( $data['first_name'] ?? '' );
		$data['last_name'] = sanitize_text_field( $data['last_name'] ?? '' );
	}

	protected function validate_customer_email( &$data ) {
		if ( empty( $data['email'] ) ) {
			return $this->error_message( 'email_empty' );
		}

		$data['email'] = sanitize_text_field( $data['email'] );

		$is_valid_email = filter_var( $data['email'], FILTER_VALIDATE_EMAIL );
        if ( ! $is_valid_email ) {
			return $this->error_message( 'email_unvalid' );
        }

		$options = [
			'columns' => [
				'id',
				'customer_number',
				'first_name',
				'last_name',
				'email'
			],
			'expand' => false,
		];
		$customer = $this->customer_model->get_by_email( $data['email'], $options );

		if ( ! empty( $customer['id'] ) ) {
			return $this->error_message( 'email_duplicate' );
		}
	}

	protected function validate_customer_phone( &$data ) {
		$data['country_code'] = sanitize_text_field( $data['country_code'] ?? '' );
		$data['phone'] = sanitize_text_field( $data['phone'] ?? '' );

		if ( ! $data['phone'] ) {
			$data['country_code'] = '';
		}
	}

	protected function validate_customer_shipping_address( &$data ) {
		$data['validated_address'] = [
			'first_name' => sanitize_text_field( $data['shipping_first_name'] ),
			'last_name' => sanitize_text_field( $data['shipping_last_name'] ),
			'phone' => sanitize_text_field( $data['phone'] ),
			'state' => sanitize_text_field( $data['shipping_state'] ),
			'country_id' => sanitize_text_field( $data['shipping_country_id'] ),
			'city' => sanitize_text_field( $data['shipping_city'] ),
			'addressline1' => sanitize_text_field( $data['shipping_address'] ),
			'addressline2' => sanitize_text_field( $data['shipping_address_2'] ),
			'zipcode' => sanitize_text_field( $data['shipping_zip'] ),
			'is_default_shipping' => true,
			'is_default_billing' => true,
		];

		if (
			! $data['validated_address']['city']
			&& ! $data['validated_address']['addressline1']
		) {
			$data['validated_address'] = null;
		}
	}

	protected function set_errors_list() {
		$this->customer_errors_list = [
			'default' => __( 'Internal error.', 'north-commerce' ),
			'name_empty' => __( 'Customer name is missing.', 'north-commerce' ),
			'email_empty' => __( 'Customer email is missing.', 'north-commerce' ),
			'email_unvalid' => __( 'Customer email is unvalid. Try another one.', 'north-commerce' ),
			'email_duplicate' => __( 'Customer with such email is already registered. Choose another email.', 'north-commerce' ),
			'phone_empty' => __( 'Customer phone is missing.', 'north-commerce' ),
			'not_saved' => __( 'Cannot save Customer. Please, try again', 'north-commerce' ),
			'not_saved_address' => __( 'Cannot save Customer Shipping Address. Please, try again', 'north-commerce' ),
		];
	}

	protected function error_message( $error_slug ) {
		if ( empty( $this->customer_errors_list )  ) {
			$this->set_errors_list();
		}

		$error_text = $this->customer_errors_list[ $error_slug ] ?? $this->customer_errors_list[ 'default' ];
		return $this->notice_response( $error_text );
	}

	private function notice_response( string $message ): WP_REST_Response {
		return new WP_REST_Response( [
			'success' => false,
			'message' => $message,
		] );
	}

}
