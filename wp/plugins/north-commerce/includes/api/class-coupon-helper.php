<?php
namespace NorthCommerce\Api;

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\Collections\{
    CouponCustomerEligibilities as CustomerEligibilities,
	CouponDiscountTypes as DiscountTypes,
	CouponStatuses as Statuses
};
use NorthCommerce\Db\Coupons\Coupon_Manager;
use NorthCommerce\Db\PerspectiveManager;
use NorthCommerce\Traits\Queueable;
use NorthCommerce\Models\{
	CouponModel,
	CountryModel,
	ProductModel
};
use NorthCommerce\Template_Manager;
use North_Rest_Conrtoller;
use North_Commerce_Settings as Settings;
use WP_REST_Response;
use WP_REST_Request;
use DateTimeZone;
use Exception;
use DateTime;

/**
 * Coupon CRUD manager.
 *
 * @package north-commerce/includes/api
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.21
 * @version 0.1.25
 */
class Coupon_Helper {

	use Queueable;

	private static $self;

	protected WP_REST_Request $request;
	protected CouponModel $coupon_model;
	protected array $coupon_errors_list;

	public static function instance(): Coupon_Helper {
		if ( ! self::$self ) {
			self::$self = new self();
		}
		return self::$self;
	}

	private function __construct() {
		$this->coupon_model = new CouponModel;
	}

	public function permission_callback( WP_REST_Request &$request ) {
		$rest_namespace = North_Rest_Conrtoller::get_namespace();
		$request_route_prefixed = $request->get_route();
		$request_route = substr( $request_route_prefixed, strlen( "/{$rest_namespace}/" ) );

		$archive_route = 'coupons';
		if ( $archive_route === substr( $request_route, 0, strlen( $archive_route ) ) ) {
			return current_user_can( 'administrator' );
		}

		$single_route = 'coupon';
		if ( $single_route === substr( $request_route, 0, strlen( $single_route ) ) ) {
			$_REQUEST['form_nonce'] = $_REQUEST['form_nonce'] ?? $request->get_header( 'nc-form-nonce' );
			return check_ajax_referer( 'coupon_form', 'form_nonce', false );
		}
	}

	public function get_coupons_list( WP_REST_Request &$request ) {
		$template = new Template_Manager( 'admin', [
			NC_TEMPLATE_DELEGATE => new \North_Commerce_Admin_Base
		] );
		$coupon_model = new CouponModel();

		$current_page = (int) sanitize_text_field( $_GET['paged'] ?? 1 );
		$coupons_per_page = (int) sanitize_text_field( $_GET['posts_per_page'] ?? 10 );
		$status = sanitize_text_field( $_GET['status'] ?? '' );

		$search = $request->get_header( 'nc-coupon-search' );
		$search_input = sanitize_text_field( json_decode( $search )->couponSearch ?? '' );
		$search_input = trim( $search_input );

		$filter_criteria = [];

		if ( $status && 'all' !== $status ) {
			$filter_criteria[] = [ 'eq', 'coupon_status.slug', $status ];
		}

		if ( $search_input ) {
			if (
				'#' === substr( $search_input, 0, 1 )
				&& $id = intval( substr( $search_input, 1 ) )
			) {
				// assume that `#123` is an ID search
				$filter_criteria[] = [ 'eq', 'id', "{$id}" ];
			} else {
				$filter_criteria[] = [
					'or',
					[ 'eq', 'id', "{$search_input}" ],
					[ 'like', 'name', "%{$search_input}%" ],
				];
			}
		}

		$options = [
			'limit' => $coupons_per_page,
		];

		$offset = $coupons_per_page * ( $current_page - 1 );
		if ( $offset ) {
			$options['offset'] = $offset;
		}

		$date_sort = strtoupper( $_GET['coupon_date_sort'] ?? 'DESC' );
		if ( in_array( $date_sort, [ 'ASC', 'DESC' ] ) ) {
			$options['order_by'] = "created {$date_sort}";
		}

		$usage_sort = strtoupper( $_GET['coupon_usage_sort'] ?? '' );
		if ( in_array( $usage_sort, [ 'ASC', 'DESC' ] ) ) {
			$options['order_by'] = "usage_counter {$usage_sort}, {$options['order_by']}";
		}

		$criteria = $filter_criteria
			? [ 'and', $filter_criteria ]
			: true;

		$criteria = apply_filters( 'north-commerce/get_coupons_list/criteria', $criteria );
		$options = apply_filters( 'north-commerce/get_coupons_list/options', $options );

		$coupons_list = $coupon_model->list( $criteria, $options );
		$total_count = $coupon_model->count( $criteria );

		if ( $coupons_list ) {
			ob_start();
			foreach ( $coupons_list as $coupon ) {
				$template->use( 'coupon/list/coupon-item', compact( 'coupon' ) );
			}
			$result['coupons_html'] = ob_get_contents();
            ob_end_clean();

            $result['maxPage'] = ceil( $total_count / $coupons_per_page );
		} else {
			$result['coupons_html'] = '<div class="result__empty">'
				. __( 'Coupons not found!', 'north-commerce' )
				. '</div>';
            $result['maxPage'] = 0;
		}

        $result['currentPage'] = $current_page;
        $result['currentStatus'] = $status ?: 'all';

        $result['paginationText'] = count( $coupons_list )
            ? $offset + 1 . '-' . ( $offset + count( $coupons_list ) ) . ' of ' . $total_count
            : __( '0-0 of 0', 'north-commerce' );

		$result['statusCounters'] = [
            'all' => $coupon_model->count(),
        ];
        foreach ( $coupon_model->list_statuses() as $status ) {
            $result['statusCounters'][ $status['slug'] ] = $coupon_model->count_by_status_id( $status['id'] );
        }

		$result['success'] = true;

        return $result;
	}

	/**
	 * @version 0.1.25
	 */
	public function create_coupon( WP_REST_Request &$request ): WP_REST_Response {
		$this->request = $request;

		do_action( 'north-commerce/coupon/create/before', $this->request );

		try {
			$validated_coupon = $this->get_validated_coupon_data();
		} catch ( Exception $e ) {
			return $this->notice_response( $e->getMessage() );
		}

		list(
			$coupon_data,
			$applied_product_variants,
			$applied_countries,
			$applied_customers
		) = $validated_coupon;

		try {
			$new_coupon = $this->coupon_model->store( $coupon_data );
		} catch( Exception $e ) {
			$exception_text = $e->getMessage();
		}

		if ( ! isset( $new_coupon['id'] ) ) {
			do_action( 'north-commerce/coupon/create/failed', $coupon_data );
			$exception_text = $exception_text ?? $this->error_message( 'not_saved' );
			return $this->notice_response( $exception_text );
		}

		$this->update_coupon_applieds( $new_coupon, compact(
			'applied_product_variants',
			'applied_countries',
			'applied_customers',
		) );

		$this->schedule_status_change( $new_coupon );

		do_action( 'north-commerce/coupon/create/success', $new_coupon );

		return new WP_REST_Response( [
			'success' => true,
			'message' => __( 'New Coupon created.', 'north-commerce' ),
			'redirect' => admin_url( 'admin.php?page=north-commerce-coupons&action=edit&id=' . $new_coupon['id'] ),
		] );
	}

	/**
	 * @version 0.1.25
	 */
	public function update_coupon( WP_REST_Request $request ): WP_REST_Response {
		$this->request = $request;

		do_action( 'north-commerce/coupon/update/before', $this->request );

		try {
			$validated_coupon = $this->get_validated_coupon_data();
		} catch ( Exception $e ) {
			return $this->notice_response( $e->getMessage() );
		}

		list(
			$coupon_data,
			$applied_product_variants,
			$applied_countries,
			$applied_customers
		) = $validated_coupon;

		add_filter( NC_DB_ENTITY_ACCESS_CRITERIA, [ $this, 'allow_deleted_in_entity_access_criteria' ], 20, 2 );

		$updated_coupon = $this->coupon_model->store( $coupon_data );

		remove_filter( NC_DB_ENTITY_ACCESS_CRITERIA, [ $this, 'allow_deleted_in_entity_access_criteria' ], 20, 2 );

		if ( ! isset( $updated_coupon['id'] ) ) {
			do_action( 'north-commerce/coupon/update/failed', $coupon_data );
			return $this->notice_response( $this->error_message( 'not_updated' ) );
		}

		$this->update_coupon_applieds( $updated_coupon, compact(
			'applied_product_variants',
			'applied_countries',
			'applied_customers',
		) );

		$this->schedule_status_change( $updated_coupon );

		do_action( 'north-commerce/coupon/update/success' );

		return new WP_REST_Response( [
			'success' => true,
			'message' => __( 'Coupon updated.', 'north-commerce' ),
			'redirect' => admin_url( 'admin.php?page=north-commerce-coupons&action=edit&id=' . $updated_coupon['id'] ),
		] );
	}

	/**
	 * Validate Coupon before create/update
	 *
	 * @version 0.1.25
	 */
	private function get_validated_coupon_data(): array {
		$data = $this->retrieve_coupon_form_data();
		$this->validate_coupon_name( $data );

		if ( 0 === $data['usage_limit'] ) {
			throw new Exception( $this->error_message( 'usage_limit' ) );
		} elseif ( '' === $data['usage_limit'] ) {
			$data['usage_limit'] = null; // `null` implied as unlimited usage
		} else {
			$data['usage_limit'] = intval( $data['usage_limit'] );
		}

		if ( empty( $data['coupon_mode_id'] ) ) {
			throw new Exception( $this->error_message( 'mode_empty' ) );
		} else {
			$data['coupon_mode_id'] = intval( $data['coupon_mode_id'] );
		}

		$this->validate_coupon_requirement( $data );
		$this->validate_coupon_discount_type( $data );

		$data['any_product'] = 'products_any' === $data['products'];
		$applied_product_variants = (array) ( $data['product_variants_applied'] ?? [] );
		unset( $data['products'], $data['product_variants_applied'] );

		$data['any_country'] = 'countries_any' === $data['countries'];
		$applied_countries = $data['countries_applied'] ?? [];
		unset( $data['countries'], $data['countries_applied'] );

		$data['any_customer'] = 'customers_any' === $data['customers'];
		$applied_customers = (array) ( $data['customers_applied'] ?? [] );
		unset( $data['customers'], $data['customers_applied'] );

		$this->validate_coupon_active_dates( $data );

		$data['coupon_status_id'] = $this->retrieve_coupon_status_id( $data['time_start'], $data['time_end'] );

		if ( $data['coupon_status_id'] !== (int) Statuses::disabled()->id ) {
			$data['deleted'] = null;
		}

		$validated_data = [
			$data,
			$applied_product_variants,
			$applied_countries,
			$applied_customers
		];

		return apply_filters( 'north-commerce/coupon/validated-data', $validated_data );
	}

	/**
	 * @version 0.1.25
	 */
	protected function retrieve_coupon_form_data() {
		$body_json = $this->request->get_body();
		$body_obj = json_decode( $body_json );
		$request_params = (array) $body_obj;

		$input_prefix = 'coupon_';

		$data = [];
		foreach ( $request_params as $var_name => $value ) {
			if ( 0 !== strpos( $var_name, $input_prefix ) ) {
				continue;
			}
			if ( false !== strpos( $var_name, '_id', -3 ) ) {
				$data[ $var_name ] = $value;
				continue;
			}

			$unprefixed_name = substr( $var_name, strlen( $input_prefix ) );
			$data[ $unprefixed_name ] = $value;
		}

		if ( ! empty( $data['coupon_id'] ) ) {
			$data['id'] = intval( $data['coupon_id'] );
			unset( $data['coupon_id']);

			if ( $data['id'] !== $this->request->get_param('id') ) {
				throw new Exception( $this->error_message( 'default' ) );
			}
		}

		if ( empty( $data ) ) {
			throw new Exception( $this->error_message( 'form_empty' ) );
		}

		return $data;
	}

	/**
	 * @version 0.1.25
	 */
	protected function validate_coupon_name( &$data ): void {
		if ( empty( $data['name'] ) ) {
			throw new Exception( $this->error_message( 'promocode_empty' ) );
		}

		if ( strlen( $data['name'] ) < 3 ) {
			throw new Exception( $this->error_message( 'short' ) );
		}

		$data['name'] = sanitize_text_field( $data['name'] );
		$data['slug'] = sanitize_title( $data['name'] );

		if ( ! empty( $data['id'] ) ) {
			// Bailout, if within update process.
			return;
		}

		$coupon = $this->coupon_model->get_by_slug( $data['slug'] );

		$active_statuses_ids = [
			'published' => Statuses::published()->id,
			'scheduled' => Statuses::scheduled()->id,
		];

		if (
			! empty( $coupon['id'] )
			&& in_array( $coupon['coupon_status_id'], $active_statuses_ids )
		) {
			throw new Exception( $this->error_message( 'duplicate' ) );
		}
	}

	/**
	 * @version 0.1.25
	 */
	protected function validate_coupon_requirement( &$data ): void {
		if ( empty( $data['coupon_requirement_id'] ) ) {
			throw new Exception( $this->error_message( 'requirement_empty' ) );
		}

		$data['coupon_requirement_id'] = intval( $data['coupon_requirement_id'] );
		$requirement = $this->coupon_model->get_requirement_by_id( $data['coupon_requirement_id'] );

		$data['requirement_amount'] = $data[ $requirement['slug'] . '_requirement' ] ?? null;
		if ( isset( $data['requirement_amount'] ) ) {
			$data['requirement_amount'] = floatval( $data['requirement_amount'] );
		}

		if (
			isset( $data['requirement_amount'] )
			&& $data['requirement_amount'] <= 0
		) {
			throw new Exception( $this->error_message( 'requirement_amount' ) );
		}

		unset(
			$data['minimum-purchase-amount_requirement'],
			$data['minimum-quantity_requirement'],
		);
	}

	/**
	 * @version 0.1.25
	 */
	protected function validate_coupon_discount_type( &$data ): void {
		if ( empty( $data['coupon_discount_type_id'] ) ) {
			throw new Exception( $this->error_message( 'discount_type_empty' ) );
		}

		$data['coupon_discount_type_id'] = intval( $data['coupon_discount_type_id'] );
		$discount_type = $this->coupon_model->get_discount_type_by_id( $data['coupon_discount_type_id'] );
		$discount_amount = $data[ $discount_type['slug'] . '_discount_amount' ] ?? 0;
		$data['discount_amount'] = floatval( $discount_amount );

		unset(
			$data['percent_discount_amount'],
			$data['fixed_discount_amount'],
		);
	}

	/**
	 * @version 0.1.25
	 */
	protected function validate_coupon_active_dates( &$data ): void {
		if ( $data['date_start'] && $data['time_start'] ) {
			$date_time_start = sanitize_text_field( $data['date_start'] . ' ' . $data['time_start'] );
			$timestamp_start = $this->convert_client_datetime_into_timestamp( $date_time_start );

			unset( $data['date_start'] );
		}

		if ( empty( $timestamp_start ) ) {
			throw new Exception( $this->error_message( 'time_start_empty' ) );
		}

		$timestamp_end = null;
		if ( ! empty( $data['date_end_toggle'] ) ) {
			$date_end = $data['date_end'] ?? '';
			$time_end = $data['time_end'] ?? '';
			$date_time_end = sanitize_text_field( $date_end . ' ' . $time_end );
			$timestamp_end = $this->convert_client_datetime_into_timestamp( $date_time_end );

			if ( $timestamp_end < $timestamp_start ) {
				throw new Exception( $this->error_message( 'time_end_less_time_start' ) );
			}
			if ( $timestamp_end == $timestamp_start ) {
				throw new Exception( $this->error_message( 'time_end_eq_time_start' ) );
			}
			if ( $timestamp_end < time() ) {
				throw new Exception( $this->error_message( 'time_end_less_time_now' ) );
			}
		}
		unset(
			$data['date_end_toggle'],
			$data['date_end']
		);

		$data['time_start'] = CouponModel::sql_timestamp( $timestamp_start );
		$data['time_end'] = $timestamp_end
			? CouponModel::sql_timestamp( $timestamp_end )
			: null; // `null` implied as unlimited lifetime
	}

	protected function retrieve_coupon_status_id( $sql_time_start, $sql_time_end ): int {
		$time_now = $this->convert_server_datetime_into_timestamp( date( $this->sql_time_format() ) );
		$time_start = strtotime( $sql_time_start );
		$time_end = strtotime( $sql_time_end );

		if ( $time_now >= $time_start ) {
			$status_id = Statuses::published()->id;
		}
		if ( $time_start > $time_now ) {
			$status_id = Statuses::scheduled()->id;
		}
		if ( $time_end && $time_now > $time_end ) {
			$status_id = Statuses::expired()->id;
		}

		return (int) $status_id;
	}

	protected function convert_server_datetime_into_timestamp( string $date_time ):int {
		$default_timezone = date_default_timezone_get();
		$nc_time_zone = Settings::get_current_time_zone();

		$dt = new DateTime( $date_time, new DateTimeZone( $default_timezone ) );
		$dt->setTimezone( new DateTimeZone( $nc_time_zone ) );
		return $dt->getTimestamp();
	}

	protected function convert_client_datetime_into_timestamp( string $date_time ):int {
		$default_timezone = date_default_timezone_get();
		$nc_time_zone = Settings::get_current_time_zone();

		$dt = new DateTime( $date_time, new DateTimeZone( $nc_time_zone ) );
		$dt->setTimezone( new DateTimeZone( $default_timezone ) );
		return $dt->getTimestamp();
	}

	public function schedule_status_change( array $coupon ): void {

		$this->unschedule_status_change( $coupon['id'] );

		if ( Statuses::scheduled()->id === $coupon['coupon_status_id'] ) {
			$time = strtotime( $coupon['time_start'] );
		}

		if (
			Statuses::published()->id === $coupon['coupon_status_id']
			&& $coupon['time_end']
		) {
			$time = strtotime( $coupon['time_end'] );
		}

		if ( empty( $time ) ) {
			return;
		}

		$action = $this->schedule_single_action( 'nc_coupon_status_change', [ 'id' => $coupon['id'] ], $time );

	}

	public function unschedule_status_change( $coupon_id ): void {
		$action = $this->unschedule_action( 'nc_coupon_status_change', [ 'id' => $coupon_id ] );
	}

	protected function update_coupon_applieds( array $coupon, array $applieds ) {

		$applied_product_variants = boolval( $coupon['any_product'] ) ? array() : $applieds['applied_product_variants'];
		$this->update_applied_product_variants( $coupon['id'], $applied_product_variants );

		$applied_countries = boolval( $coupon['any_country'] ) ? array() : $applieds['applied_countries'];
		$this->update_applied_countries( $coupon['id'], $applied_countries );

		$applied_customers = boolval( $coupon['any_customer'] ) ? array() : $applieds['applied_customers'];
		$this->update_applied_customers( $coupon['id'], $applied_customers );

	}

	protected function update_applied_product_variants( $coupon_id, array $applied_product_variants ) {
		$product_model = new ProductModel();

		$stored_applied_product_variants = $this->coupon_model->list_applied_product_variants_by_id( $coupon_id );
		$stored_apv = [];
		foreach ( $stored_applied_product_variants as $record ) {
			$product_variant_id = $record['product_variant_id'] ?? null;
			$stored_apv[ $product_variant_id ] = $record;
		}

		foreach ( $applied_product_variants as $product_id => $variants_map ) {

			$options = [
				'columns' => [ 'id', 'name' ],
				'expand' => [
					'product_variants',
					'product_variants.product_variant_type',
				]
			];
			$product = $product_model->get_by_id( $product_id, $options );

			$store_applied_variant = function ( $variant_id ) use ( &$stored_apv, $coupon_id )  {
				if ( ! $variant_id ) {
					return 'variant_id is missed.';;
				}

				if ( isset( $stored_apv[ $variant_id ] ) ) {
					unset( $stored_apv[ $variant_id ] );
					return 'no DB update needed.';
				}

				$map_data = [
					'coupon_id' => $coupon_id,
					'product_variant_id' => $variant_id,
				];

				return $this->coupon_model->store_applied_product_variant( $map_data );
			};

			if ( empty( $variants_map )  ) {
				$solo_variant_id = null;
				foreach ( $product['product_variants'] as $variant ) {
					if ( 'solo' === $variant['product_variant_type']['slug'] ) {
						$solo_variant_id = $variant['id'];
						break;
					}
				}

				$result = $store_applied_variant( $solo_variant_id );
				continue;
			}

			$product_variants = [];
			foreach ( $product['product_variants'] as $variant ) {
				$product_variants[ $variant['id'] ] = $variant;
			}

			foreach ( $variants_map as $variant_id ) {
				if (
					! array_key_exists( $variant_id, $product_variants )
					|| $product_variants[ $variant_id ]['deleted']
				) {
					continue;
				}

				$result = $store_applied_variant( $variant_id );

				unset( $product_variants[ $variant_id ] );
			}

		}

		foreach ( $stored_apv as $unused_record ) {
			$this->coupon_model->delete_applied_product_variant_by_id( $unused_record['id'] );
		}
	}

	/**
	 * @version 0.1.24
	 */
	protected function update_applied_countries( $coupon_id, array $applied_countries ) {
		$full_countries_list = ( new CountryModel() )->list_all( true, [
			'columns' => [ 'id', 'name', 'abbreviation' ]
		] );
		$countries_list = [];
		foreach( $full_countries_list as $country ) {
			$countries_list[ $country['abbreviation'] ] = $country;
		}

		$stored_applied_countries = $this->coupon_model->list_applied_countries_by_id( $coupon_id );
		$stored_ac = [];
		foreach ( $stored_applied_countries as $record ) {
			$abbreviation = $record['country']['abbreviation'] ?? null;
			$stored_ac[ $abbreviation ] = $record;
		}

		foreach ( $applied_countries as $country_abbr ) {
			if ( empty( $countries_list[ $country_abbr ] )  ) {
				continue;
			}

			if ( isset( $stored_ac[ $country_abbr ] ) ) {
				unset( $stored_ac[ $country_abbr ] );
				continue;
			}

			$map_data = [
				'coupon_id' => $coupon_id,
				'country_id' => $countries_list[ $country_abbr ]['id'],
			];
			$result = $this->coupon_model->store_applied_country( $map_data );

			unset( $countries_list[ $country_abbr ] );
		}

		foreach ( $stored_ac as $unused_record ) {
			$this->coupon_model->delete_applied_country_by_id( $unused_record['id'] );
		}
	}

	protected function update_applied_customers( $coupon_id, array $applied_customers ) {
		$customer_new_eligibility = CustomerEligibilities::newCustomer()->slug;
        // CustomerEligibilities::customerEmails()->slug;
        $customer_ids_eligibility = CustomerEligibilities::northCommerceCustomerIds()->slug;
        $customer_tags_eligibility = CustomerEligibilities::northCommerceCustomerTags()->slug;
        $wp_users_eligibility = CustomerEligibilities::wordpressUsers()->slug;
        $wp_roles_eligibility = CustomerEligibilities::wordpressRoles()->slug;

		$stored_records = $this->coupon_model->list_applied_customers_by_id( $coupon_id );
		$stored_apv = [];
		foreach ( $stored_records as $eligibility_type => $eligibility_value ) {
			if ( $customer_ids_eligibility === $eligibility_type ) {
				foreach ( $eligibility_value as $record ) {
					$customer_id = $record['customer_id'] ?? null;
					$stored_apv[ $eligibility_type ][ $customer_id ] = $record;
				}
				continue;
			}

			if ( $customer_tags_eligibility === $eligibility_type ) {
				foreach ( $eligibility_value as $record ) {
					$tag_id = $record['customer_tag_id'] ?? null;
					$stored_apv[ $eligibility_type ][ $tag_id ] = $record;
				}
				continue;
			}

			if ( $wp_roles_eligibility === $eligibility_type ) {
				foreach ( $eligibility_value as $record ) {
					$wp_role_slug = $record['wp_role'] ?? null;
					$stored_apv[ $eligibility_type ][ $wp_role_slug ] = $record;
				}
				continue;
			}

			if ( $eligibility_value ) {
				$stored_apv[ $eligibility_type ] = $eligibility_value;
			}
		}

		foreach ( $applied_customers as $eligibility_type => $eligibility_values ) {

			$map_data = [
				'coupon_id' => $coupon_id,
			];

			if ( 'ncCustomerNew' === $eligibility_type ) {
				if ( (bool) ( $stored_apv[ $customer_new_eligibility ][0]['customer_new'] ?? false ) ) {
					unset( $stored_apv[ $customer_new_eligibility ][0] );
					continue;
				}

				$map_data['customer_new'] = true;
				$result = $this->coupon_model->store_applied_customer( $map_data );
				continue;
			}

			if ( 'ncCustomersIds' === $eligibility_type ) {
				foreach ( $eligibility_values as $customer_id ) {
					if ( (bool) ( $stored_apv[ $customer_ids_eligibility ][ $customer_id ] ?? false ) ) {
						unset( $stored_apv[ $customer_ids_eligibility ][ $customer_id ] );
						continue;
					}

					$map_data['customer_id'] = $customer_id;
					$result = $this->coupon_model->store_applied_customer( $map_data );
				}
				continue;
			}

			if ( 'ncCustomersTags' === $eligibility_type ) {
				foreach ( $eligibility_values as $tag_id ) {
					if ( (bool) ( $stored_apv[ $customer_tags_eligibility ][ $tag_id ] ?? false ) ) {
						unset( $stored_apv[ $customer_tags_eligibility ][ $tag_id ] );
						continue;
					}

					$map_data['customer_tag_id'] = $tag_id;
					$result = $this->coupon_model->store_applied_customer( $map_data );
				}
				continue;
			}

			if ( 'wpUserIds' === $eligibility_type ) {
				foreach ( $eligibility_values as $wp_user_id ) {
					if ( (bool) ( $stored_apv[ $wp_users_eligibility ][ $wp_user_id ] ?? false ) ) {
						unset( $stored_apv[ $wp_users_eligibility ][ $wp_user_id ] );
						continue;
					}

					$map_data['wp_user_id'] = $wp_user_id;
					$result = $this->coupon_model->store_applied_customer( $map_data );
				}
				continue;
			}

			if ( 'wpRoles' === $eligibility_type ) {
				foreach ( $eligibility_values as $wp_role_slug ) {
					if ( (bool) ( $stored_apv[ $wp_roles_eligibility ][ $wp_role_slug ] ?? false ) ) {
						unset( $stored_apv[ $wp_roles_eligibility ][ $wp_role_slug ] );
						continue;
					}

					$map_data['wp_role'] = $wp_role_slug;
					$result = $this->coupon_model->store_applied_customer( $map_data );
				}
				continue;
			}

		}

		foreach ( $stored_apv as $eligibility_type => $eligibility_value ) {
			foreach ( $eligibility_value as $unused_record ) {
				$this->coupon_model->delete_applied_customer_by_id( $unused_record['id'] );
			}
		}
	}

	/**
	 * Allow 'Disabled' Coupons for DB qeury.
	 *
	 * @see \NorthCommerce\Db\Automations\HideDeletedAutomation;
	 */
	public function allow_deleted_in_entity_access_criteria( $criteria, $table ) {
		if (
			'coupons' !== $table
			|| ! is_array( $criteria )
			|| 'and' !== $criteria[0]
		) {
			return $criteria;
		}

		$updated_criteria = [];
		foreach ( $criteria as $c ) {
			if (
				is_array( $c )
				&& 3 === count( $c )
				&& 'is' === $c[0]
				&& 'deleted' === $c[1] // `Disabled` coupons marked as `deleted`
				&& null === $c[2]
			) {
				continue;
			}
			$updated_criteria[] = $c;
		}

		return $updated_criteria;
	}

	public function get_coupon( WP_REST_Request $request ) {
		// TODO: add logic
	}

	/**
	 * @version 0.1.23
	 */
	public function delete_coupon( WP_REST_Request $request ): WP_REST_Response {
		$coupon_id = $request->get_param( 'id' );

		do_action( 'north-commerce/coupon/delete/before', $coupon_id );

		$result = $this->coupon_model->delete( $coupon_id );
		$this->unschedule_status_change( $coupon_id );

		do_action( 'north-commerce/coupon/delete/success', $coupon_id );

		return new WP_REST_Response( [
			'success' => true,
			'message' => __( 'Coupon deleted successfully.', 'north-commerce' ),
			'redirect' => admin_url( 'admin.php?page=north-commerce-coupons' ),
		] );
	}

	/**
	 * @version 0.1.25
	 */
	public function calculate_cart_discount( $coupon, $request_body ) {
		$coupon_manager = Coupon_Manager::instance();
		$criteria = $coupon_manager->coupon_criteria( $request_body );
		$outcome = $coupon_manager->apply_coupon( $coupon, $criteria );

		if ( ! $outcome->can_use() ) {
			throw new Exception( $outcome->error_message() );
		}

		return $outcome->calculated_cart_discount();
	}

	/**
	 * @version 0.1.25
	 */
	public function apply_coupon_on_checkout( WP_REST_Request $request ): WP_REST_Response {
		$request_body = json_decode( $request->get_body() ?? '', true );

		try {
			$coupon = $this->derrive_coupon_from_promocode( $request );
			$cart_discount = $this->calculate_cart_discount( $coupon, $request_body );
			$this->update_coupon_order_map( $coupon['id'], $request_body['order']['id'] ?? null );
		} catch ( NoSuitableCoupon $nsc ) {
			return new WP_REST_Response( [ 'success' => true ] );
		} catch ( Exception $e ) {
			return $this->notice_response( $e->getMessage() );
		}

		return new WP_REST_Response( [
			'success' => true,
			'coupon' => [
				'promocode' => $coupon['name'],
				'modeSlug' => $coupon['coupon_mode']['slug'],
				'discountTypeSlug' => $coupon['coupon_discount_type']['slug'],
				'discountAmount' => floatval( $coupon['discount_amount'] ),
				'totalCartDiscount' => $cart_discount,
			],
		] );
	}

	/**
	 * @version 0.1.25
	 */
	public function calculate_coupon_discount_on_single_page_checkout( WP_REST_Request $request ): WP_REST_Response {
		try {
			$coupon = $this->derrive_coupon_from_promocode( $request );
		} catch ( Exception $e ) {
			return $this->notice_response( $e->getMessage() );
		}

		$request_body = json_decode( $request->get_body() ?? '', true );

		$product_model = new ProductModel();
		foreach ( $request_body['cart'] as &$cart_item ) {
			if ( ! $cart_item['product_variant_id'] && $cart_item['product_id'] ) {
				$product = $product_model->get_by_id( $cart_item['product_id'], [
					'columns' => [
						'id',
						'name'
					],
					'expand' => [
						'product_variants',
						'product_variants.product_variant_type'
					]
				] );

				foreach ( $product['product_variants'] as $variant ) {
					if ( 'solo' === $variant['product_variant_type']['slug'] ) {
						$solo_id = $variant['id'];
						break;
					}
				}
				$cart_item['product_variant_id'] = $solo_id ?? null;
			}

		}

		try {
			$cart_discount = $this->calculate_cart_discount( $coupon, $request_body );
		} catch ( Exception $e ) {
			return $this->notice_response( $e->getMessage() );
		}

		return new WP_REST_Response( [
			'success' => true,
			'coupon' => [
				'promocode' => $coupon['name'],
				'modeSlug' => $coupon['coupon_mode']['slug'],
				'typeSlug' => $coupon['coupon_discount_type']['slug'],
				'discountTypeSlug' => $coupon['coupon_discount_type']['slug'],
				'discountAmount' => floatval( $coupon['discount_amount'] ),
				'totalCartDiscount' => $cart_discount,
			],
		] );
	}

	/**
	 * @version 0.1.25
	 */
	protected function derrive_coupon_from_promocode( WP_REST_Request $request ) {
		if ( 'automatic' === $request->get_header( 'nc_type' ) ) {
			return $this->most_profitable_automatic_coupon( $request );
		}

		$request_code = $request->get_param( 'code' );
		$promocode = urldecode( $request_code );
		$promocode = sanitize_text_field( $promocode );

		if ( ! $promocode ) {
			if ( $request_code ) {
				throw new Exception( $this->error_message( 'uknown' ) );
			}

			throw new Exception( $this->error_message( 'empty' ) );
		}

		$coupon = $this->coupon_model->get_by_code( $promocode );

		if ( ! $coupon ) {
			throw new Exception( $this->error_message( 'uknown' ) );
		}

		return $coupon;
	}

	/**
	 * Get the most profitable coupon among `automatic` ones
	 *
	 * @version 0.1.25
	 */
	protected function most_profitable_automatic_coupon( WP_REST_Request $request ) {
		$automatic_coupons = $this->coupon_model->list_automatics();

		$discount_types = [
			'fixed' => (int) DiscountTypes::fixed()->id,
			'percent' => (int) DiscountTypes::percent()->id,
			'free_shipping' => (int) DiscountTypes::freeShipping()->id,
		];

		$coupons = [
			$discount_types['fixed'] => [],
			$discount_types['percent'] => [],
			$discount_types['free_shipping'] => [],
		];

		foreach ( $automatic_coupons as $coupon ) {
			$coupons[ $coupon['coupon_mode_id'] ][] = $coupon;
		}

		$request_body = json_decode( $request->get_body() ?? '', true );
		$coupon_manager = Coupon_Manager::instance();
		$coupon_criteria = $coupon_manager->coupon_criteria( $request_body );

		foreach ( $coupons as $type_id => $type_coupons ) {
			foreach ( $type_coupons as $coupon ) {
				if ( empty( $most_profitable ) ) {
					$candidate = $coupon;
				} else {

					if (
						$discount_types['fixed'] === $type_id
						&& floatval( $coupon['discount_amount'] ) > floatval( $most_profitable['discount_amount'] )
					) {
						$candidate = $coupon;
					}

					if ( $discount_types['percent'] == $type_id ) {

						if ( $discount_types['fixed'] === $most_profitable['coupon_mode_id'] ) {
							$discount_amount = $coupon_criteria->get_cart_total() * floatval( $coupon['discount_amount'] ) / 100;
							if ( $discount_amount > floatval( $most_profitable['discount_amount'] ) ) {
								$candidate = $coupon;
							}
						}

						if (
							$discount_types['percent'] === $most_profitable['coupon_mode_id']
							&& floatval( $coupon['discount_amount'] ) > floatval( $most_profitable['discount_amount'] )
						) {
							$candidate = $coupon;
						}

					}

				}

				if ( $candidate ) {
					$result = $coupon_manager->apply_coupon( $candidate, $coupon_criteria );
					if ( $result->can_use() ) {
						$most_profitable = $candidate;
					}
				}

				$candidate = null;
			}
		}

		if ( empty( $most_profitable ) ) {
			throw new NoSuitableCoupon();
		}

		return $most_profitable;
	}

	protected function update_coupon_order_map( $coupon_id, $order_id ) {
		if ( ! isset( $coupon_id, $order_id ) ) {
			return;
		}

		$map_data = compact( 'order_id', 'coupon_id' );
		$result = PerspectiveManager::instance()->asAdministrator(
			function() use ( $map_data ) {
				return $this->coupon_model->store_coupon_order( $map_data );
			}
		);
	}

	/**
	 * @version 0.1.25
	 */
	public function create_coupon_order_map( WP_REST_Request $request ): WP_REST_Response {
		$promocode = $request->get_param( 'promocode' );
		$coupon = $this->coupon_model->get_by_name( $promocode, [
			'columns' => [ 'id', 'name', 'usage_counter', 'usage_limit' ],
			'expand' => false,
		] );

		if ( empty( $coupon['id'] ) ) {
			return $this->notice_response( esc_html_e( 'Uknown coupon.', 'north-commerce' ) );
		}

		if ( isset( $coupon['usage_limit'] ) && $coupon['usage_limit'] <= $coupon['usage_counter'] ) {
			return $this->notice_response( esc_html_e( 'Coupon limit reached.', 'north-commerce' ) );
		}

		$map_data = [
			'order_id' => $request->get_param( 'order_id' ),
			'coupon_id' => $coupon['id'],
		];

		$map_record = PerspectiveManager::instance()->asAdministrator(
			function() use ( $map_data ) {
				return $this->coupon_model->store_coupon_order( $map_data );
			}
		);

		if ( ! $map_record['id'] ) {
			return $this->notice_response( 'Internal error.' );
		}

		return new WP_REST_Response( [
			'success' => true,
			'couponOrderMapID' => $map_record['id'],
		] );
	}

	public function delete_coupon_order_map( WP_REST_Request $request ): WP_REST_Response {
		$coupon_order_map_ID = $request->get_param( 'couponOrderMapID' );

		$coupon_order = $this->coupon_model->get_coupon_order_by_id( $coupon_order_map_ID, [ 'expand' => [ 'order' ] ] );

		$order = $coupon_order['order'] ?? null;

		if ( ! $order ) {
			return new WP_REST_Response( [
				'success' => false,
				'message' => 'Unknown order.',
			] );
		}

		if ( floatval( $order['paid'] ) > 0 ) {
			return new WP_REST_Response( [
				'success' => false,
				'message' => esc_html_e( 'Cannot delete coupon-order record for a paid Order.', 'north-commerce' ),
			] );
		}

		$result = PerspectiveManager::instance()->asAdministrator(
			function() use ( $coupon_order_map_ID ) {
				return $this->coupon_model->delete_coupon_order_by_id( $coupon_order_map_ID );
			}
		);

		return new WP_REST_Response( [
			'success' => true,
			'message' => esc_html_e( 'Coupon Order record was succesfully deleted.', 'north-commerce' ),
		] );
	}

	/**
	 * Cron scheduled action
	 */
	public function change_coupon_status( $coupon_id ) {
		$coupon = $this->coupon_model->get_by_id( $coupon_id );

		if ( empty( $coupon['id'] ) ) {
			throw new \Exception( esc_html_e( 'Cron status change failed: coupon not found.', 'north-commerce' ) );
		}

		$new_status_id = $this->retrieve_coupon_status_id( $coupon['time_start'], $coupon['time_end'] );

		if ( intval( $coupon['coupon_status_id'] ) === $new_status_id ) {
			return;
		}

		$updated_data = [
			'id' => $coupon_id,
			'coupon_status_id' => $new_status_id,
		];

		$updated_coupon = PerspectiveManager::instance()->asAdministrator(
			function() use ( $updated_data ) {
				return $this->coupon_model->store( $updated_data );
			}
		);

		$time_end = strtotime( $coupon['time_end'] );
		if (
			$time_end
			&& time() < $time_end
			&& Statuses::published()->id === $updated_coupon['coupon_status_id']
		) {
			$action = $this->schedule_single_action( 'nc_coupon_status_change', [ 'id' => $updated_coupon['id'] ], $time_end );
		}
	}

	protected function sql_time_format(): string {
		return 'Y-m-d H:i:s';
	}

	protected function set_errors_list() {
		$this->coupon_errors_list = [
			'default' => __( 'Internal error.', 'north-commerce' ),
			'form_empty' => __( 'There is no form data.', 'north-commerce' ),
			'promocode_empty' => __( '<a href="#coupon__name">Coupon code</a> is missing.', 'north-commerce' ),
			'short' => __( '<a href="#coupon__name">Coupon code</a> is too short. Provide at least 3 characters.', 'north-commerce' ),
			'duplicate' => __( 'Coupon with such name is already active. Choose another <a href="#coupon__name">name</a>.', 'north-commerce' ),
			'uknown' => __( 'Uknown promo code.', 'north-commerce' ),
			'empty' => __( 'Promo code is required.', 'north-commerce' ),
			'not_saved' => __( 'Cannot save Coupon. Please, try again', 'north-commerce' ),
			'not_updated' => __( 'Cannot update Coupon. Please, try again.', 'north-commerce' ),
			'usage_limit' => __( 'Coupon <a href="#coupon__usage">Usage Limit</a> should be greater than zero.', 'north-commerce' ),
			'mode_empty' => __( 'Coupon <a href="#coupon__mode">Mode</a> is missing.', 'north-commerce' ),
			'requirement_empty' => __( 'Coupon <a href="#coupon__requirement">Requirement</a> is missing.', 'north-commerce' ),
			'requirement_amount' => __( 'Coupon <a href="#coupon__requirement">Requirement Value</a> should be greater than zero.', 'north-commerce' ),
			'discount_type_empty' => __( 'Coupon <a href="#coupon__discount_type">Discount Type</a> is missing.', 'north-commerce' ),
			'time_start_empty' => __( '<a href="#coupon-dates">Start Date</a> is missing.', 'north-commerce' ),
			'time_end_less_time_start' => __( 'Start Date cannot be greater than the <a href="#coupon-dates">End Date</a>', 'north-commerce' ),
			'time_end_eq_time_start' => __( '<a href="#coupon-dates">End Date</a> cannot be equal to Start Date.', 'north-commerce' ),
			'time_end_less_time_now' => __( 'The given <a href="#coupon-dates">End Date</a> is already in the past. Choose any Date/Time in future.', 'north-commerce' ),
		];
	}

	/**
	 * @version 0.1.25
	 */
	protected function error_message( $error_slug ): string {
		if ( empty( $this->coupon_errors_list )  ) {
			$this->set_errors_list();
		}

		return $this->coupon_errors_list[ $error_slug ] ?? $this->coupon_errors_list[ 'default' ];
	}

	private function notice_response( string $message ): WP_REST_Response {
		return new WP_REST_Response( [
			'success' => false,
			'message' => $message,
		] );
	}

}

class NoSuitableCoupon extends Exception {}