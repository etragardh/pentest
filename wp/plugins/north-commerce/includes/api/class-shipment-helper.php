<?php
namespace NorthCommerce\Api;

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\Collections\ShippingZoneTypes;
use NorthCommerce\Models\{
	ShippingProfileModel,
	ProductModel
};
use WP_REST_Response;
use WP_REST_Request;
use Exception;
use Error;

/**
 * Shipment CRUD manager.
 *
 * @package north-commerce/includes/api
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.24
 * @version 0.1.25
 */
class Shipment_Helper {

	private static $self;

	protected WP_REST_Request $request;
	protected ShippingProfileModel $shipping_profile_model;
	protected $shipping_profile_id;
	protected array $shipment_errors_list;

	public static function instance(): Shipment_Helper {
		if ( ! self::$self ) {
			self::$self = new self();
		}
		return self::$self;
	}

	private function __construct() {
		$this->shipping_profile_model = new ShippingProfileModel;
	}

	public function permission_callback( WP_REST_Request &$request ) {
		return current_user_can( 'administrator' );
	}

	public function store_profile( WP_REST_Request &$request ): WP_REST_Response {
		$this->request = $request;
		$this->shipping_profile_id = $this->request->get_param( 'id' );

		$profile_type = $this->request->get_header( 'nc_profile' );
		switch ( $profile_type ) {
			case ShippingZoneTypes::regional()->slug:
				return $this->store_regional_profile();

			case ShippingZoneTypes::local()->slug:
				return $this->store_local_profile();

			case ShippingZoneTypes::pickup()->slug:
				return $this->store_pickup_profile();

			default:
				return $this->notice_response( 'Uknown Profile type' );
		}
	}

	protected function need_bailout( $data ): bool {
		return $data instanceof WP_REST_Response;
	}


	// Regional profile

	/**
	 * @since   0.1.2
	 * @version 0.1.25
	 */
	public function create_regional_profile( $request ) {
		$params = $this->validate_regional_params( $request );

		$address = $this->shipping_profile_model->get_shipping_address_by_id( $params['shipping_address_id'] );

		$profile_data = [
			'name' => $request->get_param( 'shipping_profile_name' ) ?: 'Custom Profle',
			'is_default' => false,
			'shipping_address_id' => $address['id'] ?? null,
			'all_variants_included' => $params['all_variants_included'],
		];

		try {
			$new_profile = $this->shipping_profile_model->store( $profile_data );
		} catch ( Exception $e ) {
			$exception_message = $e->getMessage();
		}

		if ( isset( $new_profile['id'], $params['variants'] ) ) {
			try {
				$this->shipping_profile_model->map_profile_with_variants( $new_profile['id'], $params['variants'] );
			} catch ( Exception $e ) {
				$exception_message = $e->getMessage();
			}
		}

		if ( isset( $new_profile['id'], $params['zones'] ) ) {
			try {
				$this->shipping_profile_model->store_zones(
					$new_profile['id'],
					ShippingZoneTypes::regional()->id,
					$params['zones']
				);
			} catch ( Exception $e ) {
				$exception_message = $e->getMessage();
			}
		}

		if ( ! empty( $exception_message ) ) {
			return $this->notice_response(
				esc_html__( 'Cannot create Profile.', 'north-commerce' ) . ' ' . $exception_message
			);
		}

		return rest_ensure_response( [
			'success' => true,
			'message' => esc_html__( 'Shipping Profile created successfully', 'north-commerce' ),
			'redirect' => admin_url( 'admin.php?page=north-commerce-settings&tab=shipment&id=' . $new_profile['id'] ),
		] );
	}

	/**
	 * @since   0.1.2
	 * @version 0.1.25
	 */
	public function store_regional_profile() {
		$params = $this->validate_regional_params( $this->request );

		if ( $this->need_bailout( $params ) ) {
			return $params;
		}

		$profile_data = [
			'id' => $params['shipping_profile_id'],
			'all_variants_included' => $params['all_variants_included'],
		];

		try {
			$updated_profile = $this->shipping_profile_model->store( $profile_data );
		} catch ( Exception $e ) {
			$exception_message = $e->getMessage();
		}

		if ( isset( $updated_profile['id'], $params['variants'] ) && empty( $exception_message ) ) {
			try {
				$this->shipping_profile_model->map_profile_with_variants( $updated_profile['id'], $params['variants'] );
			} catch ( Exception $e ) {
				$exception_message = $e->getMessage();
			}
		}

		if ( isset( $updated_profile['id'] ) && empty( $exception_message ) ) {
			try {
				if ( ! empty( $params['zones'] ) ) {
					$this->shipping_profile_model->store_zones(
						$updated_profile['id'],
						ShippingZoneTypes::regional()->id,
						$params['zones']
					);
				} else {
					$this->shipping_profile_model->delete_zones_by_profile_id( $updated_profile['id'], [
						'shipping_zone_type_id' => ShippingZoneTypes::regional()->id
					] );
				}
			} catch ( Exception $e ) {
				$exception_message = $e->getMessage();
			}
		}

		if ( ! empty( $exception_message ) ) {
			return $this->notice_response(
				esc_html__( 'Cannot update Profile.', 'north-commerce' ) . ' ' . $exception_message
			);
		}

		return rest_ensure_response( [
			'success' => true,
			'message' => esc_html__( 'Shipping profile updated', 'norh-commerce' ),
			'redirect' => admin_url( 'admin.php?page=north-commerce-settings&tab=shipment&id=' . $updated_profile['id'] ),
		] );
	}

	/**
	 * @since   0.1.2
	 * @version 0.1.24
	 */
	protected function validate_regional_params( $request ): array {

		$product_model = new ProductModel();

		$params = $request->get_params();

		$is_requiered_data_available = function( $params ) {
			return isset( $params['all_variants_included'] );
		};

		if ( ! $is_requiered_data_available( $params ) ) {
			return $this->error_message( 'requiered_fields_absent' );
		}

		$shipping_address_id = $params['shipping_address_id'] ?? $this->shipping_profile_model->get_default_shipping_address()['id'] ?? null;

		$all_variants_included = (bool) $params['all_variants_included'];

		if ( ! $all_variants_included ) {
			$request_products = $params['products'] ?? '';
			$request_products = json_decode( $request_products, true );

			$variants = [];
			foreach ( $request_products as $product ) {

				$save_solo_id = null;

				if ( ! empty( $product['product_variants'] ) ) {
					// Back-End Variants data (unmodified by front-end)

					if (
						$product['total_variants_counter'] === count( $product['product_variants'] ) // `solo` variant already ignored for both parameters
						|| 0 === $product['total_variants_counter']
					) {
						$save_solo_id = true;
					} else {
						$variant_ids = array_keys( $product['product_variants'] );
						$variants = array_merge( $variants, $variant_ids );
					}

				}

				if ( ! empty( $product['variants'] ) ) {
					// Front-End data contains simplified array with IDs

					$product_data = $product_model->get_by_id(
						$product['id'],
						[
							'columns' => [ 'id', 'name' ],
							'expand' => [ 'product_variants' ]
						]
					);

					$total_variants_counter = count( $product_data['product_variants'] ) - 1;

					if (
						$total_variants_counter === count( $product['variants'] ) // `solo` variant already ignored for both parameters
						|| 0 === $total_variants_counter
					) {
						$save_solo_id = true;
					} else {
						$variants = array_merge( $variants, $product['variants'] );
					}

				}

				if (
					( isset( $product['product_variants'] ) && empty( $product['product_variants'] ) )
					|| ( isset( $product['variants'] ) && empty( $product['variants'] ) )
				) {
					$save_solo_id = true;
				}

				if ( $save_solo_id ) {
					$solo_variant = $product_model->get_solo_product_variant_by_product_id(
						$product['id'],
						[ 'columns' => [ 'id', 'slug' ] ]
					);
					if ( isset( $solo_variant['id'] ) ) {
						/**
						 * `solo` variant ID saved if:
						 *   • all `standard` variants were checked
						 *   • product doesn`t have `standard` variants
						 */
						$variants[] = intval( $solo_variant['id'] );
					}
				}

			}
		}

		$formatted_request = [
			'shipping_address_id' => $shipping_address_id,
			'all_variants_included' => $all_variants_included,
			'shipping_zone_type_id' => ShippingZoneTypes::regional()->id
		];

		$zones = $params['zones'] ?? '';
		if ( $zones ) {
			$formatted_zones = [];
			$zones = json_decode( $zones );
			foreach ( $zones as $zone_data ) {
				$formatted_zones[ $zone_data->id ]['id'] = $zone_data->id;
				$formatted_zones[ $zone_data->id ]['name'] = $zone_data->name;

				$regions = ! empty( $zone_data->regions ) ? get_object_vars( $zone_data->regions ) : [];
				foreach ( $regions as $region ) {
					$region_countries = is_object( $region ) ? get_object_vars( $region ) : $region;
					foreach ( $region_countries as $country_code => $states ) {
						$formatted_zones[ $zone_data->id ]['countries'][ $country_code ] = $states;
					}
				}

				foreach ( $zone_data->rates as $rate_calculation => $rates ) {
					foreach ( $rates as $rate_obj ) {
						$rate_array = get_object_vars ( $rate_obj );

						$rate_array['conditions'] = $rate_array['conditions'] ?? [];
						foreach ( $rate_array['conditions'] as $key => $condition_json ) {
							$condition_obj = json_decode( $condition_json );
							$condition_arr = is_object( $condition_obj ) ? get_object_vars( $condition_obj ) : $condition_obj;
							$condition_arr['data'] = is_object( $condition_arr['data'] ) ? get_object_vars( $condition_arr['data'] ) : $condition_arr['data'];
							$rate_array['conditions'][ $key ] = $condition_arr;
						}

						$formatted_zones[ $zone_data->id ]['rates'][ $rate_calculation ][ $rate_array['id'] ] = $rate_array;
					}
				}
			}
		}

		if ( isset( $formatted_zones ) ) {
			$formatted_request['zones'] = $formatted_zones;
		}

		if ( ! $all_variants_included ) {
			$formatted_request['variants'] = $variants;
		}

		if ( isset( $params['id'] ) ) {
			$formatted_request['shipping_profile_id'] = $params['id'];
		}

		return $formatted_request;
	}

	/**
	 * @since   0.1.2
	 * @version 0.1.25
	 */
	public function delete_regional_profile( $request ) {
		$profile_id = sanitize_text_field( $request['id'] );
		$shipping_profile = $this->shipping_profile_model->get_by_id( $profile_id );

		switch ( true ) {
			case ! isset( $shipping_profile['id'] ):
				$error_message = esc_html__( 'Shipping Profile cannot be deleted.', 'north-commerce' );
				break;

			case $shipping_profile['is_default']:
				$error_message = esc_html__( 'Default Shipping Profile can`t be deleted', 'north-commerce' );
				break;
		}

		if ( empty( $error_message ) ) {
			try {
				$this->shipping_profile_model->delete( $profile_id, [ 'recursive' => true ] );
			} catch ( Exception $e ) {
				$error_message = $e->getMessage();
			}
		}

		if ( ! empty( $error_message ) ) {
			return $this->notice_response( $error_message );
		}

		return rest_ensure_response( [
			'success' => true,
			'message' => esc_html__( 'Shipping Profile was successfully deleted.', 'north-commerce' ),
			'redirect' => admin_url( 'admin.php?page=north-commerce-settings&tab=shipment' )
		] );
	}


	// Local profile

	public function store_local_profile(): WP_REST_Response {
		do_action( 'north-commerce/profile/local/update/before', $this->request );

		$local_zones = $this->validate_local_zones();

		if ( $this->need_bailout( $local_zones ) ) {
			return $local_zones;
		}

		try {
			$this->store_local_zones( $local_zones );
		} catch( Exception $e ) {
			$exception_text = $e->getMessage();
		}

		if ( ! empty( $exception_text ) ) {
			do_action( 'north-commerce/profile/local/update/failed', $this->request );
			return $this->notice_response( $exception_text );
		}

		do_action( 'north-commerce/profile/local/update/success', $this->shipping_profile_id );

		return new WP_REST_Response( [
			'success' => true,
			'message' => __( 'Local delivery zones updated.', 'north-commerce' ),
			'redirect' => admin_url( 'admin.php?page=north-commerce-settings&tab=shipment&local-delivery=' . $this->shipping_profile_id ),
		] );
	}

    protected function validate_local_zones() {
		$body_json = $this->request->get_body();
		$zones_data = (array) json_decode( $body_json );

		$data = [];
		foreach ( $zones_data as $id => $zoneObj ) {
			$zone = (array) json_decode( $zoneObj->zoneData );

			$regions = (array) $zone['regions'];
			foreach ( $regions as $region ) {
				$zone['countries'] = (array) $region;
			}
			unset( $zone['regions'] );

			foreach ( $zoneObj->ratesData as $rate_json ) {
				$rate = (array) json_decode( $rate_json );
				$zone['rates']['internal'][] = $rate;
			}

			$zone['instructions'] = sanitize_text_field( $zoneObj->zoneInstructions );

			$data[ $id ] = $zone;
		}

		return $data;
	}

	protected function store_local_zones( $local_zones ) {
		$this->shipping_profile_model->store_zones(
			$this->shipping_profile_id,
			ShippingZoneTypes::local()->id,
			$local_zones
		);
	}


	// Pickup profile

	public function store_pickup_profile(): WP_REST_Response {
		do_action( 'north-commerce/profile/pickup/update/before', $this->request );

		$pickup_zones = $this->validate_pickup_zones();

		if ( $this->need_bailout( $pickup_zones ) ) {
			return $pickup_zones;
		}

		try {
			$this->store_pickup_zones( $pickup_zones );
		} catch( Exception $e ) {
			$exception_text = $e->getMessage();
		}

		if ( ! empty( $exception_text ) ) {
			do_action( 'north-commerce/profile/pickup/update/failed', $this->request, $e ?? null );
			return $this->notice_response( $exception_text );
		}

		do_action( 'north-commerce/profile/pickup/update/success', $this->shipping_profile_id );

		return new WP_REST_Response( [
			'success' => true,
			'message' => __( 'Local pickup zones updated.', 'north-commerce' ),
			'redirect' => admin_url( 'admin.php?page=north-commerce-settings&tab=shipment&local-pickup=' . $this->shipping_profile_id ),
		] );
	}

	protected function validate_pickup_zones() {
		$zones = $this->request->get_json_params();

		$ensure_pickup_rate = function( $sz_id ) {
			$new_pickup_rate = [
				'internal' => [ [
					'id' => 'new-rate-0',
					'rate_type' => 'internal',
					'name' => __( 'Local Pickup', 'north-commerce' ),
					'price' => 0, // pickup is free
				] ],
			];

			if ( 0 === strpos( $sz_id, 'new-zone-' ) ) {
				return $new_pickup_rate;
			}

			$pickup_rate = $this->shipping_profile_model->list_rates_by_zone_id( $sz_id );

			if ( empty( $pickup_rate['internal'][0]['id'] ) ) {
				$pickup_rate = $new_pickup_rate;
			}

			return $pickup_rate;
		};

		$data = [];
		foreach ( $zones as $id => $zoneArr ) {
			$zone = $zoneArr['zoneData'];
			$zone['instructions'] = sanitize_text_field( $zoneArr['zoneInstructions'] );

			$address_id = sanitize_text_field( $zoneArr['pickupAddressID'] );
			$pickup_address = $this->shipping_profile_model->get_shipping_address_by_id( $address_id );
			$zipcode_wildcard = substr( $pickup_address['zipcode'], 0, 2 ) . '*';
			$zone['countries'] = [
				$pickup_address['country']['abbreviation'] =>  $zipcode_wildcard
			];

			$zone['rates'] = $ensure_pickup_rate( $id );

			$data[ $id ] = $zone;
		}

		return $data;
	}

	protected function store_pickup_zones( $pickup_zones ) {
		$this->shipping_profile_model->store_zones(
			$this->shipping_profile_id,
			ShippingZoneTypes::pickup()->id,
			$pickup_zones
		);
	}


	// Helper methods

	protected function set_errors_list() {
		$this->shipment_errors_list = [
			'default' => __( 'Internal error.', 'north-commerce' ),
			'requiered_fields_absent' => __( 'Requiered fields are absent.', 'north-commerce' ),
		];
	}

	protected function error_message( $error_slug ) {
		if ( empty( $this->shipment_errors_list )  ) {
			$this->set_errors_list();
		}

		$error_text = $this->shipment_errors_list[ $error_slug ] ?? $this->shipment_errors_list[ 'default' ];
		return $this->notice_response( $error_text );
	}

	private function notice_response( string $message ): WP_REST_Response {
		return new WP_REST_Response( [
			'success' => false,
			'message' => $message,
		] );
	}

}
