<?php
/*
 * A PHP file for implementing validation for our API arguments.
 * Frequently, the name of the argument defines how it should be validated.
 */
class North_Commerce_Api_Validator {

	private $parser;
	private $db_helper;
	private $id_manager;
	private $agent;

	function __construct() {
		$this->parser = new North_Commerce_Api_Parser();
		$this->db_helper = new North_Commerce_Api_Db_Helper();
		$this->id_manager = North_Commerce_Db_Agent::instance()->idManager();
		$this->agent = North_Commerce_Db_Agent::instance();
	}

	public function validateEntity($entity) {
		$agent = North_Commerce_Db_Agent::instance();
		$tables = $agent->schema()->getTables();
		return isset($tables[$agent->entityToTableName($entity)]);
	}

	public function validateId($id, $req) {
		$entity = $req->has_param('parent') ? $req->get_param('parent') : $req->get_param('entity');
		$table  = $entity ? $this->agent->entityToTableName($entity) : false;
		return $table ? $this->id_manager->isWellFormedId($table, $id) : false;
	}

	public function validateParent($parent) {
		return $this->validateEntity($parent);
	}

	public function validateChild($child, $request) {
		$agent = North_Commerce_Db_Agent::instance();
		$parent = $agent->entityToTableName(nc_g($request->get_url_params(), 'parent'));
		$child = $agent->entityToTableName($child);
		$table_ref = $agent->schema()->tableRefColumn($child, $parent, ['not_found' => false]);
		$col_ref = $agent->schema()->idRefTable($parent, "{$child}_id", ['not_found' => false]);
		return $table_ref || $col_ref;
	}

	public function validateLimit($limit) {
		return is_numeric($limit) && $limit > 0 && $limit < 200;
	}

	public function validatePage($page) {
		return is_numeric($page) && $page > 0;
	}

	public function validateSort($sort, $req) {
		return $this->parser->parseSort( $sort, $req ) ? true : false;
	}

	public function validateFilter( $filter, $req ) {
		return $this->parser->parseFilter( $filter, $req ) ? true : false;
	}

	public function validateExpand( $expand, $req ) {
		$table      = $this->db_helper->targetTable( $req );
		$expander = North_Commerce_Db_Agent::instance()->expander();
		return $expander->validate( $table, $expand );
	}

	public function validateBody( $body, $request, $options = [] ) {
		$agent = North_Commerce_Db_Agent::instance();
		$table = nc_g(
			$options,
			'table',
			$agent->entityToTableName( nc_g( $request->get_url_params(), 'entity' ) )
		);
		$ea = $agent->entityAccess();

		if ( empty( $body ) ) {
			return false;
		}

		foreach ( $body as $col => $value ) {
			$strategy = $ea->attrStoreStrategy( $table, $col, $value );
			switch ( $strategy['type'] ) {
				case NORTH_COMMERCE_DB_STORE_STRATEGY_ATTR_REF:
					$is_valid = $this->validateBody(
						$value,
						$request,
						[ 'table' => $strategy['dest_table'] ]
					);
					if ( ! $is_valid ) {
						return false;
					}
					break;

				case NORTH_COMMERCE_DB_STORE_STRATEGY_ATTR_VALUE:
					break;

				case NORTH_COMMERCE_DB_STORE_STRATEGY_TABLE_REF:
					foreach ( $value as $entity ) {
						$is_valid = $this->validateBody(
							$entity,
							$request,
							[ 'table' => $col ]
						);
						if ( ! $is_valid ) {
							return false;
						}
					}
					break;

				default:
					return false;
			}
		}
		return true;
	}
}
