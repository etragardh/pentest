<?php
namespace NorthCommerce\Models;

defined( 'ABSPATH' ) || exit;

/**
 * Customer model.
 *
 * @package north-commerce/includes/models
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.3
 * @version 0.1.24
 */
class CustomerModel extends BaseModel {

    /**
     * @version 0.1.24
     */
    public function __construct() {

        parent::__construct();

        $this->table = 'customers';
        $this->subtables = [
            'tags' => 'customer_tags',
            'addresses' => 'addresses',
        ];

    }

    public function getExpands() {
        return [
            'orders.line-items.product_variant.product.product_type',
            'orders.line-items.product_variant.product.product_options.product_option_values',
            'addresses.country',
            'orders.order_status',
            'customer_changes'
        ];
    }

	/**
	 * @version 0.1.24
	 */
	public function get( $criteria = true, $options = [] ) {

        if ( isset( $options['expand'] ) && false === $options['expand'] ) {
            unset( $options['expand'] );
        } else if ( empty( $options['expand'] ) ) {
            $options['expand'] = $this->getExpands();
        }

		return $this->ea->get( $this->table, $criteria, $options );

    }

    /**
	 * @version 0.1.21
	 */
	public function get_by_id( $id, $options = [] ) {
		return $this->get( compact( 'id' ), $options );
	}

	/**
	 * @since   0.1.10
	 * @version 0.1.21
	 */
	public function get_by_customer_number( $customer_number, $options = [] ) {
		return $this->get( compact( 'customer_number' ), $options );
	}

    /**
	 * @version 0.1.21
	 */
    public function get_by_wp_user_id( $wp_user_id, $options = [] ) {
        return $this->get( compact( 'wp_user_id', $options ) );
    }

    /**
	 * @version 0.1.21
	 */
	public function get_by_email( $email, $options = [] ) {
		return $this->get( compact( 'email' ), $options );
	}

    public function store( $customer_data ) {
        return $this->ea->store( $this->table, $customer_data );
    }

    public function count( $criteria = true ) {
        return $this->ea->count( $this->table, $criteria );
    }


    // Addresses

    /**
     * @since 0.1.24
     */
    public function store_address( $address_data ) {
        return $this->ea->store( $this->subtables['addresses'], $address_data );
    }


    // Tags

    /**
     * @since 0.1.21
     */
    public function list_tags( $criteria = true, $options = [] ):array {

        if ( empty( $options ) ) {
            $options = [
                'distinct' => true,
                'columns' => [ 'tag_id' ],
                'expand' => [ 'tag' ],
            ];
        }

        $map_records = $this->ea->list( $this->subtables['tags'], $criteria, $options );

        $tags = [];
        foreach ( $map_records as $record ) {
            $tags[ $record['tag_id'] ] = $record['tag'];
        }

        return $tags;

    }

    public function list_tags_by_customer_id( $customer_id, $options = [] ):array {
        return $this->list_tags( compact( 'customer_id' ), $options );
    }

}
