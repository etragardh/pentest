<?php
namespace NorthCommerce\Models;

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\Collections\{
    ProductVariantTypes,
    ProductStatuses
};
use NorthCommerce\Models\CountryModel;

/**
 * Product model.
 *
 * @package north-commerce/includes/models
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.3
 * @version 0.1.25
 */
class ProductModel extends BaseModel {

	/**
	 * @version 0.1.20
	 */
    public function __construct() {
        parent::__construct();

        $this->table = 'products';
        $this->subtables = [
            'images' => 'product_images',
            'variants' => 'product_variants',
            'options' => 'product_options',
            'option_types' => 'product_option_types',
            'option_values' => 'product_option_values',
            'variant_option_values' => 'product_variant_option_values',
            'categories' => 'product_categories',
            'tags' => 'product_tags',
            'types' => 'product_types',
            'statuses' => 'product_statuses',
        ];
    }

    /**
     * @version 0.1.20
     */
    public function getExpands() {
        return [
            'product_type',
            'product_status',
            'payment_detail.payment_frequency',
            'payment_detail.free_trial_type',
            $this->subtables['images'],
            $this->subtables['variants'],
            $this->subtables['variants'] . '.product_variant_type',
            $this->subtables['variants'] . '.' . $this->subtables['variant_option_values'],
            $this->subtables['options'] . '.product_option_type',
            $this->subtables['options'] . '.' . $this->subtables['option_values'],
            'customs_detail',
            'product-categories.category',
            'product-tags',
            'product_attribute_values',
        ];
    }

    /**
     * @version 0.1.25
     */
    public function get( $criteria = true, $options = [] ) {
        if ( isset( $options['expand'] ) && false === $options['expand'] ) {
            unset( $options['expand'] );
        } else if ( empty( $options['expand'] ) ) {
            $options['expand'] = $this->getExpands();
        }

        $product = $this->ea->get( $this->table, $criteria, $options );

        if ( empty( $options['product_variants.deleted.allow'] ) ) {
            $this->exclude_deleted_variants( $product );
        }

		$this->sort_options( $product );
		$this->sort_option_values( $product );

        return $product;
    }

    public function get_by_id( $id, $options = [] ) {
        return $this->get( [ 'id' => $id ], $options );
    }

    /**
     * @version 0.1.12
     */
    public function get_by_slug( $slug, $options = [] ) {
        return $this->get( [ 'slug' => $slug ], $options );
    }

    /**
     * @version 0.1.25
     */
    public function list( $criteria = true, $options = [] ):array {
        if ( empty( $options['expand'] ) ) {
            $options['expand'] = $this->getExpands();
        }

        $list = $this->ea->list( $this->table, $criteria, $options );

        if (
            in_array( 'product_variants', $options['expand'] )
            && empty( $options['product_variants.deleted.allow'] )
        ) {
            foreach ( $list as &$product ) {
                $this->exclude_deleted_variants( $product );
            }
        }

        return $list;
    }

    /**
     * @since   0.1.6
     * @version 0.1.12
     */
    public function list_by_status_name( $product_status_name, $options = [] ) {
        $criteria = [ 'product_status.name' => $product_status_name ];
        return $this->list( $criteria, $options );
    }

    public function store( $product_data ) {
        return $this->ea->store( $this->table, $product_data );
    }

    /**
     * @version 0.1.20
     */
    public function delete( $product_id ) {
        try {
            $this->ea->delete( $this->subtables['variants'], compact( 'product_id' ) );
            $this->ea->delete( $this->subtables['categories'], compact( 'product_id' ) );
            $this->ea->delete( $this->subtables['tags'], compact( 'product_id' ) );
            $this->ea->delete( $this->table, [ 'id' => $product_id ] );
        } catch( \Exception $e ) {
            $product_data = [
                'id' => $product_id,
                'scheduled' => null,
                'published' => null,
                'deleted' => $this->sql_timestamp(),
                'product_status_id' => ProductStatuses::archive()->id,
            ];

            return $this->store( $product_data );
        }
    }

    /**
     * @version 0.1.12
     */
    public function count( $criteria = [] ): int {
        if ( is_array( $criteria ) ) {
            $criteria['deleted'] = null;
        }
        return (int) $this->ea->count( $this->table, $criteria );
    }

    /**
     * @version 0.1.13
     */
    public function count_by_status_name( $product_status_name ): int {
        return $this->count( [ 'product_status.name' => $product_status_name ] );
    }

    /**
     * @version 0.1.20
     */
    public function list_statuses() {
        return $this->ea->list( $this->subtables['statuses'], $criteria = true );
    }

    /**
     * @version 0.1.20
     */
    public function list_types() {
        return $this->ea->list( $this->subtables['types'], $criteria = true );
    }

    /**
     * @version 0.1.20
     */
    public function get_type( $criteria ) {
        return $this->ea->get( $this->subtables['types'], $criteria );
    }

    public function get_type_by_id( $product_type_id ) {
        return $this->get_type( "id:eq:$product_type_id" );
    }

    public function get_type_by_slug( $product_type_slug ) {
        return $this->get_type( "slug:eq:$product_type_slug" );
    }

    /**
     * @version 0.1.20
     */
    public function get_status( $criteria ) {
        return $this->ea->get( $this->subtables['statuses'], $criteria );
    }

    public function get_status_by_id( $product_status_id ) {
        return $this->get_status( "id:eq:$product_status_id" );
    }

    public function get_status_by_slug( $product_status_slug ) {
        return $this->get_status( "slug:eq:$product_status_slug" );
    }

    public function list_payment_frequencies() {
        return $this->ea->list( 'payment_frequencies', $criteria = true );
    }

    public function get_payment_frequency_by_slug( $pf_slug ) {
        return $this->ea->get( 'payment_frequencies', "slug:eq:$pf_slug" );
    }

    public function list_free_trial_types() {
        return $this->ea->list( 'free_trial_types', $criteria = true );
    }

    public function get_free_trial_type_by_slug( $ft_slug ) {
        return $this->ea->get( 'free_trial_types', "slug:eq:$ft_slug" );
    }

    public function store_payment_detail( $product_id, $payment_detail_data ) {
        if ( $product_id ) {
            $options = [ 'columns' => [ 'payment_detail_id' ] ];
            $product = $this->ea->get( $this->table, "id:eq:$product_id", $options );

            $stored_id = $product['payment_detail_id'];
            if ( $stored_id ) {
                $payment_detail_data['id'] = $stored_id;
            }
        }

        $payment_detail = $this->ea->store( 'payment_details', $payment_detail_data );

        $product_data = [
            'id' => $product_id,
            'payment_detail_id' => $payment_detail['id'] ?? null,
        ];

        $this->store( $product_data );

        return $payment_detail;
    }

    /**
     * @version 0.1.20
     */
    public function list_option_types() {
        return $this->ea->list( $this->subtables['option_types'], $criteria = true );
    }


    // Options

    /**
     * @version 0.1.20
     */
    public function list_options( $product_id ) {
        $criteria['product_id'] = $product_id;
        $options['expand'] = 'product_option_type';
        return $this->ea->list( $this->subtables['options'], $criteria, $options );
    }

    public function get_option_value_by_id( $value_id ) {
        return $this->ea->get( $this->subtables['option_values'], "id:eq:$value_id" );
    }

    public function list_option_values( $criteria = true, $options = [] ) {
        return $this->ea->list( $this->subtables['option_values'], $criteria, $options );
    }

    public function list_option_values_by_option_id( $option_id ) {
        return $this->list_option_values( [ 'product_option_id' => $option_id ] );
    }

    public function list_option_values_by_product_id( $product_id ) {
        $option_values = [];
        foreach ( $this->list_options( $product_id ) as $option ) {
            $option_values[] = $this->list_option_values_by_option_id( $option['id'] );
        }

        return $option_values;
    }

    /**
     * @version 0.1.4
     */
    public function list_option_values_by_type( $option_type_slug ) {
        $criteria = [ 'and', [
            [ '=', 'product_option.product_option_type.slug', $option_type_slug ],
            [ 'is', 'deleted', null ],
            [ 'not', [ 'is', 'display_value', null ] ]
        ] ];

        $options = [
            'distinct' => true,
            'columns' => [ 'display_value', 'value' ],
        ];

        return $this->list_option_values( $criteria, $options );
    }


    // Vartiants

    /**
     * @version 0.1.20
     */
    public function list_variants( array $options = [] ) {
        $criteria = [
            'and',
            [ 'is', 'deleted', null ],
        ];

        if ( ! empty( $options['criteria'] ) ) {

            if ( is_string( $options['criteria'] ) ) {
                $criteria[] = $options['criteria'];
            }

            if ( is_array( $options['criteria']) ) {
                $criteria = array_merge( $criteria, $options['criteria'] );
            }

        }

        if ( empty( $options['expand'] ) ) {
            $options['expand'] = 'product_variant_type';
        }

        return $this->ea->list( $this->subtables['variants'], $criteria, $options );
    }

    /**
     * @since 0.1.21
     */
    public function get_variant_by_id( $variant_id, $options = [] ) {
        $criteria = [
            'id' => $variant_id,
        ];

        if ( empty( $options['expand'] ) ) {
            $options = [
                'expand' => 'product',
            ];
        }

        return $this->ea->get( $this->subtables['variants'], $criteria, $options );
    }

    /**
     * @version 0.1.20
     */
    public function list_product_variants_by_type( $product_id, string $type_slug ) {
        if ( ! $product_id ) {
            // Bailout.
            return [];
        }

        $options['criteria'] = [
            [ '=', 'product_id', $product_id ],
            [ '=', 'product_variant_type.slug', $type_slug ],
        ];

        return $this->list_variants( $options );
    }

    /**
     * @since   0.1.10
     * @version 0.1.12
     */
    public function get_solo_product_variant_by_product_id( $product_id, $options = [] ) {
        $criteria = [
			'product_id' => $product_id,
			'product_variant_type.slug' => 'solo'
		];

		return $this->ea->get( $this->subtables['variants'], $criteria, $options );
	}

    public function update_variant_quantity( $variant_id, $quantity ) {
        $variant_data = [
            'id' => $variant_id,
            'quantity' => $quantity < 0 ? 0 : $quantity,
        ];
        return $this->ea->store( $this->subtables['variants'], $variant_data );
    }

    public function get_product_variant_type_by_slug( $pvt_slug ) {
        return $this->get_product_variant_type( "slug:eq:$pvt_slug" );
    }

    public function get_product_variant_type( $criteria ) {
        return $this->ea->get( 'product_variant_types', $criteria );
    }

    public function get_adjacent_products_id( $product_id ) {
        $prev = $this->ea->get( $this->table, "id:lt:$product_id", [ 'order_by' => 'id DESC' ] );
        $next = $this->ea->get( $this->table, "id:gt:$product_id" );
        return [
            'prev_id' => $prev['id'] ?? null,
            'next_id' => $next['id'] ?? null,
        ];
    }

    public function list_images( $product_id ) {
        $criteria = "product_id:eq:$product_id";
        $options = [ 'order_by' => $this->subtables['images'] . '.sequence' ];
        return $this->ea->list( $this->subtables['images'], $criteria, $options );
    }

    public function update_images( $product_id, $new_images ) {
        $stored_images = $this->list_images( $product_id );

        $update_db = ! (bool) $stored_images; // assumption

        if ( ! $update_db ) {
            if ( count( $new_images ) !== count( $stored_images ) ) {
                $update_db = true;
            }

            if ( ! $update_db ) {
                foreach ( $stored_images as $k => $v ) {
                    if ( $new_images[ $k ] !== $v['image_url'] ) {
                        $update_db = true;
                        break;
                    }
                }
            }
        }

        if ( ! $update_db ) {
            // Bailout.
            return;
        }

        if ( $stored_images ) foreach ( $stored_images as $value ) {
            $this->ea->delete( $this->subtables['images'], [ 'id' => $value['id'] ] );
        }

        foreach ( $new_images as $k => $image_url ) {
            $data = [
                'product_id' => $product_id,
                'image_url' => $image_url,
                'sequence' => $k + 1,
            ];

            $this->ea->store( $this->subtables['images'], $data );
        }
    }

    public function list_custom_content_types() {
        return $this->ea->list( 'customs_content_types', $criteria = true );
    }

    public function get_custom_information( $product_id ) {
        $details_id = $this->get( "id:eq:$product_id" )['customs_detail_id'];
        $criteria['id'] = $details_id;
        $options['expand'] = [ 'content_type', 'country' ];
        return $this->ea->get( 'customs_details', $criteria, $options );
    }

    /**
     * @version 0.1.12
     */
    public function update_custom_info( $product_id, $data ) {
        $country_model = new CountryModel();

        $content_type_id = $this->ea->get( 'customs_content_types', [ 'slug' => $data['content_type'] ] )['id'];
        $country_id = $country_model->get_by_abbreviation(  $data['country_origin'] )['id'] ?? null;

        $details = [
            'content_type_id' => $content_type_id,
            'country_id' => $country_id ?: '1',
            'hs_code' => $data['hs_code'],
        ];

        $stored = $this->ea->get( 'customs_details', $details );
        if ( ! $stored ) {
            $stored = $this->ea->store( 'customs_details', $details );
        }

        $product_data = [
            'id' => $product_id,
            'customs_detail_id' => $stored['id'],
        ];

        $this->ea->store( $this->table, $product_data );
    }


    // Categories

    public function list_categories() {
        return $this->ea->list( 'categories', $criteria = true );
    }

    public function list_product_categories( $product_id ) {
        $criteria = "product_id:eq:$product_id";
        $options['expand'] = 'category';
        return $this->ea->list( $this->subtables['categories'], $criteria, $options );
    }

    /**
     * @version 0.1.18
     */
    public function update_categories( array $new_categories ) {
        $stored_categories = $this->list_categories();
        $stored_slugs = [];
        foreach ( $stored_categories as $cat ) {
            $stored_slugs[] = $cat['slug'];
        }

        foreach ( $new_categories as $new_cat ) {
            $decoded_cat = html_entity_decode($new_cat, ENT_QUOTES, 'UTF-8');
            $slug = \sanitize_title($decoded_cat);
            if ( ! in_array( $decoded_cat, $stored_slugs )  ) {
                $category_data = [
                    'name' => $decoded_cat,
                    'slug' => strtolower($slug)
                ];

                $this->ea->store( 'categories', $category_data );
            }
        }
    }

    /**
     * @version 0.1.18
     */
	public function update_product_categories( $product_id, $new_categories ) {
        if ( '' === $new_categories ) {
            $new_categories = array();
        }

        $this->update_categories( $new_categories );

        $stored_categories = $this->list_product_categories( $product_id );
        $stored_slugs = [];
        foreach ( $stored_categories as $cat ) {
            $stored_slugs[] = $cat['category']['slug'];
        }

        foreach ( $new_categories as $new_cat ) {
            $decoded_cat = html_entity_decode( $new_cat, ENT_QUOTES, 'UTF-8' );
            $slug = \sanitize_title( $decoded_cat );
            if ( ! in_array(  $decoded_cat , $stored_slugs )  ) {
                $product_category_data = [
                    'product_id' => $product_id,
                    'category_id' => $this->ea->get( 'categories', [ 'slug' => $slug ] )['id'],
                ];

                $this->ea->store( $this->subtables['categories'], $product_category_data );
            } else {
                $key = array_search( $decoded_cat, $stored_slugs );
                unset( $stored_slugs[ $key ] );
            }
        }

        if ( $stored_slugs ) foreach ( $stored_slugs as $unused_cat ) {
            foreach ( $stored_categories as $stored_cat ) {
                if ( $unused_cat === $stored_cat['category']['slug'] ) {
                    // delete Category for a current Product
                    $this->ea->delete( $this->subtables['categories'], [ 'id' => $stored_cat['id'] ] );
                }

                $is_category_dead = ! $this->ea->get( $this->subtables['categories'], [ 'category_id' => $stored_cat['id'] ] );
                if ( $is_category_dead ) {
                    // delete Category which is not used by any Product
                    $this->ea->delete( 'categories', [ 'id' => $stored_cat['id'] ] );
                }
            }
        }
    }


    // Tags

    public function list_tags() {
        return $this->ea->list( 'tags', $criteria = true );
    }

    public function list_product_tags( $product_id ) {
        $criteria = "product_id:eq:$product_id";
        $options = [ 'expand' => 'tag' ];
        return $this->ea->list( $this->subtables['tags'], $criteria, $options );
    }

    /**
     * @version 0.1.18
     */
    public function update_tags( array $new_tags ) {
        $stored_tags = $this->list_tags();
        $stored_slugs = [];
        foreach ( $stored_tags as $tag ) {
            $stored_slugs[] = $tag['slug'];
        }

        foreach ( $new_tags as $new_tag ) {
            $decoded_tag =  html_entity_decode( $new_tag, ENT_QUOTES, 'UTF-8' );
            $slug = \sanitize_title( $decoded_tag );
            if ( ! in_array( $decoded_tag, $stored_slugs )  ) {
                $tag_data = [
                    'name' => $decoded_tag,
                    'slug' => $slug
                ];

                $this->ea->store( 'tags', $tag_data );
            }
        }
    }

    /**
     * @version 0.1.18
     */
    public function update_product_tags( $product_id, $new_tags ) {
        if ( '' === $new_tags ) {
            $new_tags = array();
        }

        $this->update_tags( $new_tags );

        $stored_tags = $this->list_product_tags( $product_id );
        $stored_slugs = [];
        foreach ( $stored_tags as $tag ) {
            $stored_slugs[] = $tag['tag']['slug'];
        }

        foreach ( $new_tags as $new_tag ) {
            $decoded_tag = html_entity_decode( $new_tag, ENT_QUOTES, 'UTF-8' );
            $slug = \sanitize_title($decoded_tag);
            if ( ! in_array( $decoded_tag, $stored_slugs )  ) {
                $product_tag_data = [
                    'product_id' => $product_id,
                    'tag_id' => $this->ea->get( 'tags', [ 'slug' => $slug ] )['id'],
                ];

                $this->ea->store( $this->subtables['tags'], $product_tag_data );
            } else {
                $key = array_search( $decoded_tag, $stored_slugs );
                unset( $stored_slugs[ $key ] );
            }
        }

        if ( $stored_slugs ) foreach ( $stored_slugs as $unused_tag ) {
            foreach ( $stored_tags as $stored_tag ) {
                if ( $unused_tag === $stored_tag['tag']['slug'] ) {
                    // delete Tag for a current Product
                    $this->ea->delete( $this->subtables['tags'], [ 'id' => $stored_tag['id'] ] );
                }

                $is_tag_dead = ! $this->ea->get( $this->subtables['tags'], [ 'tag_id' => $stored_tag['id'] ] );
                if ( $is_tag_dead ) {
                    // delete Tag which is not used by any Product
                    $this->ea->delete( 'tags', [ 'id' => $stored_tag['id'] ] );
                }
            }
        }
    }


    // Variant Option Values

    /**
	 * @since   0.1.20
	 * @version 0.1.20
	 */
    public function list_option_values_by_variant_id( $variant_id ) {
        $criteria = [
            'product_variant_id' => $variant_id,
            'deleted' => null
        ];

        $options['expand'] = 'product_option_value';

        return $this->ea->list( $this->subtables['variant_option_values'], $criteria, $options );
    }

    /**
	 * @since   0.1.5
	 * @version 0.1.12
	 */
	public function getAvailableProductVariantOptionValues( $product_id ) {
		$criteria = [
			'and',
			[ '=', 'product_variant.product_id', $product_id ],
			[ '=', 'product_variant.visible', 1 ]
		];

		$options = [
			'expand' => [
				'product_variant',
				'product_variant.product'
			]
		];

		$compact = function($pvov) {
			$pv_qty = $pvov['product_variant']['quantity'];
			$p_qty = $pvov['product_variant']['product']['quantity'];
			$qty = $pv_qty === null ? $p_qty : $pv_qty;

			return [
				'product_variant_id' => $pvov['product_variant_id'],
				'product_option_value_id' => $pvov['product_option_value_id'],
				'quantity' => $qty
			];
		};

		$pvovs = $this->ea->list( $this->subtables['variant_option_values'], $criteria, $options );

		return array_map($compact, $pvovs);
	}

    /**
     * @since 0.1.12
     */
	public function get_variant_option_values_of_product( $product_id ) {
		$criteria = [ '=', 'product_variant.product_id', $product_id ];

		$options = [
			'columns' => [
				'product_variant_id',
				'product_option_value_id'
			]
		];

		return $this->ea->list( $this->subtables['variant_option_values'], $criteria, $options );
	}

	public function getProductVariantsByProductAndOptionValues( $product_id, $product_variant_option_value_ids ) {
		$option_value_filters = [];
		foreach ( $product_variant_option_value_ids as $i => $pvov_id ) {
			$option_value_filters[] = [
				'=',
				"pvov$i:product_variant_option_values.product_option_value_id",
				$pvov_id
			];
		}

		return $this->ea->list( $this->subtables['variants'], [
			'and',
			[ '=', 'product_id', $product_id ],
			[ 'and', $option_value_filters ]
		] );
	}

    /**
     * @version 0.1.12
     */
    public function get_variant_by_option_ids( $product_id, array $product_option_value_ids ) {
        $variant_option_value_filters = [];
        foreach ( $product_option_value_ids as $id ) {
            $variant_option_value_filters[] = [ '=', 'product_option_value_id', $id ];
        }

        $criteria = [
            'and',
            [ 'is', 'product_variant.deleted', null ],
            [ '=', 'product_variant.product_id', $product_id ],
            [ 'or', $variant_option_value_filters ]
        ];

        $options['expand'] = [
            'product_variant',
            'product_option_value',
            'product_option_value.product_option',
        ];

        $pvov = $this->ea->list( $this->subtables['variant_option_values'], $criteria, $options );

        $candidates = [];
        $intersections = [];
        foreach ( $pvov as $v ) {
            $variant_id = $v['product_variant']['id'];
            if ( isset( $candidates[ $variant_id ] ) ) {
                $intersections[ $variant_id ] = isset( $intersections[ $variant_id ] ) ? ++$intersections[ $variant_id ] : 2;
            } else {
                $candidates[ $variant_id ] = $v['product_variant'];
            }
        }

        if ( 1 === count( $candidates ) ) {
            $variant = array_pop( $candidates );
        } elseif ( $intersections ) {
            $candidates_keys = array_keys( $intersections, max( $intersections ) );
            if ( 1 === count( $candidates_keys ) ) {
                $variant = $candidates[ $candidates_keys[0] ] ?? null;
            } else {
                $option_value_filters = [];
                foreach ( $product_option_value_ids as $pov_id ) {
                    $option_value_filters[] = [ '=', 'id', $pov_id ];
                }
                $criteria = [ 'or', $option_value_filters ];
                $povs = $this->ea->list( $this->subtables['option_values'], $criteria );
                $pov_values = [];
                foreach ( $povs as $pov ) {
                    $value = json_decode( $pov['value'] );
                    $pov_values[] = $value->name ?? $value;
                }

                foreach ( $candidates_keys as $candidate_key ) {
                    $candidate_slug_components = explode( ', ', $candidates[ $candidate_key ]['slug'] );
                    $components_counter = count( $candidate_slug_components );
                    foreach ( $candidate_slug_components as $key => $component ) {
                        if ( ! in_array( $component, $pov_values ) ) {
                            continue 2;
                        }
                        if ( $key + 1 === $components_counter ) {
                            $variant = $candidates[ $candidate_key ];
                            break 2;
                        }
                    }
                }
            }
        }

        return $variant ?? null;
    }

    public function update_field( int $product_id, array $field_data ) {
        $product_data = [ 'id' => $product_id ] + $field_data;
        return $this->store( $product_data );
    }

    public function update_quantity( $product_id, $quantity ) {
        return $this->update_field( $product_id, [ 'quantity' => $quantity < 0 ? 0 : $quantity ] );
    }

    public function get_attribute( $criteria ) {
        return $this->ea->get( 'product_attributes', $criteria );
    }

    public function get_attribute_by_slug( $attr_slug ) {
        return $this->get_attribute( "slug:eq:$attr_slug" );
    }

    public function retrieve_attribute_by_slug( $attr_slug ) {
        $attribute = $this->get_attribute( "slug:eq:$attr_slug" );

        if ( ! $attribute ) {
            $attribute_data = [
                'name' => $attr_slug,
                'slug' => $attr_slug,
            ];
            $attribute = $this->ea->store( 'product_attributes', $attribute_data );
        }

        return $attribute;
    }

    public function get_attribute_value( $product_id, $attribute_slug ) {
        $criteria = [
            'product_id' => $product_id,
            'product_attribute_id' => $this->get_attribute_by_slug( $attribute_slug )['id'] ?? null,
        ];

        return $this->ea->get( 'product_attribute_values', $criteria )['value'] ?? null;
    }

    public function update_attribute_value( $product_id, $attribute_slug, $attribute_value ) {
        $pav_data = [
            'product_id' => $product_id,
            'product_attribute_id' => $this->retrieve_attribute_by_slug( $attribute_slug )['id'],
        ];

        $pav = $this->ea->get( 'product_attribute_values', $pav_data );
        if ( $pav ) {
            $pav_data['id'] = $pav['id'];
        }

        $pav_data['value'] = $attribute_value;

        $this->ea->store( 'product_attribute_values', $pav_data );
    }

    /**
     * @since 0.1.25
     */
    protected function exclude_deleted_variants( &$product ) {
        foreach ( $product['product_variants'] ?? [] as $index => $variant ) {
            if ( $variant['deleted'] ) {
                unset( $product['product_variants'][ $index ] );
            }
        }
    }

    /**
     * @since 0.1.24
     */
	public function sort_options( &$product ) {
		if (
            empty( $product['product_options'] )
            || ! is_array( $product['product_options']
        ) ) {
			return;
		}

		array_multisort(
			array_column( $product['product_options'], 'sequence' ),
			SORT_ASC,
			$product['product_options']
		);
	}

    /**
     * @since 0.1.24
     */
	public function sort_option_values( &$product ) {
		if (
            empty( $product['product_options'] )
            || ! is_array( $product['product_options'] )
        ) {
			return;
		}

		foreach ( $product['product_options'] as &$product_options ) {
			if ( ! is_array( $product_options['product_option_values'] ) ) {
				continue;
			}

			array_multisort(
				array_column( $product_options['product_option_values'], 'sequence' ),
				SORT_ASC,
				$product_options['product_option_values']
			);
		}
	}

}
