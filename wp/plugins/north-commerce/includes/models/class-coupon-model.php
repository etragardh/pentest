<?php
namespace NorthCommerce\Models;

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Db\Collections\{
    CouponCustomerEligibilities as CustomerEligibilities,
    CouponStatuses as Statuses,
    CouponModes as Modes
};
use North_Commerce_Settings as Settings;

/**
 * Coupon model.
 *
 * @package north-commerce/includes/models
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.20
 * @version 0.1.21
 */
class CouponModel extends BaseModel {

    public function __construct() {
        parent::__construct();

        $this->table = 'coupons';
        $this->subtables = [
            'statuses' => 'coupon_statuses',
            'modes' => 'coupon_modes',
            'requirements' => 'coupon_requirements',
            'discount_types' => 'coupon_discount_types',
            'product_variants_map' => 'coupon_product_variants',
            'countries_map' => 'coupon_countries',
            'customer_eligibilities' => 'coupon_customer_eligibilities',
            'customers_map' => 'coupon_customers',
            'orders_map' => 'coupon_orders',
        ];
    }

    public function getExpands() {
        return [
            'coupon_mode',
            'coupon_status',
            'coupon_discount_type',
            'coupon_requirement',
        ];
    }

    /**
     * Include Disabled Coupons for default query
     */
    protected function include_disabled( &$criteria ): void {
        $extra_criteria = [
            'or',
            [
                [ 'is', 'deleted', null ],
                [ 'not', [ 'is', 'deleted', null ] ] // `Disabled` marked as `deleted`
            ]
        ];

        if ( is_array( $criteria ) ) {
            $criteria = [
                'and',
                $criteria,
                $extra_criteria
            ];
        }

        if ( true === $criteria ) {
            $criteria = $extra_criteria;
        }
    }

    public function get( $criteria = true, $options = [] ) {
        $this->include_disabled( $criteria );

        if ( isset( $options['expand'] ) && false === $options['expand'] ) {
            unset( $options['expand'] );
        } else if ( empty( $options['expand'] ) ) {
            $options['expand'] = $this->getExpands();
        }

        return $this->ea->get( $this->table, $criteria, $options );
    }

    public function get_by_id( $id, $options = [] ) {
        return $this->get( compact( 'id' ), $options );
    }

    public function get_by_name( $name, $options = [] ) {
        return $this->get( compact( 'name' ), $options );
    }

    public function get_by_code( $promo_code, $options = [] ) {
        return $this->get_by_name( $promo_code, $options );
    }

    public function get_by_slug( $slug, $options = [] ) {
        return $this->get( compact( 'slug' ), $options );
    }

    public function list( $criteria = true, $options = [] ) {
	    $this->include_disabled( $criteria );

        if ( empty( $options['expand'] ) ) {
            $options['expand'] = $this->getExpands();
        }

        return $this->ea->list( $this->table, $criteria, $options );
    }

    public function list_by_status_name( $coupon_status_name, $options = [] ) {
        $criteria = [ 'coupon_status.name' => $coupon_status_name ];
        return $this->list( $criteria, $options );
    }

    public function list_by_mode_id( $coupon_mode_id, $options = [] ) {
        return $this->list( compact( 'coupon_mode_id' ), $options );
    }

    public function list_automatics( $options = [] ) {
        return $this->list_by_mode_id( Modes::automatic()->id, $options );
    }

    public function count( $criteria = true, $options = [] ): int {
        $this->include_disabled( $criteria );
        return $this->get_total_count( $criteria, $options );
    }

    public function count_by_status_id( $status_id ): int {
        return $this->count( [ 'coupon_status_id' => $status_id ] );
    }

    public function delete( $coupon_id ) {
        $coupon_data = [
            'id' => $coupon_id,
            'coupon_status_id' => Statuses::disabled()->id,
        ];
        $coupon = $this->store( $coupon_data );

        try {

            $this->ea->delete( $this->subtables['product_variants_map'], compact( 'coupon_id' ) );
            $this->ea->delete( $this->subtables['countries_map'], compact( 'coupon_id' ) );
            $this->ea->delete( $this->subtables['customers_map'], compact( 'coupon_id' ) );
            return $this->ea->delete( $this->table, [ 'id' => $coupon_id ] );

        } catch ( \Exception $e ) {
            // do nothing
        }

        return $coupon;
    }


    // Statuses

    public function list_statuses() {
        return $this->ea->list( $this->subtables['statuses'], $criteria = true );
    }


    // Modes

    public function list_modes() {
        return $this->ea->list( $this->subtables['modes'], $criteria = true );
    }


    // Discount Types

    public function get_discount_type( $criteria, $options = [] ) {
        return $this->ea->get( $this->subtables['discount_types'], $criteria, $options );
    }

    public function get_discount_type_by_id( $id ) {
        return $this->get_discount_type( compact( 'id' ) );
    }

    public function get_discount_type_by_slug( string $slug ) {
        return $this->get_discount_type( compact( 'slug' ) );
    }

    public function list_discount_types() {
        $types = $this->ea->list( $this->subtables['discount_types'], $criteria = true );

        foreach ( $types as $key => $type ) {
            switch ( $type['slug'] ) {
                case 'percent':
                    $suffix = '%';
                    break;
                case 'fixed':
                    $suffix = Settings::get_currency_symbol();
                    break;
                default:
                    $suffix = '';
            }

            $types[ $key ]['suffix'] = $suffix;
        }

        return $types;
    }


    // Requirements

    public function get_requirement( $criteria, $options = [] ) {
        return $this->ea->get( $this->subtables['requirements'], $criteria, $options );
    }

    public function get_requirement_by_id( $id ) {
        return $this->get_requirement( compact( 'id' ) );
    }

    public function get_requirement_by_slug( string $slug ) {
        return $this->get_discount_type( compact( 'slug' ) );
    }

    public function list_requirements() {
        $requirements = $this->ea->list( $this->subtables['requirements'], $criteria = true );

        foreach ( $requirements as $key => $requirement ) {
            switch ( $requirement['slug'] ) {
                case 'minimum-purchase-amount':
                    $suffix = Settings::get_currency_symbol();
                    break;
                default:
                    $suffix = '';
            }

            $requirements[ $key ]['suffix'] = $suffix;
        }

        return $requirements;
    }


    // Applied Product Variants

    public function list_applied_product_variants( $criteria, $options ):array {
        if ( empty( $options['expand'] ) ) {
            $options['expand'] = [
                'product_variant',
                'product_variant.product',
                'product_variant.product.product_variants',
                'product_variant.product.product_variants.product_variant_type',
                'product_variant.product.product_images',
                'product_variant.product_variant_type',
            ];
        }

        $product_variants_map = $this->ea->list( $this->subtables['product_variants_map'], $criteria, $options );

        $this->_validate_applied_product_variants( $product_variants_map );

        return $product_variants_map;
    }

    public function list_applied_product_variants_by_id( $coupon_id, $options = [] ):array {
        if ( ! $coupon_id ) {
            return [];
        }

        return $this->list_applied_product_variants( compact( 'coupon_id' ), $options );
    }

    private function _validate_applied_product_variants( &$product_variants_map ) {
        if ( ! is_array( $product_variants_map ) ) {
            return;
        }

        foreach ( $product_variants_map as $map_key => $map_record ) {
            if ( ! $map_record['product_variant'] ) {
                // handle `deleted` variant
                $this->delete_applied_product_variant_by_id( $map_record['id'] );
                unset( $product_variants_map[ $map_key ] );
            }
        }
    }

    public function store_applied_product_variant( $map_data ) {
        return $this->ea->store( $this->subtables['product_variants_map'], $map_data );
    }

    public function delete_applied_product_variant_by_id( $record_id ) {
        return $this->delete_applied_product_variant( [ 'id' => $record_id ] );
    }

    public function delete_applied_product_variant( $criteria ) {
        return $this->ea->delete( $this->subtables['product_variants_map'], $criteria );
    }

    public function is_applied_product_variant_valid( $coupon_id, $variant_id ): bool {
        $criteria = [
			'and',
			[ '=', 'coupon_id', $coupon_id ],
			[ '=', 'product_variant_id', $variant_id ],
		];

        $options = [ 'limit' => 1 ];

        $result = $this->list_applied_product_variants( $criteria, $options );

        return boolval( $result );
    }


    // Applied Countries

    public function list_applied_countries( $criteria, $options = [] ):array {
        if ( empty( $options['expand'] ) ) {
            $options['expand'] = [ 'country' ];
        }

        return $this->ea->list( $this->subtables['countries_map'], $criteria, $options );
    }

    public function list_applied_countries_by_id( $coupon_id, $options = [] ):array {
        if ( ! $coupon_id ) {
            return [];
        }

        return $this->list_applied_countries( compact( 'coupon_id' ), $options );
    }

    public function store_applied_country( $map_data ) {
        return $this->ea->store( $this->subtables['countries_map'], $map_data );
    }

    public function delete_applied_country( $criteria ) {
        return $this->ea->delete( $this->subtables['countries_map'], $criteria );
    }

    public function delete_applied_country_by_id( $record_id ) {
        return $this->delete_applied_country( [ 'id' => $record_id ] );
    }

    public function is_applied_country_valid( $coupon_id, string $country_slug ): bool {
        $criteria = [
			'and',
			[ '=', 'coupon_id', $coupon_id ],
			[ '=', 'country.abbreviation', $country_slug ],
		];

        $options = [ 'limit' => 1 ];

        $result = $this->list_applied_countries( $criteria, $options );

        return boolval( $result );
    }


    // Applied Customers

    public function list_applied_customers( $criteria, $options ):array {
        $applied_customers = [];
        foreach ( $this->list_customers_eligibilities() as $eligibility ) {
            $applied_customers[ $eligibility['slug'] ] = [];
        }

        $customer_new_eligibility = CustomerEligibilities::newCustomer()->slug;
        // CustomerEligibilities::customerEmails()->slug;
        $customer_ids_eligibility = CustomerEligibilities::northCommerceCustomerIds()->slug;
        $customer_tags_eligibility = CustomerEligibilities::northCommerceCustomerTags()->slug;
        $wp_users_eligibility = CustomerEligibilities::wordpressUsers()->slug;
        $wp_roles_eligibility = CustomerEligibilities::wordpressRoles()->slug;

        if ( empty( $options['expand'] ) ) {
            $options['expand'] = [ 'customer', 'customer_tag' ];
        }

        $records = $this->ea->list( $this->subtables['customers_map'], $criteria, $options );
        foreach ( $records as $record ) {
            if ( $record['customer_new'] ) {
                $applied_customers[ $customer_new_eligibility ][] = $record;
                continue;
            }
            if ( $record['customer_id'] ) {
                $applied_customers[ $customer_ids_eligibility ][ $record['customer_id'] ] = $record;
                continue;
            }
            if ( $record['customer_tag_id'] ) {
                $applied_customers[ $customer_tags_eligibility ][ $record['customer_tag_id'] ] = $record;
                continue;
            }
            if ( $record['wp_user_id'] ) {
                $applied_customers[ $wp_users_eligibility ][ $record['wp_user_id'] ] = $record;
                continue;
            }
            if ( $record['wp_role'] ) {
                $applied_customers[ $wp_roles_eligibility ][ $record['wp_role'] ] = $record;
                continue;
            }

            throw new \Exception( 'Unknown customer eligibility: ' . print_r( $record, true ) );
        }

        return $applied_customers;
    }

    public function list_applied_customers_by_id( $coupon_id, $options = [] ):array {
        if ( ! $coupon_id ) {
            return [];
        }

        return $this->list_applied_customers( compact( 'coupon_id' ), $options );
    }

    public function list_customers_eligibilities():array {
        return $this->ea->list( $this->subtables['customer_eligibilities'], $criteria = true );
    }

    public function store_applied_customer( $map_data ) {
        return $this->ea->store( $this->subtables['customers_map'], $map_data );
    }

    public function delete_applied_customer( $criteria ) {
        return $this->ea->delete( $this->subtables['customers_map'], $criteria );
    }

    public function delete_applied_customer_by_id( $record_id ) {
        return $this->delete_applied_customer( [ 'id' => $record_id ] );
    }


    // Referenced Orders

    public function list_coupon_order_map_by_order_id( $order_id, $options = [] ):array {
        return $this->ea->list( $this->subtables['orders_map'], compact( 'order_id' ), $options );
    }

	public function get_coupon_by_order_id( $order_id, $options = [] ):array {
		$coupon = $this->list_coupon_order_map_by_order_id( $order_id, $options = [] );
		if(empty($coupon[0]['coupon_id'])) return [];
        return $this->get_by_id( $coupon[0]['coupon_id'] );
    }

    public function list_applied_orders( $criteria, $options = [] ):array {
        return $this->ea->list( $this->subtables['orders_map'], $criteria, $options );
    }

    public function count_applied_orders( $criteria, $options = [] ):int {
        return (int) $this->ea->count( $this->subtables['orders_map'], $criteria, $options );
    }

    public function count_applied_orders_by_id( $coupon_id, $options = [] ):int {
        return $this->count_applied_orders( compact( 'coupon_id' ), $options );
    }

    public function get_coupon_order( $criteria, $options = [] ) {
        return $this->ea->get( $this->subtables['orders_map'], $criteria, $options );
    }

    public function get_coupon_order_by_id( $id, $options = [] ) {
        return $this->ea->get( $this->subtables['orders_map'], compact( 'id' ), $options );
    }

    public function store_coupon_order( $map_data ) {
        $this->delete_coupon_order_map_by_order_id( $map_data['order_id'] );
        return $this->ea->store( $this->subtables['orders_map'], $map_data );
    }

    protected function delete_coupon_order_map_by_order_id( $order_id ) {
        $map_records = $this->list_coupon_order_map_by_order_id( $order_id );
        if ( ! $map_records ) {
            return;
        }

        foreach ( $map_records as $record ) {
            $this->ea->delete(
                $this->subtables['orders_map'],
                [ 'id' => $record['id'] ]
            );
        }
    }

    public function delete_coupon_order_by_id( $record_id ) {
        return $this->ea->delete( $this->subtables['orders_map'], [ 'id' => $record_id ] );
    }


    // Utils

    public function is_coupon_valid( array $coupon ): bool {
        return ! $this->is_coupon_unvalid( $coupon );
    }

    public function is_coupon_unvalid( array $coupon ): bool {
        if (
            empty( $coupon['id'] )
            || Statuses::published()->slug !== $coupon['coupon_status']['slug']
            || $coupon['deleted']
        ) {
            return true;
        }

        if (
            null !== $coupon['usage_limit']
            && $coupon['usage_counter'] >= $coupon['usage_limit']
        ) {
            return true;
        }

        return false;
    }

    public function increment_usage_counter( $coupon_id ): bool {
        if ( ! $coupon_id ) {
            return false;
        }

        $coupon = $this->get_by_id( $coupon_id );

        if ( empty( $coupon['id'] ) ) {
            return false;
        }

        $new_data = [
            'id' => $coupon['id'],
            'usage_counter' => intval( $coupon['usage_counter'] ) + 1,
        ];

        $updated_coupon = $this->store( $new_data );

        return ! empty( $updated_coupon['id'] );
    }

}
