<?php
namespace NorthCommerce\Models;

use NorthCommerce\Db\Collections\ShippingZoneTypes;
use NorthCommerce\Models\{
	ProductModel,
	CountryModel
};

defined( 'ABSPATH' ) || exit;

/**
 * Shipping profile model.
 *
 * @package north-commerce/includes/models
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.10
 * @version 0.1.25
 */
class ShippingProfileModel extends BaseModel {

	protected $shipping_rate_condition_bases_list;
	protected $shipping_rate_condition_base_type_map;

	private static $_shipping_addresses_list;
	private static $_shippable_products_list;
	private static $_profiles_related_products_list;
	private static $_variants_related_profiles = [];

	/**
	 * @since   0.1.10
	 * @version 0.1.19
	 */
	public function __construct() {
		parent::__construct();
		$this->table = 'shipping_profiles';
		$this->subtables = [
			'shipping_addresses' => 'shipping_addresses',
			'profile_variants' => 'shipping_profile_product_variants',
			'zones' => 'shipping_zones',
			'internal_rates' => 'shipping_rates_internal',
			'easypost_rates' => 'shipping_rates_easypost',
			'rate_conditions' => 'shipping_rate_conditions',
		];
	}

	/**
	 * @version 0.1.24
	 */
	public function getExpands() {
		return [
			'shipping_address',
			'shipping_address.country',
			'shipping_zones',
			'shipping_zones.shipping_rates_internal',
			'shipping_zones.shipping_rates_internal.shipping_rate_conditions',
			'shipping_zones.shipping_rates_internal.shipping_rate_conditions.shipping_rate_condition_base',
			'shipping_zones.shipping_rates_easypost',
			'shipping_zones.shipping_zone_type',
		];
	}

	/**
	 * @version 0.1.24
	 */
	public function get( $criteria = true, $options = [] ) {
		if ( isset( $options['expand'] ) && false === $options['expand'] ) {
            unset( $options['expand'] );
        } else if ( empty( $options['expand'] ) ) {
            $options['expand'] = $this->getExpands();
        }

		$profile = $this->ea->get( $this->table, $criteria, $options );

		if ( isset( $profile['shipping_address']['id'] ) )  {
			$profile['shipping_address']['preformatted_line'] = $this->get_address_inlined( $profile['shipping_address'] );
		}

		foreach ( $profile['shipping_zones'] ?? [] as $zone_key => $zone ) {
			if ( empty( $options['shipping_zones.data.allow'] ) ) {
				$zone_data_bc = get_option( "nc/shipping_zone_{$zone['id']}/countries" ); // bc
				if ( $zone_data_bc ) {
					update_option( "north-commerce/shipping_zone_{$zone['id']}", $zone_data_bc );
					delete_option( "nc/shipping_zone_{$zone['id']}/countries" );
				}

				$zone_data = get_option( "north-commerce/shipping_zone_{$zone['id']}" );
				$profile['shipping_zones'][ $zone_key ]['shipping_countries'] = $zone_data;
			}
		}

		return $profile;
	}

	/**
	 * @version 0.1.24
	 */
	public function get_by_id( $id, $options = [] ) {
		return $this->get( compact( 'id' ), $options );
	}

	/**
	 * @version 0.1.24
	 */
	public function get_regional_default( $options = [] ) {
		$regional_profile = $this->get( [ 'is_default' => true ], $options );
		$this->_filter_regional_zones( $regional_profile );
		return $regional_profile;
	}

	/**
	 * @since   0.1.24
	 * @version 0.1.24
	 */
	public function get_regional_profile_by_id( $profile_id, $options = [] ) {
		$regional_profile = $this->get_by_id( $profile_id, $options );
		$this->_filter_regional_zones( $regional_profile );
		return $regional_profile;
	}

	/**
	 * @since   0.1.24
	 * @version 0.1.24
	 */
	protected function _filter_regional_zones( &$profile ) {
		foreach ( $profile['shipping_zones'] ?? [] as $zone_key => $zone ) {
			if ( ShippingZoneTypes::regional()->id !== $zone['shipping_zone_type_id'] ) {
				unset( $profile['shipping_zones'][ $zone_key ] );
			}
		}

		return $profile;
	}

	/**
	 * @since   0.1.24
	 * @version 0.1.24
	 */
	public function get_local_profile_by_id( $profile_id, $options = [] ) {
		$delivery_profile = $this->_get_internal_zones_profile( $profile_id, $options );

		$local_zone_type = ShippingZoneTypes::local()->id;
		foreach ( $delivery_profile['shipping_zones'] ?? [] as $zone_key => $zone ) {
			if ( $local_zone_type !== $zone['shipping_zone_type_id'] ) {
				unset( $delivery_profile['shipping_zones'][ $zone_key ] );
			}
		}

		return $delivery_profile;
	}

	/**
	 * @since   0.1.24
	 * @version 0.1.24
	 */
	public function get_pickup_profile_by_id( $profile_id, $options = [] ) {
		$pickup_profile = $this->_get_internal_zones_profile( $profile_id, $options );

		$pickup_zone_type = ShippingZoneTypes::pickup()->id;
		foreach ( $pickup_profile['shipping_zones'] ?? [] as $zone_key => $zone ) {
			if ( $pickup_zone_type !== $zone['shipping_zone_type_id'] ) {
				unset( $pickup_profile['shipping_zones'][ $zone_key ] );
			}
		}

		return $pickup_profile;
	}

	/**
	 * @since   0.1.24
	 * @version 0.1.24
	 */
	protected function _get_internal_zones_profile( $profile_id, $options = [] ) {
		if ( isset( $options['expand'] ) && false === $options['expand'] ) {
            unset( $options['expand'] );
        } else if ( empty( $options['expand'] ) ) {
            $local_expands = $this->getExpands();
			$rates_easypost_key = array_search( 'shipping_zones.shipping_rates_easypost', $local_expands );
			if ( $rates_easypost_key ) {
				unset( $local_expands[ $rates_easypost_key ] );
			}
			$options['expand'] = $local_expands;
        }

		return $this->get_by_id( $profile_id, $options );
	}

	/**
	 * @since   0.1.10
	 * @version 0.1.24
	 */
	public function list( $criteria = true, $options = [] ) {
		if ( empty( $options['expand'] ) ) {
			$options['expand'] = $this->getExpands();
		}

		$profiles = $this->ea->list( $this->table, $criteria, $options );

		foreach ( $profiles as $key => $profile ) {
			$address_line = $profile['shipping_address'] ? $this->get_address_inlined( $profile['shipping_address'] ) : '';
			$profiles[ $key ]['shipping_address']['preformatted_line'] = $address_line;

			if ( empty( $options['shipping_zones.data.allow'] ) ) {
				$zones = $profile['shipping_zones'] ?? [];
				foreach ( $zones as $zone_key => $zone ) {
					$zone_data_bc = get_option( "nc/shipping_zone_{$zone['id']}/countries" ); // bc
					if ( $zone_data_bc ) {
						update_option( "north-commerce/shipping_zone_{$zone['id']}", $zone_data_bc );
						delete_option( "nc/shipping_zone_{$zone['id']}/countries" );
					}

					$zone_data = get_option( 'north-commerce/shipping_zone_' . $zone['id'] );
					$profiles[ $key ]['shipping_zones'][ $zone_key ]['shipping_countries'] = $zone_data;
				}
			}
		}

		return $profiles;
	}

	public function list_regional_custom( $options = [] ) {
		return $this->list( [ 'is_default' => false ], $options );
	}

	public function list_by_shipping_address_id( $shipping_address_id, $options = [] ) {
		return $this->list( compact( 'shipping_address_id' ), $options );
	}

	public function store( $shipping_profile_data ) {
		return $this->ea->store( $this->table, $shipping_profile_data );
	}

	public function delete( $shipping_profile_id, $options = [] ) {
		return $this->ea->delete( $this->table, [ 'id' => $shipping_profile_id ], $options );
	}


	// Profile-Variants Map

	public function map_profile_with_variants( $profile_id, array $variants ) {
		$this->ea->delete(
			$this->subtables['profile_variants'],
			[ 'shipping_profile_id' => $profile_id ]
		);

		foreach ( $variants as $variant_id ) {
			$data = [
				'shipping_profile_id' => $profile_id,
				'product_variant_id' => $variant_id,
			];

			$pv = $this->ea->store( $this->subtables['profile_variants'], $data );
		}
	}

	public function list_profile_product_variants( $criteria = true, $options = [] ) {
		return $this->ea->list( $this->subtables['profile_variants'], $criteria, $options );
	}

	/**
	 * @since   0.1.13
	 * @version 0.1.24
	 */
	public function list_related_products( $profile_id ):array {
		if ( ! $profile_id ) {
			return [];
		}

		if ( ! empty( self::$_profiles_related_products_list[ intval( $profile_id ) ] ) ) {
			return self::$_profiles_related_products_list[ intval( $profile_id ) ]; // Cached result.
		}

		$shipping_profile = $this->get_by_id( $profile_id );

		if ( $shipping_profile['all_variants_included'] ) {
			return $this->list_shippable_products();
		}

		$product_model = new ProductModel();

		$criteria = [
			'shipping_profile_id' => $profile_id,
		];

		$options = [
			'columns' => [
				'product_variant_id',
			],
			'expand' => [
				'product_variant',
				'product_variant.product_variant_type',
			]
		];

		$variants_map = $this->list_profile_product_variants( $criteria, $options );

		$product_options = [
			'columns' => [
				'id',
				'name',
				'has_product_variants',
			],
			'expand' => [
				'product_images',
				'product_variants',
				'product_variants.product_variant_type',
			],
		];

		$products_list = [];
		foreach ( $variants_map as $map_item ) {
			$product_id = (int) $map_item['product_variant']['product_id'];
			if ( empty( $products_list[ $product_id ] ) ) {
				$product = $product_model->get_by_id( $product_id, $product_options );
				$products_list[ $product_id ] = [
					'id' => $product['id'],
					'name' => $product['name'],
					'has_product_variants' => $product['has_product_variants'],
				];

				$products_list[ $product_id ]['total_variants_counter'] = $product['has_product_variants']
					? count( $product['product_variants'] ) - 1 // excluding `solo`
					: 0;
			}

			if ( ! $product['has_product_variants'] ) {
				continue;
			}

			if ( 'solo' === $map_item['product_variant']['product_variant_type']['slug'] ) {
				// 'solo' variant links all available `standard` variants
				$products_list[ $product_id ]['product_variants'] = $product['product_variants'];
				continue;
			}

			$products_list[ $product_id ]['product_variants'][] = $map_item['product_variant'];
		}

		$formated_product_list = $this->_format_shippable_product_list( $products_list );

		return self::$_profiles_related_products_list[ intval( $profile_id ) ] = $formated_product_list;
	}

	/**
	 * @since 0.1.13
	 */
	public function list_shippable_products() {
		if ( ! empty( self::$_shippable_products_list ) ) {
			return self::$_shippable_products_list; // Cached result.
		}

		$product_model = new ProductModel();

		$criteria = [
			'is_physical_product' => true,
		];

		$options = [
			'columns' => [
				'id',
				'name',
				'has_product_variants',
			],
			'expand' => [
				'product_images',
				'product_variants',
				'product_variants.product_variant_type',
			],
		];

		$products = $product_model->list( $criteria, $options );

		return self::$_shippable_products_list = $this->_format_shippable_product_list( $products );
	}

	/**
	 * @since 0.1.13
	 */
	private function _format_shippable_product_list( $products_list ) {
		if ( ! $products_list ) {
			return $products_list;
		}

		$formatted_products_list = [];

		$solo_variant_type_id = \NorthCommerce\Db\Collections\ProductVariantTypes::solo()->id;

		foreach ( $products_list as $index => $product ) {

			$products_image_url = $product['product_images'][0]['image_url'] ?? NORTH_COMMERCE_PLUGIN_DIR_URL . 'admin/images/product-empty-img.png';
			$products_list[ $index ]['product_images'] = [ $products_image_url ];

			$product_has_variants = (bool) $products_list[ $index ]['has_product_variants'];

			if ( ! $product_has_variants ) {
				$products_list[ $index ]['product_variants'] = [];
				$products_list[ $index ]['total_variants_counter'] = $products_list[ $index ]['total_variants_counter'] ?? 0; // excluding `solo`

				$formatted_products_list[ intval( $product['id'] ) ] = $products_list[ $index ];
				continue;
			}
			$temp_variants = array();
			foreach ( $product['product_variants'] as $variant ) {
				$is_solo_variant = $variant['product_variant_type_id'] === $solo_variant_type_id;

				if (
					$is_solo_variant
					&& count( $product['product_variants'] ) > 1
				) {
					continue; // exlude `solo` variant if there is also `standard` variants in a list
				}

				$variant_id = intval( $variant['id'] );

				if ( ! isset( self::$_variants_related_profiles[ $variant_id ] ) ) {
					$_related_profiles = $this->list_profile_product_variants(
						[
							'product_variant_id' => $variant['id']
						],
						[
							'columns' => [ 'shipping_profile_id' ],
							'expand' => ''
						]
					);

					$related_profiles = [];
					foreach ( $_related_profiles as list( 'shipping_profile_id' => $profile_id ) ) {
						$profile = $this->get_by_id( $profile_id, [
							'columns' => [ 'id', 'name' ],
							'expand' => '',
						] );

						$related_profiles[ intval( $profile['id'] ) ] = $profile['name']; // Cache result.
					}

					self::$_variants_related_profiles[ $variant_id ] = $related_profiles;
				}

				$temp_variants[ $variant_id ] = [
					'id' => $variant['id'],
					'slug' => $variant['slug'],
					'product_id' => $variant['product_id'],
					'product_variant_type' => [ 'slug' => $variant['product_variant_type']['slug'] ],
					'related_shipping_profiles' => self::$_variants_related_profiles[ $variant_id ],
				];
			}
			$products_list[ $index ]['product_variants'] = $temp_variants;

			$products_list[ $index ]['total_variants_counter'] = $products_list[ $index ]['total_variants_counter']
				?? ( count( $product['product_variants'] ) - 1 ); // excluding `solo`

			$formatted_products_list[ intval( $product['id'] ) ] = $products_list[ $index ];
		}

		return $formatted_products_list;
	}

	public function count_related_products( $profile_id ) : int {
		$shipping_profile = $this->get_by_id( $profile_id );

		if ( $shipping_profile['all_variants_included'] ) {
			$product_model = new ProductModel();

			return $product_model->count( [ 'is_physical_product' => true ] );
		}

		$criteria = [
			'shipping_profile_id' => $profile_id
		];

		$options = [
			'columns' => [ 'product_variant_id' ],
			'expand' => [ 'product_variant' ]
		];

		$variants_map = $this->ea->list( $this->subtables['profile_variants'], $criteria, $options );

		$product_ids = [];
		foreach ( $variants_map as $map_item ) {
			$product_ids[] = $map_item['product_variant']['product_id'];
		}

		return count( array_unique( $product_ids ) );
	}


	// Shipping Addresses

	/**
	 * @version 0.1.24
	 */
	public function get_shipping_address( $criteria = true, $options = [] ) {
		if ( isset( $options['expand'] ) && false === $options['expand'] ) {
            unset( $options['expand'] );
        } else if ( empty( $options['expand'] ) ) {
            $options['expand'] = [ 'country' ];
        }

		$address = $this->ea->get( $this->subtables['shipping_addresses'], $criteria, $options );

		if ( isset( $address['id'] ) ) {
			$address['preformatted_line'] = $this->get_address_inlined( $address );
		}

		return $address;
	}

	public function get_shipping_address_by_id( $shipping_address_id, $options = [] ) {
		return $this->get_shipping_address( [ 'id' => $shipping_address_id ], $options );
	}

	public function get_default_shipping_address( $options = [] ) {
		return $this->get_shipping_address( [ 'is_default' => true ], $options );
	}

	public function list_addresses() {
		if ( ! empty( self::$_shipping_addresses_list ) ) {
			return self::$_shipping_addresses_list; // cached
		}

		$options = [
			'expand' => [ 'country' ]
		];

		$addresses = $this->ea->list( $this->subtables['shipping_addresses'], true, $options  );

		foreach ( $addresses as $key => $address ) {
			$addresses[ $key ]['preformatted_line'] = $this->get_address_inlined( $address );
		}

		return self::$_shipping_addresses_list = $addresses;
	}

	/**
	 * @version 0.1.25
	 */
	public function count_addresses( $criteria = true ) {
		return (int) $this->ea->count( $this->subtables['shipping_addresses'], $criteria );
	}

	public function store_address( $shipping_address_data ) {
		$country_model = new CountryModel();

		$address = $this->ea->store( $this->subtables['shipping_addresses'], $shipping_address_data );

		if ( isset( $address['id'] ) ) {
			$address['preformatted_line'] = $this->get_address_inlined( $address );
			if ( empty( $address['country']['id'] ) ) {
				$address['country'] = $country_model->get_by_id( $address['country_id'] );
			}
		}

		return $address;
	}

	public function delete_address( $criteria ) {
		return $this->ea->delete( $this->subtables['shipping_addresses'], $criteria );
	}

	public function delete_address_by_id( $shipping_address_id ) {
		return $this->delete_address( [ 'id' => $shipping_address_id ] );
	}

	/**
	 * @version 0.1.24
	 */
	private function get_address_inlined( array $address ): string {
		return $address['address']
			. ', ' . $address['city']
			. ', ' . $address['state']
			. ' ' . $address['zipcode'];
	}


	// Shipping Zones

	/**
	 * @version 0.1.24
	 */
	public function list_zones( $criteria, $options = [] ) {
		if ( isset( $options['expand'] ) && false === $options['expand'] ) {
            unset( $options['expand'] );
        } else if ( empty( $options['expand'] ) ) {
            $options['expand'] = [ 'shipping_zone_type' ];
        }

		return $this->ea->list( $this->subtables['zones'], $criteria, $options );
	}

	/**
	 * @version 0.1.24
	 */
	public function list_zones_by_profile_id( $shipping_profile_id, $options = [] ) {
		$criteria = compact( 'shipping_profile_id' );

		if ( isset( $options['shipping_zone_type_id'] ) ) {
			$criteria['shipping_zone_type_id'] = $options['shipping_zone_type_id'];
			unset( $options['shipping_zone_type_id'] );
		}

		return $this->list_zones( $criteria, $options );
	}

	/**
	 * @since   0.1.10
	 * @version 0.1.24
	 */
	public function store_zones(
		$shipping_profile_id,
		$shipping_zone_type_id,
		array $zones
	) {
		$_old_zones = $this->list_zones_by_profile_id( $shipping_profile_id, compact( 'shipping_zone_type_id' ) );
		$old_zones = array();
		foreach ( $_old_zones as $zone ) {
			$old_zones[ $zone['id'] ] = $zone;
		}

		foreach ( $zones as $zone ) {
			$zone_name = trim( $zone['name'] );
			$zone_instructions = trim( $zone['instructions'] ?? '' );

			$zone_data = [
				'name' => sanitize_text_field( $zone_name ),
				'slug' => sanitize_title( $zone_name ),
				'shipping_profile_id' => $shipping_profile_id,
				'shipping_zone_type_id' => $shipping_zone_type_id,
				'instructions' => sanitize_text_field( $zone_instructions ),
			];

			if ( false === strpos( $zone['id'], 'new-zone-' )  ) {
				$zone_data['id'] = $zone['id'];
				unset( $old_zones[ $zone['id'] ] );
			}

			$stored_zone = $this->ea->store(
				$this->subtables['zones'],
				$zone_data
			);

			if ( ! isset( $stored_zone['id'] ) ) {
				continue;
			}

			switch ( $stored_zone['shipping_zone_type_id'] ) {
				case ShippingZoneTypes::regional()->id:
				case ShippingZoneTypes::local()->id:
				case ShippingZoneTypes::pickup()->id:
					$extra_data = $zone['countries'];
					break;

				default:
					throw new \Exception( 'Unknown Shipping Zone type' );
			}

			update_option(
				"north-commerce/shipping_zone_{$stored_zone['id']}",
				$extra_data
			);

			if ( isset( $zone['rates'] ) ) {
				$this->store_rates( $stored_zone['id'], $zone['rates'] );
			} else {
				$all_rates = $this->list_rates_by_zone_id( $stored_zone['id'], [
					'columns' => [ 'id' ]
				] );
				$this->_delete_obsolete_rates( $zone['id'], $all_rates );
			}
		}

		$this->_delete_zones( $shipping_profile_id, $old_zones );
	}

	/**
	 * @since 0.1.24
	 */
	public function delete_zones_by_profile_id( $shipping_profile_id, $options = [] ) {
		$stored_zones = $this->list_zones_by_profile_id( $shipping_profile_id, $options );
		$this->_delete_zones( $shipping_profile_id, $stored_zones );
	}

	/**
	 * @since   0.1.10
	 * @version 0.1.13
	 */
	private function _delete_zones( $profile_id, array $zones ) {
		if ( ! $zones ) {
			// Bailout.
			return;
		}

		$zones_filter = [];
		foreach ( $zones as $zone ) {
			$all_rates = $this->list_rates_by_zone_id( $zone['id'], [
				'columns' => [ 'id' ]
			] );
			$this->_delete_obsolete_rates( $zone['id'], $all_rates );
			$zones_filter[] = [ '=', 'id', $zone['id'] ];
		}

		$criteria = [ 'and', [
			[ '=', 'shipping_profile_id', $profile_id ],
			[ 'or', $zones_filter ]
		] ];

		return $this->ea->delete( $this->subtables['zones'], $criteria );
	}


	// Shipping Rates

	/**
	 * @since 0.1.25
	 */
	public function get_flat_rate( $citeria, $options = [] ): ?array {
		return $this->ea->get( $this->subtables['internal_rates'], $citeria, $options );
	}

	/**
	 * @since 0.1.25
	 */
	public function get_calculated_rate( $citeria, $options = [] ): ?array {
		return $this->ea->get( $this->subtables['easypost_rates'], $citeria, $options );
	}

	/**
	 * @since 0.1.25
	 */
	public function get_flat_rate_by_id( $flat_rate_id, $options = [] ): ?array {
		return $this->get_flat_rate( [ 'id' => $flat_rate_id ], $options );
	}

	/**
	 * @since 0.1.25
	 */
	protected function rate_carrier_normalized( string $carrier ): string {
		$special = [
			'UPSDAP' => 'UPS',
			'DHLExpress' => 'DHL'
		];

		return nc_g( $special, $carrier, $carrier );
	}

	/**
	 * @version 0.1.25
	 */
	public function list_rates( $citeria = true, $options = [] ): array {
		$_include = $options['include'] ?? [];
		unset( $options['include'] );
		$include_all = empty( $_include );

		if ( $include_all || in_array( 'internal', $_include ) ) {
			$internal_rates = $this->ea->list( $this->subtables['internal_rates'], $citeria, $options );
			$rates['internal'] = $internal_rates;
		}
		if ( $include_all || in_array( 'calculated', $_include ) ) {
			$easypost_rates = $this->ea->list( $this->subtables['easypost_rates'], $citeria, $options );
			$rates['easypost'] = $easypost_rates;
		}

		return $rates ?? [];
	}

	public function list_rates_by_zone_id( $shipping_zone_id, $options = [] ) {
		return $this->list_rates( compact( 'shipping_zone_id' ), $options );
	}

	/**
	 * @since 0.1.25
	 */
	public function list_calculated_rates_by_shipping_option( array $shipping_option, ?array $options = [] ): array {
		$carrier_label = $this->rate_carrier_normalized( $shipping_option['carrier'] );
		$service = $shipping_option['service'] ?? null;

		$rates = $this->list_rates( compact( 'carrier_label' ), [
			'include' => [ 'calculated' ]
		] )['easypost'];

		if ( $service ) {
			foreach ( $rates as $i => $rate ) {
				$rate_services_json = $rate['services'];
				$rate_services = $rate_services_json ? json_decode( $rate_services_json, true ) : [];
				if ( ! in_array( $service, $rate_services ) ) {
					unset( $rates[ $i ] );
				}
			}
		}

		return $rates;
	}

	public function store_internal_rate( array $rate_data ) {
		return $this->ea->store( $this->subtables['internal_rates'], $rate_data );
	}

	public function store_easypost_rate( array $rate_data ) {
		return $this->ea->store( $this->subtables['easypost_rates'], $rate_data );
	}

	/**
	 * @since   0.1.10
	 * @version 0.1.19
	 */
	public function store_rates( $zone_id, array $rates_data ) {
		$_old_rates = $this->list_rates_by_zone_id( $zone_id, [
			'columns' => [ 'id', 'created' ]
		] );
		$old_rates = array();
		foreach ( $_old_rates as $rate_calculation => $rates_array ) {
			foreach ( $rates_array as $rate ) {
				$old_rates[ $rate_calculation ][ $rate['id'] ] = $rate;
			}
		}

		foreach ( $rates_data as $rate_calculation => $rates ) {
			if ( 'internal' === $rate_calculation ) {
				foreach ( $rates as $rate ) {
					$rate_name = trim( $rate['name'] ?? '' );
					$rate_fee_flat = $rate['feeFlat'] ?? null;
					$rate_fee_percent = $rate['feePercent'] ?? null;

					$rate_data = [
						'shipping_zone_id' => $zone_id,
						'name' => $rate_name,
						'slug' => sanitize_title( $rate_name ),
						'has_conditions' => ! empty( $rate['hasConditions'] ) && ! empty( $rate['conditions'] ),
						'conditions_operator' => $rate['conditionsOperator'] ?? 'any',
						'fee_flat' => $rate_fee_flat ?: null,
						'fee_percent' => $rate_fee_percent ?: null,
						'price' => $rate['price'] ?? null,
					];

					if ( false === strpos( $rate['id'], 'new-rate-' )  ) {
						$rate_data['id'] = $rate['id'];
						unset( $old_rates['internal'][ $rate['id'] ] );
					}

					$stored_internal_rate = $this->store_internal_rate( $rate_data );

					if ( $stored_internal_rate['id'] ) {
						if ( $stored_internal_rate['has_conditions'] ) {
							$this->store_rate_conditions(
								$stored_internal_rate['id'],
								$rate['conditions']
							);
						} else {
							$this->delete_rate_conditions( [
								'shipping_rate_internal_id' => $stored_internal_rate['id']
							] );
						}
					}
				}
			}

			if ( 'easypost' === $rate_calculation ) {
				foreach ( $rates as $rate ) {
					$rate_fee_flat = $rate['feeFlat'] ?? null;
					$rate_fee_percent = $rate['feePercent'] ?? null;

					$rate_data = [
						'shipping_zone_id' => $zone_id,
						'carrier_id' => $rate['carrierID'],
						'carrier_label' => $rate['carrierLabel'],
						'fee_flat' => $rate_fee_flat ?: null,
						'fee_percent' => $rate_fee_percent ?: null,
						'services' => $rate['services'] ? json_encode( $rate['services'] ) : null,
						'future_services' => (bool) ( $rate['futureServices'] ?? null ),
					];

					if ( false === strpos( $rate['id'], 'new-rate-' )  ) {
						$rate_data['id'] = $rate['id'];
						unset( $old_rates['easypost'][ $rate['id'] ] );
					}

					$stored_easypost_rate = $this->store_easypost_rate( $rate_data );
				}
			}
		}

		$this->_delete_obsolete_rates( $zone_id, $old_rates );
	}

	/**
	 * @since   0.1.12
	 * @version 0.1.13
	 */
	private function _delete_obsolete_rates( $zone_id, array $old_rates ) {
		if (
			empty( $old_rates['internal'] )
			&& empty( $old_rates['easypost'] )
		) {
			// Bailout.
			return;
		}

		$obsolete_rates_filter = [];
		foreach ( $old_rates as $rate_calculation => $rates_array ) {
			foreach ( $rates_array as $rate ) {
				$obsolete_rates_filter[ $rate_calculation ][] = [ '=', 'id', $rate['id'] ];
				if ( 'internal' === $rate_calculation ) {
					$this->delete_rate_conditions( [ 'shipping_rate_internal_id' => $rate['id'] ] );
				}
			}
		}

		if ( ! empty( $obsolete_rates_filter['internal'] ) ) {
			$this->delete_internal_rates( [ 'and', [
				[ '=', 'shipping_zone_id', $zone_id ],
				[ 'or', $obsolete_rates_filter['internal'] ]
			] ] );
		}

		if ( ! empty( $obsolete_rates_filter['easypost'] ) ) {
			$this->delete_easypost_rates( [ 'and', [
				[ '=', 'shipping_zone_id', $zone_id ],
				[ 'or', $obsolete_rates_filter['easypost'] ]
			] ] );
		}
	}

	/**
	 * @since   0.1.11
	 * @version 0.1.13
	 */
	public function delete_internal_rates( $criteria ) {
		return $this->ea->delete( $this->subtables['internal_rates'], $criteria );
	}

	/**
	 * @since 0.1.13
	 */
	public function delete_easypost_rates( $criteria ) {
		return $this->ea->delete( $this->subtables['easypost_rates'], $criteria );
	}


	// Shipping Rate Conditions

	public function list_conditions( $citeria = true, $options = [] ) {
		return $this->ea->list( $this->subtables['rate_conditions'], $citeria, $options );
	}

	/**
	 * @since   0.1.11
	 * @version 0.1.13
	 */
	public function list_conditions_by_rate_id( $rate_id, $options = [] ) {
		return $this->list_conditions( [ 'shipping_rate_internal_id' => $rate_id ], $options );
	}

	public function store_rate_condition( array $condition_data ) {
		return $this->ea->store( $this->subtables['rate_conditions'], $condition_data );
	}

	/**
	 * @since   0.1.11
	 * @version 0.1.24
	 */
	public function store_rate_conditions( $rate_id, array $conditions ) {
		$_old_conditions = $this->list_conditions_by_rate_id( $rate_id, [
			'columns' => [ 'id', 'created' ]
		] );
		$old_conditions = array();
		foreach ( $_old_conditions as $rate ) {
			$old_conditions[ $rate['id'] ] = $rate;
		}

		foreach ( $conditions as $condition ) {
			$value_max = $condition['data']['max'] ?? null;
			$condition_data = [
				'shipping_rate_internal_id' => $rate_id,
				'shipping_rate_condition_base_id' => $this->get_condition_base_id_by_type( $condition['type'] ),
				'value_min' => $condition['data']['min'] ?? null,
				'value_max' => $value_max > 0 ? $value_max : null,
				'value_roles' => ! empty( $condition['data']['userRoles'] )
					? json_encode( $condition['data']['userRoles'] )
					: null,
			];

			if ( false === strpos( $condition['id'], 'new-condition-' )  ) {
				$condition_data['id'] = $condition['id'];
				unset( $old_conditions[ $condition['id'] ] );
			}

			$stored_condition = $this->store_rate_condition( $condition_data );
		}

		$this->_delete_obsolete_conditions( $rate_id, $old_conditions );
	}

	/**
	 * @since   0.1.12
	 * @version 0.1.13
	 */
	private function _delete_obsolete_conditions( $rate_id, array $old_conditions ) {
		if ( ! $old_conditions ) {
			// Bailout.
			return;
		}

		$obsolete_conditions_filter = [];
		foreach ( $old_conditions as $rate ) {
			$obsolete_conditions_filter[] = [ '=', 'id', $rate['id'] ];
		}

		$this->delete_rate_conditions( [ 'and', [
			[ '=', 'shipping_rate_internal_id', $rate_id ],
			[ 'or', $obsolete_conditions_filter ]
		] ] );
	}

	public function delete_rate_conditions( $criteria ) {
		return $this->ea->delete( $this->subtables['rate_conditions'], $criteria );
	}


	// Shipping Rate Condition Bases

	public function list_shipping_rate_condition_bases( $options = [] ) {
		if ( ! $options ) {
			$options['columns'] = [ 'name', 'slug' ];
		}

		return $this->ea->list( 'shipping_rate_condition_bases', $criteria = true, $options );
	}

	public function get_condition_base_id_by_type( $condition_base_type ) {
		if ( empty( $this->shipping_rate_condition_bases_list ) ) {
			$bases = $this->list_shipping_rate_condition_bases( [ 'columns' => [ 'id', 'slug' ] ] );
			$map = array();
			foreach ( $bases as $base ) {
				$map[ $base['slug'] ] = $base['id'];
			}
			$this->shipping_rate_condition_base_type_map = $map;
		}

		return $this->shipping_rate_condition_base_type_map[ $condition_base_type ] ?? null;
	}


	// Shipping Countries

	public function list_uncovered_countries( $shipping_profile ) {
		if ( ! isset( $shipping_profile['shipping_zones'] ) && isset( $shipping_profile['id'] ) ) {
			$shipping_profile = $this->get_by_id( $shipping_profile['id'] );
		}

		$uncovered_countries = ( new CountryModel() )->get_formated_list();
		foreach ( $shipping_profile['shipping_zones'] as $zone ) {
			foreach ( $zone['shipping_countries'] as $country_code => $country_name ) {
				if ( isset( $uncovered_countries[ $country_code ] ) ) {
					unset( $uncovered_countries[ $country_code ] );
				}
			}
		}

		return $uncovered_countries;
	}

	/**
	 * Assign first Address in DB to stored Profiles
	 */
	public function assign_first_address_to_shipping_profiles( $shipping_address_id ) {
		foreach ( $this->list() as $shipping_profile ) {
			if ( ! $shipping_profile['shipping_address_id'] ) {
				$shipping_profile_data = [
					'id' => $shipping_profile['id'],
					'shipping_address_id' => $shipping_address_id,
				];

				$this->store( $shipping_profile_data );
			}
		}
	}

}
