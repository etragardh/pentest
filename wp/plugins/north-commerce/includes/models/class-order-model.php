<?php
namespace NorthCommerce\Models;

defined( 'ABSPATH' ) || exit;

use NorthCommerce\Models\{
    CountryModel,
    CustomerModel
};

/**
 * Order model.
 *
 * @package north-commerce/includes/models
 * @author  North Commerce <hello@northplugins.com>
 * @link    https://northcommerce.com/
 * @since   0.1.3
 * @version 0.1.25
 */
class OrderModel extends BaseModel {

    public $available_triggers = [
        // The atomic actions on the database layer
        [
            // can fire on either created or updated but
            // will only ever trigger when order_status_id is 1
            // and payment_status_id is 5
            'key' => 'order.paid',
            'on' => ['created', 'updated'],
            'title' => 'New Paid Order',
            'conditions' => [
                'order_status_id' => 1,
                'payment_status_id' => 5
            ]
        ],
        [
            'key' => 'order.deleted',
            'on' => ['deleted'],
            'title' => 'Order Deleted',
            // doesn't matter what the conditions are, will always
            // fire on deletion
            'conditions' => []
        ],
        [
            'key' => 'order.dispatched',
            'on' => ['updated'],
            'title' => 'Order Dispatched',
            'conditions' => [
                'order_status_id' => 1234 // dispatched status
            ]
        ]
    ];

    public function __construct() {
        parent::__construct();
        $this->table = 'orders';
    }

    /**
     * @version 0.1.25
     */
    public function getExpands() {
        $li_product = 'line_items.product_variant.product';
        $li_pvov = $li_product . '_variant_option_values';

        return [
            'order_status',
            'payment_status',
            $li_product . '.product_type',
            $li_product . '.product_images',
            $li_product . '.payment_detail',
            $li_product . '.payment_detail.payment_frequency',
	        $li_pvov,
	        $li_pvov . '.product_option_value',
	        $li_pvov . '.product_option_value.product_option',
            'customer',
            'customer_payment_method',
            'customer_payment_method.payment_provider',
            'shipping_details',
            'shipping_address.country',
            'billing_address.country',
            'order_changes',
        ];
    }

    /**
     * @version 0.1.24
     */
    public function get( $criteria = true, $options = [] ) {
        if ( isset( $options['expand'] ) && false === $options['expand'] ) {
            unset( $options['expand'] );
        } else if ( empty( $options['expand'] ) ) {
            $options['expand'] = $this->getExpands();
        }

        return $this->ea->get( $this->table, $criteria, $options );
    }

    /**
     * @version 0.1.21
     */
    public function get_by_id( $id, $options = []  ) {
        return $this->get( compact( 'id' ), $options );
    }

    public function getPagedOrders( $total ) {
        $criteria = "limit:$total";
        $options['expand'] = $this->getExpands();
        return $this->ea->get( $this->table, $criteria, $options );
    }

    public function store( $order_data ) {
        if ( ! empty( $order_data['_line_items'] ) ) {
            $line_items_data = $order_data['_line_items'];
            unset( $order_data['_line_items'] );
        }

        $new_order = $this->ea->store( $this->table, $order_data );

        if ( ! empty( $line_items_data ) ) {
            $this->store_line_items( $new_order['id'], $line_items_data );
        }

        return $new_order;
    }

    public function store_line_items( $order_id, array $line_items_data ) {
        foreach ( $line_items_data as $item ) {
            $item_data = [
                'order_id' => $order_id,
                'product_variant_id' => $item['ordered_variant_id'],
                'description' => $item['ordered_variant_description'],
                'amount' => $item['ordered_amount'],
                'quantity' => $item['ordered_quantity'],
            ];

            $this->ea->store( 'line_items', $item_data );
        }
    }

    /**
     * @version 0.1.9
     */
    public function update_field( $order_id, array $field_data ) {
        $order_data = [ 'id' => $order_id ] + $field_data;
        return $this->store( $order_data );
    }

    /**
     * @param string      $order_id    Order ID
     * @param string|int  $new_status  ID or slug of new Order status
     *
     * @version 0.1.19
     */
    public function update_order_status( $order_id, $new_status ) {
        $new_status_id = intval( $new_status );
        if ( ! $new_status_id && is_string( $new_status ) ) {
            $new_status_id = $this->get_order_status_by_slug( $new_status )['id'] ?? null;
        }
        return $this->update_field( $order_id, [ 'order_status_id' => $new_status_id ] );
    }

    /**
     * @param string      $order_id    Order ID
     * @param string|int  $new_status  ID or slug of new Payment status
     *
     * @version 0.1.19
     */
    public function update_payment_status( $order_id, $new_status ) {
        $new_status_id = intval( $new_status );
        if ( ! $new_status_id && is_string( $new_status ) ) {
            $new_status_id = $this->get_payment_status_by_slug( $new_status )['id'] ?? null;
        }
        return $this->update_field( $order_id, [ 'payment_status_id' => $new_status_id ] );
    }

    public function update_paid_amount( $order_id, $new_paid_amount ) {
        return $this->update_field( $order_id, [ 'paid' => $new_paid_amount ] );
    }

    public function list_by_status( $status ) {
        $options['expand'] = $this->getExpands();
        return $this->ea->list( $this->table, "order_status.id:eq:$status", $options );
    }

    /**
     * @version 0.1.25
     */
    public function list_statuses( $criteria = true, $options = [] ) {
        return $this->ea->list( 'order_statuses', $criteria, $options );
    }

    /**
     * @version 0.1.25
     */
    public function get_order_status( $criteria, $options = [] ) {
        return $this->ea->get( 'order_statuses', $criteria, $options );
    }

    /**
     * @version 0.1.25
     */
    public function get_order_status_by_id( $order_status_id, $options = [] ) {
        return $this->get_order_status( $order_status_id, $options );
    }

    /**
     * @version 0.1.25
     */
    public function get_order_status_by_slug( $order_status_slug, $options = [] ) {
        return $this->get_order_status( "slug:eq:$order_status_slug", $options );
    }

    /**
     * @version 0.1.25
     */
    public function get_payment_status( $criteria, $options = [] ) {
        return $this->ea->get( 'payment_statuses', $criteria, $options );
    }

    /**
     * @version 0.1.25
     */
    public function get_payment_status_by_id( $order_status_id, $options = [] ) {
        return $this->get_payment_status( $order_status_id, $options );
    }

    /**
     * @version 0.1.25
     */
    public function get_payment_status_by_slug( $order_status_slug, $options = [] ) {
        return $this->get_payment_status( "slug:eq:$order_status_slug", $options );
    }

    public function count( $criteria = true ) {
        return $this->ea->count( $this->table, $criteria );
    }

    public function count_by_status( $status_slug ) {
        return $this->count( "order_status.slug:eq:$status_slug" );
    }

    /**
     * @version 0.1.24
     */
    public function get_adjacent_orders_id( string $order_number ): array {
        $column = 'order_number';
        $options = [
            'columns' => [
                'id',
                'order_number',
                'total',
                'created'
            ],
            'expand' => false,
            'order_by' => $column,
        ];
        $options_resort = array_merge( $options, [
            'order_by' => $options['order_by'] . ' DESC'
        ] );

        $next = $this->get( "$column:gt:$order_number", $options );
        $prev = $this->get( "$column:lt:$order_number", $options_resort );

        return [
            'prev_id' => $prev['id'] ?? null,
            'next_id' => $next['id'] ?? null,
        ];
    }

    /**
     * @since   0.1.3
     * @version 0.1.9
     */
    public function retrieve_customer( array $customer_data ) {
        $customer_model = new CustomerModel();

        $current_user_id = get_current_user_id();
        if ( $current_user_id ) {
            $customer_data['wp_user_id'] = $current_user_id;
        }

        if ( ! $customer_data['phone'] ) {
            $customer_data['phone'] = null;
            $customer_data['country_code'] = null;
        }

        $customer = $customer_model->get( [ 'email' => $customer_data['email'] ] );

        if ( ! $customer ) {
            if ( $customer_data['phone'] ) {
                $country_code = $customer_data['country_code']; // ex: `+123`
                $customer_data['country_code'] = get_int_phone()[ $country_code ]['dial_code'] ?? null;

                if ( $customer_data['country_code'] ) {
                    $customer_data['phone'] = str_replace( $customer_data['country_code'], '', $customer_data['phone'] );
                }
            }

            $customer = $customer_model->store( $customer_data );
        }

        return $customer;
    }

    public function retrieve_customer_payment_method_id( array $payment_method_data ) {
        $table = 'customer_payment_methods';
        $payment_method = $this->ea->get( $table, $payment_method_data );
        if ( ! $payment_method ) {
            $payment_method = $this->ea->store( $table, $payment_method_data );
        }

        return $payment_method['id'] ?? null;
    }

    public function update_customer_payment_method( $order_id, array $payment_method_data ) {
        if ( ! $payment_method_data ) {
            // Bailout.
            return;
        }

        $order = $this->get_by_id( $order_id );
        $payment_method_data['id'] = $order['customer_payment_method_id'];
        return $this->ea->store( 'customer_payment_methods', $payment_method_data );
    }

    public function retrieve_shipping_address_id( array $shipping_data ) {
        $table = 'addresses';
        $address = $this->ea->get( $table, $shipping_data );
        if ( ! $address ) {
            $address = $this->ea->store( $table, $shipping_data );
        }

        return $address['id'];
    }

    /**
     * @since   0.1.3
     * @version 0.1.12
     */
    public function retrieve_country_id( array $country_data ) {
        $country_model = new CountryModel();
        $country = $country_model->get( [
            'or',
            [ '=', 'name', $country_data['name'] ],
            [ '=', 'abbreviation', $country_data['abbreviation'] ],
        ] );

        return $country['id'] ?? 1;
    }

    /**
     * @version 0.1.19
     */
    public function get_payment_provider( $criteria, $options = [] ) {
        return $this->ea->get( 'payment_providers', $criteria, $options );
    }

    /**
     * @version 0.1.19
     */
    public function get_payment_provider_by_name( $pp_name, $options = [] ) {
        return $this->get_payment_provider( [ 'name' => $pp_name ], $options );
    }

    /**
     * @version 0.1.19
     */
    public function get_payment_provider_by_slug( $pp_slug, $options = [] ) {
        return $this->get_payment_provider( [ 'slug' => $pp_slug ], $options );
    }

    public function retrieve_shipping_detail_id( $shipping_detail_data ) {
        $table = 'shipping_details';
        $shipping_detail = $this->ea->get( $table, $shipping_detail_data );
        if ( ! $shipping_detail ) {
            $shipping_detail = $this->ea->store( $table, $shipping_detail_data );
        }

        return $shipping_detail['id'];
    }


    // Order changes

    public function get_order_change_type_by_slug( $oct_slug ) {
        return $this->ea->get( 'order_change_types', [ 'slug' => $oct_slug ] );
    }

    public function get_order_change( array $oc_data ) {
        $criteria = [
            'order_change_type_id' => $this->get_order_change_type_by_slug( $oc_data['change_type_slug'] )['id'],
            'description' => $oc_data['description'],
        ];

        return $this->ea->get( 'order_changes', $criteria );
    }

    public function update_order_change( $order_id, array $oc_data ) {
        $order_change_data = [
            'order_id' => $order_id,
            'order_change_type_id' => $this->ea->get( 'order_change_types', 'slug:eq:' . $oc_data['change_type_slug'] )['id'],
            'description' => $oc_data['description'],
        ];

        $stored_order_change = $this->ea->get( 'order_changes', $order_change_data );
        if ( $stored_order_change ) {
            $order_change_data['id'] = $stored_order_change['id'];
        }

        $order_change_data['value'] = $oc_data['value'];

        return $this->ea->store( 'order_changes', $order_change_data );
    }

	public static function getOrderLineItemValuesForHuman( $line_item = [] ) {
		$values_map = []; //like 'Size' => 'Large

		if (
            empty( $line_item['product_variant'] )
            || empty( $line_item['product_variant']['product_variant_option_values'] )
        ) {
			return [];
		}

		foreach ( $line_item['product_variant']['product_variant_option_values'] as $option_value ) {
			if (
                empty( $option_value['product_option_value'])
                || empty( $option_value['product_option_value']['product_option'] )
			) {
				continue;
			}

			$values_map[$option_value['product_option_value']['product_option']['name']]
				= $option_value['product_option_value']['display_value'];
		}

		return $values_map;
	}
}
