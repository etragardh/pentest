<?php
namespace NorthCommerce\Models;

use NorthCommerce\Db\PerspectiveManager;

defined('ABSPATH') || exit;

/**
 * Webhook model.
 *
 * @package north-commerce/includes/models
 * @link    https://northcommerce.com/
 * @since   0.1.10
 * @version 0.1.19
 */
class WebhookModel extends BaseModel {

    public function __construct() {
        parent::__construct();

        $this->table = 'webhooks';
        $this->subtables = [
            'triggers' => 'webhook_triggers',
            'events' => 'webhook_events'
        ];
    }

    /**
     * @return void
     */
    public function getExpands() {
        return [];
        return [
            $this->subtables['triggers'],
            $this->subtables['events']
        ];
    }

    /**
     * Register a webhook
     *
     * @param [type] $service
     * @param [type] $hook_url
     * @param [type] $hook_id
     * @param [type] $item
     * @param [type] $action
     * @param [type] $class
     * @param [type] $method
     * @return void
     */
    public function register( $service, $url, $uid ) {
        // Alternate version for managing this - 1. add webhook to webhooks table
        return $this->ea->create($this->table, [
            'service' => $service,
            'url' => $url,
            'uid' => $uid,
        ]);
    }

    /**
     * Unregister a webhook, given the UID used to register it
     *
     * @param [type] $uid
     * @return void
     */
    public function unregister( $id ) {

        // find webhook by uid
        $webhook = $this->get( $id );

        if ( ! $webhook ) {
            return;
        }

        // Also need to delete any webhook_triggers associated with this webhook
        $this->ea->delete($this->subtables['events'], [
            'webhook_id' => $webhook['id']
        ]);

        $this->ea->delete($this->table, [
            'id' => $id
        ]);

        return true;
    }


    /**
     * Undocumented function
     *
     * @param [type] $uid
     * @param [type] $type
     * @return void
     */
    public function setTrigger($webhook_id, $table, $action) {
        $trigger = new WebhookTrigger;
        $trigger->register( $webhook_id, $table, $action );
    }

    public function findByUid( $uid ) {
        return $this->ea->get( $this->table, [
            'uid' => $uid
        ] );
    }

    /**
     * Undocumented function
     *
     * @param [type] $action
     * @param [type] $table
     * @return void
     */
    public function findBy( $criteria = [] ) {

        foreach ( $criteria as $key => $value ) {
            if (!in_array($key, ['action', 'table'])) {
                unset($criteria[$key]);
            }
        }

        extract( $criteria );

        // Find the webhook trigger type by action (slug)
        $trigger_type = $this->ea->get('webhook_trigger_types', ['slug' => $action]);

        if ( ! $trigger_type ) {
            return false;
        }

        // Find all triggers matching the given action and table
        $triggers = $this->ea->list( $this->subtables['triggers'], [
            'table_name' => $table,
            'webhook_trigger_type_id' => $trigger_type['id']
        ] );

        // Need to add this to expands
        foreach ( $triggers as $i => $trigger ) {
            $triggers[ $i ]['webhook'] = $this->ea->get( 'webhooks', [ 'id' => $trigger['webhook_id'] ] );
            // lookup the trigger type by id
            $triggers[ $i ]['webhook_trigger_type'] = $this->ea->get( 'webhook_trigger_types', [ 'id' => $trigger['webhook_trigger_type_id'] ] );
        }

        return $triggers;
    }

    public function trigger( $webhook_id, $event, array $data ) {

        $webhook = $this->ea->get( $this->table, [ 'id' => $webhook_id ] );

        if ( ! $webhook ) {
            return false;
        }

        $payload = apply_filters( 'nc_webhook_payload', [
            'webhook_id' => $webhook_id,
            'event' => $event->key(),
            'timeout' => 5,
            'data' => $data
        ] );

        $response = wp_remote_post($webhook['url'], [
            'headers' => [
                'Content-Type' => 'application/json'
            ],
            'body' => json_encode($payload)
        ]);

        $pm = PerspectiveManager::instance();

        $order_data = $pm->asAdministrator(function () use ($webhook) {
            $this->ea->update( $this->table, $webhook, [
                'last_triggered' => gmdate('Y-m-d H:i:s')
            ] );
        });

        return $response;
    }

}
