<?php
namespace NorthCommerce\Traits;

/**
 * For queuing and scheduling, makes use of Aciton Scheduler by Automattic
 */
trait Queueable {

    public $last_action = null;
    public $last_method = null;
    public $last_action_id = null;


    public function isEnabled(): bool {
        return class_exists( 'ActionScheduler' );
    }

    /**
     * Schedule a single action
     *
     * @param  int     $timestamp UNIX timestamp determining the triggering of the event
     * @param  string  $hook
     * @param  array   $args
     * @return void
     */
    public function schedule_single_action( string $hook, array $args, int $timestamp = 0 ) {

        $this->last_action = $hook;
        $this->last_method = 'single';

        if ( ! $timestamp ) {
            $timestamp = time();
        }

        $action_id = as_schedule_single_action( $timestamp, $hook, $args );

        $this->last_action_id = $action_id;

        return $action_id;

    }

    /**
     * Schedule a recurring action
     *
     * @param [type] $hook
     * @param array $args
     * @param [type] $first_timestamp
     * @param [type] $interval_in_seconds
     * @return void
     */
    public function schedule_recurring_action(
        $hook,
        $interval_in_seconds,
        $first_timestamp = null,
        $args = []
    ) {

        $this->last_action = $hook;
        $this->last_method = 'recurring';

        if ( is_null( $first_timestamp ) ) {
            $first_timestamp = asap();
        }

        $action_id = as_schedule_recurring_action( $first_timestamp, $interval_in_seconds, $hook, $args );

        $this->last_action_id = $action_id;

        return $action_id;

    }

    /**
     * Undocumented function
     *
     * @return void
     */
    public function get_last_action_details() {
        // complete this
        // find action by $action_id and return details including related log table information. Return as array

        global $wpdb;

        if ( $this->last_action_id ) {
            $row = $wpdb->get_row(
                $wpdb->prepare(
                    "SELECT action_id, hook, scheduled_date_gmt, priority, args, extended_args
                        FROM {$wpdb->prefix}actionscheduler_actions
                        WHERE action_id = %d",
                    $this->last_action_id
                )
            );
            return $row;
        }

        return null;

    }

    public function get_scheduled_actions( $action, $args ) {
        return as_get_scheduled_actions( [
            'hook' => $action,
            'args' => $args
        ] );
    }

    /**
     * Unschedule an action
     *
     * @param [type] $hook
     * @param array $args
     * @return void
     */
    public function unschedule_action( $hook, $args = [] ) {
        return as_unschedule_action( $hook, $args );
    }

    /**
     * Get the next scheduled action
     *
     * @param [type] $hook
     * @param array $args
     * @return void
     */
    public function next_scheduled_action( $hook, $args = [] ) {
        return as_next_scheduled_action( $hook, $args );
    }

    /**
     * Dispatch an action immediately
     *
     * @param [type] $hook
     * @param array $args
     * @return void
     */
    public function dispatch_ammediately( $hook, $args = [] ) {
        do_action_ref_array( $hook, $args );
    }

}
