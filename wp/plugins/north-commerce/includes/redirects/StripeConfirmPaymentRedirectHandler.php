<?php
namespace NorthCommerce\Redirects;

use NorthCommerce\Db\Collections\OrderTransactionStatuses;
use NorthCommerce\Db\PerspectiveManager;
use NorthCommerce\Models\CouponModel;
use North_Commerce_Db_Agent;
use North_Commerce_Settings;
use Exception;

/**
 * Stripe payment redirect URLs handler
 *
 * @version 0.1.24
 */
class StripeConfirmPaymentRedirectHandler extends RedirectHandler {

	public function slug() {
		return 'stripe_confirm_payment';
	}

	public function handle( $params ) {
		$pm = PerspectiveManager::instance();
		return $pm->asPublic( function() use ( $params ) {
			return $this->doHandle( $params );
		} );
	}

	/**
	 * @version 0.1.24
	 */
	private function doHandle( $params ) {
		$payment_intent_id = nc_g( $params, 'payment_intent' );

		if ( ! $payment_intent_id ) {
			throw new Exception( 'No payment_intent provided to handler' );
		}

		$agent = North_Commerce_Db_Agent::instance();
		$ae = $agent->entityAccess();

		$ot = $ae->get(
			'order_transactions',
			[ 'identity_token' => $payment_intent_id ],
			[ 'not_found' => NC_DB_PANIC ]
		);

		$ot = $ae->update( 'order_transactions', $ot, [
			'order_transaction_status_id' => OrderTransactionStatuses::successful()->id
		] );

		$o = $ae->ref( $ot['order_id'] );

		$this->handle_coupon_usage( $o['id'] );

		if (
			isset( $_GET['redirect'] )
			&& 'order-single' === $_GET['redirect']
		) {
			return admin_url( 'admin.php?page=north-commerce-orders&id=' . $o['id'] );
		}

		return North_Commerce_Settings::nc_get_page_url( 'checkout_thank_you' ) . '?' . http_build_query( [
			'order' => $o['id']
		] );
	}

	public function onErrorUrl( Exception $e ) {
		return North_Commerce_Settings::nc_get_page_url( 'checkout' ) . '?' . http_build_query( [
			'error' => $e->getMessage()
		] );
	}

	protected function handle_coupon_usage( $order_id ) {
		$coupon_model = new CouponModel();

		$coupon_order_record = $coupon_model->list_coupon_order_map_by_order_id( $order_id )[0] ?? null;

		if ( ! $coupon_order_record ) {
			return;
		}

		$result = PerspectiveManager::instance()->asAdministrator(
			function() use ( $coupon_model, $coupon_order_record ) {
				return $coupon_model->increment_usage_counter( $coupon_order_record['coupon_id'] );
			}
		);

		return $result;
	}

}
