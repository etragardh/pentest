/**
 * Classic editor (toggle editor tabs: Visual, Text, Bricks)
 *
 * @since 1.0
 */
function bricksAdminClassicEditor() {
	var bricksEditor = document.getElementById('bricks-editor')
	var wpEditor = document.getElementById('postdivrich')

	if (!bricksEditor || !wpEditor) {
		return
	}

	// Create "Bricks" button & add to classic editor tabs (next to "Visual", and "Text")
	var bricksButton = document.createElement('button')
	bricksButton.type = 'button'
	bricksButton.id = 'switch-bricks'
	bricksButton.classList.add('wp-switch-editor', 'switch-bricks')
	bricksButton.innerText = window.bricksData.title

	var editorTabs = wpEditor.querySelector('.wp-editor-tabs')

	if (editorTabs) {
		editorTabs.appendChild(bricksButton)
	}

	// Add Bricks editor tab content to DOM
	bricksEditor.after(wpEditor)

	document.addEventListener('click', function (e) {
		// Bricks tab
		if (e.target.id === 'switch-bricks') {
			// Don't trigger WordPress button events
			e.preventDefault()
			e.stopPropagation()

			// Hide WordPress content visual and text editors
			wpEditor.style.display = 'none'
			bricksEditor.style.display = 'block'

			// Toggle editor mode input field value
			document.getElementById('bricks-editor-mode').value = 'bricks'
		}

		// WordPress tab (Visual, Text)
		else if (['content-html', 'content-tmce'].indexOf(e.target.id) !== -1) {
			wpEditor.style.display = 'block'
			bricksEditor.style.display = 'none'

			// Toggle editor mode input field value
			document.getElementById('bricks-editor-mode').value = 'wordpress'
		}
	})
}

/**
 * Admin import (Bricks settings, Bricks templates, etc.)
 *
 * @since 1.0
 */

function bricksAdminImport() {
	var importForm = document.getElementById('bricks-admin-import-form')

	if (!importForm) {
		return
	}

	var importButton = document.getElementById('bricks-admin-import-action')
	var importFormContent = document.getElementById('bricks-admin-import-form-wrapper')
	var addNewButton = document.querySelector('#wpbody-content .page-title-action')

	if (!addNewButton) {
		return
	}

	addNewButton.after(importButton)
	addNewButton.after(importFormContent)

	var toggleTemplateImporter = document.querySelectorAll('.bricks-admin-import-toggle')

	toggleTemplateImporter.forEach(function (toggle) {
		toggle.addEventListener('click', function () {
			importFormContent.style.display =
				importFormContent.style.display === 'block' ? 'none' : 'block'
		})
	})

	importForm.addEventListener('submit', function (event) {
		event.preventDefault()

		// Adds action, nonce and referrer from form hidden fields (@since 1.5.4)
		var formData = new FormData(importForm)
		var files = document.getElementById('bricks_import_files').files

		for (var i = 0; i < files.length; i++) {
			var file = files[i]
			formData.append('files[' + i + ']', file)
		}

		jQuery.ajax({
			type: 'POST',
			url: bricksData.ajaxUrl,
			data: formData,
			processData: false,
			contentType: false,
			success: function (res) {
				location.reload()
			}
		})
	})
}

/**
 * Save license key
 *
 * @since 1.0
 */

function bricksAdminSaveLicenseKey() {
	var licenseKeyForm = document.getElementById('bricks-license-key-form')

	if (!licenseKeyForm) {
		return
	}

	var action = licenseKeyForm.action.value
	var nonce = licenseKeyForm.nonce.value // @since 1.5.4
	var submitButton = licenseKeyForm.querySelector('input[type=submit]')

	licenseKeyForm.addEventListener('submit', function (e) {
		e.preventDefault()

		submitButton.disabled = true

		var licenseKey = licenseKeyForm.license_key.value

		jQuery.ajax({
			type: 'POST',
			url: bricksData.ajaxUrl,
			data: {
				action: action,
				licenseKey: licenseKey,
				nonce: nonce
			},
			success: function (response) {
				// console.info('success', action, response)

				if (action === 'bricks_deactivate_license') {
					location.reload()
				} else if (action === 'bricks_activate_license') {
					if (response.success) {
						if (response.data.hasOwnProperty('message')) {
							licenseKeyForm.querySelector('.success-message').innerHTML = response.data.message
						}

						setTimeout(() => {
							location.reload()
						}, 1000)
					} else {
						submitButton.disabled = false

						if (response.data.hasOwnProperty('message')) {
							licenseKeyForm.querySelector('.error-message').innerHTML = response.data.message
						}
					}
				}
			}
		})
	})
}

/**
 * Toggle license key (input type: plain text/password)
 *
 * @since 1.3.5
 */
function bricksAdminToggleLicenseKey() {
	var toggleLicenseKeyIcon = document.getElementById('bricks-toggle-license-key')

	if (!toggleLicenseKeyIcon) {
		return
	}

	toggleLicenseKeyIcon.addEventListener('click', function (e) {
		e.preventDefault()

		if (e.target.classList.contains('dashicons-hidden')) {
			e.target.classList.remove('dashicons-hidden')
			e.target.classList.add('dashicons-visibility')
			e.target.previousElementSibling.type = 'text'
		} else {
			e.target.classList.remove('dashicons-visibility')
			e.target.classList.add('dashicons-hidden')
			e.target.previousElementSibling.type = 'password'
		}
	})
}

function bricksAdminSettings() {
	var settingsForm = document.querySelector('#bricks-settings')

	if (!settingsForm) {
		return
	}

	// Toggle tabs
	var settingsTabs = document.querySelectorAll('#bricks-settings-tabs-wrapper a')
	var settingsFormTables = settingsForm.querySelectorAll('table')

	function showTab(tabId) {
		var tabTable = document.getElementById(tabId)

		for (var i = 0; i < settingsFormTables.length; i++) {
			var table = settingsFormTables[i]

			if (table.getAttribute('id') === tabId) {
				table.classList.add('active')
			} else {
				table.classList.remove('active')
			}
		}
	}

	// Switch tabs listener
	for (var i = 0; i < settingsTabs.length; i++) {
		settingsTabs[i].addEventListener('click', function (e) {
			e.preventDefault()

			var tabId = e.target.getAttribute('data-tab-id')

			if (!tabId) {
				return
			}

			location.hash = tabId
			window.scrollTo({ top: 0 })

			for (var i = 0; i < settingsTabs.length; i++) {
				settingsTabs[i].classList.remove('nav-tab-active')
			}

			e.target.classList.add('nav-tab-active')

			showTab(tabId)
		})
	}

	// Check URL for active tab on page load
	var activeTabId = location.hash.replace('#', '')

	if (activeTabId) {
		var activeTab = document.querySelector('[data-tab-id="' + activeTabId + '"]')

		if (activeTab) {
			activeTab.click()
		}
	}

	// Save/reset settings
	var submitWrapper = settingsForm.querySelector('.submit-wrapper')
	var spinner = settingsForm.querySelector('.spinner.saving')

	if (!settingsForm) {
		return
	}

	settingsForm.addEventListener('submit', function (e) {
		e.preventDefault()
	})

	// Save settings
	var saveSettingsButton = settingsForm.querySelector('input[name="save"]')

	if (saveSettingsButton) {
		saveSettingsButton.addEventListener('click', function (e) {
			if (submitWrapper) {
				submitWrapper.remove()
			}

			if (spinner) {
				spinner.classList.add('is-active')
			}

			jQuery.ajax({
				type: 'POST',
				url: bricksData.ajaxUrl,
				data: {
					action: 'bricks_save_settings',
					formData: jQuery(settingsForm).serialize(),
					nonce: window.bricksData.nonce
				},
				success: function (res) {
					// Show save message
					let hash = window.location.hash

					window.location.href = window.location.search += `&bricks_notice=settings_saved${hash}`
				}
			})
		})
	}

	// Reset settings
	var resetSettingsButton = settingsForm.querySelector('input[name="reset"]')

	if (resetSettingsButton) {
		resetSettingsButton.addEventListener('click', function (e) {
			var confirmed = confirm(bricksData.cofirmResetSettings)

			if (!confirmed) {
				return
			}

			if (submitWrapper) {
				submitWrapper.remove()
			}

			if (spinner) {
				spinner.classList.add('is-active')
			}

			jQuery.ajax({
				type: 'POST',
				url: bricksData.ajaxUrl,
				data: {
					action: 'bricks_reset_settings',
					nonce: window.bricksData.nonce
				},
				success: function () {
					// Show reset message
					window.location.href = window.location.search += '&bricks_notice=settings_resetted'
				}
			})
		})
	}

	// Enable/disable code execution checkboxes
	var disableExecuteCodeCheckbox = settingsForm.querySelector('input[name="executeCodeDisabled"]')
	if (disableExecuteCodeCheckbox) {
		disableExecuteCodeCheckbox.addEventListener('click', function (e) {
			var executeCodeCapabilities = settingsForm.querySelectorAll(
				'input[name^="executeCodeCapabilities"'
			)

			executeCodeCapabilities.forEach(function (checkboxInput) {
				checkboxInput.disabled = e.target.checked
			})
		})
	}
}

/**
 * Generate CSS files
 *
 * By first getting list of all CSS files that need to be generated.
 * Then generated them one-by-one via individual AJAX calls to avoid any server timeouts.
 */
function bricksAdminGenerateCssFiles() {
	button = document.querySelector('#bricks-css-loading-generate button')

	if (!button) {
		return
	}

	button.addEventListener('click', function (e) {
		e.preventDefault()

		button.setAttribute('disabled', 'disabled')
		button.classList.add('wait')

		var resultsEl = document.querySelector('#bricks-css-loading-generate .results')

		if (resultsEl) {
			resultsEl.classList.remove('hide')

			var results = resultsEl.querySelector('ul')
			var counter = resultsEl.querySelector('.count')
			var done = resultsEl.querySelector('.done')

			results.innerHTML = ''
			counter.innerHTML = 0

			if (done) {
				done.remove()
			}

			var theEnd = resultsEl.querySelector('.end')

			if (theEnd) {
				theEnd.remove()
			}
		}

		jQuery.ajax({
			type: 'POST',
			url: bricksData.ajaxUrl,
			data: {
				action: 'bricks_get_css_files_list'
			},
			success: function (res) {
				// Start generating CSS files (index = 0)
				bricksAdminGenerateCssFile(0, results, counter, res.data)
			}
		})
	})
}

/**
 * Regenerate Bricks CSS files for modified default breakpoint width
 *
 * @since 1.5.1
 */
function bricksAdminBreakpointsRegenerateCssFiles() {
	let button = document.getElementById('breakpoints-regenerate-css-files')

	if (!button) {
		return
	}

	let checkIcon = button.querySelector('i')

	button.addEventListener('click', function (e) {
		e.preventDefault()

		jQuery.ajax({
			type: 'POST',
			url: bricksData.ajaxUrl,
			data: {
				action: 'bricks_regenerate_bricks_css_files'
			},
			beforeSend: () => {
				button.setAttribute('disabled', 'disabled')
				button.classList.add('wait')
				checkIcon.classList.add('hide')
			},
			success: function (res) {
				button.removeAttribute('disabled')
				button.classList.remove('wait')
				checkIcon.classList.remove('hide')

				console.warn('bricks_regenerate_bricks_css_files', res.data)
			}
		})
	})
}

function bricksAdminGenerateCssFile(index, results, counter, data) {
	return jQuery
		.ajax({
			type: 'POST',
			url: bricksData.ajaxUrl,
			data: {
				action: 'bricks_regenerate_css_file',
				data: data[index],
				index: index
			},
			success: function (res) {
				var fileName = res.data.hasOwnProperty('file_name') ? res.data.file_name : false

				if (fileName) {
					var html = ''
					var count = counter ? parseInt(counter.innerText) : 0

					if (Array.isArray(fileName)) {
						fileName.forEach(function (fileName) {
							html += '<li>' + fileName + '</li>'
							count++
						})
					} else {
						html += '<li>' + fileName + '</li>'
						count++
					}

					if (!res.success) {
						html = html.replace('<li>', '<li class="error">')
					}

					if (results) {
						results.insertAdjacentHTML('afterbegin', html)
					}

					if (counter) {
						counter.innerText = count
					}
				}
			}
		})
		.then(function (res) {
			// Finished processing all entries
			if (index === data.length) {
				var button = document.querySelector('#bricks-css-loading-generate button')

				button.removeAttribute('disabled')
				button.classList.remove('wait')

				var infoText = document.querySelector('#bricks-css-loading-generate .info')

				if (infoText) {
					infoText.remove()
				}

				if (results) {
					results.insertAdjacentHTML('beforebegin', '<div class="done">... THE END :)</div>')
				}
			}

			// Continue with next entry
			else {
				bricksAdminGenerateCssFile(index + 1, results, counter, data)
			}
		})
}

/**
 * Run Converter
 *
 * @since 1.4:   Convert 'bricks-element-' ID & class name prefix to 'brxe-'
 * @since 1.5: Convert elements to nestable elements
 */
function bricksAdminRunConverter() {
	var button = document.getElementById('bricks-run-converter')

	if (!button) {
		return
	}

	button.addEventListener('click', function (e) {
		e.preventDefault()

		let data = {
			action: 'bricks_get_converter_items',
			convert: []
		}

		if (document.getElementById('convert_element_ids_classes').checked) {
			data.convert.push('elementClasses')
		}

		if (document.getElementById('convert_container').checked) {
			data.convert.push('container')
		}

		// @since 1.5.1 to add position: relative as needed
		if (document.getElementById('add_position_relative').checked) {
			data.convert.push('addPositionRelative')
		}

		// @since 1.6 to convert entry animation ('_animation') to interactions
		if (document.getElementById('entry_animation_to_interaction').checked) {
			data.convert.push('entryAnimationToInteraction')
		}

		// DEV_ONLY: Don't provide converter for nestable elements yet! @1.5
		// if (document.getElementById('convert_to_nestable_elements').checked) {
		// 	data.convert.push('nestableElements')
		// }

		if (!data.convert.length) {
			return
		}

		jQuery.ajax({
			type: 'POST',
			url: bricksData.ajaxUrl,
			data,
			beforeSend: () => {
				button.setAttribute('disabled', 'disabled')
				button.classList.add('wait')
			},
			success: (res) => {
				console.info('bricks_get_converter_items', res.data)

				// Start running converter (index = 0)
				let index = 0
				let data = res.data.items
				let convert = res.data.convert

				bricksAdminConvert(index, data, convert)
			}
		})
	})
}

function bricksAdminConvert(index, data, convert) {
	return jQuery.ajax({
		type: 'POST',
		url: bricksData.ajaxUrl,
		data: {
			action: 'bricks_run_converter',
			data: data[index],
			convert: convert
		},
		success: function (res) {
			var button = document.getElementById('bricks-run-converter')
			var resultsEl = button.parentNode.querySelector('.results')

			// Add results HTML (div.results > ul)
			if (!resultsEl) {
				resultsEl = document.createElement('div')
				resultsEl.classList.add('results')

				var resultsList = document.createElement('ul')
				resultsEl.appendChild(resultsList)

				button.parentNode.appendChild(resultsEl)
			}

			// Re-run converter: Clear results
			else if (resultsEl && index === 0) {
				resultsEl.querySelector('ul').innerHTML = ''
			}

			var label = res.data.hasOwnProperty('label') ? res.data.label : false

			// Add converted item as list item (<li>)
			if (label) {
				var resultItem = document.createElement('li')
				resultItem.innerHTML = label

				resultsEl.querySelector('ul').prepend(resultItem)
			}

			console.warn('run_converter', index, label, res.data)

			// Finished processing all entries
			if (index === data.length) {
				button.removeAttribute('disabled')
				button.classList.remove('wait')

				var resultItem = document.createElement('li')
				resultItem.classList.add('done')
				resultItem.innerText = '... THE END :)'

				resultsEl.querySelector('ul').prepend(resultItem)
			}

			// Continue with next entry
			else {
				bricksAdminConvert(index + 1, data, convert)
			}
		}
	})
}

/**
 * Copy template shortcode to clipboard
 */
function bricksTemplateShortcodeCopyToClipboard() {
	var copyToClipboardElements = document.querySelectorAll('.bricks-copy-to-clipboard')

	if (!copyToClipboardElements) {
		return
	}

	copyToClipboardElements.forEach(function (element) {
		element.addEventListener('click', function (e) {
			if (navigator.clipboard) {
				if (!window.isSecureContext) {
					alert('Clipboard API rejected: Not in secure context (HTTPS)')
					return
				}

				// Return: Don't copy if already copied (prevents double-click issue)
				if (element.classList.contains('copied')) {
					e.preventDefault()
					return
				}

				var content = element.value
				var message = element.getAttribute('data-success')

				navigator.clipboard.writeText(content)

				element.value = message
				element.classList.add('copied')

				setTimeout(function () {
					element.value = content
					element.classList.remove('copied')
				}, 2000)
			}
		})
	})
}

/**
 * Dismiss HTTPS notice
 *
 * Timeout required to ensure the node is added to the DOM.
 *
 * @since 1.8.4
 */
function bricksDismissHttpsNotice() {
	setTimeout(() => {
		let dismissButton = document.querySelector('.brxe-https-notice .notice-dismiss')

		if (dismissButton) {
			dismissButton.addEventListener('click', function () {
				jQuery.ajax({
					type: 'POST',
					url: bricksData.ajaxUrl,
					data: {
						action: 'bricks_dismiss_https_notice',
						nonce: bricksData.nonce
					}
				})
			})
		}
	}, 400)
}

/**
 * Delete form submissions table
 *
 * @since 1.9.2
 */
function bricksDropFormSubmissionsTable() {
	let button = document.getElementById('bricks-drop-form-db')

	if (!button) {
		return
	}

	button.addEventListener('click', function (e) {
		e.preventDefault()

		var confirmed = confirm(bricksData.confirmDropFormSubmissionsTable)

		if (!confirmed) {
			return
		}

		jQuery.ajax({
			type: 'POST',
			url: bricksData.ajaxUrl,
			data: {
				action: 'bricks_form_submissions_drop_table',
				nonce: bricksData.nonce
			},
			beforeSend: () => {
				button.setAttribute('disabled', 'disabled')
				button.classList.add('wait')
			},
			success: function (res) {
				button.removeAttribute('disabled')
				button.classList.remove('wait')

				alert(res.data.message)
				location.reload()
			}
		})
	})
}

/**
 * Reset form submissions entries
 *
 * @since 1.9.2
 */
function bricksResetFormSubmissionsTable() {
	let button = document.getElementById('bricks-reset-form-db')

	if (!button) {
		return
	}

	button.addEventListener('click', function (e) {
		e.preventDefault()

		var confirmed = confirm(bricksData.confirmResetFormSubmissionsTable)

		if (!confirmed) {
			return
		}

		jQuery.ajax({
			type: 'POST',
			url: bricksData.ajaxUrl,
			data: {
				action: 'bricks_form_submissions_reset_table',
				nonce: bricksData.nonce
			},
			beforeSend: () => {
				button.setAttribute('disabled', 'disabled')
				button.classList.add('wait')
			},
			success: function (res) {
				button.removeAttribute('disabled')
				button.classList.remove('wait')

				alert(res.data.message)
				location.reload()
			}
		})
	})
}

/**
 * Delete all submissions of spefic form (ID)
 *
 * @since 1.9.2
 */
function bricksDeleteFormSubmissionsByFormId() {
	// Return: Not on "Form submissions" page
	if (!document.body.classList.contains('bricks_page_bricks-form-submissions')) {
		return
	}

	let deleteButtons = document.querySelectorAll('.column-actions [data-form-id]')

	for (var i = 0; i < deleteButtons.length; i++) {
		let button = deleteButtons[i]
		button.addEventListener('click', function (e) {
			e.preventDefault()

			let formId = button.getAttribute('data-form-id')

			var confirmed = confirm(
				bricksData.confirmResetFormSubmissionsFormId.replace('[form_id]', `"${formId}"`)
			)

			if (!confirmed) {
				return
			}

			jQuery.ajax({
				type: 'POST',
				url: bricksData.ajaxUrl,
				data: {
					action: 'bricks_form_submissions_delete_form_id',
					nonce: bricksData.nonce,
					formId: formId
				},
				beforeSend: () => {
					button.setAttribute('disabled', 'disabled')
					button.classList.add('wait')
				},
				success: function (res) {
					button.removeAttribute('disabled')
					button.classList.remove('wait')

					alert(res.data.message)
					location.reload()
				}
			})
		})
	}
}

/**
 * Dismiss Instagram access token admin notice
 *
 * Timeout required to ensure the node is added to the DOM.
 *
 * @since 1.9.1
 */
function bricksDismissInstagramAccessTokenNotice() {
	setTimeout(() => {
		let dismissButton = document.querySelector('.brxe-instagram-token-notice .notice-dismiss')

		if (dismissButton) {
			dismissButton.addEventListener('click', function () {
				jQuery.ajax({
					type: 'POST',
					url: bricksData.ajaxUrl,
					data: {
						action: 'bricks_dismiss_instagram_access_token_notice',
						nonce: bricksData.nonce
					}
				})
			})
		}
	}, 400)
}

/**
 * Remote templates URLs: Add button logic
 *
 * @since 1.9.4
 */
function bricksRemoteTemplateUrls() {
	let addMoreButton = document.getElementById('add-remote-template-button')

	if (!addMoreButton) {
		return
	}

	addMoreButton.addEventListener('click', function (e) {
		e.preventDefault()

		// Get last remote template wrapper
		let remoteTemplateWrapper = document.querySelector('.remote-template-wrapper:last-of-type')

		if (remoteTemplateWrapper) {
			let clone = remoteTemplateWrapper.cloneNode(true)
			let labels = clone.querySelectorAll('label')
			labels.forEach((label) => {
				// Replace 'remoteTemplates[index]' 'for' attribute with new index
				label.setAttribute(
					'for',
					label.getAttribute('for').replace(/\[(\d+)\]/, function (match, index) {
						return '[' + (parseInt(index) + 1) + ']'
					})
				)
			})

			let inputs = clone.querySelectorAll('input')

			inputs.forEach((input) => {
				// Clear URL input value
				input.value = ''

				// Replace 'remoteTemplates[index]' 'name' attribute with new index
				input.name = input.name.replace(/\[(\d+)\]/, function (match, index) {
					return '[' + (parseInt(index) + 1) + ']'
				})

				// Replace 'remoteTemplates[index]' 'id' attribute with new index
				input.id = input.id.replace(/\[(\d+)\]/, function (match, index) {
					return '[' + (parseInt(index) + 1) + ']'
				})
			})

			// Insert clone after last remote template wrapper
			remoteTemplateWrapper.after(clone)
		}
	})
}

/**
 * Reindex filters
 *
 * @since 1.9.6
 */
function bricksReindexFilters() {
	let button = document.getElementById('bricks-reindex-filters')

	if (!button) {
		return
	}

	button.addEventListener('click', function (e) {
		e.preventDefault()

		var confirmed = confirm(bricksData.confirmReindexFilters)

		if (!confirmed) {
			return
		}

		jQuery.ajax({
			type: 'POST',
			url: bricksData.ajaxUrl,
			data: {
				action: 'bricks_reindex_filters',
				nonce: bricksData.nonce
			},
			beforeSend: () => {
				button.setAttribute('disabled', 'disabled')
				button.classList.add('wait')
			},
			success: function (res) {
				button.removeAttribute('disabled')
				button.classList.remove('wait')

				alert(res.data.message)
				location.reload()
			}
		})
	})
}

document.addEventListener('DOMContentLoaded', function (e) {
	bricksAdminClassicEditor()
	bricksAdminImport()
	bricksAdminSaveLicenseKey()
	bricksAdminToggleLicenseKey()
	bricksAdminSettings()
	bricksAdminRunConverter()
	bricksAdminBreakpointsRegenerateCssFiles()
	bricksAdminGenerateCssFiles()

	bricksTemplateShortcodeCopyToClipboard()

	bricksDismissHttpsNotice()
	bricksDismissInstagramAccessTokenNotice()

	bricksDropFormSubmissionsTable()
	bricksResetFormSubmissionsTable()
	bricksDeleteFormSubmissionsByFormId()

	bricksRemoteTemplateUrls()

	bricksReindexFilters()

	// Move table navigation top & bottom outside of table container to make table horizontal scrollable
	let tableContainer = document.querySelector('.wp-list-table-container')
	let tablenavTop = document.querySelector('.tablenav.top')
	let tablenavBottom = document.querySelector('.tablenav.bottom')

	if (tableContainer && tablenavTop) {
		// Insert tablenav top before table
		tableContainer.parentNode.insertBefore(tablenavTop, tableContainer)
	}

	if (tableContainer && tablenavBottom) {
		// Insert tablenav top before table
		tableContainer.parentNode.insertBefore(tablenavBottom, tableContainer.nextSibling)
	}

	// Set search_box placeholder
	let formSubmissionsForm = document.getElementById('bricks-form-submissions')
	let searchBox = formSubmissionsForm
		? formSubmissionsForm.querySelector('.search-box input[type=search]')
		: false
	if (searchBox) {
		searchBox.placeholder = window.bricksData?.formSubmissionsSearchPlaceholder
	}
})
