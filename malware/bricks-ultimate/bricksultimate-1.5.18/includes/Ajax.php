<?php
namespace BricksUltimate;

if ( ! defined( 'ABSPATH' ) ) exit;

class Ajax {
	/**
     * Main class constructor
     *
     */
    public function __construct() {
    	if( class_exists('WooCommerce') ) 
    	{
			add_action( 'wp_ajax_bu_minicart_fragments', [ $this, 'buwoo_minicart_fragments' ] );
			add_action( 'wp_ajax_nopriv_bu_minicart_fragments', [ $this, 'buwoo_minicart_fragments' ] );
			add_action( 'wp_ajax_buwoo_update_cart_item_quantity', [ $this, 'buwoo_update_cart_item_quantity' ] );
			add_action( 'wp_ajax_nopriv_buwoo_update_cart_item_quantity', [ $this, 'buwoo_update_cart_item_quantity' ] );
			add_action( 'wp_ajax_bu_ajax_add_to_cart', [ '\Bricks\Woocommerce', 'add_to_cart' ] );
			add_action( 'wp_ajax_nopriv_bu_ajax_add_to_cart', [ '\Bricks\Woocommerce', 'add_to_cart' ] );
			add_action( 'wp_ajax_bu_applied_coupon', [ $this, 'get_applied_coupons' ] );
			add_action( 'wp_ajax_nopriv_bu_applied_coupon', [ $this, 'get_applied_coupons' ] );
			add_action( 'wp_ajax_bu_added_to_cart_notice', [ $this, 'bu_added_to_cart_notice' ] );
			add_action( 'wp_ajax_nopriv_bu_added_to_cart_notice', [ $this, 'bu_added_to_cart_notice' ] );
			add_action( 'wp_ajax_bu_load_variation_form', [ $this, 'bu_load_variation_form' ] );
			add_action( 'wp_ajax_nopriv_bu_load_variation_form', [ $this, 'bu_load_variation_form' ] );
		}

		add_action( 'wp_ajax_bu_ajax_search', [ $this, 'bu_get_search_result' ] );
		add_action( 'wp_ajax_nopriv_bu_ajax_search', [ $this, 'bu_get_search_result' ] );
    }

    public function bu_load_variation_form() {
    	check_ajax_referer( 'atc-nonce', 'security' );

		$product_id = $_POST['id'] ?? false;

		if( ! $product_id ) {
			return;
		}

		global $post;

		$args = array( 'post__in' => array($product_id), 'post_type' => 'product' );
		$variableProduct = get_posts( $args );

		foreach( $variableProduct as $post ) :
			setup_postdata($post);
			woocommerce_template_single_add_to_cart();
		endforeach; 
		wp_reset_postdata(); 
		die();
    }

    public function buwoo_minicart_fragments() {
		check_ajax_referer( 'atc-nonce', 'security' );

		$element_id = $_POST['element_id'];
		$post_id = isset( $_POST['post_id'] ) ? $_POST['post_id'] : 1;
		$output = false;
		$preview_id = \Bricks\Database::$page_data['preview_or_post_id'];
		\Bricks\Database::$page_data['preview_or_post_id'] = $post_id;
		
		$settings = \Bricks\Helpers::get_element_data( $post_id, $element_id );
		// Prepare flat list of elements for recursive calls
		foreach ( $settings['elements'] as $element ) {
			\Bricks\Frontend::$elements[ $element['id'] ] = $element;
		}

		if( class_exists( '\BricksUltimate\Elements\WooMiniCart' ) ) {
			add_filter( 'woocommerce_is_attribute_in_product_name', '__return_false' );
			add_filter( 'bricks/element/render_attributes', [ '\BricksUltimate\Helpers', 'bu_add_attributes' ], 1000, 3 );
			$element_instance = new \BricksUltimate\Elements\WooMiniCart( $settings['element'] );
			$output = \Bricks\Frontend::render_children( $element_instance );
		}

		if( $output ) {
			wc_clear_notices();
			remove_filter( 'bricks/element/render_attributes', [ '\BricksUltimate\Helpers', 'bu_add_attributes' ], 1000, 3 );
			wp_send_json( $output );
		} else {
			wp_send_json([ 'error' => true ]);
		}

		\Bricks\Database::$page_data['preview_or_post_id'] = $preview_id;

		wp_die();
	}

	public function buwoo_update_cart_item_quantity() {
		check_ajax_referer( 'atc-nonce', 'security' ); 

		$cart_key 	= sanitize_text_field( $_POST['cart_key'] );
		$new_qty 	= wc_stock_amount(absint( $_POST['qty'] ));
		$cart_item_data = WC()->cart->get_cart_item( $cart_key );
		$product_id = apply_filters('woocommerce_add_to_cart_product_id', absint($_POST['product_id']));
		//$passed_validation = apply_filters('woocommerce_add_to_cart_validation', true, $product_id, $new_qty);

		$passed_validation = apply_filters( 'woocommerce_update_cart_validation', true, $cart_key, $cart_item_data, $new_qty );

		if( $passed_validation && $cart_key && ! empty( $cart_item_data ) ) {
			$updated = $new_qty == 0 ? WC()->cart->remove_cart_item( $cart_key ) : WC()->cart->set_quantity( $cart_key, $new_qty );
			if( $updated ){
				
				wc_clear_notices();

				\WC_AJAX::get_refreshed_fragments();
			}
		} else {
			$data = array(
				'error' => __( 'Failed. Something went wrong', 'bricksultimate' ),
			);
			
			wp_send_json($data);
		}
	}

	public function get_applied_coupons() {
		check_ajax_referer( 'bu-applied-coupons', 'security' );

		\BricksUltimate\WooCommerce::appliedCoupons();

		wp_die();
	}

	public function bu_added_to_cart_notice() {
		check_ajax_referer( 'atc-nonce', 'security' );

		$data = ['success' => false];

		$postId = $_POST['product_id'];
		$template_id = $_POST['template_id'];

		if( $postId && $template_id ) {

			global $postData;
			$postData['id'] = $postId;
			$postData['filterType'] = 'notice';

			// Store current main render_data self::$elements
			$store_elements = \Bricks\Frontend::$elements;

			$data = ['success' => true];
			add_filter( 'bricks/posts/query_vars', [ __CLASS__, 'filter_query_args' ], 10, 3 );

			$elements = get_post_meta( $template_id, BRICKS_DB_PAGE_CONTENT, true );
			$template_inline_css = \Bricks\Templates::generate_inline_css( $template_id, $elements );

			$css = "<style id=\"bricks-inline-css-template-{$template_id}\">{$template_inline_css}</style>";

			$data['notice'] = do_shortcode('[bricks_template id="'. $template_id .'"]') . $css ;
			remove_filter( 'bricks/posts/query_vars', [ __CLASS__, 'filter_query_args' ], 10, 3 );

			// Reset the main render_data self::$elements
			\Bricks\Frontend::$elements = $store_elements;
			
			wc_clear_notices();
		}

		wp_send_json( $data );

		wp_die();
	}

	/**
	 * Get AJAX search results
	 * 
	 * @return array json data
	 */
	public function bu_get_search_result() {
		check_ajax_referer( 'atc-nonce', 'security' );
		
		global $postData;

		$postData = [];
		$postData = $_REQUEST;

		$post_templates = $_REQUEST['posts'] ?? false;
		$term_templates = $_REQUEST['terms'] ?? false;
		$suggestions = [];

		if( $post_templates || $term_templates ) {
			$postData['filterType'] = 'asearch';

			// Store current main render_data self::$elements
			$store_elements = \Bricks\Frontend::$elements;

			if( $post_templates ) {
				$arr = explode('|', $post_templates );
				foreach( $arr as $arr_data ) {
					$postData['postType'] = explode('_', $arr_data )[0];
					$template_id = explode('_', $arr_data )[1];

					if( $template_id == 'none' )
						continue;
					
					add_filter( 'bricks/posts/query_vars', [ __CLASS__, 'filter_query_args' ], 10, 3 );

					$elements = get_post_meta( $template_id, BRICKS_DB_PAGE_CONTENT, true );
					$template_inline_css = \Bricks\Templates::generate_inline_css( $template_id, $elements );

					$css .= "<style id=\"bricks-inline-css-template-{$template_id}\">{$template_inline_css}</style>";

					$loop_id = \Bricks\Query::is_any_looping();

					$suggestions[] = [ 
						'query' => $_REQUEST['query'],
						'value' => html_entity_decode( do_shortcode("[bricks_template id=\"$template_id\" loopid=\"$loop_id\"]") . $css ),
					];
				
					remove_filter( 'bricks/posts/query_vars', [ __CLASS__, 'filter_query_args' ], 10, 3 );
				}
			}

			if( $term_templates ) {
				$template_ids = explode('|', $term_templates );
				foreach( $template_ids as $template_id ) {
					
					if( $template_id == 'none' )
						continue;

					add_filter( 'bricks/terms/query_vars', [ __CLASS__, 'filter_terms_query_args' ], 10, 3 );

					$elements = get_post_meta( $template_id, BRICKS_DB_PAGE_CONTENT, true );
					$template_inline_css = \Bricks\Templates::generate_inline_css( $template_id, $elements );

					$css .= "<style id=\"bricks-inline-css-template-{$template_id}\">{$template_inline_css}</style>";

					$loop_id = \Bricks\Query::is_any_looping();

					$suggestions[] = [ 
						'query' => $_REQUEST['query'],
						'value' => html_entity_decode( do_shortcode("[bricks_template id=\"$template_id\" loopid=\"$loop_id\"]") . $css ),
					];
				
					remove_filter( 'bricks/terms/query_vars', [ __CLASS__, 'filter_terms_query_args' ], 10, 3 );
				}
			}

			// Reset the main render_data self::$elements
			\Bricks\Frontend::$elements = $store_elements;
		}

		echo wp_send_json( array(
			'suggestions' => $suggestions,
		));

		die();
	}

	/**
	 * Filter the default query args
	 * 
	 * @param $query_vars array query args
	 * @param $settings array element settings
	 * @param $element_id string element ID
	 * 
	 * @return array query args
	 */
	public static function filter_query_args( $query_vars, $settings, $element_id ) {
		global $postData, $wpdb;

		if( $postData ) {
			if( $postData['filterType'] == 'asearch' ) {
				if ( ! empty( $postData['postType'] ) && $postData['postType'] == 'product' 
					&& class_exists('WooCommerce') 
				) {
					$product_visibility_term_ids = \wc_get_product_visibility_term_ids();
					$query_vars['tax_query']['relation'] = 'AND';

					$query_vars['tax_query'][] = array(
						'taxonomy' => 'product_visibility',
						'field'    => 'term_taxonomy_id',
						'terms'    => $product_visibility_term_ids['exclude-from-search'],
						'operator' => 'NOT IN',
					);
					
					if ( ! empty( $postData['taxonomy'] ) && ! empty( $postData['term'] ) ) {
						$query_vars['tax_query'][] = array(
							'taxonomy' => $postData['taxonomy'],
							'field'    => 'slug',
							'terms'    => strip_tags( trim( $postData['term'] ) ),
						);
					}

					/*$query_vars['meta_query'][] = array( 'key' => '_stock_status', 'value' => 'outofstock', 'compare' => 'NOT IN' );*/

					$product_ids = array();
					$sku = wc_clean( $postData['query']);

					$sku_to_parent_id = $wpdb->get_col( $wpdb->prepare( "SELECT p.post_parent as post_id FROM {$wpdb->posts} as p join {$wpdb->wc_product_meta_lookup} wpml on p.ID = wpml.product_id and wpml.sku LIKE '%%%s%%' where p.post_parent <> 0 group by p.post_parent", $sku ) );

					$sku_to_id = $wpdb->get_results( "SELECT product_id FROM {$wpdb->wc_product_meta_lookup} WHERE sku LIKE '%{$sku}%';", ARRAY_N );

					$sku_to_id_results = array();
					if ( is_array( $sku_to_id ) ) {
						foreach ( $sku_to_id as $id ) {
							$sku_to_id_results[] = $id[0];
						}
					}

					$product_ids = array_filter( 
						array_map( 
							'absint', 
							array_merge( $product_ids, $sku_to_id_results, $sku_to_parent_id ) 
						) 
					);

					if ( sizeof( $product_ids ) > 0 ) {
						$query_vars['post__in'] = $product_ids;
					} else {
						$query_vars['s'] = $postData['query'];
					}
				} else {
					$query_vars['s'] = $postData['query'];
				}
			}

			if( $postData['filterType'] == 'notice' ) {
				$query_vars['p'] = $postData['id'];
				$query_vars['post_type'][] = 'product_variation';
			}
		}

		return $query_vars;
	}

	public static function filter_terms_query_args( $query_vars, $settings, $element_id ) {
		global $postData;
		
		if( $postData ) { 
			$query_vars['name__like'] = $postData['query'];
		}

		return $query_vars;
	}
}