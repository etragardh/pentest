<?php
namespace BricksUltimate;

if ( ! defined( 'ABSPATH' ) ) exit;

use BricksUltimate\{Plugin, WooMetaBoxOrderCustomFields};

class WooCommerce {
	public static $free_shipping_class = false;

	public function __construct() {
		add_action('wp_loaded', function(){
			self::$free_shipping_class = $this->getFreeShippingClass();

			if( ! empty( Plugin::$bu_settings['couponform'] ) && Plugin::$bu_settings['couponform'] == 'enabled' ) {
				remove_action( 'woocommerce_before_checkout_form', 'woocommerce_checkout_coupon_form', 10 );
			}

			if( ! empty( Plugin::$bu_settings['wc_payment'] ) && Plugin::$bu_settings['wc_payment'] == 'enabled' ) {
				add_filter( 'woocommerce_subscription_needs_payment', function( $needs_payment, $subscription ){
					return false;
				}, 10, 2 );

				add_filter( 'woocommerce_cart_needs_payment', function( $needs_payment, $cart ){
					return false;
				}, 10, 2 );
			}
		});

		add_action( 'wp_loaded', [ $this, 'buwoo_cart_action' ], 20 );
		add_action( 'woocommerce_add_to_cart', [$this, 'addToCart'] );
		add_action( 'save_post', [$this, 'bu_clear_swatches_cache'] );
		add_action( 'woocommerce_after_product_object_save', [$this, 'bu_clear_swatches_cache_on_product'] );

		add_filter( 'woocommerce_add_to_cart_fragments', array( __CLASS__, 'buwoo_cart_fragment' ) );
		
		if( ! empty( Plugin::$bu_settings['swatches'] ) && Plugin::$bu_settings['swatches'] == 'enabled' ) {
			add_filter( 'woocommerce_locate_template', [ __CLASS__, 'buwoo_woocommerce_locate_template' ], 999, 3 );
		}

		if( ! is_admin() && ! bricks_is_builder() ) {
			add_filter( 'woocommerce_checkout_fields', [ $this, 'bu_woocommerce_checkout_fields' ] );
		}

		add_filter( 'body_class', [ $this, 'set_body_class' ], 10, 1 );

		add_filter( 'woocommerce_default_address_fields', [ $this, 'bu_woocommerce_default_address_fields' ]);

		//* Add custom order meta data box
		add_action( 'add_meta_boxes', [$this, 'bu_add_custom_order_meta_box'], 10, 2 );

		add_filter( 'manage_shop_order_posts_columns', array( $this, 'bu_filter_shop_order_posts_columns' ), 99 );
		add_action( 'manage_shop_order_posts_custom_column', array( $this, 'bu_preview_link_column' ), 99, 2);
		add_filter( 'woocommerce_shop_order_list_table_columns', array( $this, 'bu_filter_shop_order_posts_columns' ), 99, 1);
        add_action( 'woocommerce_shop_order_list_table_custom_column', array( $this, 'bu_preview_link_column' ), 99, 2 );
	}

	/**
	 * Adding a column at Order page
	 *
	 * @author  Paul Chinmoy
	 * @since   1.5.19
	 *
	 * @return  void
	 */
	function bu_filter_shop_order_posts_columns( $columns ) {
		$columns['preview_link'] = __( 'Receipt Link', 'bricksultimate' );
		return $columns;
	}
	
	/**
	 * Display preview link
	 *
	 * @author  Paul Chinmoy
	 * @since   1.5.19
	 *
	 * @return  void
	 */
	function bu_preview_link_column( $column, $order ) {
		if ( 'preview_link' === $column ) {
			if( ! is_a( $order, 'WC_Order' ) )
			   $order = wc_get_order( $order );

			printf( 
				'<a href="%s" target="_blank">%s #%s<a/>', 
				$order->get_checkout_order_received_url(),  
				__('Receipt of', 'bricksultimate'), 
				$order->get_id() 
			);
		}
	}

	public function  bu_add_custom_order_meta_box( $screen_id, $order ) {

		if( $screen_id != 'woocommerce_page_wc-orders' )
			return;

		$template_id = \Bricks\Woocommerce::get_template_data_by_type( 'wc_form_checkout', false );
		
		if( ! $template_id )
			return;

		add_meta_box( 'woocommerce-order-custom-meta', __( 'Order Custom Data', 'bricksultimate' ), '\BricksUltimate\WooMetaBoxOrderCustomFields::output', $screen_id, 'side', 'default' );
	}

	/**
	 * Adding product to cart
	 * when clicking on the Buy Now button
	 * 
	 * @return void
	 */
	public function buwoo_cart_action() {
		if ( isset( $_GET['bu_empty_cart'] ) && 'yes' === esc_html( $_GET['bu_empty_cart'] ) ) {
			WC()->cart->empty_cart();

			//if( isset( $_GET['bu_redirect'] ) && 'yes' === esc_html( $_GET['bu_redirect'] ) ) {
				$referer  = esc_url( remove_query_arg( [ 'bu_empty_cart', 'bu_redirect' ] ) );
				wp_safe_redirect( $referer ); 
				exit();
			//}
		}

		if( isset( $_GET['bu_buy_now'] ) && $_GET['bu_buy_now'] == 'yes' ) {
			if( isset( $_GET['keep_cart_items'] ) && $_GET['keep_cart_items'] == 'no' ) { WC()->cart->empty_cart(); }
			
			$product_id = absint( $_GET['add_to_cart'] );

			WC()->cart->add_to_cart( $product_id, 1 );

			$referer  = esc_url( remove_query_arg( [ 'add_to_cart', 'bu_buy_now', 'keep_cart_items' ] ) );
			wp_safe_redirect( $referer ); 
			exit();
		}

		if( isset( $_POST['bu_buy_now'] ) && $_POST['bu_buy_now'] == 'yes' ) {
			$flag 				= false;
			$keep_cart_items 	= isset( $_POST['keep_cart_items'] ) ? $_POST['keep_cart_items'] : 'no';
			$quantities 		= $_POST['quantity'];

			//* grouped product
			if( is_array( $quantities ) ) {
				
				$qtys = array_flip( $quantities );
				
				foreach( $qtys as $quantity => $product_id ) {
					if( ! empty( $quantity ) )  {
						if( $keep_cart_items == 'no' && $flag === false ) { WC()->cart->empty_cart(); }
						if( $keep_cart_items == 'no' ){ WC()->cart->add_to_cart( absint( $product_id ), absint( $quantity ) ); }
						$flag = true;
					}
				}

			} else {
				
				$flag = true;

				//* remove the existing cart items and add new item
				if( $keep_cart_items == 'no' )
					WC()->cart->empty_cart();
				
				$product_id = absint( $_POST['product_id'] );
				$quantity = absint( $_POST['quantity'] );

				if ( isset( $_POST['variation_id'] ) ) {
					$variation_id = absint( $_POST['variation_id'] );
					WC()->cart->add_to_cart( $product_id, $quantity, $variation_id );
				} else {
					WC()->cart->add_to_cart( $product_id, $quantity );
				}
			}

			if( $flag ) {
				//* clear the all notices
				wc_clear_notices();

				wp_safe_redirect( esc_url( $_POST['bu_redirect_url'] ) ); 
				exit();
			}
		}
	}

	/**
	 * Updates fragments data
	 */
	public static function buwoo_cart_fragment( $fragments ) {
		ob_start();
		?>
		<span class="bu-cart-counter"><?php echo is_object( WC()->cart ) ? WC()->cart->get_cart_contents_count() : '0'; ?></span>
		<?php
		
		$fragments['span.bu-cart-counter'] = ob_get_clean();

		ob_start();
		?>
		<span class="bu-cart-subtotal"><?php echo self::calculate_cart_subtotal(); ?></span>
		<?php
		$fragments['span.bu-cart-subtotal'] = ob_get_clean();
		ob_start();
		?>
		<span class="bu-cart-total"><?php echo self::calculate_cart_total(); ?></span>
		<?php
		$fragments['span.bu-cart-total'] = ob_get_clean();
		$fragments['span.bu-cart-price'] = self::get_customer_order_amount();
		$fragments['span.isFreeShippingAvailable'] = self::isFreeShippingAvailable();
		$fragments['span.freeShippingMinAmount'] = self::freeShippingMinAmount();
		$fragments['span.hasFreeShippingMethod'] = self::hasFreeShippingMethod();

		ob_start();
		?>
		<span class="fsn-updated-price"><?php echo wc_price( self::freeShippingUpdatedAmount() ); ?></span>
		<?php
		
		$fragments['span.fsn-updated-price'] = ob_get_clean();

		ob_start();
		?>
		<span class="bu-cart-order-total"><?php wc_cart_totals_order_total_html(); ?></span>
		<?php
		
		$fragments['span.bu-cart-order-total'] = ob_get_clean();

		remove_filter( 'woocommerce_add_to_cart_fragments', array( __CLASS__, 'buwoo_cart_fragment' ) );

		return $fragments;
	}

	public static function calculate_cart_subtotal($formated = true) {
		if( is_object( WC()->cart ) ) {
			$price = WC()->cart->get_displayed_subtotal();
		} else {
			$price = 0;
		}

		if( $formated )
			return wc_price( $price );
		else
			return $price;
	}

	public static function calculate_cart_total($formated = true) {
		if( is_object( WC()->cart ) ) {
			$price = WC()->cart->get_cart_contents_total();
		} else {
			$price = 0;
		}

		if( $formated )
			return wc_price( $price );
		else
			return $price;
	}

	public static function isFreeShippingAvailable() {
		if( self::$free_shipping_class ) {
			foreach( self::$free_shipping_class as $free_shipping ) {
				$shippingObj = new \WC_Shipping_Free_Shipping( $free_shipping->instance_id );

				if( $shippingObj->is_available([]) )
					return 'yes';
				else
					return 'no';
			}
		}

		return 'no';
	}

	public static function hasFreeShippingMethod() {
		if( self::$free_shipping_class )
			return 'yes';
		else
			return 'no';
	}

	public static function freeShippingMinAmount() {
		$min_amount = 0;
		if( self::$free_shipping_class ) {
			foreach( self::$free_shipping_class as $free_shipping ) {
				$shippingObj = new \WC_Shipping_Free_Shipping( $free_shipping->instance_id );

				return \Automattic\WooCommerce\Utilities\NumberUtil::round( $shippingObj->get_option( 'min_amount', 0), \wc_get_price_decimals() );
			}
		}

		return \Automattic\WooCommerce\Utilities\NumberUtil::round( $min_amount, \wc_get_price_decimals() );
	}

	public static function freeShippingUpdatedAmount() {
		$order_amount = self::get_customer_order_amount();
		$min_amount = self::freeShippingMinAmount();

		if( $order_amount < $min_amount )
			return ( $min_amount - $order_amount );
		else
			return $min_amount;
	}

	public static function get_customer_order_amount() {
		$total = 0;

		if( ! is_object( WC()->cart ) )
			return $total;

		$ignore_discounts = 'no';

		$total = WC()->cart->get_displayed_subtotal();

		if ( WC()->cart->display_prices_including_tax() ) {
			$total = $total - WC()->cart->get_discount_tax();
		}

		if( self::$free_shipping_class ) {
			foreach( self::$free_shipping_class as $free_shipping ) {
				$ignore_discounts = ( new \WC_Shipping_Free_Shipping( $free_shipping->instance_id ) )->get_option( 'ignore_discounts' );
			}
		}

		if ( 'no' === $ignore_discounts ) {
			$total = $total - WC()->cart->get_discount_total();
		}

		return \Automattic\WooCommerce\Utilities\NumberUtil::round( $total, \wc_get_price_decimals() );
	}

	public function getFreeShippingClass() {
		global $wpdb;

		$fsn_query = $wpdb->prepare( "SELECT * FROM {$wpdb->prefix}woocommerce_shipping_zone_methods 
			WHERE method_id = %s AND is_enabled = %d AND zone_id = %d ORDER BY method_order ASC LIMIT 1", 
			'free_shipping', 
			1, 
			$this->getUserSelectedZoneId() 
		);
		$zone_data   = $wpdb->get_results( $fsn_query, OBJECT );

		if ( empty( $zone_data ) ) {
			return false;
		} else {
			return $zone_data;
		}
	}

	public function getUserSelectedZoneId() {
		global $woocommerce;

		$shipping_zone_id = false;

		if( isset( WC()->session ) ) {
			if( ( !empty( WC()->session ) && is_array( WC()->session->get( 'chosen_shipping_methods' ) ) ) 
				|| ( isset( $_GET['wc-ajax'] ) && $_GET['wc-ajax'] == 'update_order_review') ) {

				if($shipping_zone_id === false) {
					$shipping_zone_id = $this->getUserSelectedZone();
				}

				if($shipping_zone_id === false) {
					$shipping_zone_id = $this->getGeoLocatedZone();
				}
			}
		}

		return $shipping_zone_id ;
	}

	private function getUserSelectedZone() {
		global $woocommerce;
		if( is_object( WC()->cart ) ) {
			$shipping_packages =  WC()->cart->get_shipping_packages();

			$shipping_zone = wc_get_shipping_zone( reset( $shipping_packages ) );

			if( is_object( $shipping_zone ) ) {
				return $shipping_zone->get_id();
			}
		}
		return false;
	}

	private function getGeoLocatedZone() {
		$destination = $this->ipBasedDestination();

		if(empty($destination['country'])) return false;

		$shipping_zone = \WC_Shipping_Zones::get_zone_matching_package( $destination );
		if( is_object($shipping_zone) ){
			return $shipping_zone->get_id();
		}

		return false;
	}

	private function ipBasedDestination() {
		$geo_instance  = new \WC_Geolocation();
		$user_ip  = $geo_instance->get_ip_address();
		$user_geodata = $geo_instance->geolocate_ip($user_ip);

		$destination['destination']['country'] =  $user_geodata['country'];
		$destination['destination']['state'] =  $user_geodata['state'];
		$destination['destination']['postcode'] = "";
		return $destination;
	}

	public static function appliedCoupons() {
		if( is_object( WC()->cart ) ) {
			foreach ( WC()->cart->get_coupons() as $code => $coupon ) :
				echo "<div class=\"cart-discount coupon-". esc_attr( sanitize_title( $code ) ) . "\">";
				echo "<span class=\"bu-coupon-code\">" . __('Discount', 'bricksultimate') . ": <strong>" . $code . '</strong> <a href="' . esc_url( add_query_arg( 'remove_coupon', rawurlencode( $code ), \Automattic\Jetpack\Constants::is_defined( 'WOOCOMMERCE_CHECKOUT' ) ? wc_get_checkout_url() : wc_get_cart_url() ) ) . '" class="bu-remove-coupon" data-coupon="' . esc_attr( $code ) . '">' . __( '[Remove]', 'woocommerce' ) . "</a></span>";
				
				echo "<span class=\"cart-discount-value\">";
					if ( is_string( $coupon ) ) {
						$coupon = new \WC_Coupon( $coupon );
					}
					$discount_amount_html = '';

					$amount = WC()->cart->get_coupon_discount_amount( $code, WC()->cart->display_cart_ex_tax );
					$discount_amount_html = '-' . wc_price( $amount );

					if ( $coupon->get_free_shipping() && empty( $amount ) ) {
						$discount_amount_html = __( 'Free shipping coupon', 'woocommerce' );
					}

					echo apply_filters( 'woocommerce_coupon_discount_amount_html', $discount_amount_html, $coupon );
				echo "</span>";

				echo "</div>";
			endforeach;
		}
	}

	public static function minCartQty($product, $cart_item, $item_key) {
		$quantity = $cart_item['quantity'] ?? 1;
		$args = array(
			'input_id'     => uniqid( 'quantity_' ),
			'input_name'   => 'quantity',
			'input_value'  => $quantity,
			'classes'      => apply_filters( 'woocommerce_quantity_input_classes', array( 'input-text', 'qty', 'text' ), $product ),
			'max_value'    => apply_filters( 'woocommerce_quantity_input_max', $product->get_max_purchase_quantity(), $product ),
			'min_value'    => apply_filters( 'woocommerce_quantity_input_min', $product->get_min_purchase_quantity(), $product ),
			'step'         => apply_filters( 'woocommerce_quantity_input_step', 1, $product ),
			'pattern'      => apply_filters( 'woocommerce_quantity_input_pattern', has_filter( 'woocommerce_stock_amount', 'intval' ) ? '[0-9]*' : '' ),
			'inputmode'    => apply_filters( 'woocommerce_quantity_input_inputmode', has_filter( 'woocommerce_stock_amount', 'intval' ) ? 'numeric' : '' ),
			'product_name' => $product ? $product->get_title() : '',
			'placeholder'  => apply_filters( 'woocommerce_quantity_input_placeholder', '', $product ),
			'autocomplete' => apply_filters( 'woocommerce_quantity_input_autocomplete', 'off', $product ),
		);

		// Apply sanity to min/max args - min cannot be lower than 0.
		$args['min_value'] = max( $args['min_value'], 0 );
		$args['max_value'] = 0 < $args['max_value'] ? $args['max_value'] : '';

		// Max cannot be lower than min if defined.
		if ( '' !== $args['max_value'] && $args['max_value'] < $args['min_value'] ) {
			$args['max_value'] = $args['min_value'];
		}
		
		if( class_exists( 'Morningtrain\WooAdvancedQTY\Plugin\Controllers\InputArgsController' ) ) {
			$advnargs = Morningtrain\WooAdvancedQTY\Plugin\Controllers\InputArgsController::applyArgs(array(), $cart_item['product_id'], true);
			if( isset( $advnargs['min_value'] ) && $advnargs['min_value'] > $args['min_value'] )
				$args['min_value'] = $advnargs['min_value'];
			
			if( isset( $advnargs['max_value'] ) && $advnargs['max_value'] > $args['max_value'] )
				$args['max_value'] = $advnargs['max_value'];
		}

		/* translators: %s: Quantity. */
		$label = ! empty( $args['product_name'] ) ? sprintf( esc_html__( '%s quantity', 'woocommerce' ), wp_strip_all_tags( $args['product_name'] ) ) : esc_html__( 'Quantity', 'woocommerce' );

		ob_start();
		?>
		<div class="quantity">
			<?php do_action( 'woocommerce_before_quantity_input_field' ); ?>
			<label class="screen-reader-text" for="<?php echo esc_attr( $args['input_id'] ); ?>"><?php echo esc_attr( $label ); ?></label>
			<input
				type="number"
				id="<?php echo esc_attr( $args['input_id'] ); ?>"
				class="<?php echo esc_attr( join( ' ', (array) $args['classes'] ) ); ?>"
				step="<?php echo esc_attr( $args['step'] ); ?>"
				min="<?php echo esc_attr( $args['min_value'] ); ?>"
				max="<?php echo esc_attr( 0 < $args['max_value'] ? $args['max_value'] : '' ); ?>"
				name="<?php echo esc_attr( $args['input_name'] ); ?>"
				value="<?php echo esc_attr( $args['input_value'] ); ?>"
				title="<?php echo esc_attr_x( 'Qty', 'Product quantity input tooltip', 'woocommerce' ); ?>"
				size="4"
				placeholder="<?php echo esc_attr( $args['placeholder'] ); ?>"
				inputmode="<?php echo esc_attr( $args['inputmode'] ); ?>"
				autocomplete="<?php echo esc_attr( isset( $args['autocomplete'] ) ? $args['autocomplete'] : 'on' ); ?>"
			/>
			<?php do_action( 'woocommerce_after_quantity_input_field' ); ?>
		</div>
		<?php

		return apply_filters( 'woocommerce_cart_item_quantity', ob_get_clean(), $item_key, $cart_item);
	}

	function addToCart() {
		add_action("wp_head", [$this, "addInlineScript"] );
	}
	
	function addInlineScript() {
    ?>
		<script>
			let BU_ADDED_TO_CART = true;
		</script>
    <?php
	}

	public static function buwoo_woocommerce_locate_template( $template, $template_name, $template_path ) {
		if( $template_name === 'single-product/add-to-cart/variable.php' ) {

			$new_template = \BricksUltimate\Plugin::instance()->get_root_path() . 'templates/' . $template_name;

			if( file_exists( $new_template ) ) {
				wp_enqueue_script( 'bu-swatches' );
				return $new_template;
			}
		}

		return $template;
	}

	public static function bu_get_swatches( $id, $attr_name, $options, $variations ) {
		$swatches = array();

		foreach ( $options as $key => $value ) {
			$swatch = self::bu_get_attr_swatch( $id, $attr_name, $value );

			if ( ! empty( $swatch ) ) {

				if ( $variations ) {
					$variation = self::bu_get_product_variations_images( $attr_name, $variations, $value );
					$swatch = array_merge( $swatch, $variation );
				}

				$swatches[ $key ] = $swatch;
			} else if ( taxonomy_exists( $attr_name ) && $variations ) {
				$variation = self::bu_get_product_variations_images( $attr_name, $variations, $value );
				$swatches[ $key ] = $variation;
			}
		}

		return $swatches;
	}

	public static function bu_get_attr_swatch( $id, $attr_name, $value ) {
		$swatches = array();

		$color = $image_id = '';

		$term = get_term_by( 'slug', $value, $attr_name );
		if ( is_object( $term ) ) {
			$color 		= get_term_meta( $term->term_id, 'bu_swatches_color', true );
			$image_id 	= get_term_meta( $term->term_id, 'bu_swatches_img_id', true );
		}

		if ( $color != '' ) {
			$swatches['color'] = $color;
		}

		if ( $image_id != '' ) {
			$swatches['image'] = wp_get_attachment_image_url( $image_id, 'full' );
		}

		return $swatches;
	}

	public static function bu_get_product_variations_images( $attribute_name, $available_variations, $option = false, $product_id = false ) {
		$swatches = array();
		$product_image_id = get_post_thumbnail_id( $product_id );

		foreach ( $available_variations as $key => $variation ) {
			$option_variation = array();
			$attr_key         = 'attribute_' . $attribute_name;

			if ( ! isset( $variation['attributes'][ $attr_key ] ) ) {
				return;
			}

			$val = $variation['attributes'][ $attr_key ];

			if ( ! empty( $variation['image']['src'] ) ) {
				$option_variation = array(
					'variation_id' => $variation['variation_id'],
					'is_in_stock'  => $variation['is_in_stock'],
					'image_src'  => $variation['image']['src'],
					'image_srcset'  => $variation['image']['srcset'],
					'image_sizes'  => $variation['image']['sizes'],
				);
			}

			if ( $option ) {
				if ( $val != $option ) {
					continue;
				} else {
					return $option_variation;
				}
			} else {
				$swatch = self::bu_get_attr_swatch( $product_id, $attribute_name, $val );
				$swatches[ $val ] = array_merge( $swatch, $option_variation );
			}
		}

		return $swatches;
	}

	function bu_clear_swatches_cache( $post_id ) {
		$transient_name = 'bu_swatches_loop_cache_' . $post_id;
		delete_transient( $transient_name );
	}

	function bu_clear_swatches_cache_on_product( $data ) {
		$post_id = $data->get_id();
		$transient_name = 'bu_swatches_loop_cache_' . $post_id;
		delete_transient( $transient_name );
	}

	public static function bu_get_selected_variations( $attribute_name, $available_variations ) {
		$selected_variations = array();

		if ( ! $available_variations ) {
			return $selected_variations;
		}

		foreach ( $available_variations as $variation ) {
			$attr_key = 'attribute_' . $attribute_name;
			if ( isset( $variation['attributes'][ $attr_key ] ) ) {
				$selected_variations[] = $variation['attributes'][ $attr_key ];
			}
		}

		return $selected_variations;
	}

	public static function bu_quick_add_controls( $controls, $return = true ) {
		$controls['quickAddInfo'] = [
			'group' 	=> 'quickadd',
			'type' 		=> 'info',
			'content' 	=> esc_html__( 'It is for the select options button', 'bricksultimate' ),
		];

		$controls['enableQuickAdd'] = [
			'group' 	=> 'quickadd',
			'type' 		=> 'checkbox',
			'label' 	=> esc_html__( 'Enable quick add action', 'bricksultimate' ),
		];

		$controls['excludeQuickAdd'] = [
			'group' 	=> 'quickadd',
			'type' 		=> 'text',
			'label' 	=> esc_html__( 'Exclude products', 'bricksultimate' ),
			'description' => esc_html__( 'enter product IDs with comma', 'bricksultimate' ),
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['quickAddBtnText'] = [
			'group' 	=> 'quickadd',
			'type' 		=> 'text',
			'label' 	=> esc_html__( 'Button text', 'bricksultimate' ),
			'description' => esc_html__( 'It is for Swatches for Loop element', 'bricksultimate' ),
			'placeholder' => esc_html__( 'Add To Cart', 'bricksultimate' ),
			'inline' 	=> true,
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaCloseBtnSep'] = [
			'group' 	=> 'quickadd',
			'type' 		=> 'separator',
			'label' 	=> esc_html__( 'Close button', 'bricksultimate' ),
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaCloseBtnText'] = [
			'group' 	=> 'quickadd',
			'type' 		=> 'text',
			'label' 	=> esc_html__( 'Text', 'bricksultimate' ),
			'placeholder' => esc_html__( 'Close', 'bricksultimate' ),
			'inline' 	=> true,
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaCloseBtnIcon'] = [
			'group' 	=> 'quickadd',
			'type' 		=> 'icon',
			'label' 	=> esc_html__( 'Icon', 'bricksultimate' ),
			'default' 	=> [
				'library' => 'themify',
				'icon'    => 'ti-close',
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaCloseBtnIconColor'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Icon color', 'bricksultimate' ),
			'type'     => 'color',
			'required' => [ [ 'qaCloseBtnIcon.icon', '!=', '' ], ['enableQuickAdd', '=', true] ],
			'css'      => [
				[
					'property' => 'color',
					'selector' => '.bu-qa-close-icon'
				],
				[
					'property' => 'fill',
					'selector' => '.bu-qa-close-icon'
				],
			],
		];

		$controls['qaCloseBtnIconSize'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Icon size', 'bricksultimate' ),
			'type'     => 'number',
			'units'    => true,
			'required' => [ [ 'qaCloseBtnIcon.icon', '!=', '' ], ['enableQuickAdd', '=', true] ],
			'css'      => [
				[
					'property' => 'font-size',
					'selector' => '.bu-qa-close-icon'
				],
			],
		];

		$controls['qaCloseBtnIconGap'] = [
			'group'  	=> 'quickadd',
			'label'    => esc_html__( 'Gap', 'bricksultimate' ),
			'type'     => 'number',
			'units'    => true,
			'required' => [ [ 'qaCloseBtnIcon.icon', '!=', '' ], ['enableQuickAdd', '=', true] ],
			'css'      => [
				[
					'property' => 'gap',
					'selector' => '.bu-qa-close-icon a'
				],
			],
		];

		$controls['qaCloseBtnPT'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Position: Top', 'bricksultimate' ),
			'type'     => 'number',
			'units'    => true,
			'css'      => [
				[
					'property' => 'top',
					'selector' => '.quick-add-wrapper .qa-close-btn'
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaCloseBtnPR'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Position: Right', 'bricksultimate' ),
			'type'     => 'number',
			'units'    => true,
			'css'      => [
				[
					'property' => 'right',
					'selector' => '.quick-add-wrapper .qa-close-btn'
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaCloseBtnPL'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Position: Left', 'bricksultimate' ),
			'type'     => 'number',
			'units'    => true,
			'css'      => [
				[
					'property' => 'left',
					'selector' => '.quick-add-wrapper .qa-close-btn'
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaCloseBtnW'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Width', 'bricksultimate' ),
			'type'     => 'number',
			'units'    => true,
			'css'      => [
				[
					'property' => 'width',
					'selector' => '.quick-add-wrapper .qa-close-btn'
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaCloseBtnPad'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Padding', 'bricksultimate' ),
			'type'     => 'dimensions',
			'css'      => [
				[
					'property' => 'padding',
					'selector' => '.quick-add-wrapper .qa-close-btn'
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaCloseBtnTg'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Typography', 'bricksultimate' ),
			'type'     => 'typography',
			'css'      => [
				[
					'property' => 'font',
					'selector' => '.quick-add-wrapper .qa-close-btn'
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaCloseBtnBg'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Background color', 'bricksultimate' ),
			'type'     => 'color',
			'css'      => [
				[
					'property' => 'background-color',
					'selector' => '.quick-add-wrapper .qa-close-btn'
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaCloseBtnBrd'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Border', 'bricksultimate' ),
			'type'     => 'border',
			'css'      => [
				[
					'property' => 'border',
					'selector' => '.quick-add-wrapper .qa-close-btn'
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaContainer'] = [
			'group' 	=> 'quickadd',
			'type' 		=> 'separator',
			'label' 	=> esc_html__( 'Container', 'bricksultimate' ),
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$selector = '.quick-add-wrapper';

		$controls['qaWrapperPad'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Padding', 'bricksultimate' ),
			'type'     => 'dimensions',
			'css'      => [
				[
					'property' => 'padding',
					'selector' => $selector
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaWrapperBg'] = [
			'group' 	=> 'quickadd',
			'label'    => esc_html__( 'Background color', 'bricksultimate' ),
			'type'     => 'color',
			'css'      => [
				[
					'property' => 'background-color',
					'selector' => $selector
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaWrapperSW'] = [
			'group' => 'quickadd',
			'label' => esc_html__( 'Scrollbar width', 'bricksultimate' ),
			'type' 	=> 'number',
			'units' => true,
			'css' 	=> [
				[
					'property' => 'width',
					'selector' => '.qa-cart-form::-webkit-scrollbar'
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaWrapperSTH'] = [
			'group' => 'quickadd',
			'label' => esc_html__( 'Scrollbar thumb color', 'bricksultimate' ),
			'type' 	=> 'color',
			'css' 	=> [
				[
					'property' => 'background-color',
					'selector' => '.qa-cart-form::-webkit-scrollbar-thumb'
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaWrapperST'] = [
			'group' => 'quickadd',
			'label' => esc_html__( 'Scrollbar track color', 'bricksultimate' ),
			'type' 	=> 'color',
			'css' 	=> [
				[
					'property' => 'background-color',
					'selector' => '.qa-cart-form::-webkit-scrollbar-track'
				],
			],
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$controls['qaATCBtn'] = [
			'group' 	=> 'quickadd',
			'type' 		=> 'separator',
			'label' 	=> esc_html__( 'Add To Cart Button', 'bricksultimate' ),
			'required' 	=> ['enableQuickAdd', '=', true]
		];

		$selector = '.qa-cart-form .button';

		$controls['qaATCBtnW'] = [
			'group' => 'quickadd',
			'label' => esc_html__( 'Width', 'bricks' ),
			'type'  => 'number',
			'units' => true,
			'css'   => [
				[
					'property' => 'width',
					'selector' => $selector,
				],
			],
		];

		$controls['qaATCBtnH'] = [
			'group' => 'quickadd',
			'label' => esc_html__( 'Height', 'bricks' ),
			'type'  => 'number',
			'units' => true,
			'css'   => [
				[
					'property' => 'height',
					'selector' => $selector,
				],
			],
			'info'  => __( 'Set to "100vh" for full height.', 'bricks' ),
		];

		$controls['qaATCBtnPad'] = [
			'group' => 'quickadd',
			'label' => esc_html__( 'Padding', 'bricks' ),
			'type'  => 'dimensions',
			'css'   => [
				[
					'property' => 'padding',
					'selector' => $selector,
				],
			]
		];

		$controls['qaATCBtnBG'] = [
			'group' => 'quickadd',
			'type'  => 'color',
			'label' => esc_html__('Background', 'bricks'),
			'css' 	=> [
				[
					'selector' => $selector,
					'property' => 'background-color'
				],
			]
		];

		$controls['qaATCBtnTg'] = [
			'group' => 'quickadd',
			'type'  => 'typography',
			'label' => esc_html__('Typography', 'bricks'),
			'css' 	=> [
				[
					'selector' => $selector,
					'property' => 'font'
				],
			]
		];

		$controls['qaATCBtnBorder'] = [
			'group' => 'quickadd',
			'type'  => 'border',
			'label' => esc_html__('Border', 'bricks'),
			'css' 	=> [
				[
					'selector' => $selector,
					'property' => 'border'
				],
			]
		];

		$controls['qaATCBtnBoxshadow'] = [
			'group' => 'quickadd',
			'type'  => 'box-shadow',
			'label' => esc_html__('Box shadow', 'bricks'),
			'css' 	=> [
				[
					'selector' => $selector,
					'property' => 'box-shadow',
				],
			]
		];

		if( $return )
			return $controls;
	}

	// Set builder control groups
	public static function bu_checkout_field_control_groups( $control_groups ) {
		$control_groups['fwrapper'] = [
			'title' 	=> esc_html__( 'Field Wrapper', 'bricksultimate' ),
			'tab' 		=> 'content',
			'required' => ['field_design', '!=', 'bu-default']
		];

		$control_groups['label'] = [
			'title' 	=> esc_html__( 'Label', 'bricksultimate' ),
			'tab' 		=> 'content',
		];

		$control_groups['description'] = [
			'title' 	=> esc_html__( 'Description', 'bricksultimate' ),
			'tab' 		=> 'content',
		];

		$control_groups['input'] = [
			'title' 	=> esc_html__( 'Input Fields', 'bricksultimate' ),
			'tab' 		=> 'content',
			'required' 	=> ['field_type', '!=', [ 'radio', 'checkbox' ] ]
		];

		$control_groups['radio'] = [
			'title' 	=> esc_html__( 'Radio', 'bricksultimate' ),
			'tab' 		=> 'content',
			'required' 	=> ['field_type', '=', 'radio']
		];

		$control_groups['checkbox'] = [
			'title' 	=> esc_html__( 'Checkbox', 'bricksultimate' ),
			'tab' 		=> 'content',
			'required' 	=> ['field_type', '=', 'checkbox']
		];

		return $control_groups;
	}

	public static function bu_checkout_fields_controls( $controls, $prefix='', $selector='', $return = true ) {
		$controls['field_type'] = [
			'type' 	=> 'select',
			'label' => esc_html__( 'Field type', 'bricksultimate' ),
			'options' => [
				'text' 				=> esc_html__('Text', 'bricksultimate'),
				'textarea' 			=> esc_html__('Textarea', 'bricksultimate'),
				'password' 			=> esc_html__('Password', 'bricksultimate'),
				'number' 			=> esc_html__('Number', 'bricksultimate'),
				'email' 			=> esc_html__('Email', 'bricksultimate'),
				'url' 				=> esc_html__('URL', 'bricksultimate'),
				'tel' 				=> esc_html__('Phone / Tel', 'bricksultimate'),
				'hidden' 			=> esc_html__('Hidden', 'bricksultimate'),
				'radio' 			=> esc_html__('Radio', 'bricksultimate'),
				'checkbox' 			=> esc_html__('Checkbox', 'bricksultimate'),
				'select' 			=> esc_html__('Select', 'bricksultimate'),
				//'datetime' 			=> esc_html__('Datetime', 'bricksultimate'),
				//'datetime-local' 	=> esc_html__('Datetime-local', 'bricksultimate'),
				'date' 				=> esc_html__('Date', 'bricksultimate'),
				'month' 			=> esc_html__('Month', 'bricksultimate'),
				'time' 				=> esc_html__('Time', 'bricksultimate'),
				'week' 				=> esc_html__('Week', 'bricksultimate'),
			],
			'rerender' => true,
			'required' => [ $prefix . '_field', '=', 'custom']
		];

		$controls['field_key'] = [
			'type' 	=> 'text',
			'label' => esc_html__( 'Field key', 'bricksultimate' ),
			'placeholder' => $prefix . '_my_field',
			'rerender' => true,
			'required' => [ $prefix . '_field', '=', 'custom']
		];

		$controls['rows'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Rows', 'bricksultimate' ),
			'inline' => true,
			'unitless' => true,
			'placeholder' => 2,
			'required' => [ 'field_type', '=', 'textarea']
		];

		$controls['cols'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Cols', 'bricksultimate' ),
			'inline' => true,
			'unitless' => true,
			'placeholder' => 5,
			'required' => [ 'field_type', '=', 'textarea']
		];

		$controls['maxlength'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Max. length', 'bricksultimate' ),
			'inline' => true,
			'unitless' => true,
			'placeholder' => 10,
			'required' => [ 'field_type', '=', [ 'number', 'tel', 'password'] ]
		];

		$controls['fieldOptions'] = [
			'type' 		=> 'textarea',
			'label' 	=> esc_html__( 'Options', 'bricksultimate' ),
			'placeholder' => 'key:value',
			'description' => esc_html__('Per line add one option', 'bricksultimate'),
			'required' 	=> [ 'field_type', '=', ['select', 'radio'] ]
		];

		$controls['hiddenValue'] = [
			'type' 	=> 'text',
			'label' => esc_html__( 'Default value', 'bricksultimate' ),
			'required' => [ 'field_type', '=', ['hidden', 'select', 'radio'] ]
		];

		$controls['minlength'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Min. length', 'bricksultimate' ),
			'inline' => true,
			'unitless' => true,
			'placeholder' => 5,
			'required' => [ 'field_type', '=', [ 'number', 'tel', 'password'] ]
		];

		$controls['isChecked'] = [
			'type' 		=> 'checkbox',
			'label' 	=> esc_html__( 'Checked by default', 'bricksultimate' ),
			'required' 	=> [ 'field_type', '=', 'checkbox' ]
		];

		$controls['hideShipDiff'] = [
			'type' 		=> 'checkbox',
			'label' 	=> esc_html__( 'Will hide this field?', 'bricksultimate' ),
			'required' 	=> [ 'shipping_field', '=', 'ship_to_diff' ]
		];

		$controls['willHide'] = [
			'type' 		=> 'checkbox',
			'label' 	=> esc_html__( 'Will hide this field?', 'bricksultimate' ),
			'required' 	=> [ 'field_type', '=', 'checkbox' ]
		];

		$controls['optional'] = [
			'type' 	=> 'checkbox',
			'label' => esc_html__( 'Is optional field?', 'bricksultimate' )
		];

		$controls['aria_label'] = [
			'type' 	=> 'text',
			'label' => esc_html__( 'Aria label', 'bricksultimate' ),
		];

		$controls['field_design'] = [
			'type'      => 'select',
			'label'     => esc_html__( 'Field design', 'bricksultimate' ),
			'options'   => [ 'bu-default' => esc_html__('Default'), 'bu-custom' => esc_html__('Custom') ],
			'default' 	=> 'bu-default',
			'inline'    => true,
			'placeholder' => esc_html__( 'Select design', 'bricksultimate' ),
		];

		/**
		 * Wrapper
		 * ----------------------------------------*/
		$selector = '.form-row';
		$controls['fwMrg'] = [
			'group' => 'fwrapper',
			'type' 	=> 'dimensions',
			'label' => esc_html__( 'Margin', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'margin',
					'selector' => $selector
				]
			]
		];

		$controls['fwPad'] = [
			'group' => 'fwrapper',
			'type' 	=> 'dimensions',
			'label' => esc_html__( 'Padding', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'padding',
					'selector' => $selector
				]
			]
		];

		$controls['fwBG'] = [
			'group' => 'fwrapper',
			'type' 	=> 'color',
			'label' => esc_html__( 'Background', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'background-color',
					'selector' => $selector
				]
			]
		];

		$controls['fwBorder'] = [
			'group' => 'fwrapper',
			'type' 	=> 'border',
			'label' => esc_html__( 'Border', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'border',
					'selector' => $selector
				]
			]
		];

		$controls['fwBS'] = [
			'group' => 'fwrapper',
			'type' 	=> 'box-shadow',
			'label' => esc_html__( 'Box shadow', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'box-shadow',
					'selector' => $selector
				]
			]
		];

		/**
		 * Label
		 * ----------------------------------------*/
		$selector = '.form-row label:not(.radio)';

		$controls['labelDisable'] = [
			'group' => 'label',
			'type' 	=> 'checkbox',
			'label' => esc_html__( 'Hide label', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' 	=> 'display',
					'selector' 	=> $selector,
					'value' 	=> 'none'
				]
			]
		];

		$controls['label'] = [
			'group' => 'label',
			'type' 	=> 'text',
			'label' => esc_html__( 'Label', 'bricksultimate' ),
			'rerender' => true,
			'required' => ['labelDisable', '=', false]
		];

		$controls['labelTg'] = [
			'group' => 'label',
			'type' 	=> 'typography',
			'label' => esc_html__( 'Typography', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'font',
					'selector' => $selector
				]
			],
			'required' => ['labelDisable', '=', false]
		];

		$controls['labelBg'] = [
			'group' => 'label',
			'type' 	=> 'color',
			'label' => esc_html__( 'Background', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'background-color',
					'selector' => $selector
				]
			],
			'required' => [ ['labelDisable', '=', false], ['field_design', '!=', 'bu-default'] ]
		];

		$controls['labelMrg'] = [
			'group' => 'label',
			'type' 	=> 'dimensions',
			'label' => esc_html__( 'Margin', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'margin',
					'selector' => $selector
				]
			],
			'required' => [ ['labelDisable', '=', false], ['field_design', '!=', 'bu-default'] ]
		];

		$controls['labelPad'] = [
			'group' => 'label',
			'type' 	=> 'dimensions',
			'label' => esc_html__( 'Padding', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'padding',
					'selector' => $selector
				]
			],
			'required' => [ ['labelDisable', '=', false], ['field_design', '!=', 'bu-default'] ]
		];

		$controls['labelW'] = [
			'group' => 'label',
			'type' 	=> 'number',
			'label' => esc_html__( 'Width', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'width',
					'selector' => $selector
				]
			],
			'required' => [ ['labelDisable', '=', false], ['field_design', '!=', 'bu-default'] ]
		];

		$controls['labelSep'] = [
			'group' => 'label',
			'type' 	=> 'separator',
			'required' => ['labelDisable', '=', false]
		];

		$controls['placeholder'] = [
			'group' => 'label',
			'type' 	=> 'text',
			'label' => esc_html__( 'Placeholder text', 'bricksultimate' ),
		];

		$controls['labelP'] = [
			'group' => 'label',
			'type' 	=> 'color',
			'label' => esc_html__( 'Placeholder color', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'color',
					'selector' => "::placeholder"
				]
			]
		];

		/**
		 * Description
		 * ----------------------------------------*/
		$controls['field_description'] = [
			'group' => 'description',
			'type' 	=> 'textarea',
			'label' => esc_html__( 'Field description', 'bricksultimate' ),
		];

		$selector = '.form-row .description';

		$controls['fdesTg'] = [
			'group' => 'description',
			'type' 	=> 'typography',
			'label' => esc_html__( 'Typography', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'font',
					'selector' => $selector
				]
			]
		];

		$controls['fdesBg'] = [
			'group' => 'description',
			'type' 	=> 'color',
			'label' => esc_html__( 'Background', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'background-color',
					'selector' => $selector
				]
			]
		];

		$controls['fdesMrg'] = [
			'group' => 'description',
			'type' 	=> 'dimensions',
			'label' => esc_html__( 'Margin', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'margin',
					'selector' => $selector
				]
			]
		];

		$controls['fdesPad'] = [
			'group' => 'description',
			'type' 	=> 'dimensions',
			'label' => esc_html__( 'Padding', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'padding',
					'selector' => $selector
				]
			]
		];

		$controls['fdesW'] = [
			'group' => 'description',
			'type' 	=> 'number',
			'label' => esc_html__( 'Width', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'width',
					'selector' => $selector
				]
			]
		];

		/**
		 * Fields
		 * ----------------------------------------*/
		$selector = 'input:not([type=submit]), .select2-selection, select';
		$selector2 = 'input:not([type=submit]), .select2-selection, select, textarea';
		$selector_f = 'input:not([type=submit]):focus, .select2-selection:focus, select:focus, textarea:focus';

		$controls['fieldTg'] = [
			'group' => 'input',
			'type' 	=> 'typography',
			'label' => esc_html__( 'Typography', 'bricks' ),
			'css' 	=> [
				[
					'property' => 'font',
					'selector' => $selector2
				],
				[
					'property' => 'font',
					'selector' => ".select2-container .select2-selection__rendered"
				],
			]
		];

		$controls['fieldBg'] = [
			'group' => 'input',
			'type' 	=> 'color',
			'label' => esc_html__( 'Background', 'bricks' ),
			'css' 	=> [
				[
					'property' => 'background-color',
					'selector' => $selector2
				]
			]
		];

		$controls['fieldBrd'] = [
			'group' => 'input',
			'type' 	=> 'border',
			'label' => esc_html__( 'Border', 'bricks' ),
			'css' 	=> [
				[
					'property' => 'border',
					'selector' => $selector2
				]
			]
		];

		$controls['fieldBs'] = [
			'group' => 'input',
			'type' 	=> 'box-shadow',
			'label' => esc_html__( 'Box shadow', 'bricks' ),
			'css' 	=> [
				[
					'property' => 'box-shadow',
					'selector' => $selector2
				]
			]
		];

		$controls['fieldFSep'] = [
			'group' => 'input',
			'type' 	=> 'separator',
			'label' => esc_html__( 'Focus', 'bricksultimate' ),
		];

		$controls['fieldFColor'] = [
			'group' => 'input',
			'type' 	=> 'color',
			'label' => esc_html__( 'Text color', 'bricks' ),
			'css' 	=> [
				[
					'property' => 'color',
					'selector' => $selector_f
				]
			]
		];

		$controls['fieldFBg'] = [
			'group' => 'input',
			'type' 	=> 'color',
			'label' => esc_html__( 'Background', 'bricks' ),
			'css' 	=> [
				[
					'property' => 'background-color',
					'selector' => $selector_f
				]
			]
		];

		$controls['fieldFBrd'] = [
			'group' => 'input',
			'type' 	=> 'border',
			'label' => esc_html__( 'Border', 'bricks' ),
			'css' 	=> [
				[
					'property' => 'border',
					'selector' => $selector_f
				]
			]
		];

		$controls['fieldFBs'] = [
			'group' => 'input',
			'type' 	=> 'box-shadow',
			'label' => esc_html__( 'Box shadow', 'bricks' ),
			'css' 	=> [
				[
					'property' => 'box-shadow',
					'selector' => $selector_f
				]
			]
		];

		$controls['fieldSep'] = [
			'group' => 'input',
			'type' 	=> 'separator',
		];

		$controls['fieldPad'] = [
			'group' => 'input',
			'type' 	=> 'dimensions',
			'label' => esc_html__( 'Padding', 'bricks' ),
			'css' 	=> [
				[
					'property' => 'padding',
					'selector' => ""
				]
			],
			'required' => ['field_design', '!=', 'bu-default']
		];

		$controls['fieldW'] = [
			'group' => 'input',
			'type' 	=> 'number',
			'label' => esc_html__( 'Width', 'bricks' ),
			'css' 	=> [
				[
					'property' => 'width',
					'selector' => $selector
				]
			]
		];

		$controls['fieldH'] = [
			'group' => 'input',
			'type' 	=> 'number',
			'label' => esc_html__( 'Height', 'bricks' ),
			'css' 	=> [
				[
					'property' => 'height',
					'selector' => $selector
				]
			]
		];


		/**
		 * Radio
		 * ----------------------------------------*/
		$controls['radioLabel'] = [
			'group' => 'radio',
			'type' 	=> 'typography',
			'label' => esc_html__( 'Label', 'bricksultimate' ),
			'css'	=> [
				[
					'property' => 'font',
					'selector' => '.bu-radio-buttons label'
				]
			],
		];

		$controls['radioW'] = [
			'group' => 'radio',
			'type' 	=> 'number',
			'label' => esc_html__( 'Label width', 'bricksultimate' ),
			'units' => true,
			'css'	=> [
				[
					'property' => 'width',
					'selector' => '.bu-radio-buttons label'
				]
			],
		];

		$controls['radioSep'] = [
			'group' => 'radio',
			'type' 	=> 'separator',
			'label' => esc_html__( 'Radio button', 'bricksultimate' ),
		];

		$rd_selector = '.bu-radio-buttons input[type=radio]';

		$controls['rdsize'] = [
			'group' => 'radio',
			'type'  	=> 'number',
			'label' 	=> esc_html__( 'Size', 'bricksultimate' ),
			'placeholder' => '15px',
			'units' 	=> true,
			'css'   	=> [
				[
					'property' => 'width',
					'selector' => $rd_selector,
				],
				[
					'property' => 'height',
					'selector' => $rd_selector,
				]
			],
		];

		$controls['rdbg'] = [
			'group' => 'radio',
			'type'  	=> 'color',
			'label' 	=> esc_html__( 'Background Color', 'bricksultimate' ),
			'css'   	=> [
				[
					'property' => 'background-color',
					'selector' => $rd_selector,
				]
			],
		];

		$controls['rdbrd'] = [
			'group' 	=> 'radio',
			'type'  	=> 'border',
			'label' 	=> esc_html__( 'Border', 'bricksultimate' ),
			'css'   	=> [
				[
					'property' => 'border',
					'selector' => $rd_selector,
				]
			]
		];

		$rdc_checked = '.bu-radio-buttons input[type=radio]:checked';
		$controls['rdcbg'] = [
			'group' => 'radio',
			'type'  	=> 'color',
			'label' 	=> esc_html__( 'Background color(checked)', 'bricksultimate' ),
			'css'   	=> [
				[
					'property' => 'background-color',
					'selector' => $rdc_checked,
				]
			],
		];

		$controls['rdcbrd'] = [
			'group' 	=> 'radio',
			'type'  	=> 'border',
			'label' 	=> esc_html__( 'Border(checked)', 'bricksultimate' ),
			'css'   	=> [
				[
					'property' => 'border',
					'selector' => $rdc_checked,
				]
			]
		];

		$bullet = '.bu-radio-buttons input[type=radio]:checked:after';
		$controls['rdwrdsz'] = [
			'group' => 'radio',
			'type'  	=> 'number',
			'label' 	=> esc_html__( 'Mini bullet size', 'bricksultimate' ),
			'placeholder' 	=> '6px',
			'min' 		=> 1,
			'max' 		=> 30,
			'step' 		=> 1,
			'units' 	=> true,
			'css'   	=> [
				[
					'property' => 'width',
					'selector' => $bullet
				],
				[
					'property' => 'height',
					'selector' => $bullet
				]
			],
		];

		$controls['rdwrdsz'] = [
			'group' 	=> 'radio',
			'type'  	=> 'color',
			'label' 	=> esc_html__( 'Mini bullet color', 'bricksultimate' ),
			'css'   	=> [
				[
					'property' => 'background-color',
					'selector' => $bullet
				]
			],
		];

		/**
		 * Checkbox
		 * ----------------------------------------*/
		$cb_selector = '.bu-checkbox-buttons input[type=checkbox]';

		$controls['cbsize'] = [
			'group' 	=> 'checkbox',
			'type'  	=> 'number',
			'label' 	=> esc_html__( 'Size', 'bricksultimate' ),
			'placeholder' => '15px',
			'units' 	=> true,
			'css'   	=> [
				[
					'property' => 'width',
					'selector' => $cb_selector,
				],
				[
					'property' => 'height',
					'selector' => $cb_selector,
				]
			],
		];

		$controls['cbbg'] = [
			'group' 	=> 'checkbox',
			'type'  	=> 'color',
			'label' 	=> esc_html__( 'Background Color', 'bricksultimate' ),
			'css'   	=> [
				[
					'property' => 'background-color',
					'selector' => $cb_selector,
				]
			],
		];

		$controls['cbbrd'] = [
			'group' 	=> 'checkbox',
			'type'  	=> 'border',
			'label' 	=> esc_html__( 'Border', 'bricksultimate' ),
			'css'   	=> [
				[
					'property' => 'border',
					'selector' => $cb_selector,
				]
			]
		];

		$cb_checked = '.bu-checkbox-buttons input[type=checkbox]:checked';
		$controls['cbcbg'] = [
			'group' 	=> 'checkbox',
			'type'  	=> 'color',
			'label' 	=> esc_html__( 'Background color(checked)', 'bricksultimate' ),
			'css'   	=> [
				[
					'property' => 'background-color',
					'selector' => $cb_checked,
				]
			],
		];

		$controls['cbcbrd'] = [
			'group' 	=> 'checkbox',
			'type'  	=> 'border',
			'label' 	=> esc_html__( 'Border(checked)', 'bricksultimate' ),
			'css'   	=> [
				[
					'property' => 'border',
					'selector' => $cb_checked,
				]
			]
		];

		if( $return )
			return $controls;
	}

	/**
	 * Registering the custom checkout fields
	 * 
	 * @param $fields array
	 * @return $fields array
	 */
	public function bu_woocommerce_checkout_fields( $fields ) {
		$billing_fields = WC()->checkout()->get_checkout_fields( 'billing' );
		foreach( $billing_fields as $key => $billing_field ) {
			if( ! empty( Plugin::$bu_settings[$key] ) && Plugin::$bu_settings[$key] == 'enabled' ) {
				unset($fields['billing'][$key]);
			}
		}

		$shipping_fields = WC()->checkout()->get_checkout_fields( 'shipping' );
		foreach( $shipping_fields as $key => $shipping_field ) {
			if( ! empty( Plugin::$bu_settings[$key] ) && Plugin::$bu_settings[$key] == 'enabled' ) {
				unset($fields['shipping'][$key]);
				if( $key == 'shipping_country' ) {
					add_filter( 'woocommerce_cart_needs_shipping', '__return_false' );
				}
			}
		}

		$template_id = \Bricks\Woocommerce::get_template_data_by_type( 'wc_form_checkout', false );

		if( ! $template_id )
			return $fields;

		$template_data = get_post_meta( $template_id, BRICKS_DB_PAGE_CONTENT, true );

		if( ! $template_data )
			return $fields;

		foreach( $template_data as $template_content ) {
			if( $template_content['name'] == 'bu-billing-fields') {
				$settings = $template_content['settings'];
				if( isset( $settings['billing_field'] ) && $settings['billing_field'] == 'custom' && isset( $settings['field_key'] ) ){
					$fields['billing'][ $settings['field_key'] ] = [
						'type'              => $settings['field_type'] ?? 'text',
						'label'             => $settings['label'] ?? '',
						'description'       => $settings['field_description'] ?? '',
						'placeholder'       => $settings['placeholder'] ?? '',
						'maxlength'         => $settings['maxlength'] ?? false,
						'minlength'         => $settings['minlength'] ?? false,
						'required'          => ! empty( $settings['optional'] ) ? false : true,
						'custom_attributes' => array(),
					];

					if( ! empty( $settings['rows'] ) ) {
						$fields['billing'][ $settings['field_key'] ]['custom_attributes']['rows'] = $settings['rows'];
					}

					if( ! empty( $settings['cols'] ) ) {
						$fields['billing'][ $settings['field_key'] ]['custom_attributes']['cols'] = $settings['cols'];
					}
				} elseif( isset( $settings['billing_field'] ) && ! empty( $settings['optional'] ) ) {
					$fields['billing'][$settings['billing_field']]['required'] = false;
					$fields['billing'][$settings['billing_field']]['validate'] = [];
				}
			} elseif( $template_content['name'] == 'bu-shipping-fields') {
				$settings = $template_content['settings'];
				if( isset( $settings['shipping_field'] ) && $settings['shipping_field'] == 'custom' && isset( $settings['field_key'] ) ){
					$fields['shipping'][ $settings['field_key'] ] = [
						'type'              => $settings['field_type'] ?? 'text',
						'label'             => $settings['label'] ?? '',
						'description'       => $settings['field_description'] ?? '',
						'placeholder'       => $settings['placeholder'] ?? '',
						'maxlength'         => $settings['maxlength'] ?? false,
						'minlength'         => $settings['minlength'] ?? false,
						'required'          => ! empty( $settings['optional'] ) ? false : true,
						'custom_attributes' => array(),
					];

					if( ! empty( $settings['rows'] ) ) {
						$fields['shipping'][ $settings['field_key'] ]['custom_attributes']['rows'] = $settings['rows'];
					}

					if( ! empty( $settings['cols'] ) ) {
						$fields['shipping'][ $settings['field_key'] ]['custom_attributes']['cols'] = $settings['cols'];
					}
				} elseif( isset( $settings['shipping_field'] ) && ! empty( $settings['optional'] ) ) {
					$fields['shipping'][$settings['shipping_field']]['required'] = false;
					$fields['shipping'][$settings['shipping_field']]['validate'] = [];
				}
			}
		}

		return $fields;
	}

	public function bu_woocommerce_default_address_fields( $fields ) {
		$template_id = \Bricks\Woocommerce::get_template_data_by_type( 'wc_form_checkout', false );
		
		if( ! $template_id )
			return $fields;

		$template_data = get_post_meta( $template_id, BRICKS_DB_PAGE_CONTENT, true );

		if( ! $template_data )
			return $fields;

		foreach( $template_data as $template_content ) {
			if( $template_content['name'] == 'bu-billing-fields' ) {
				$settings = $template_content['settings'];
				if( isset( $settings['billing_field'] ) && $settings['billing_field'] == 'billing_address_1' ) {
					$fields['address_1']['label'] = $settings['label'] ?? $fields['address_1']['label'];
					$fields['address_1']['placeholder'] = $settings['placeholder'] ?? '';
				}

				if( isset( $settings['billing_field'] ) && $settings['billing_field'] == 'billing_address_2' ) {
					$fields['address_2']['label'] = $settings['label'] ?? $fields['address_2']['label'];
					$fields['address_2']['placeholder'] = $settings['placeholder'] ?? '';
				}
				
			} elseif( $template_content['name'] == 'bu-shipping-fields') { 
				$settings = $template_content['settings'];
				if( isset( $settings['shipping_field'] ) && $settings['shipping_field'] == 'shipping_address_1' ) {
					$fields['address_1']['label'] = $settings['label'] ?? $fields['address_1']['label'];
					$fields['address_1']['placeholder'] = $settings['placeholder'] ?? '';
				}

				if( isset( $settings['shipping_field'] ) && $settings['shipping_field'] == 'shipping_address_2' ) {
					$fields['address_2']['label'] = $settings['label'] ?? $fields['address_2']['label'];
					$fields['address_2']['placeholder'] = $settings['placeholder'] ?? '';
				}
			}
		}
		
		return $fields;
	}

	public function set_body_class( $classes ) {
		$template_id = \Bricks\Woocommerce::get_template_data_by_type( 'wc_form_checkout', false );

		if( is_checkout() && $template_id ) {
			$classes[] = 'woocommerce-address-fields';
		}

		return $classes;
	}
}