<?php
namespace BricksUltimate\Elements;

if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

use BricksUltimate\{Helpers, WooCommerce};

class WooSwatchesLoop extends \Bricks\Element {
	public $category = 'ultimate';
	public $name 	= 'bu-swatches-loop';
	public $icon 	= 'ti-palette';

	// Return localized element label
	public function get_label() {
		return esc_html__( '(BU)Swatches for Loop', 'bricksultimate' );
	}

	// Set builder control groups
	public function set_control_groups() {
		$this->control_groups['tooltip'] = [
			'title' 	=> esc_html__( 'Tooltip', 'bricksultimate' ),
			'tab' 		=> 'content',
		];
	}

	// Set builder controls
	public function set_controls() {
		$attributes = ['none' => esc_html__( 'Select attribute', 'bricksultimate' ) ];
		$wc_attributes = wc_get_attribute_taxonomies();
		if( $wc_attributes ) {
			foreach( $wc_attributes as $attribute ) {
				$attributes[ 'pa_' . $attribute->attribute_name] = ucwords( $attribute->attribute_label );
			}
		}

		$this->controls['swAttribute'] = [
			'type'        => 'select',
			'label'       => esc_html__( 'Attribute', 'woocommerce' ),
			'options'     => $attributes,
			'placeholder' => esc_html__( 'Select attribute', 'bricksultimate' ),
		];

		$this->controls['swTextSwatches'] = [
			'type' 		=> 'checkbox',
			'label' 	=> esc_html__( 'Text only(no thumbs or color)', 'bricksultimate' ),
		];

		$this->controls['swLimit'] = [
			'type' 		=> 'number',
			'units' 	=> false,
			'label' 	=> esc_html__( 'Swatches limit', 'bricksultimate' ),
			'placeholder' => 3,
		];

		$this->controls['swLimitButton'] = [
			'type' 		=> 'checkbox',
			'label' 	=> esc_html__( 'Show limit button', 'bricksultimate' ),
			'rerender' 	=> false
		];

		$this->controls['swDisableImageUpdate'] = [
			'type' 		=> 'checkbox',
			'label' 	=> esc_html__( 'Disable image update', 'bricksultimate' ),
			'rerender' 	=> false
		];

		$this->controls['swSep'] = [
			'type' 	=> 'separator',
		];

		$this->controls['swGap'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Gap', 'bricksultimate' ),
			'units' => true,
			'placeholder' => '8px',
			'css' 	=> [
				[
					'property' => 'margin-right',
					'selector' => '.swatch-on-loop:not(:last-child)'
				]
			]
		];

		$this->controls['swOuterBrd'] = [
			'type' 	=> 'border',
			'label' => esc_html__( 'Outer border', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'border',
					'selector' => '.bu-swatch'
				]
			],
			'exclude' => ['border-radius']
		];

		$this->controls['swActiveBrd'] = [
			'type' 	=> 'border',
			'label' => esc_html__( 'Active swatches border', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'border',
					'selector' => '.bu-swatch.active-swatch'
				]
			],
			'exclude' => ['border-radius']
		];

		$this->controls['swLimitTg'] = [
			'type' 	=> 'typography',
			'label' => esc_html__( 'Limit button typography', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'font',
					'selector' => '.bu-swatches-divider'
				]
			],
			'exclude' => ['letter-spacing', 'text-decoration', 'text-transform', 'text-align', 'font-style'],
			'required' => ['swLimitButton', '=', true]
		];

		$this->controls['swColorSep'] = [
			'type' 	=> 'separator',
			'label' => esc_html__( 'Color swatches', 'bricksultimate' ),
		];

		$this->controls['swColorW'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Width', 'bricksultimate' ),
			'units' => true,
			'placeholder' => '25px',
			'css' 	=> [
				[
					'property' => 'width',
					'selector' => '.swatch-with-bg.swatches-color span'
				]
			]
		];

		$this->controls['swColorH'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Height', 'bricksultimate' ),
			'units' => true,
			'placeholder' => '25px',
			'css' 	=> [
				[
					'property' => 'height',
					'selector' => '.swatch-with-bg.swatches-color span'
				]
			]
		];

		$this->controls['swColorbrd'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Border radius', 'bricksultimate' ),
			'units' => true,
			'css' 	=> [
				[
					'property' => 'border-radius',
					'selector' => '.swatch-with-bg.swatches-color, .swatch-with-bg.swatches-color span'
				]
			]
		];

		$this->controls['swImgSep'] = [
			'type' 	=> 'separator',
			'label' => esc_html__( 'Image swatches', 'bricksultimate' ),
		];

		$this->controls['swImgW'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Width', 'bricksultimate' ),
			'units' => true,
			'placeholder' => '25px',
			'css' 	=> [
				[
					'property' => 'width',
					'selector' => '.swatch-with-bg.swatches-image span'
				]
			]
		];

		$this->controls['swImgH'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Height', 'bricksultimate' ),
			'units' => true,
			'placeholder' => '25px',
			'css' 	=> [
				[
					'property' => 'height',
					'selector' => '.swatch-with-bg.swatches-image span'
				]
			]
		];

		$this->controls['swImgbrd'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Border radius', 'bricksultimate' ),
			'units' => true,
			'placeholder' => '0px',
			'css' 	=> [
				[
					'property' => 'border-radius',
					'selector' => '.swatch-with-bg.swatches-image, .swatch-with-bg.swatches-image span'
				]
			]
		];

		$this->controls['swTextSep'] = [
			'type' 	=> 'separator',
			'label' => esc_html__( 'Text swatches', 'bricksultimate' ),
		];

		$selector = '.bu-swatch:not(.swatch-with-bg) span';

		$this->controls['swTextW'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Width', 'bricksultimate' ),
			'units' => true,
			'css' 	=> [
				[
					'property' => 'width',
					'selector' => $selector
				]
			]
		];

		$this->controls['swTextH'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Height', 'bricksultimate' ),
			'units' => true,
			'css' 	=> [
				[
					'property' => 'height',
					'selector' => $selector
				]
			]
		];

		$this->controls['swTextFont'] = [
			'type' 	=> 'typography',
			'label' => esc_html__( 'Typography', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'font',
					'selector' => $selector
				]
			]
		];

		$this->controls['swTextBg'] = [
			'type' 	=> 'color',
			'label' => esc_html__( 'Background', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'background-color',
					'selector' => $selector
				]
			]
		];

		$this->controls['swTextbrd'] = [
			'type' 	=> 'number',
			'label' => esc_html__( 'Border radius', 'bricksultimate' ),
			'units' => true,
			'css' 	=> [
				[
					'property' => 'border-radius',
					'selector' => $selector
				]
			]
		];

		$this->controls['swTextPad'] = [
			'type' 	=> 'dimensions',
			'label' => esc_html__( 'Padding', 'bricksultimate' ),
			'css' 	=> [
				[
					'property' => 'padding',
					'selector' => $selector
				]
			]
		];

		/**
		 * Tooltip
		-----------------------------------------------*/
		$this->controls = Helpers::bu_tooltip_controls( $this->controls, 'tooltip' );
	}

	// Enqueue element styles and scripts
	public function enqueue_scripts() {
		if( bricks_is_builder() || bricks_is_builder_iframe() || bricks_is_builder_call() ){
			wp_enqueue_style( 'bu-swatches' );
		}

		if( isset($this->settings['hasTooltip']) ) {
			wp_enqueue_style( 'bu-tooltip' );
			wp_enqueue_script( 'bu-popper' );
			wp_enqueue_script( 'bu-tippy' );
		}
	}

	public function add_actions() {
		if( Helpers::checkBuElement('bu-swatches-loop') && ! bricks_is_builder() ) {
			add_action( 'wp_enqueue_scripts', function() {
				wp_enqueue_style( 'bu-swatches' );
				wp_enqueue_script( 'bu-swatches' );
			});
		}
	}

	// Render element HTML
	public function render() {
		$settings = $this->settings;

		global $product;

		$product = wc_get_product( $this->post_id );

		if( $product == false && ( bricks_is_builder() || bricks_is_builder_iframe() || Helpers::isBricksBuilderActive() ) ) {
			$product = wc_get_products(
				[
					'limit'   => 1,
					'orderby' => 'date',
					'order'   => 'DESC',
					'tax_query'      => array(
						'relation' => 'AND',
						array(
							'taxonomy' => 'product_type',
							'field'    => 'slug',
							'terms'    => array( 'variable' ),
						)
					),
				]
			)[0];
		}

		if ( empty( $product ) ) {
			return $this->render_element_placeholder(
				[
					'title'       => esc_html__( 'For better preview select content to show.', 'bricks' ),
					'description' => esc_html__( 'Go to: Settings > Template Settings > Populate Content', 'bricks' ),
				]
			);
		}

		if ( ! $product->is_type( 'variable' ) ) {
			return false;
		}

		$attribute = Helpers::get_value($settings, 'swAttribute', 'none');

		if ( empty( $attribute ) || $attribute == false || $attribute == 'none' ) {
			return $this->render_element_placeholder(
				[
					'title' => esc_html__( 'Select the attribute', 'bricks' ),
				]
			);
		}

		$variations = $product->get_available_variations();
		
		if ( empty( $variations ) ) {
			return false;
		}

		$swatches = WooCommerce::bu_get_product_variations_images( $attribute, $variations, false, $this->post_id );

		if ( empty( $swatches ) ) {
			return false;
		}

		if( ! empty( $settings['hasTooltip'] ) ) {
			$data = [
				'hasTooltip' => 'yes',
				'animation' => Helpers::get_value($settings, 'ttAnimation', 'perspective'),
				'placement' => Helpers::get_value($settings, 'ttPlacement', 'top')
			];

			$this->set_attribute( '_root',  "data-tooltip-config", wp_json_encode( $data ) );
		}

		if( ! empty( $settings['swDisableImageUpdate'] ) )
			$this->set_attribute('_root', 'class', ['bu-no-image-update']);

		$this->set_attribute('_root', 'class', ['swatches-select']);

		$output = "<{$this->tag} {$this->render_attributes('_root')}>";
		$loopIndex = 0;

		foreach ( $swatches as $key => $swatch ) {
			$class = $style = $data = '';
			
			$swatchLimit = Helpers::get_value($settings, 'swLimit', 99 );
			if ( count( $swatches ) > $swatchLimit ) {
				if ( $loopIndex >= $swatchLimit ) {
					$class .= ' bu-swatch-hidden';
				}
				
				if ( $loopIndex == $swatchLimit && !empty( $settings['swLimitButton'] ) ) {
					$output .= '<div class="bu-swatches-divider">+' . ( count( $swatches ) - $swatchLimit ) . '</div>';
				}
			}
			
			$loopIndex++;

			if ( ! empty( $swatch['color'] ) && empty( $settings['swTextSwatches'] ) ) {
				$style = 'background-color:' . $swatch['color'];
				$class .= ' swatch-with-bg swatches-color';
			} elseif ( isset( $swatch['image_src'] ) && empty( $settings['swTextSwatches'] ) ) {
				$thumb = wp_get_attachment_image_src( get_post_thumbnail_id( $swatch['variation_id'] ), 'woocommerce_thumbnail' );
				if ( ! empty( $thumb ) ) {
					$style  = 'background-image: url(' . $thumb[0] . ')';
					$class .= ' swatch-with-bg swatches-image';
				}
			} elseif ( ! empty( $swatch['image'] ) && empty( $settings['swTextSwatches'] ) ) {
				$style = 'background-image: url(' . $swatch['image'] . ')';
				$class .= ' swatch-with-bg swatches-image';
			} else {
				$class .= ' text-only ';
			}

			if ( isset( $swatch['image_src'] ) ) {
				$data .= 'data-image-src="' . $swatch['image_src'] . '" ';
				$data .= 'data-image-srcset="' . $swatch['image_srcset'] . '" ';
				$data .= 'data-image-sizes="' . $swatch['image_sizes'] . '"';

				if ( ! $swatch['is_in_stock'] ) {
					$class .= ' out-of-stock';
				}
			}

			$term = get_term_by( 'slug', $key, $attribute );
			if($term) {
				$data .= ' data-title="' . esc_attr( $term->name ) . '"';
				$output .= '<div class="swatch-on-loop bu-swatch' . esc_attr( $class ) . '" ' . $data . '><span style="' . esc_attr( $style ) . '">' . $term->name . '</span></div>';
			}
		}

		$output .= "</{$this->tag}>";

		echo $output;
	}
}