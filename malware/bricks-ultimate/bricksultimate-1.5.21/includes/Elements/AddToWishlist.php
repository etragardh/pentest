<?php
namespace BricksUltimate\Elements;

if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

use BricksUltimate\{Helpers, Wishlist};

class AddToWishlist extends \Bricks\Element {
	public $category = 'wishlist';
	public $name 	= 'bu-atwsl';
	public $icon 	= 'ti-heart';

	// Return localized element label
	public function get_label() {
		return esc_html__( '(BU)Add To Wishlist', 'bricksultimate' );
	}

	// Set builder controls
	public function set_controls() {
		$this->controls['postType'] = [
			'type'        => 'select',
			'label'       => esc_html__( 'Post type', 'bricks' ),
			'options'     => \Bricks\Helpers::get_registered_post_types(),
			'multiple'    => false,
			'placeholder' => esc_html__( 'Select post type', 'bricks' ),
			'default' 	=> 'post'
		];

		$this->controls['wslIcon'] = [
			'label' 	=> esc_html__('Default icon', 'bricksultimate'),
			'type' 		=> 'icon',
			'default' => [
				'library' => 'fontawesomeRegular',
				'icon'    => 'fa fa-regular fa-heart',
			]
		];

		$this->controls['wslAddedIcon'] = [
			'label' 	=> esc_html__('Added icon', 'bricksultimate'),
			'type' 		=> 'icon',
			'default' => [
				'library' => 'fontawesomeRegular',
				'icon'    => 'fa fa-solid fa-heart',
			],
			'rerender' => false
		];

		$this->controls['wslSpinnerIcon'] = [
			'label' 	=> esc_html__('Loading icon', 'bricksultimate'),
			'type' 		=> 'icon',
			'default' => [
				'library' => 'themify',
				'icon'    => 'ti-control-record',
			],
			'rerender' => false
		];

		$this->controls['iconSize'] = [
			'label'    => esc_html__( 'Size', 'bricks' ),
			'type'     => 'number',
			'units'    => true,
			'required' => [ 'wslIcon.icon', '!=', '' ],
			'css'      => [
				[
					'property' => 'font-size',
					'selector' => '.bu-wsl-icon'
				],
			],
			'rerender' => false
		];

		$this->controls['iconSpinnenSize'] = [
			'label'    => esc_html__( 'Loading icon size', 'bricks' ),
			'type'     => 'number',
			'units'    => true,
			'required' => [ 'wslSpinnerIcon.icon', '!=', '' ],
			'css'      => [
				[
					'property' => 'font-size',
					'selector' => '.bu-wsl-icon.spinner-icon'
				],
			],
			'rerender' => false
		];

		$this->controls['iconColor'] = [
			'label'    => esc_html__( 'Default icon color', 'bricksultimate' ),
			'type'     => 'color',
			'required' => [ 'wslIcon.icon', '!=', '' ],
			'css'      => [
				[
					'property' => 'color',
					'selector' => '.bu-wsl-icon.default-icon'
				],
				[
					'property' => 'fill',
					'selector' => '.bu-wsl-icon.default-icon'
				],
			],
			'rerender' => false
		];

		$this->controls['iconHColor'] = [
			'label'    => esc_html__( 'Default icon hover color', 'bricksultimate' ),
			'type'     => 'color',
			'required' => [ 'wslIcon.icon', '!=', '' ],
			'css'      => [
				[
					'property' => 'color',
					'selector' => '&:hover .default-icon'
				],
				[
					'property' => 'fill',
					'selector' => '&:hover .default-icon'
				],
			],
			'rerender' => false
		];

		$this->controls['iconAddedColor'] = [
			'label'    => esc_html__( 'Added icon color', 'bricksultimate' ),
			'type'     => 'color',
			'required' => [ 'wslAddedIcon.icon', '!=', '' ],
			'css'      => [
				[
					'property' => 'color',
					'selector' => '.bu-wsl-icon.fill-icon'
				],
				[
					'property' => 'fill',
					'selector' => '.bu-wsl-icon.fill-icon'
				],
			],
			'rerender' => false
		];

		$this->controls['iconSpinnerColor'] = [
			'label'    => esc_html__( 'Loading icon color', 'bricksultimate' ),
			'type'     => 'color',
			'required' => [ 'wslSpinnerIcon.icon', '!=', '' ],
			'css'      => [
				[
					'property' => 'color',
					'selector' => '.bu-wsl-icon.spinner-icon'
				],
				[
					'property' => 'fill',
					'selector' => '.bu-wsl-icon.spinner-icon'
				],
			],
			'rerender' => false
		];

		$this->controls['wslSep'] = [
			'label' 	=> '',
			'type' 		=> 'separator',
		];

		$this->controls['wslText'] = [
			'label' 	=> esc_html__('Add to wishlist', 'bricksultimate'),
			'type' 		=> 'text',
			'placeholder' => esc_html__('Add to wishlist', 'bricksultimate')
		];

		$this->controls['wslRemoveText'] = [
			'label' 	=> esc_html__('Remove from wishlist', 'bricksultimate'),
			'type' 		=> 'text',
			'placeholder' => esc_html__('Remove from wishlist', 'bricksultimate'),
		];

		$this->controls['wslAriaLabel'] = [
			'label' 	=> esc_html__('Aria label', 'bricksultimate'),
			'type' 		=> 'text',
			'placeholder' => esc_html__('Add to wishlist', 'bricksultimate'),
			'rerender' => false
		];

		$this->controls['textFont'] = [
			'label'    => esc_html__( 'Typography', 'bricks' ),
			'type'     => 'typography',
			'required' => [ 'wslText', '!=', '' ],
			'css'      => [
				[
					'property' => 'font',
					'selector' => '.wishlist-text'
				]
			],
			'rerender' => false
		];

		$this->controls['textHoverColor'] = [
			'label'    => esc_html__( 'Hover color', 'bricks' ),
			'type'     => 'color',
			'required' => [ 'wslText', '!=', '' ],
			'css'      => [
				[
					'property' => 'color',
					'selector' => '&:hover .wishlist-text'
				],
			],
			'rerender' => false
		];

		$this->controls['textGap'] = [
			'label'    => esc_html__( 'Gap', 'bricks' ),
			'type'     => 'number',
			'units'    => true,
			'required' => [ 'wslText', '!=', '' ],
			'css'      => [
				[
					'property' => 'gap',
					'selector' => '.wishlist-action'
				],
			],
			'rerender' => false
		];

		$this->controls['notifySep'] = [
			'type' 		=> 'separator',
		];

		$this->controls['wslNotice'] = [
			'type'        => 'select',
			'label'       => esc_html__( 'Notification template', 'bricks' ),
			'options'     => \Bricks\Templates::get_templates_list('section'),
			'multiple'    => false,
			'placeholder' => esc_html__( 'Select a template', 'bricks' ),
		];

		$this->controls['toolTipSep'] = [
			'label' 	=> esc_html__( 'Tooltip', 'bricks' ),
			'type' 		=> 'separator',
		];

		$this->controls['hasTooltip'] = [
			'label' 	=> esc_html__('Enable tooltip', 'bricksultimate'),
			'type' 		=> 'checkbox',
			'inline' 	=> true,
			'reset' 	=> true,
			'rerender' => false
		];

		$this->controls['ttText'] = [
			'label' 	=> esc_html__('Text', 'bricksultimate'),
			'type' 		=> 'text',
			'inline' 	=> true,
			'placeholder' => esc_html__('Wishlist', 'bricksultimate'),
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];

		$this->controls['ttText2'] = [
			'label' 	=> esc_html__('Added to wishlist text', 'bricksultimate'),
			'type' 		=> 'text',
			'placeholder' => esc_html__('Added', 'bricksultimate'),
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];

		$this->controls['ttBG'] = [
			'label' 	=> esc_html__('Background color', 'bricksultimate'),
			'type' 		=> 'color',
			'inline' 	=> true,
			'css' 	=> [
				[
					'property' => 'background-color', 
					'selector' => '.tippy-box'
				]
			],
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];

		$this->controls['ttAcolor'] = [
			'label' 	=> esc_html__('Arrow color', 'bricksultimate'),
			'type' 		=> 'color',
			'inline' 	=> true,
			'css' 	=> [
				[ 
					'property' => 'color', 
					'selector' => '.tippy-arrow'
				]
			],
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];

		$this->controls['ttTg'] = [
			'label' 	=> esc_html__('Typography', 'bricksultimate'),
			'type' 		=> 'typography',
			'inline' 	=> true,
			'css' 	=> [
				[
					'property' => 'font', 
					'selector' => '.tippy-content'
				]
			],
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];

		$this->controls['ttPlacement'] = [
			'label' 	=> esc_html__('Position', 'bricksultimate'),
			'type' 		=> 'select',
			'options' 	=> [
				'top' 			=> __( 'Top' ), 
				'top-start' 	=> __( 'Top Start' ), 
				'top-end' 		=> __( 'Top End' ),
				'right' 		=> __( 'Right' ), 
				'right-start' 	=> __( 'Right Start' ), 
				'right-end' 	=> __( 'Right End' ),
				'bottom' 		=> __( 'Bottom' ), 
				'bottom-start' 	=> __( 'Bottom Start' ), 
				'bottom-end' 	=> __( 'Bottom End' ),
				'left' 			=> __( 'Left' ), 
				'left-start' 	=> __( 'Left Start' ), 
				'left-end' 		=> __( 'Left End' ), 
				'auto' 			=> __( 'Auto' ), 
				'auto-start' 	=> __( 'Auto Start' ), 
				'auto-end' 		=> __( 'Auto End' ),
			],
			'inline' 		=> true,
			'placeholder' 	=> 'auto',
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];

		$this->controls['ttAnimation'] = [
			'label' 	=> esc_html__('Animation', 'bricksultimate'),
			'type' 		=> 'select',
			'options' 	=> [
				'fade' 			=> __( 'Fade' ), 
				'shift-away' 	=> __( 'Shift Away' ), 
				'shift-toward' 	=> __( 'Shift Toward' ), 
				'perspective' 	=> __( 'Perspective' )
			],
			'inline' 		=> true,
			'placeholder' 	=> 'Fade',
			'required' 	=> ['hasTooltip', '=', true],
			'rerender' => false
		];
	}

	// Enqueue element styles and scripts
	public function enqueue_scripts() {
		if( bricks_is_builder() || bricks_is_builder_iframe() || bricks_is_builder_call() ){
			wp_enqueue_style( 'bu-wishlistcompare', Helpers::get_asset_url('css') . 'wishlistcompare.min.css', [], filemtime(Helpers::get_asset_path('css') . 'wishlistcompare.min.css') );
		}

		if( isset($this->settings['hasTooltip']) ) {
			wp_enqueue_style( 'bu-tooltip' );
			wp_enqueue_script( 'bu-popper' );
			wp_enqueue_script( 'bu-tippy' );
		}
	}

	public function add_actions() {
		if( Helpers::checkBuElement('bu-atwsl') && ! bricks_is_builder() ) {
			add_action( 'wp_enqueue_scripts', function() {
				wp_enqueue_style( 'bu-wishlistcompare' );
				wp_enqueue_script( 'bu-wishlist' );
			});
		}
	}

	// Render element HTML
	public function render() {
		$settings = $this->settings;

		$postType = Helpers::get_value( $settings, 'postType', 'post' );
		$post = get_post( $this->post_id );

		if( ! is_a( $post, '\WP_Post') && $post->post_type != $postType ) {
			return $this->render_element_placeholder(
				[
					'title'       => esc_html__( 'For better preview select content to show.', 'bricks' ),
					'description' => esc_html__( 'Go to: Settings > Template Settings > Populate Content', 'bricks' ),
				]
			);
		}

		$cookie_key = Wishlist::get_cookie_key( $postType );
		$add_action = ! $this->is_product_in_wishlist( $this->post_id, $cookie_key );
		$data = [
			'product' => $this->post_id,
			'postType' => $postType,
			'notify' => Helpers::get_value( $settings, 'wslNotice', false ),
			'action' => $add_action ? 'add' : 'remove', 
			'addText' => esc_html( Helpers::get_value( $settings, 'wslText', '' ) ),
			'removeText' => esc_html( Helpers::get_value( $settings, 'wslRemoveText', '' ) ),
			'cookie_key' => $cookie_key
		];

		if( isset( $settings['hasTooltip'] ) ) {
			$tooltipContent = Helpers::get_value($settings, 'ttText', esc_attr__('Wishlist', 'bricksultimate') );
			$tooltipContent2 = Helpers::get_value($settings, 'ttText2', esc_attr__('Added', 'bricksultimate') );
			$data = array_merge( $data, [
				'content' => wp_kses_post( $tooltipContent ),
				'addedContent' => wp_kses_post( $tooltipContent2 ),
				'animation' => Helpers::get_value($settings, 'ttAnimation', 'fade'),
				'placement' => Helpers::get_value($settings, 'ttPlacement', 'auto')
			]);
		}

		$linkHTML = ! empty( $settings['wslIcon'] ) ? self::render_icon( $settings['wslIcon'], ['bu-wsl-icon default-icon'] ) : '';

		$linkHTML .= ! empty( $settings['wslAddedIcon'] ) ? self::render_icon( $settings['wslAddedIcon'], ['bu-wsl-icon fill-icon'] ) : '';

		$linkHTML .= ! empty( $settings['wslSpinnerIcon'] ) ? self::render_icon( $settings['wslSpinnerIcon'], ['bu-wsl-icon spinner-icon'] ) : '';

		if( $add_action && ! empty($settings['wslText']) ) {
			$linkHTML .= '<span class="wishlist-text">' . Helpers::get_value( $settings, 'wslText', '' ) . '</span>';
		} elseif( ! $add_action && ! empty($settings['wslRemoveText']) ) {
			$linkHTML .= '<span class="wishlist-text">' . Helpers::get_value( $settings, 'wslRemoveText', '' ) . '</span>';
		}

		$title = Helpers::get_value( $settings, 'wslAriaLabel', esc_html__('Add to wishlist', 'bricksultimate') );

		$href = add_query_arg( ($add_action ? 'add_to_wishlist' : 'remove_from_wishlist'), $this->post_id, get_permalink() );

		$this->set_attribute('_root', 'data-wsl-config', wp_json_encode( $data ) );

		echo "<{$this->tag} {$this->render_attributes('_root')}>";
		printf( '<a href="%1$s" aria-label="%2$s" class="wishlist-action wishlist-item-%5$s action-%4$s" role="button">%3$s</a>', $href, $title, $linkHTML, ( $add_action ? 'add' : 'remove added' ), $this->post_id );
		echo "</{$this->tag}>";
	}

	public function is_product_in_wishlist( $product, $cookie_key ) {
		$wishlistItems = [];
		if( is_user_logged_in() ) {
			$saved_products = get_user_meta( get_current_user_id(), $cookie_key, true );
			if( $saved_products )
				$wishlistItems = explode(",", $saved_products );
		} elseif( !empty($_COOKIE[ $cookie_key ]) ) {
			$wishlistItems = explode(",", $_COOKIE[ $cookie_key ] );
		} else {
			$wishlistItems = [];
		}

		return in_array( $product, $wishlistItems );
	}
}